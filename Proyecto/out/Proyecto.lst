
projects/Proyecto/out/Proyecto.elf:     file format elf32-littlearm
projects/Proyecto/out/Proyecto.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000c7d

Program Header:
0x70000001 off    0x0001ec80 vaddr 0x1a00ec80 paddr 0x1a00ec80 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00003d64 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000ec88 memsz 0x0000ec88 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00ec88 align 2**16
         filesz 0x00000a3c memsz 0x00000a3c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ec7c  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a3c  10000000  1a00ec88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020a3c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020a3c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020a3c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020a3c  2**2
                  CONTENTS
  6 .bss          00003324  10000a40  10000a40  00000a40  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020a3c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020a3c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020a3c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020a3c  2**2
                  CONTENTS
 11 .init_array   00000004  1a00ec7c  1a00ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00ec80  1a00ec80  0001ec80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020a3c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020a3c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020a3c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020a3c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020a3c  2**2
                  CONTENTS
 18 .noinit       00000000  10003d64  10003d64  00020a3c  2**2
                  CONTENTS
 19 .debug_info   0003f70e  00000000  00000000  00020a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007e01  00000000  00000000  0006014a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000172ce  00000000  00000000  00067f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000013d8  00000000  00000000  0007f219  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000015f0  00000000  00000000  000805f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0001406c  00000000  00000000  00081be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000277e0  00000000  00000000  00095c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000372fd  00000000  00000000  000bd42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000f472a  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000f4792  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00004704  00000000  00000000  000f47c4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a40 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00ec7c l    d  .init_array	00000000 .init_array
1a00ec80 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10003d64 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a005c30 l     F .text	000000c8 uartProcessIRQ
1000324c l     O .bss	00000004 rxIsrCallbackUART0
10003250 l     O .bss	00000004 rxIsrCallbackUART0Params
10003254 l     O .bss	00000004 rxIsrCallbackUART2
10003258 l     O .bss	00000004 rxIsrCallbackUART2Params
1000325c l     O .bss	00000004 rxIsrCallbackUART3
10003260 l     O .bss	00000004 rxIsrCallbackUART3Params
10003264 l     O .bss	00000004 txIsrCallbackUART0
10003268 l     O .bss	00000004 txIsrCallbackUART0Params
1000326c l     O .bss	00000004 txIsrCallbackUART2
10003270 l     O .bss	00000004 txIsrCallbackUART2Params
10003274 l     O .bss	00000004 txIsrCallbackUART3
10003278 l     O .bss	00000004 txIsrCallbackUART3Params
1a00e820 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 spi_sd.c
1a000300 l     F .text	00000020 fatFsTestERROR
1a000320 l     F .text	00000020 fatFsTestStart
1a000340 l     F .text	00000010 fatFsTestOK
1a000350 l     F .text	0000008c mostrarEstadoTarjetaSD
10000a40 l     O .bss	00000250 file
10000000 l     O .data	00000001 sdcardUltimoEstado
00000000 l    df *ABS*	00000000 wave.c
10000c90 l     O .bss	00000004 count_num_samples
10000c94 l     O .bss	00000004 num_samples
10000c98 l     O .bss	00000002 size_of_each_sample
00000000 l    df *ABS*	00000000 auxs.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tasks.c
00000000 l    df *ABS*	00000000 system.c
10000c9c l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 ff.c
1a000dd0 l     F .text	0000000a ld_word
1a000dda l     F .text	00000016 ld_dword
1a000df0 l     F .text	0000004c ld_qword
1a000e3c l     F .text	00000008 st_word
1a000e44 l     F .text	00000014 st_dword
1a000e58 l     F .text	00000026 st_qword
1a000e7e l     F .text	00000012 mem_cpy
1a000e90 l     F .text	0000000a mem_set
1a000e9a l     F .text	0000001c mem_cmp
1a000eb6 l     F .text	00000010 chk_chr
1a000ec6 l     F .text	00000004 dbc_1st
1a000ecc l     F .text	000000c0 tchar2uni
1a000f8c l     F .text	00000018 clst2sect
1a000fa4 l     F .text	00000026 ld_clust
1a000fca l     F .text	00000026 st_clust
1a000ff0 l     F .text	00000084 pick_lfn
1a001074 l     F .text	00000078 put_lfn
1a0010ec l     F .text	000000b6 gen_numname
1a0011a2 l     F .text	0000001c sum_sfn
1a0011be l     F .text	00000030 xdir_sum
1a0011ee l     F .text	0000002e init_alloc_info
1a00121c l     F .text	000000b0 get_ldnumber
1a0012cc l     F .text	00000048 validate
1a001314 l     F .text	00000050 sync_window
1a001364 l     F .text	00000036 move_window
1a00139c l     F .text	00000088 check_fs
1a001424 l     F .text	000004a4 find_volume
1a0018c8 l     F .text	00000086 find_bitmap
1a00194e l     F .text	00000078 change_bitmap
1a0019c6 l     F .text	0000011e put_fat
1a001ae4 l     F .text	00000030 fill_last_frag
1a001b14 l     F .text	00000032 fill_first_frag
1a001b46 l     F .text	0000016e get_fat
1a001cb4 l     F .text	000000b4 dir_sdi
1a001d68 l     F .text	000001cc create_chain
1a001f34 l     F .text	0000013e remove_chain
1a002072 l     F .text	00000052 dir_clear
1a0020c4 l     F .text	000000dc dir_next
1a0021a0 l     F .text	00000100 load_xdir
1a0022a0 l     F .text	0000003a load_obj_xdir
1a0022da l     F .text	000000ea dir_read
1a0023c4 l     F .text	0000006c dir_alloc
1a002430 l     F .text	0000005e store_xdir
1a002490 l     F .text	00000244 create_name
1a0026d4 l     F .text	00000034 xname_sum
1a002708 l     F .text	00000082 create_xdir
1a00278c l     F .text	0000009c cmp_lfn
1a002828 l     F .text	00000172 dir_find
1a00299a l     F .text	000000b4 follow_path
1a002a50 l     F .text	00000208 dir_register
1a002c58 l     F .text	0000008c sync_fs
10000ca0 l     O .bss	00000260 DirBuf
10000f00 l     O .bss	00000008 FatFs
10000f08 l     O .bss	00000002 Fsid
10000f0c l     O .bss	00000200 LfnBuf
1a00df2c l     O .text	00000080 ExCvt
1a00dfac l     O .text	0000000d LfnOfs
1a00dfbc l     O .text	00000008 VolumeStr
00000000 l    df *ABS*	00000000 ffunicode.c
1a00dff8 l     O .text	000001f2 cvt1.5576
1a00e1ec l     O .text	000000bc cvt2.5577
1a00e2a8 l     O .text	00000100 uc850
00000000 l    df *ABS*	00000000 heap_1.c
10001110 l     O .bss	00002000 ucHeap
1000110c l     O .bss	00000004 pucAlignedHeap.11506
10003110 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a00351c l     F .text	0000001c prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a003654 l     F .text	0000002c prvResetNextTaskUnblockTime
1a003680 l     F .text	00000012 prvDeleteTCB
1a003692 l     F .text	00000090 prvInitialiseNewTask
1a003724 l     F .text	0000005c prvInitialiseTaskLists
1a003780 l     F .text	000000a8 prvAddNewTaskToReadyList
1a003828 l     F .text	0000004c prvCheckTasksWaitingTermination
1a003874 l     F .text	00000028 prvIdleTask
1a00389c l     F .text	0000007c prvAddCurrentTaskToDelayedList
10003118 l     O .bss	00000004 pxDelayedTaskList
1000311c l     O .bss	00000004 pxOverflowDelayedTaskList
10003120 l     O .bss	0000008c pxReadyTasksLists
100031ac l     O .bss	00000004 uxCurrentNumberOfTasks
100031b0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100031b4 l     O .bss	00000004 uxPendedTicks
100031b8 l     O .bss	00000004 uxSchedulerSuspended
100031bc l     O .bss	00000004 uxTaskNumber
100031c0 l     O .bss	00000004 uxTopReadyPriority
100031c4 l     O .bss	00000014 xDelayedTaskList1
100031d8 l     O .bss	00000014 xDelayedTaskList2
100031ec l     O .bss	00000004 xIdleTaskHandle
100031f0 l     O .bss	00000004 xNextTaskUnblockTime
100031f4 l     O .bss	00000004 xNumOfOverflows
100031f8 l     O .bss	00000014 xPendingReadyList
1000320c l     O .bss	00000004 xSchedulerRunning
10003210 l     O .bss	00000014 xTasksWaitingTermination
10003224 l     O .bss	00000004 xTickCount
10003228 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 port.c
1a003dc0 l     F .text	00000040 prvTaskExitError
1a003e00 l     F .text	00000022 prvPortStartFirstTask
1a003e28 l     F .text	0000000e vPortEnableVFP
1a003e90 l       .text	00000000 pxCurrentTCBConst2
1a003f70 l       .text	00000000 pxCurrentTCBConst
1000322c l     O .bss	00000001 ucMaxSysCallPriority
10003230 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 fssdc.c
1a004108 l     F .text	00000018 newCardStatus
1a004120 l     F .text	00000004 chk_power
1a004124 l     F .text	00000024 SSPSend
1a004148 l     F .text	00000018 xmit_spi
1a004184 l     F .text	0000001e rcvr_spi
1a0041a4 l     F .text	00000024 wait_ready
1a0041c8 l     F .text	00000018 deselect
1a0041e0 l     F .text	00000024 select_
1a004204 l     F .text	00000084 send_cmd
1a004288 l     F .text	0000005c xmit_datablock
1a0042e4 l     F .text	00000060 rcvr_datablock
10003238 l     O .bss	00000001 CardType
10003239 l     O .bss	00000001 Timer1
1000323a l     O .bss	00000001 Timer2
1000323c l     O .bss	00000004 g_statusUpdateCallback
10000008 l     O .data	00000001 g_cardStatus
10000009 l     O .data	00000001 g_diskStats
1000000c l     O .data	00000004 g_spiFastClock
10000010 l     O .data	00000004 g_spiSlowClock
00000000 l    df *ABS*	00000000 ffdisks.c
00000000 l    df *ABS*	00000000 sapi_sdcard.c
1a004b4c l     F .text	00000074 statusUpdateCallback
10003240 l     O .bss	00000004 g_sdcard
00000000 l    df *ABS*	00000000 board.c
1a004bc0 l     F .text	00000044 Board_LED_Init
1a004c04 l     F .text	00000040 Board_TEC_Init
1a004c44 l     F .text	00000040 Board_GPIO_Init
1a004c84 l     F .text	00000030 Board_ADC_Init
1a004cb4 l     F .text	00000038 Board_SPI_Init
1a004cec l     F .text	00000024 Board_I2C_Init
1a00e6ac l     O .text	00000008 GpioButtons
1a00e6b4 l     O .text	0000000c GpioLeds
1a00e6c0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00e6d8 l     O .text	00000004 InitClkStates
1a00e6dc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a004e74 l     F .text	0000002c Chip_UART_GetIndex
1a00e750 l     O .text	00000008 UART_BClock
1a00e758 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a004fd0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a004fe4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0050ac l     F .text	000000a0 pll_calc_divs
1a00514c l     F .text	0000010c pll_get_frac
1a005258 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0054cc l     F .text	00000022 Chip_Clock_GetDivRate
10003244 l     O .bss	00000008 audio_usb_pll_freq
1a00e76c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00e7d8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000018 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00583c l     F .text	0000001a SSP_Write2BFifo
1a005856 l     F .text	00000018 SSP_Write1BFifo
1a00586e l     F .text	00000042 SSP_Read2BFifo
1a0058b0 l     F .text	00000040 SSP_Read1BFifo
1a0058f0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a005904 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2s_18xx_43xx.c
1a005a4c l     F .text	000000e8 getClkDiv
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000050 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a005de0 l     F .text	00000002 errorOcurred
1a005de2 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a005eec l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000327c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a007064 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a00eb1c l     O .text	00000010 blanks.8678
1a00eb2c l     O .text	00000010 zeroes.8679
00000000 l    df *ABS*	00000000 vfprintf.c
1a00b3f4 l     F .text	00000084 __sbprintf
1a00eb3c l     O .text	00000010 blanks.8693
1a00eb4c l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a00b548 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00ec60 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a00d598 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000098 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00ec80 l       .init_array	00000000 __init_array_end
1a00ec7c l       .bss_RAM5	00000000 __preinit_array_end
1a00ec7c l       .init_array	00000000 __init_array_start
1a00ec7c l       .bss_RAM5	00000000 __preinit_array_start
1a006a6c g     F .text	0000002c .hidden __aeabi_dcmpun
1a0052f0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000d1c g     F .text	00000012 _isatty_r
1a006a30 g     F .text	00000012 .hidden __aeabi_dcmple
1a007be8 g     F .text	0000009c _puts_r
1a005e64 g     F .text	00000044 TIMER2_IRQHandler
1a00696c g     F .text	0000007a .hidden __cmpdf2
1a000d2e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a004344 g     F .text	0000000c FSSDC_FatFs_DiskStatus
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00696c g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a003ed8 g     F .text	0000002c vPortExitCritical
1a0064dc g     F .text	0000005a .hidden __floatdidf
10003528 g     O .bss	00000004 updatebuff1
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a007bc0 g     F .text	00000028 printf
1a004dba g     F .text	00000008 __stdio_init
10003d40 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00d870 g     F .text	00000034 _wcrtomb_r
1a005790 g     F .text	0000002c Chip_RTC_GetFullTime
1a007d3c g     F .text	00000020 __sseek
1a0070c0 g     F .text	00000054 __sinit
1a00d7c0 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00508a g     F .text	0000000c Chip_ADC_SetResolution
1a007bb4 g     F .text	0000000c __malloc_unlock
1a004d64 g     F .text	00000012 Board_UARTPutSTR
1a003f74 g     F .text	0000002c SysTick_Handler
10003d44 g     O .bss	00000001 __lock___arc4random_mutex
1a000c78  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a004d48 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a00c970 g     F .text	000000ce memmove
1a003f10 g     F .text	00000064 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00ca40 g     F .text	0000004c _Balloc
1a00ec88 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a004a8c g     F .text	00000038 sdcardInit
1a00695c g     F .text	0000008a .hidden __gtdf2
1a0003e4 g     F .text	00000034 read_sd_spi
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10003114 g     O .bss	00000004 pxCurrentTCB
1a000d12 g     F .text	0000000a _fstat_r
53ff6c12 g       *ABS*	00000000 __valid_user_code_checksum
1a00ec88 g       .ARM.exidx	00000000 _etext
1a0069f8 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a003374 g     F .text	0000009c ff_wtoupper
1a005b3e g     F .text	00000074 Chip_I2S_TxConfig
1a0008e4 g     F .text	00000018 init_parse
1a005ea8 g     F .text	00000044 TIMER3_IRQHandler
1a00556e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003fd8 g     F .text	00000110 xPortStartScheduler
1a0079d4 g     F .text	00000134 memcpy
1a0069e8 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a000910 g     F .text	00000094 parse_data
1a0070b4 g     F .text	0000000c _cleanup_r
1a007e60 g     F .text	00001a3c _svfprintf_r
1a006464 g     F .text	00000022 .hidden __floatsidf
1a003fa0  w    F .text	00000038 vPortSetupTimerInterrupt
1a006964 g     F .text	00000082 .hidden __ltdf2
1a004a2a g     F .text	0000000e disk_initialize
1a006ae8 g     F .text	00000000 .hidden __aeabi_uldivmod
10003d64 g       .noinit	00000000 _noinit
1a007c84 g     F .text	00000010 puts
1a003480 g     F .text	00000016 vPortFree
1a005d3e g     F .text	00000016 uartWriteString
10003d38 g     O .bss	00000004 SystemCoreClock
1a004ea0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a00eb98 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a0055ec g     F .text	0000004c Chip_Clock_GetRate
1a00359c g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
100032b0 g     O .bss	00000004 __malloc_top_pad
1000352c g     O .bss	00000004 flag
1a004a1c g     F .text	0000000e disk_status
1a004dfc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a006444 g     F .text	0000001e .hidden __aeabi_ui2d
1a00c7cc g     F .text	00000008 _localeconv_r
1a00cbcc g     F .text	00000012 __i2b
1a00c4c4 g     F .text	00000308 __sfvwrite_r
1a006b18 g     F .text	000002d0 .hidden __udivmoddi4
1a0061c0 g     F .text	00000000 .hidden __aeabi_drsub
1a000db0 g     F .text	00000020 _sbrk_r
1a00e6a8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000d38 g     F .text	0000004e _read_r
1a003596 g     F .text	00000006 vListInitialiseItem
100032b4 g     O .bss	0000023c sdcard
1a004a78 g     F .text	00000012 disk_ioctl
1a006a1c g     F .text	00000012 .hidden __aeabi_dcmplt
1a006dec g     F .text	000000ce _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
100032a8 g     O .bss	00000004 __malloc_max_sbrked_mem
1a006488 g     F .text	00000042 .hidden __extendsfdf2
1a00678c g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0061cc g     F .text	00000276 .hidden __adddf3
1a00ec80 g       .ARM.exidx	00000000 __exidx_start
10003d48 g     O .bss	00000001 __lock___env_recursive_mutex
1a006538 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10003d4c g     O .bss	00000001 __lock___sinit_recursive_mutex
1a004588 g     F .text	000000b4 FSSDC_FatFs_DiskWrite
10000014 g     O .data	00000004 VolToPart
1a00d054 g     F .text	0000036c _realloc_r
1a004994 g     F .text	0000000c FSSDC_GetFastClock
1a00740c g     F .text	00000048 __libc_init_array
1a004988 g     F .text	0000000c FSSDC_GetSlowClock
1a00d724 g     F .text	00000064 _fputwc_r
1a00eb70 g     O .text	00000028 __mprec_bigtens
1a006444 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00ce64 g     F .text	00000038 __mcmp
1a003410 g     F .text	00000070 pvPortMalloc
1a004d78 g     F .text	00000030 Board_Init
1a000d06  w    F .text	00000002 _init
1a003580 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00592e g     F .text	000000a8 Chip_SSP_RWFrames_Blocking
10003530 g     O .bss	00000004 isr_signal_i2s
1a003334 g     F .text	00000040 ff_uni2oem
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10003d64 g       .bss	00000000 _ebss
1a005de4 g     F .text	00000040 TIMER0_IRQHandler
1a004504 g     F .text	00000084 FSSDC_FatFs_DiskRead
1a000c7c g     F .text	00000088 Reset_Handler
1a005db8 g     F .text	00000014 tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00463c g     F .text	000002ec FSSDC_FatFs_DiskIoCtl
1a00cb2c g     F .text	00000040 __hi0bits
1a005804 g     F .text	00000038 Chip_I2C_SetClockRate
1a006a98 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0052a4 g     F .text	0000004c Chip_Clock_EnableCrystal
10003d50 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a004350 g     F .text	000001b4 FSSDC_FatFs_DiskInitialize
1a004928 g     F .text	00000060 FSSDC_InitSPI
10008000 g       *ABS*	00000000 __top_RamLoc32
1a003d34 g     F .text	0000008c xTaskRemoveFromEventList
1a000abc g     F .text	00000020 vApplicationMallocFailedHook
1a0061cc g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a006964 g     F .text	00000082 .hidden __ledf2
1a00cd10 g     F .text	000000a0 __pow5mult
1a0064cc g     F .text	0000006a .hidden __aeabi_ul2d
1a005b34 g     F .text	0000000a Chip_I2S_Init
1a005e24 g     F .text	00000040 TIMER1_IRQHandler
10003534 g     O .bss	00000400 buffer2
1a0057e0 g     F .text	00000024 Chip_I2C_Init
1a007460 g     F .text	00000002 __retarget_lock_release_recursive
1a005d54 g     F .text	0000000a UART2_IRQHandler
1a005460 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00e8ec g     O .text	000000e6 gpioPinsInit
1a00360c  w    F .text	0000002c vAssertCalled
1a005d24 g     F .text	0000001a uartWriteByte
1a00591c g     F .text	00000012 Chip_SSP_SetClockRate
1a006a58 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a007114 g     F .text	0000000c __sfp_lock_acquire
1a00c8d0 g     F .text	00000000 memchr
1a0071cc g     F .text	000001ec _free_r
1a005548 g     F .text	00000026 Chip_Clock_GetBaseClock
1a00d788 g     F .text	0000000c __locale_mb_cur_max
1a006a44 g     F .text	00000012 .hidden __aeabi_dcmpge
1a004a14 g     F .text	00000008 disk_timerproc
10000a40 g       .bss	00000000 _bss
1a005058 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00330a g     F .text	00000028 f_close
1a0061c8 g     F .text	0000027a .hidden __aeabi_dsub
1a000b9c g     F .text	000000a8 control_satus_buffer
100008c8 g     O .data	00000004 __malloc_sbrk_base
1a000adc g     F .text	000000c0 send_buffer_i2s
10003234 g     O .bss	00000004 freeRtosInterruptCallback
1a0039f8 g     F .text	00000010 vTaskSuspendAll
1a0049a0 g     F .text	0000000c FSSDC_SetStatusUpdateCallback
1a004ac4 g     F .text	00000014 sdcardStatus
1a0009a4 g     F .text	00000080 config_i2s
1a0064cc g     F .text	0000006a .hidden __floatundidf
1a00cdb0 g     F .text	000000b2 __lshift
1a004160 g     F .text	00000024 SSPReceive
1a000c44 g     F .text	00000034 I2S1_IRQHandler
1a00d4a0 g     F .text	000000f6 __ssprint_r
1a0059d6 g     F .text	0000003e Chip_SSP_SetBitRate
1a0035e6 g     F .text	00000026 uxListRemove
1a002fe2 g     F .text	000001c8 f_read
1a0057bc g     F .text	00000002 Chip_GPIO_Init
1a000418 g     F .text	00000010 close_sd_spi
1a00e6d4 g     O .text	00000004 OscRateIn
1a00cbe0 g     F .text	00000130 __multiply
10003d64 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00d42c g     F .text	00000072 strncpy
10003280 g     O .bss	00000028 __malloc_current_mallinfo
1a00cf94 g     F .text	000000be __d2b
1a0003dc g     F .text	00000008 diskTickHook
1a003c68 g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000d08 g     F .text	0000000a _close_r
1a006464 g     F .text	00000022 .hidden __aeabi_i2d
1a005f20 g     F .text	000001ac gpioInit
1a000428 g     F .text	00000048 open_sd_spi
1a007458 g     F .text	00000002 __retarget_lock_close_recursive
1a00b478 g     F .text	000000d0 __swsetup_r
1a003638  w    F .text	0000001c vApplicationStackOverflowHook
1a006de8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00678c g     F .text	000001d0 .hidden __divdf3
100004c0 g     O .data	00000408 __malloc_av_
1a006538 g     F .text	00000254 .hidden __muldf3
1a007cd8 g     F .text	00000022 __sread
1a0049d8 g     F .text	0000003c get_fattime
1a006138 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a007ba8 g     F .text	0000000c __malloc_lock
1a004d34 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a007008 g     F .text	0000005a _fflush_r
1a00d624 g     F .text	0000005e _calloc_r
1a005bb2 g     F .text	00000028 Chip_I2S_Int_TxCmd
1a00530c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00745c g     F .text	00000002 __retarget_lock_acquire_recursive
1a007b08 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000a54 g     F .text	00000068 main
100032ac g     O .bss	00000004 __malloc_max_total_mem
1a007454 g     F .text	00000002 __retarget_lock_init_recursive
1a0031aa g     F .text	00000160 f_sync
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a005d68 g     F .text	00000050 spiInit
1a0035b2 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a003e70 g     F .text	00000024 SVC_Handler
1a007d5c g     F .text	00000008 __sclose
1a00b670 g     F .text	00000e54 _dtoa_r
1a007464 g     F .text	00000570 _malloc_r
1a00d8a4 g     F .text	0000001a __ascii_wctomb
1a0064dc g     F .text	0000005a .hidden __aeabi_l2d
1a005cf8 g     F .text	00000018 uartTxReady
1a002ce4 g     F .text	00000050 f_mount
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a00557c g     F .text	0000003c Chip_Clock_EnableOpts
1a004db2 g     F .text	00000008 __stdio_getchar
1a003538 g     F .text	00000048 xQueueGenericCreate
1a00712c g     F .text	000000a0 _malloc_trim_r
1a005328 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0053e0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a005bdc g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00696c g     F .text	0000007a .hidden __nedf2
1a0060cc g     F .text	0000006a gpioWrite
100034f0 g     O .bss	00000004 buffer4
1a000d04  w    F .text	00000002 _fini
1a000550 g     F .text	00000394 parse_header
1a003b20 g     F .text	000000fc xTaskResumeAll
1a007c94 g     F .text	00000044 sprintf
1a004ad8 g     F .text	00000008 sdcardDriveName
1a00397c g     F .text	0000007c vTaskStartScheduler
1a005018 g     F .text	00000040 Chip_ADC_Init
10003d3c g     O .bss	00000004 g_pUsbApi
1a004dc4 g     F .text	00000038 Board_SetupMuxing
1a004ef4 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000d86 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000094 g     O .data	00000004 _impure_ptr
1a006ebc g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a005d10 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00d794 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
100034f4 g     O .bss	00000034 header
1a005dcc g     F .text	00000014 tickCallbackSet
10003d64 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a005a14 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a003a08 g     F .text	00000118 xTaskIncrementTick
1a000470 g     F .text	000000e0 init_sd_spi
1a000a24 g     F .text	0000002e tarea_crear
1a00c7d4 g     F .text	0000005c __swhatbuf_r
1a0040e8 g     F .text	00000020 DAC_IRQHandler
1a004d10 g     F .text	00000024 Board_Debug_Init
1a006a08 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a004da8 g     F .text	0000000a __stdio_putchar
1a003498 g     F .text	00000084 xQueueGenericReset
10000a3c g       .data	00000000 _edata
1a0057c0 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00d684 g     F .text	0000009e __fputwc
10003d54 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a003918 g     F .text	00000062 xTaskCreate
1a005638 g     F .text	00000158 Chip_SetupCoreClock
1a007cfc g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
100008cc g     O .data	00000004 __malloc_trim_threshold
1a002d34 g     F .text	000002ae f_open
1a004a58 g     F .text	00000020 disk_write
10003934 g     O .bss	00000400 buffer1
1a000000 g     O .text	00000040 g_pfnVectors
1a0073b8 g     F .text	00000052 _fwalk_reent
1a005098 g     F .text	00000014 SystemCoreClockUpdate
1a00ce9c g     F .text	000000f8 __mdiff
1a006a98 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a003c1c g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a007120 g     F .text	0000000c __sfp_lock_release
1a00e9d4 g     O .text	00000101 _ctype_
10003d34 g     O .bss	00000004 updatebuff2
1a006de8  w    F .text	00000002 .hidden __aeabi_idiv0
1a006a6c g     F .text	0000002c .hidden __unorddf2
1a004ae0 g     F .text	0000006c sdcardMount
1a00017e  w    F .text	00000002 BusFault_Handler
10003d58 g     O .bss	00000001 __lock___dd_hash_mutex
1a00c830 g     F .text	00000094 __smakebuf_r
10003d5c g     O .bss	00000001 __lock___tz_mutex
1a007d80 g     F .text	000000dc strlen
1a004a38 g     F .text	00000020 disk_read
1a003e3c g     F .text	0000002c pxPortInitialiseStack
1a0055b8 g     F .text	00000034 Chip_Clock_Enable
1a0069f8 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a00695c g     F .text	0000008a .hidden __gedf2
1a005d5e g     F .text	0000000a UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00d610 g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a006488 g     F .text	00000042 .hidden __aeabi_f2d
1a006154 g     F .text	0000006c boardInit
1a003e94 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0061c8 g     F .text	0000027a .hidden __subdf3
1a0098a0 g     F .text	00001b54 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00cb6c g     F .text	00000060 __lo0bits
1a0008fc g     F .text	00000014 stop_parse
1a00d3c0 g     F .text	0000006c frexp
100008d0 g     O .data	0000016c __global_locale
1a0049ac g     F .text	0000002c FSSDC_Update
1a0054f0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a005c14 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10003d60 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a004e68 g     F .text	0000000c Board_SystemInit
1a00caa0 g     F .text	0000008a __multadd
1a00ca8c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 7d 0c 00 1a 79 01 00 1a 7b 01 00 1a     ....}...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 12 6c ff 53     }............l.S
	...
1a00002c:	71 3e 00 1a 85 01 00 1a 00 00 00 00 11 3f 00 1a     q>...........?..
1a00003c:	75 3f 00 1a                                         u?..

1a000040 <g_pfnVendorVectors>:
1a000040:	e9 40 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .@..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	39 61 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     9a..............
1a000070:	e5 5d 00 1a 25 5e 00 1a 65 5e 00 1a a9 5e 00 1a     .]..%^..e^...^..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 55 5d 00 1a 5f 5d 00 1a     ........U].._]..
1a0000b0:	bb 01 00 1a 45 0c 00 1a bb 01 00 1a bb 01 00 1a     ....E...........
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00ec88 	.word	0x1a00ec88
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000a3c 	.word	0x00000a3c
1a000120:	1a00ec88 	.word	0x1a00ec88
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00ec88 	.word	0x1a00ec88
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00ec88 	.word	0x1a00ec88
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00ec88 	.word	0x1a00ec88
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a40 	.word	0x10000a40
1a000154:	00003324 	.word	0x00003324
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f005 fd36 	bl	1a005c30 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <fatFsTestERROR>:
    uartWriteString( UART_USB, "OK!\r\n" );
}


static void fatFsTestERROR( int error )
{
1a000300:	b500      	push	{lr}
1a000302:	b0c1      	sub	sp, #260	; 0x104
    char msg[256];
    sprintf( msg, "ERROR %i.\r\n", error );
1a000304:	4602      	mov	r2, r0
1a000306:	4905      	ldr	r1, [pc, #20]	; (1a00031c <fatFsTestERROR+0x1c>)
1a000308:	4668      	mov	r0, sp
1a00030a:	f007 fcc3 	bl	1a007c94 <sprintf>
    uartWriteString( UART_USB, msg );
1a00030e:	4669      	mov	r1, sp
1a000310:	2003      	movs	r0, #3
1a000312:	f005 fd14 	bl	1a005d3e <uartWriteString>
}
1a000316:	b041      	add	sp, #260	; 0x104
1a000318:	f85d fb04 	ldr.w	pc, [sp], #4
1a00031c:	1a00d8c0 	.word	0x1a00d8c0

1a000320 <fatFsTestStart>:
{
1a000320:	b500      	push	{lr}
1a000322:	b0c1      	sub	sp, #260	; 0x104
    sprintf( msg, "Ejecutando '%s'...", test );
1a000324:	4602      	mov	r2, r0
1a000326:	4905      	ldr	r1, [pc, #20]	; (1a00033c <fatFsTestStart+0x1c>)
1a000328:	4668      	mov	r0, sp
1a00032a:	f007 fcb3 	bl	1a007c94 <sprintf>
    uartWriteString( UART_USB, msg );
1a00032e:	4669      	mov	r1, sp
1a000330:	2003      	movs	r0, #3
1a000332:	f005 fd04 	bl	1a005d3e <uartWriteString>
}
1a000336:	b041      	add	sp, #260	; 0x104
1a000338:	f85d fb04 	ldr.w	pc, [sp], #4
1a00033c:	1a00d8d4 	.word	0x1a00d8d4

1a000340 <fatFsTestOK>:
{
1a000340:	b508      	push	{r3, lr}
    uartWriteString( UART_USB, "OK!\r\n" );
1a000342:	4902      	ldr	r1, [pc, #8]	; (1a00034c <fatFsTestOK+0xc>)
1a000344:	2003      	movs	r0, #3
1a000346:	f005 fcfa 	bl	1a005d3e <uartWriteString>
}
1a00034a:	bd08      	pop	{r3, pc}
1a00034c:	1a00d8cc 	.word	0x1a00d8cc

1a000350 <mostrarEstadoTarjetaSD>:
{
1a000350:	b508      	push	{r3, lr}
    if ( sdcardUltimoEstado == sdcardStatus() )
1a000352:	f004 fbb7 	bl	1a004ac4 <sdcardStatus>
1a000356:	4b19      	ldr	r3, [pc, #100]	; (1a0003bc <mostrarEstadoTarjetaSD+0x6c>)
1a000358:	781b      	ldrb	r3, [r3, #0]
1a00035a:	4298      	cmp	r0, r3
1a00035c:	d00f      	beq.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
    sdcardUltimoEstado = sdcardStatus();
1a00035e:	f004 fbb1 	bl	1a004ac4 <sdcardStatus>
1a000362:	4b16      	ldr	r3, [pc, #88]	; (1a0003bc <mostrarEstadoTarjetaSD+0x6c>)
1a000364:	7018      	strb	r0, [r3, #0]
    switch( sdcardUltimoEstado )
1a000366:	2806      	cmp	r0, #6
1a000368:	d809      	bhi.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
1a00036a:	e8df f000 	tbb	[pc, r0]
1a00036e:	0904      	.short	0x0904
1a000370:	1d18130e 	.word	0x1d18130e
1a000374:	22          	.byte	0x22
1a000375:	00          	.byte	0x00
            uartWriteString( UART_USB, "STATUS: Por favor inserte Tarjeta SD.\r\n" );
1a000376:	4912      	ldr	r1, [pc, #72]	; (1a0003c0 <mostrarEstadoTarjetaSD+0x70>)
1a000378:	2003      	movs	r0, #3
1a00037a:	f005 fce0 	bl	1a005d3e <uartWriteString>
}
1a00037e:	bd08      	pop	{r3, pc}
            uartWriteString( UART_USB, "STATUS: Tarjeta SD insertada.\r\n" );
1a000380:	4910      	ldr	r1, [pc, #64]	; (1a0003c4 <mostrarEstadoTarjetaSD+0x74>)
1a000382:	2003      	movs	r0, #3
1a000384:	f005 fcdb 	bl	1a005d3e <uartWriteString>
            break;
1a000388:	e7f9      	b.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
            uartWriteString( UART_USB, "STATUS: Configurando tarjeta SD.\r\n" );
1a00038a:	490f      	ldr	r1, [pc, #60]	; (1a0003c8 <mostrarEstadoTarjetaSD+0x78>)
1a00038c:	2003      	movs	r0, #3
1a00038e:	f005 fcd6 	bl	1a005d3e <uartWriteString>
            break;
1a000392:	e7f4      	b.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
            uartWriteString( UART_USB, "STATUS: Iniciando tarjeta SD.\r\n" );
1a000394:	490d      	ldr	r1, [pc, #52]	; (1a0003cc <mostrarEstadoTarjetaSD+0x7c>)
1a000396:	2003      	movs	r0, #3
1a000398:	f005 fcd1 	bl	1a005d3e <uartWriteString>
            break;
1a00039c:	e7ef      	b.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
            uartWriteString( UART_USB, "STATUS: Tarjeta SD lista pero desmontada.\r\n" );
1a00039e:	490c      	ldr	r1, [pc, #48]	; (1a0003d0 <mostrarEstadoTarjetaSD+0x80>)
1a0003a0:	2003      	movs	r0, #3
1a0003a2:	f005 fccc 	bl	1a005d3e <uartWriteString>
            break;
1a0003a6:	e7ea      	b.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
            uartWriteString( UART_USB, "STATUS: Tarjeta SD lista y montada.\r\n" );
1a0003a8:	490a      	ldr	r1, [pc, #40]	; (1a0003d4 <mostrarEstadoTarjetaSD+0x84>)
1a0003aa:	2003      	movs	r0, #3
1a0003ac:	f005 fcc7 	bl	1a005d3e <uartWriteString>
            break;
1a0003b0:	e7e5      	b.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
            uartWriteString( UART_USB, "STATUS: Tarjeta SD en estado de Error.\r\n" );
1a0003b2:	4909      	ldr	r1, [pc, #36]	; (1a0003d8 <mostrarEstadoTarjetaSD+0x88>)
1a0003b4:	2003      	movs	r0, #3
1a0003b6:	f005 fcc2 	bl	1a005d3e <uartWriteString>
            break;
1a0003ba:	e7e0      	b.n	1a00037e <mostrarEstadoTarjetaSD+0x2e>
1a0003bc:	10000000 	.word	0x10000000
1a0003c0:	1a00d9d0 	.word	0x1a00d9d0
1a0003c4:	1a00d9f8 	.word	0x1a00d9f8
1a0003c8:	1a00da18 	.word	0x1a00da18
1a0003cc:	1a00da3c 	.word	0x1a00da3c
1a0003d0:	1a00da5c 	.word	0x1a00da5c
1a0003d4:	1a00da88 	.word	0x1a00da88
1a0003d8:	1a00dab0 	.word	0x1a00dab0

1a0003dc <diskTickHook>:
}


// FUNCION que se ejecuta cada vez que ocurre un Tick
void diskTickHook( void *ptr )
{
1a0003dc:	b508      	push	{r3, lr}
    disk_timerproc();
1a0003de:	f004 fb19 	bl	1a004a14 <disk_timerproc>
}
1a0003e2:	bd08      	pop	{r3, pc}

1a0003e4 <read_sd_spi>:
{
1a0003e4:	b500      	push	{lr}
1a0003e6:	b083      	sub	sp, #12
    UINT bytesLeidos = 0;
1a0003e8:	2300      	movs	r3, #0
1a0003ea:	9301      	str	r3, [sp, #4]
    memset(buf,0 ,sizeof(buf));
1a0003ec:	6003      	str	r3, [r0, #0]
    fr = f_read( &file, buf,size, &bytesLeidos );
1a0003ee:	ab01      	add	r3, sp, #4
1a0003f0:	460a      	mov	r2, r1
1a0003f2:	4601      	mov	r1, r0
1a0003f4:	4807      	ldr	r0, [pc, #28]	; (1a000414 <read_sd_spi+0x30>)
1a0003f6:	f002 fdf4 	bl	1a002fe2 <f_read>
    if (fr != FR_OK)
1a0003fa:	b918      	cbnz	r0, 1a000404 <read_sd_spi+0x20>
}
1a0003fc:	9801      	ldr	r0, [sp, #4]
1a0003fe:	b003      	add	sp, #12
1a000400:	f85d fb04 	ldr.w	pc, [sp], #4
       fatFsTestERROR( fr );
1a000404:	f7ff ff7c 	bl	1a000300 <fatFsTestERROR>
       gpioWrite( LEDG, ON );
1a000408:	2101      	movs	r1, #1
1a00040a:	2029      	movs	r0, #41	; 0x29
1a00040c:	f005 fe5e 	bl	1a0060cc <gpioWrite>
       while(1);
1a000410:	e7fe      	b.n	1a000410 <read_sd_spi+0x2c>
1a000412:	bf00      	nop
1a000414:	10000a40 	.word	0x10000a40

1a000418 <close_sd_spi>:
void close_sd_spi(){
1a000418:	b508      	push	{r3, lr}
	 f_close( &file );
1a00041a:	4802      	ldr	r0, [pc, #8]	; (1a000424 <close_sd_spi+0xc>)
1a00041c:	f002 ff75 	bl	1a00330a <f_close>
}
1a000420:	bd08      	pop	{r3, pc}
1a000422:	bf00      	nop
1a000424:	10000a40 	.word	0x10000a40

1a000428 <open_sd_spi>:
void open_sd_spi(){
1a000428:	b500      	push	{lr}
1a00042a:	b091      	sub	sp, #68	; 0x44
    sprintf( filename, "%s/a2002011001-e02.wav", sdcardDriveName() );
1a00042c:	f004 fb54 	bl	1a004ad8 <sdcardDriveName>
1a000430:	4602      	mov	r2, r0
1a000432:	490c      	ldr	r1, [pc, #48]	; (1a000464 <open_sd_spi+0x3c>)
1a000434:	4668      	mov	r0, sp
1a000436:	f007 fc2d 	bl	1a007c94 <sprintf>
    fatFsTestStart( "f_open( READ )" );
1a00043a:	480b      	ldr	r0, [pc, #44]	; (1a000468 <open_sd_spi+0x40>)
1a00043c:	f7ff ff70 	bl	1a000320 <fatFsTestStart>
    fr = f_open( &file, filename, FA_READ );
1a000440:	2201      	movs	r2, #1
1a000442:	4669      	mov	r1, sp
1a000444:	4809      	ldr	r0, [pc, #36]	; (1a00046c <open_sd_spi+0x44>)
1a000446:	f002 fc75 	bl	1a002d34 <f_open>
    if( fr != FR_OK )
1a00044a:	b130      	cbz	r0, 1a00045a <open_sd_spi+0x32>
       fatFsTestERROR( fr );
1a00044c:	f7ff ff58 	bl	1a000300 <fatFsTestERROR>
       gpioWrite( LEDR, ON );
1a000450:	2101      	movs	r1, #1
1a000452:	2028      	movs	r0, #40	; 0x28
1a000454:	f005 fe3a 	bl	1a0060cc <gpioWrite>
       while(1);
1a000458:	e7fe      	b.n	1a000458 <open_sd_spi+0x30>
    fatFsTestOK( );
1a00045a:	f7ff ff71 	bl	1a000340 <fatFsTestOK>
}
1a00045e:	b011      	add	sp, #68	; 0x44
1a000460:	f85d fb04 	ldr.w	pc, [sp], #4
1a000464:	1a00dadc 	.word	0x1a00dadc
1a000468:	1a00daf4 	.word	0x1a00daf4
1a00046c:	10000a40 	.word	0x10000a40

1a000470 <init_sd_spi>:
{
1a000470:	b500      	push	{lr}
1a000472:	b0c1      	sub	sp, #260	; 0x104
    spiConfig( SPI0 );
1a000474:	2000      	movs	r0, #0
1a000476:	f005 fc77 	bl	1a005d68 <spiInit>
    tickConfig( 10 );
1a00047a:	200a      	movs	r0, #10
1a00047c:	2100      	movs	r1, #0
1a00047e:	f005 fc9b 	bl	1a005db8 <tickInit>
    tickCallbackSet( diskTickHook, NULL );
1a000482:	2100      	movs	r1, #0
1a000484:	4827      	ldr	r0, [pc, #156]	; (1a000524 <init_sd_spi+0xb4>)
1a000486:	f005 fca1 	bl	1a005dcc <tickCallbackSet>
    printf("start\n");
1a00048a:	4827      	ldr	r0, [pc, #156]	; (1a000528 <init_sd_spi+0xb8>)
1a00048c:	f007 fbfa 	bl	1a007c84 <puts>
    uartWriteString( UART_USB, "Iniciando sdcard con configuracion:\r\n" );
1a000490:	4926      	ldr	r1, [pc, #152]	; (1a00052c <init_sd_spi+0xbc>)
1a000492:	2003      	movs	r0, #3
1a000494:	f005 fc53 	bl	1a005d3e <uartWriteString>
    sprintf( msg, "  velocidad inicial %i Hz.\r\n", FSSDC_GetSlowClock() );
1a000498:	f004 fa76 	bl	1a004988 <FSSDC_GetSlowClock>
1a00049c:	4602      	mov	r2, r0
1a00049e:	4924      	ldr	r1, [pc, #144]	; (1a000530 <init_sd_spi+0xc0>)
1a0004a0:	4668      	mov	r0, sp
1a0004a2:	f007 fbf7 	bl	1a007c94 <sprintf>
    uartWriteString( UART_USB, msg );
1a0004a6:	4669      	mov	r1, sp
1a0004a8:	2003      	movs	r0, #3
1a0004aa:	f005 fc48 	bl	1a005d3e <uartWriteString>
    sprintf( msg, "  velocidad de trabajo %i Hz.\r\n", FSSDC_GetFastClock() );
1a0004ae:	f004 fa71 	bl	1a004994 <FSSDC_GetFastClock>
1a0004b2:	4602      	mov	r2, r0
1a0004b4:	491f      	ldr	r1, [pc, #124]	; (1a000534 <init_sd_spi+0xc4>)
1a0004b6:	4668      	mov	r0, sp
1a0004b8:	f007 fbec 	bl	1a007c94 <sprintf>
    uartWriteString( UART_USB, msg );
1a0004bc:	4669      	mov	r1, sp
1a0004be:	2003      	movs	r0, #3
1a0004c0:	f005 fc3d 	bl	1a005d3e <uartWriteString>
    if (sdcardInit( &sdcard ) == false)
1a0004c4:	481c      	ldr	r0, [pc, #112]	; (1a000538 <init_sd_spi+0xc8>)
1a0004c6:	f004 fae1 	bl	1a004a8c <sdcardInit>
1a0004ca:	b940      	cbnz	r0, 1a0004de <init_sd_spi+0x6e>
        uartWriteString( UART_USB, "Inicio de sdcard FALLO.\r\n**FIN**\r\n" );
1a0004cc:	491b      	ldr	r1, [pc, #108]	; (1a00053c <init_sd_spi+0xcc>)
1a0004ce:	2003      	movs	r0, #3
1a0004d0:	f005 fc35 	bl	1a005d3e <uartWriteString>
        gpioWrite( LEDR, ON );
1a0004d4:	2101      	movs	r1, #1
1a0004d6:	2028      	movs	r0, #40	; 0x28
1a0004d8:	f005 fdf8 	bl	1a0060cc <gpioWrite>
        while( 1 );
1a0004dc:	e7fe      	b.n	1a0004dc <init_sd_spi+0x6c>
        uartWriteString( UART_USB, "Inicio de sdcard OK! Unidad FatFs '" );
1a0004de:	4918      	ldr	r1, [pc, #96]	; (1a000540 <init_sd_spi+0xd0>)
1a0004e0:	2003      	movs	r0, #3
1a0004e2:	f005 fc2c 	bl	1a005d3e <uartWriteString>
        uartWriteString( UART_USB, sdcardDriveName());
1a0004e6:	f004 faf7 	bl	1a004ad8 <sdcardDriveName>
1a0004ea:	4601      	mov	r1, r0
1a0004ec:	2003      	movs	r0, #3
1a0004ee:	f005 fc26 	bl	1a005d3e <uartWriteString>
        uartWriteString( UART_USB, "'.\r\n" );
1a0004f2:	4914      	ldr	r1, [pc, #80]	; (1a000544 <init_sd_spi+0xd4>)
1a0004f4:	2003      	movs	r0, #3
1a0004f6:	f005 fc22 	bl	1a005d3e <uartWriteString>
    gpioWrite( LED1, ON );
1a0004fa:	2101      	movs	r1, #1
1a0004fc:	202b      	movs	r0, #43	; 0x2b
1a0004fe:	f005 fde5 	bl	1a0060cc <gpioWrite>
    uartWriteString( UART_USB, "Logueando STATUS de dipositivos...\r\n" );
1a000502:	4911      	ldr	r1, [pc, #68]	; (1a000548 <init_sd_spi+0xd8>)
1a000504:	2003      	movs	r0, #3
1a000506:	f005 fc1a 	bl	1a005d3e <uartWriteString>
        mostrarEstadoTarjetaSD();
1a00050a:	f7ff ff21 	bl	1a000350 <mostrarEstadoTarjetaSD>
        if( sdcardUltimoEstado == SDCARD_Status_ReadyMounted )
1a00050e:	4b0f      	ldr	r3, [pc, #60]	; (1a00054c <init_sd_spi+0xdc>)
1a000510:	781b      	ldrb	r3, [r3, #0]
1a000512:	2b05      	cmp	r3, #5
1a000514:	d1f9      	bne.n	1a00050a <init_sd_spi+0x9a>
    gpioWrite( LED2, ON );
1a000516:	2101      	movs	r1, #1
1a000518:	202c      	movs	r0, #44	; 0x2c
1a00051a:	f005 fdd7 	bl	1a0060cc <gpioWrite>
}
1a00051e:	b041      	add	sp, #260	; 0x104
1a000520:	f85d fb04 	ldr.w	pc, [sp], #4
1a000524:	1a0003dd 	.word	0x1a0003dd
1a000528:	1a00d8e8 	.word	0x1a00d8e8
1a00052c:	1a00d8f0 	.word	0x1a00d8f0
1a000530:	1a00d918 	.word	0x1a00d918
1a000534:	1a00d938 	.word	0x1a00d938
1a000538:	100032b4 	.word	0x100032b4
1a00053c:	1a00d958 	.word	0x1a00d958
1a000540:	1a00d97c 	.word	0x1a00d97c
1a000544:	1a00d9a0 	.word	0x1a00d9a0
1a000548:	1a00d9a8 	.word	0x1a00d9a8
1a00054c:	10000000 	.word	0x10000000

1a000550 <parse_header>:
static long num_samples;
static uint16_t size_of_each_sample;
static long count_num_samples;
struct HEADER header;
static bool parse_stereo_pcm_16;
uint32_t parse_header(){
1a000550:	b530      	push	{r4, r5, lr}
1a000552:	b0c5      	sub	sp, #276	; 0x114

	 uint32_t read = 0;
	 char msg[256];
	 // read header parts

	 read = read_sd_spi((void *)header.riff,sizeof(header.riff));
1a000554:	2104      	movs	r1, #4
1a000556:	48b9      	ldr	r0, [pc, #740]	; (1a00083c <parse_header+0x2ec>)
1a000558:	f7ff ff44 	bl	1a0003e4 <read_sd_spi>

	 if(read!=sizeof(header.riff)){
1a00055c:	2804      	cmp	r0, #4
1a00055e:	f040 8112 	bne.w	1a000786 <parse_header+0x236>
		 printf("ERROR: riff: %d =! %d",read,sizeof(header.riff));
	 }
	 sprintf( msg, "(1-4): %s\r\n",  header.riff);
1a000562:	4ab6      	ldr	r2, [pc, #728]	; (1a00083c <parse_header+0x2ec>)
1a000564:	49b6      	ldr	r1, [pc, #728]	; (1a000840 <parse_header+0x2f0>)
1a000566:	a804      	add	r0, sp, #16
1a000568:	f007 fb94 	bl	1a007c94 <sprintf>
	 uartWriteString( UART_USB, msg);
1a00056c:	a904      	add	r1, sp, #16
1a00056e:	2003      	movs	r0, #3
1a000570:	f005 fbe5 	bl	1a005d3e <uartWriteString>

	 read = read_sd_spi(buffer4,sizeof(buffer4));
1a000574:	2104      	movs	r1, #4
1a000576:	48b3      	ldr	r0, [pc, #716]	; (1a000844 <parse_header+0x2f4>)
1a000578:	f7ff ff34 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer4)){
1a00057c:	2804      	cmp	r0, #4
1a00057e:	f040 8108 	bne.w	1a000792 <parse_header+0x242>
		 printf("overall_size: %d =! %d",read,sizeof(buffer4));
	 }

	 // convert little endian to big endian 4 byte int
	 header.overall_size  = buffer4[0] |
1a000582:	4bb0      	ldr	r3, [pc, #704]	; (1a000844 <parse_header+0x2f4>)
1a000584:	7819      	ldrb	r1, [r3, #0]
							(buffer4[1]<<8) |
1a000586:	785a      	ldrb	r2, [r3, #1]
	 header.overall_size  = buffer4[0] |
1a000588:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
							(buffer4[2]<<16) |
1a00058c:	789a      	ldrb	r2, [r3, #2]
							(buffer4[1]<<8) |
1a00058e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
							(buffer4[3]<<24);
1a000592:	78db      	ldrb	r3, [r3, #3]
							(buffer4[2]<<16) |
1a000594:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
	 header.overall_size  = buffer4[0] |
1a000598:	4ca8      	ldr	r4, [pc, #672]	; (1a00083c <parse_header+0x2ec>)
1a00059a:	6061      	str	r1, [r4, #4]
	 printf("(5-8) Overall size: bytes:%u, Kb:%u \n", header.overall_size, header.overall_size/1024);
1a00059c:	0a8a      	lsrs	r2, r1, #10
1a00059e:	48aa      	ldr	r0, [pc, #680]	; (1a000848 <parse_header+0x2f8>)
1a0005a0:	f007 fb0e 	bl	1a007bc0 <printf>

	 read = read_sd_spi(header.wave,sizeof(header.wave));
1a0005a4:	2104      	movs	r1, #4
1a0005a6:	f104 0008 	add.w	r0, r4, #8
1a0005aa:	f7ff ff1b 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(header.wave)){
1a0005ae:	2804      	cmp	r0, #4
1a0005b0:	f040 80f5 	bne.w	1a00079e <parse_header+0x24e>
		 printf("wave: %d =! %d",read,sizeof(header.wave));
	 }
	 printf("(9-12) Wave marker: %s \n", header.wave);
1a0005b4:	4ca5      	ldr	r4, [pc, #660]	; (1a00084c <parse_header+0x2fc>)
1a0005b6:	4621      	mov	r1, r4
1a0005b8:	48a5      	ldr	r0, [pc, #660]	; (1a000850 <parse_header+0x300>)
1a0005ba:	f007 fb01 	bl	1a007bc0 <printf>

	 read = read_sd_spi(header.fmt_chunk_marker,sizeof(header.fmt_chunk_marker));
1a0005be:	2104      	movs	r1, #4
1a0005c0:	1860      	adds	r0, r4, r1
1a0005c2:	f7ff ff0f 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(header.fmt_chunk_marker)){
1a0005c6:	2804      	cmp	r0, #4
1a0005c8:	f040 80ef 	bne.w	1a0007aa <parse_header+0x25a>
		 printf("fmt_chunk_marker: %d =! %d",read,sizeof(header.fmt_chunk_marker));
	 }
	 printf("(13-16) Fmt marker: %s \n", header.fmt_chunk_marker);
1a0005cc:	49a1      	ldr	r1, [pc, #644]	; (1a000854 <parse_header+0x304>)
1a0005ce:	48a2      	ldr	r0, [pc, #648]	; (1a000858 <parse_header+0x308>)
1a0005d0:	f007 faf6 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer4,sizeof(buffer4));
1a0005d4:	2104      	movs	r1, #4
1a0005d6:	489b      	ldr	r0, [pc, #620]	; (1a000844 <parse_header+0x2f4>)
1a0005d8:	f7ff ff04 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer4)){
1a0005dc:	2804      	cmp	r0, #4
1a0005de:	f040 80ea 	bne.w	1a0007b6 <parse_header+0x266>
		 printf("length_of_fmt: %d =! %d",read,sizeof(buffer4));
	 }
	 // convert little endian to big endian 4 byte integer
	 header.length_of_fmt = buffer4[0] |
1a0005e2:	4b98      	ldr	r3, [pc, #608]	; (1a000844 <parse_header+0x2f4>)
1a0005e4:	7819      	ldrb	r1, [r3, #0]
						   (buffer4[1] << 8) |
1a0005e6:	785a      	ldrb	r2, [r3, #1]
	 header.length_of_fmt = buffer4[0] |
1a0005e8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
						   (buffer4[2] << 16) |
1a0005ec:	789a      	ldrb	r2, [r3, #2]
						   (buffer4[1] << 8) |
1a0005ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
						   (buffer4[3] << 24);
1a0005f2:	78db      	ldrb	r3, [r3, #3]
						   (buffer4[2] << 16) |
1a0005f4:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
	 header.length_of_fmt = buffer4[0] |
1a0005f8:	4b90      	ldr	r3, [pc, #576]	; (1a00083c <parse_header+0x2ec>)
1a0005fa:	6119      	str	r1, [r3, #16]
	 printf("(17-20) Length of Fmt header: %u  \n", header.length_of_fmt);
1a0005fc:	4897      	ldr	r0, [pc, #604]	; (1a00085c <parse_header+0x30c>)
1a0005fe:	f007 fadf 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer2,sizeof(buffer2));
1a000602:	2102      	movs	r1, #2
1a000604:	4896      	ldr	r0, [pc, #600]	; (1a000860 <parse_header+0x310>)
1a000606:	f7ff feed 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer2)){
1a00060a:	2802      	cmp	r0, #2
1a00060c:	f040 80d9 	bne.w	1a0007c2 <parse_header+0x272>
		 printf("format_type: %d =! %d \r\n",read,sizeof(buffer2));
	 }

	 header.format_type = buffer2[0] | (buffer2[1] << 8);
1a000610:	4a93      	ldr	r2, [pc, #588]	; (1a000860 <parse_header+0x310>)
1a000612:	7813      	ldrb	r3, [r2, #0]
1a000614:	7852      	ldrb	r2, [r2, #1]
1a000616:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00061a:	4a88      	ldr	r2, [pc, #544]	; (1a00083c <parse_header+0x2ec>)
1a00061c:	6153      	str	r3, [r2, #20]

	 char format_name[10] = "";
1a00061e:	2200      	movs	r2, #0
1a000620:	9201      	str	r2, [sp, #4]
1a000622:	9202      	str	r2, [sp, #8]
1a000624:	f8ad 200c 	strh.w	r2, [sp, #12]
	 if (header.format_type == 1)
1a000628:	2b01      	cmp	r3, #1
1a00062a:	f000 80d0 	beq.w	1a0007ce <parse_header+0x27e>
	   strcpy(format_name,"PCM");
	 else if (header.format_type == 6)
1a00062e:	2b06      	cmp	r3, #6
1a000630:	f000 80d0 	beq.w	1a0007d4 <parse_header+0x284>
	   strcpy(format_name, "A-law");
	 else if (header.format_type == 7)
1a000634:	2b07      	cmp	r3, #7
1a000636:	f000 80d3 	beq.w	1a0007e0 <parse_header+0x290>
	   strcpy(format_name, "Mu-law");

	 printf("(21-22) Format type: %u %s  \n", header.format_type, format_name);
1a00063a:	aa01      	add	r2, sp, #4
1a00063c:	4619      	mov	r1, r3
1a00063e:	4889      	ldr	r0, [pc, #548]	; (1a000864 <parse_header+0x314>)
1a000640:	f007 fabe 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer2,sizeof(buffer2));
1a000644:	2102      	movs	r1, #2
1a000646:	4886      	ldr	r0, [pc, #536]	; (1a000860 <parse_header+0x310>)
1a000648:	f7ff fecc 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer2)){
1a00064c:	2802      	cmp	r0, #2
1a00064e:	f040 80d0 	bne.w	1a0007f2 <parse_header+0x2a2>
		 printf("channels: %d =! %d\r\n",read,sizeof(buffer2));
	 }

	 header.channels = buffer2[0] | (buffer2[1] << 8);
1a000652:	4b83      	ldr	r3, [pc, #524]	; (1a000860 <parse_header+0x310>)
1a000654:	7819      	ldrb	r1, [r3, #0]
1a000656:	785b      	ldrb	r3, [r3, #1]
1a000658:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
1a00065c:	4b77      	ldr	r3, [pc, #476]	; (1a00083c <parse_header+0x2ec>)
1a00065e:	6199      	str	r1, [r3, #24]
	 printf("(23-24) Channels: %u  \n", header.channels);
1a000660:	4881      	ldr	r0, [pc, #516]	; (1a000868 <parse_header+0x318>)
1a000662:	f007 faad 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer4,sizeof(buffer4));
1a000666:	2104      	movs	r1, #4
1a000668:	4876      	ldr	r0, [pc, #472]	; (1a000844 <parse_header+0x2f4>)
1a00066a:	f7ff febb 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer4)){
1a00066e:	2804      	cmp	r0, #4
1a000670:	f040 80c5 	bne.w	1a0007fe <parse_header+0x2ae>
		 printf("sample_rate: %d =! %d",read,sizeof(buffer4));
	 }

	 header.sample_rate = buffer4[0] |
1a000674:	4c73      	ldr	r4, [pc, #460]	; (1a000844 <parse_header+0x2f4>)
1a000676:	7821      	ldrb	r1, [r4, #0]
							(buffer4[1] << 8) |
1a000678:	7863      	ldrb	r3, [r4, #1]
	 header.sample_rate = buffer4[0] |
1a00067a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
							(buffer4[2] << 16) |
1a00067e:	78a3      	ldrb	r3, [r4, #2]
							(buffer4[1] << 8) |
1a000680:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
							(buffer4[3] << 24);
1a000684:	78e3      	ldrb	r3, [r4, #3]
							(buffer4[2] << 16) |
1a000686:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
	 header.sample_rate = buffer4[0] |
1a00068a:	4b6c      	ldr	r3, [pc, #432]	; (1a00083c <parse_header+0x2ec>)
1a00068c:	61d9      	str	r1, [r3, #28]
	 printf("(25-28) Sample rate: %u \n", header.sample_rate);
1a00068e:	4877      	ldr	r0, [pc, #476]	; (1a00086c <parse_header+0x31c>)
1a000690:	f007 fa96 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer4,sizeof(buffer4));
1a000694:	2104      	movs	r1, #4
1a000696:	4620      	mov	r0, r4
1a000698:	f7ff fea4 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer4)){
1a00069c:	2804      	cmp	r0, #4
1a00069e:	f040 80b4 	bne.w	1a00080a <parse_header+0x2ba>
		 printf("byterate: %d =! %d",read,sizeof(buffer4));
	 }

	 header.byterate  = buffer4[0] |
1a0006a2:	4b68      	ldr	r3, [pc, #416]	; (1a000844 <parse_header+0x2f4>)
1a0006a4:	7819      	ldrb	r1, [r3, #0]
							(buffer4[1] << 8) |
1a0006a6:	785a      	ldrb	r2, [r3, #1]
	 header.byterate  = buffer4[0] |
1a0006a8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
							(buffer4[2] << 16) |
1a0006ac:	789a      	ldrb	r2, [r3, #2]
							(buffer4[1] << 8) |
1a0006ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
							(buffer4[3] << 24);
1a0006b2:	78db      	ldrb	r3, [r3, #3]
							(buffer4[2] << 16) |
1a0006b4:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
	 header.byterate  = buffer4[0] |
1a0006b8:	4b60      	ldr	r3, [pc, #384]	; (1a00083c <parse_header+0x2ec>)
1a0006ba:	6219      	str	r1, [r3, #32]
	 printf("(29-32) Byte Rate: %u , Bit Rate: %u \n", header.byterate, header.byterate*8);
1a0006bc:	00ca      	lsls	r2, r1, #3
1a0006be:	486c      	ldr	r0, [pc, #432]	; (1a000870 <parse_header+0x320>)
1a0006c0:	f007 fa7e 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer2,sizeof(buffer2));
1a0006c4:	2102      	movs	r1, #2
1a0006c6:	4866      	ldr	r0, [pc, #408]	; (1a000860 <parse_header+0x310>)
1a0006c8:	f7ff fe8c 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer2)){
1a0006cc:	2802      	cmp	r0, #2
1a0006ce:	f040 80a2 	bne.w	1a000816 <parse_header+0x2c6>
		 printf("block_align: %d =! %d",read,sizeof(buffer2));
	 }

	 header.block_align = buffer2[0] |
1a0006d2:	4c63      	ldr	r4, [pc, #396]	; (1a000860 <parse_header+0x310>)
1a0006d4:	7821      	ldrb	r1, [r4, #0]
						(buffer2[1] << 8);
1a0006d6:	7863      	ldrb	r3, [r4, #1]
	 header.block_align = buffer2[0] |
1a0006d8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
1a0006dc:	4b57      	ldr	r3, [pc, #348]	; (1a00083c <parse_header+0x2ec>)
1a0006de:	6259      	str	r1, [r3, #36]	; 0x24
	 printf("(33-34) Block Alignment: %u  \n", header.block_align);
1a0006e0:	4864      	ldr	r0, [pc, #400]	; (1a000874 <parse_header+0x324>)
1a0006e2:	f007 fa6d 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer2,sizeof(buffer2));
1a0006e6:	2102      	movs	r1, #2
1a0006e8:	4620      	mov	r0, r4
1a0006ea:	f7ff fe7b 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(buffer2)){
1a0006ee:	2802      	cmp	r0, #2
1a0006f0:	f040 8097 	bne.w	1a000822 <parse_header+0x2d2>
		 printf("bits_per_sample: %d =! %d",read,sizeof(buffer2));
	 }

	 header.bits_per_sample = buffer2[0] |
1a0006f4:	4b5a      	ldr	r3, [pc, #360]	; (1a000860 <parse_header+0x310>)
1a0006f6:	7819      	ldrb	r1, [r3, #0]
						(buffer2[1] << 8);
1a0006f8:	785b      	ldrb	r3, [r3, #1]
	 header.bits_per_sample = buffer2[0] |
1a0006fa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
1a0006fe:	4c4f      	ldr	r4, [pc, #316]	; (1a00083c <parse_header+0x2ec>)
1a000700:	62a1      	str	r1, [r4, #40]	; 0x28
	 printf("(35-36) Bits per sample: %u  \n", header.bits_per_sample);
1a000702:	485d      	ldr	r0, [pc, #372]	; (1a000878 <parse_header+0x328>)
1a000704:	f007 fa5c 	bl	1a007bc0 <printf>

	 read = read_sd_spi(header.data_chunk_header,sizeof(header.data_chunk_header));
1a000708:	2104      	movs	r1, #4
1a00070a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
1a00070e:	f7ff fe69 	bl	1a0003e4 <read_sd_spi>
	 if(read!=sizeof(header.data_chunk_header)){
1a000712:	2804      	cmp	r0, #4
1a000714:	f040 808b 	bne.w	1a00082e <parse_header+0x2de>
		 printf("data_chunk_header: %d =! %d",read,sizeof(header.data_chunk_header));
	 }
	 printf("(37-40) Data Marker: %s  \n", header.data_chunk_header);
1a000718:	4958      	ldr	r1, [pc, #352]	; (1a00087c <parse_header+0x32c>)
1a00071a:	4859      	ldr	r0, [pc, #356]	; (1a000880 <parse_header+0x330>)
1a00071c:	f007 fa50 	bl	1a007bc0 <printf>

	 read = read_sd_spi(buffer4,sizeof(buffer4));
1a000720:	2104      	movs	r1, #4
1a000722:	4848      	ldr	r0, [pc, #288]	; (1a000844 <parse_header+0x2f4>)
1a000724:	f7ff fe5e 	bl	1a0003e4 <read_sd_spi>
1a000728:	4604      	mov	r4, r0
	 if(read!=sizeof(buffer4)){
1a00072a:	2804      	cmp	r0, #4
1a00072c:	f040 80d2 	bne.w	1a0008d4 <parse_header+0x384>
		 printf("data_size: %d =! %d",read,sizeof(buffer4));
	 }

	 header.data_size = buffer4[0] |
1a000730:	4b44      	ldr	r3, [pc, #272]	; (1a000844 <parse_header+0x2f4>)
1a000732:	7819      	ldrb	r1, [r3, #0]
					(buffer4[1] << 8) |
1a000734:	785a      	ldrb	r2, [r3, #1]
	 header.data_size = buffer4[0] |
1a000736:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
					(buffer4[2] << 16) |
1a00073a:	789a      	ldrb	r2, [r3, #2]
					(buffer4[1] << 8) |
1a00073c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
					(buffer4[3] << 24 );
1a000740:	78db      	ldrb	r3, [r3, #3]
					(buffer4[2] << 16) |
1a000742:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
	 header.data_size = buffer4[0] |
1a000746:	4d3d      	ldr	r5, [pc, #244]	; (1a00083c <parse_header+0x2ec>)
1a000748:	6329      	str	r1, [r5, #48]	; 0x30

	 printf("(41-44) Size of data chunk: %u  \n", header.data_size);
1a00074a:	484e      	ldr	r0, [pc, #312]	; (1a000884 <parse_header+0x334>)
1a00074c:	f007 fa38 	bl	1a007bc0 <printf>


	 // calculate no.of samples
	 num_samples = (8 * header.data_size) / (header.channels * header.bits_per_sample);
1a000750:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a000752:	00c9      	lsls	r1, r1, #3
1a000754:	69aa      	ldr	r2, [r5, #24]
1a000756:	6aab      	ldr	r3, [r5, #40]	; 0x28
1a000758:	fb03 f302 	mul.w	r3, r3, r2
1a00075c:	fbb1 f1f3 	udiv	r1, r1, r3
1a000760:	4b49      	ldr	r3, [pc, #292]	; (1a000888 <parse_header+0x338>)
1a000762:	6019      	str	r1, [r3, #0]
	 printf("Number of samples: %lu  \n", num_samples);
1a000764:	4849      	ldr	r0, [pc, #292]	; (1a00088c <parse_header+0x33c>)
1a000766:	f007 fa2b 	bl	1a007bc0 <printf>
	 size_of_each_sample = (header.channels * header.bits_per_sample) / 8;
1a00076a:	69ab      	ldr	r3, [r5, #24]
1a00076c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00076e:	fb01 f103 	mul.w	r1, r1, r3
1a000772:	f3c1 01cf 	ubfx	r1, r1, #3, #16
1a000776:	4b46      	ldr	r3, [pc, #280]	; (1a000890 <parse_header+0x340>)
1a000778:	8019      	strh	r1, [r3, #0]
	 printf("Size of each sample: %ld bytes \n", size_of_each_sample);
1a00077a:	4846      	ldr	r0, [pc, #280]	; (1a000894 <parse_header+0x344>)
1a00077c:	f007 fa20 	bl	1a007bc0 <printf>
	 if (header.format_type == 1 && SIZE_SAMPLE == size_of_each_sample && header.channels==2) { // PCM //4byte cada muestra, 2 c/canal
		 parse_stereo_pcm_16=true;
	 }
	 return read;

}
1a000780:	4620      	mov	r0, r4
1a000782:	b045      	add	sp, #276	; 0x114
1a000784:	bd30      	pop	{r4, r5, pc}
		 printf("ERROR: riff: %d =! %d",read,sizeof(header.riff));
1a000786:	2204      	movs	r2, #4
1a000788:	4601      	mov	r1, r0
1a00078a:	4843      	ldr	r0, [pc, #268]	; (1a000898 <parse_header+0x348>)
1a00078c:	f007 fa18 	bl	1a007bc0 <printf>
1a000790:	e6e7      	b.n	1a000562 <parse_header+0x12>
		 printf("overall_size: %d =! %d",read,sizeof(buffer4));
1a000792:	2204      	movs	r2, #4
1a000794:	4601      	mov	r1, r0
1a000796:	4841      	ldr	r0, [pc, #260]	; (1a00089c <parse_header+0x34c>)
1a000798:	f007 fa12 	bl	1a007bc0 <printf>
1a00079c:	e6f1      	b.n	1a000582 <parse_header+0x32>
		 printf("wave: %d =! %d",read,sizeof(header.wave));
1a00079e:	2204      	movs	r2, #4
1a0007a0:	4601      	mov	r1, r0
1a0007a2:	483f      	ldr	r0, [pc, #252]	; (1a0008a0 <parse_header+0x350>)
1a0007a4:	f007 fa0c 	bl	1a007bc0 <printf>
1a0007a8:	e704      	b.n	1a0005b4 <parse_header+0x64>
		 printf("fmt_chunk_marker: %d =! %d",read,sizeof(header.fmt_chunk_marker));
1a0007aa:	2204      	movs	r2, #4
1a0007ac:	4601      	mov	r1, r0
1a0007ae:	483d      	ldr	r0, [pc, #244]	; (1a0008a4 <parse_header+0x354>)
1a0007b0:	f007 fa06 	bl	1a007bc0 <printf>
1a0007b4:	e70a      	b.n	1a0005cc <parse_header+0x7c>
		 printf("length_of_fmt: %d =! %d",read,sizeof(buffer4));
1a0007b6:	2204      	movs	r2, #4
1a0007b8:	4601      	mov	r1, r0
1a0007ba:	483b      	ldr	r0, [pc, #236]	; (1a0008a8 <parse_header+0x358>)
1a0007bc:	f007 fa00 	bl	1a007bc0 <printf>
1a0007c0:	e70f      	b.n	1a0005e2 <parse_header+0x92>
		 printf("format_type: %d =! %d \r\n",read,sizeof(buffer2));
1a0007c2:	2202      	movs	r2, #2
1a0007c4:	4601      	mov	r1, r0
1a0007c6:	4839      	ldr	r0, [pc, #228]	; (1a0008ac <parse_header+0x35c>)
1a0007c8:	f007 f9fa 	bl	1a007bc0 <printf>
1a0007cc:	e720      	b.n	1a000610 <parse_header+0xc0>
	   strcpy(format_name,"PCM");
1a0007ce:	4a38      	ldr	r2, [pc, #224]	; (1a0008b0 <parse_header+0x360>)
1a0007d0:	9201      	str	r2, [sp, #4]
1a0007d2:	e732      	b.n	1a00063a <parse_header+0xea>
	   strcpy(format_name, "A-law");
1a0007d4:	4937      	ldr	r1, [pc, #220]	; (1a0008b4 <parse_header+0x364>)
1a0007d6:	c903      	ldmia	r1, {r0, r1}
1a0007d8:	9001      	str	r0, [sp, #4]
1a0007da:	f8ad 1008 	strh.w	r1, [sp, #8]
1a0007de:	e72c      	b.n	1a00063a <parse_header+0xea>
	   strcpy(format_name, "Mu-law");
1a0007e0:	4935      	ldr	r1, [pc, #212]	; (1a0008b8 <parse_header+0x368>)
1a0007e2:	c903      	ldmia	r1, {r0, r1}
1a0007e4:	9001      	str	r0, [sp, #4]
1a0007e6:	f8ad 1008 	strh.w	r1, [sp, #8]
1a0007ea:	0c09      	lsrs	r1, r1, #16
1a0007ec:	f88d 100a 	strb.w	r1, [sp, #10]
1a0007f0:	e723      	b.n	1a00063a <parse_header+0xea>
		 printf("channels: %d =! %d\r\n",read,sizeof(buffer2));
1a0007f2:	2202      	movs	r2, #2
1a0007f4:	4601      	mov	r1, r0
1a0007f6:	4831      	ldr	r0, [pc, #196]	; (1a0008bc <parse_header+0x36c>)
1a0007f8:	f007 f9e2 	bl	1a007bc0 <printf>
1a0007fc:	e729      	b.n	1a000652 <parse_header+0x102>
		 printf("sample_rate: %d =! %d",read,sizeof(buffer4));
1a0007fe:	2204      	movs	r2, #4
1a000800:	4601      	mov	r1, r0
1a000802:	482f      	ldr	r0, [pc, #188]	; (1a0008c0 <parse_header+0x370>)
1a000804:	f007 f9dc 	bl	1a007bc0 <printf>
1a000808:	e734      	b.n	1a000674 <parse_header+0x124>
		 printf("byterate: %d =! %d",read,sizeof(buffer4));
1a00080a:	2204      	movs	r2, #4
1a00080c:	4601      	mov	r1, r0
1a00080e:	482d      	ldr	r0, [pc, #180]	; (1a0008c4 <parse_header+0x374>)
1a000810:	f007 f9d6 	bl	1a007bc0 <printf>
1a000814:	e745      	b.n	1a0006a2 <parse_header+0x152>
		 printf("block_align: %d =! %d",read,sizeof(buffer2));
1a000816:	2202      	movs	r2, #2
1a000818:	4601      	mov	r1, r0
1a00081a:	482b      	ldr	r0, [pc, #172]	; (1a0008c8 <parse_header+0x378>)
1a00081c:	f007 f9d0 	bl	1a007bc0 <printf>
1a000820:	e757      	b.n	1a0006d2 <parse_header+0x182>
		 printf("bits_per_sample: %d =! %d",read,sizeof(buffer2));
1a000822:	2202      	movs	r2, #2
1a000824:	4601      	mov	r1, r0
1a000826:	4829      	ldr	r0, [pc, #164]	; (1a0008cc <parse_header+0x37c>)
1a000828:	f007 f9ca 	bl	1a007bc0 <printf>
1a00082c:	e762      	b.n	1a0006f4 <parse_header+0x1a4>
		 printf("data_chunk_header: %d =! %d",read,sizeof(header.data_chunk_header));
1a00082e:	2204      	movs	r2, #4
1a000830:	4601      	mov	r1, r0
1a000832:	4827      	ldr	r0, [pc, #156]	; (1a0008d0 <parse_header+0x380>)
1a000834:	f007 f9c4 	bl	1a007bc0 <printf>
1a000838:	e76e      	b.n	1a000718 <parse_header+0x1c8>
1a00083a:	bf00      	nop
1a00083c:	100034f4 	.word	0x100034f4
1a000840:	1a00db50 	.word	0x1a00db50
1a000844:	100034f0 	.word	0x100034f0
1a000848:	1a00db74 	.word	0x1a00db74
1a00084c:	100034fc 	.word	0x100034fc
1a000850:	1a00dbac 	.word	0x1a00dbac
1a000854:	10003500 	.word	0x10003500
1a000858:	1a00dbe4 	.word	0x1a00dbe4
1a00085c:	1a00dc18 	.word	0x1a00dc18
1a000860:	10003534 	.word	0x10003534
1a000864:	1a00dc68 	.word	0x1a00dc68
1a000868:	1a00dca0 	.word	0x1a00dca0
1a00086c:	1a00dcd0 	.word	0x1a00dcd0
1a000870:	1a00dd00 	.word	0x1a00dd00
1a000874:	1a00dd40 	.word	0x1a00dd40
1a000878:	1a00dd7c 	.word	0x1a00dd7c
1a00087c:	10003520 	.word	0x10003520
1a000880:	1a00ddb8 	.word	0x1a00ddb8
1a000884:	1a00dde8 	.word	0x1a00dde8
1a000888:	10000c94 	.word	0x10000c94
1a00088c:	1a00de0c 	.word	0x1a00de0c
1a000890:	10000c98 	.word	0x10000c98
1a000894:	1a00de28 	.word	0x1a00de28
1a000898:	1a00db38 	.word	0x1a00db38
1a00089c:	1a00db5c 	.word	0x1a00db5c
1a0008a0:	1a00db9c 	.word	0x1a00db9c
1a0008a4:	1a00dbc8 	.word	0x1a00dbc8
1a0008a8:	1a00dc00 	.word	0x1a00dc00
1a0008ac:	1a00dc3c 	.word	0x1a00dc3c
1a0008b0:	004d4350 	.word	0x004d4350
1a0008b4:	1a00dc58 	.word	0x1a00dc58
1a0008b8:	1a00dc60 	.word	0x1a00dc60
1a0008bc:	1a00dc88 	.word	0x1a00dc88
1a0008c0:	1a00dcb8 	.word	0x1a00dcb8
1a0008c4:	1a00dcec 	.word	0x1a00dcec
1a0008c8:	1a00dd28 	.word	0x1a00dd28
1a0008cc:	1a00dd60 	.word	0x1a00dd60
1a0008d0:	1a00dd9c 	.word	0x1a00dd9c
		 printf("data_size: %d =! %d",read,sizeof(buffer4));
1a0008d4:	2204      	movs	r2, #4
1a0008d6:	4601      	mov	r1, r0
1a0008d8:	4801      	ldr	r0, [pc, #4]	; (1a0008e0 <parse_header+0x390>)
1a0008da:	f007 f971 	bl	1a007bc0 <printf>
1a0008de:	e727      	b.n	1a000730 <parse_header+0x1e0>
1a0008e0:	1a00ddd4 	.word	0x1a00ddd4

1a0008e4 <init_parse>:
		 }
	 }

	 return status;
}
void init_parse(){
1a0008e4:	b508      	push	{r3, lr}
	count_num_samples=0;
1a0008e6:	4b04      	ldr	r3, [pc, #16]	; (1a0008f8 <init_parse+0x14>)
1a0008e8:	2200      	movs	r2, #0
1a0008ea:	601a      	str	r2, [r3, #0]
	parse_stereo_pcm_16=false;
    init_sd_spi();
1a0008ec:	f7ff fdc0 	bl	1a000470 <init_sd_spi>
    open_sd_spi();
1a0008f0:	f7ff fd9a 	bl	1a000428 <open_sd_spi>
}
1a0008f4:	bd08      	pop	{r3, pc}
1a0008f6:	bf00      	nop
1a0008f8:	10000c90 	.word	0x10000c90

1a0008fc <stop_parse>:

void stop_parse(){
1a0008fc:	b508      	push	{r3, lr}
	printf("close file\n");
1a0008fe:	4803      	ldr	r0, [pc, #12]	; (1a00090c <stop_parse+0x10>)
1a000900:	f007 f9c0 	bl	1a007c84 <puts>
	close_sd_spi();
1a000904:	f7ff fd88 	bl	1a000418 <close_sd_spi>
}
1a000908:	bd08      	pop	{r3, pc}
1a00090a:	bf00      	nop
1a00090c:	1a00de4c 	.word	0x1a00de4c

1a000910 <parse_data>:
uint8_t parse_data(uint32_t *buffer, uint32_t size){
1a000910:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000912:	b083      	sub	sp, #12
1a000914:	4607      	mov	r7, r0
1a000916:	460e      	mov	r6, r1
	 for(int i=0;i<size;i++){
1a000918:	2400      	movs	r4, #0
1a00091a:	4625      	mov	r5, r4
1a00091c:	42b4      	cmp	r4, r6
1a00091e:	d235      	bcs.n	1a00098c <parse_data+0x7c>
		 if(count_num_samples<num_samples){
1a000920:	4b1c      	ldr	r3, [pc, #112]	; (1a000994 <parse_data+0x84>)
1a000922:	681a      	ldr	r2, [r3, #0]
1a000924:	4b1c      	ldr	r3, [pc, #112]	; (1a000998 <parse_data+0x88>)
1a000926:	681b      	ldr	r3, [r3, #0]
1a000928:	429a      	cmp	r2, r3
1a00092a:	da28      	bge.n	1a00097e <parse_data+0x6e>
			  read = read_sd_spi(data_buffer, sizeof(data_buffer));// dump the data read
1a00092c:	2104      	movs	r1, #4
1a00092e:	eb0d 0001 	add.w	r0, sp, r1
1a000932:	f7ff fd57 	bl	1a0003e4 <read_sd_spi>
			  if (read == SIZE_SAMPLE) {
1a000936:	2804      	cmp	r0, #4
1a000938:	d115      	bne.n	1a000966 <parse_data+0x56>
				count_num_samples++;
1a00093a:	4a16      	ldr	r2, [pc, #88]	; (1a000994 <parse_data+0x84>)
1a00093c:	6813      	ldr	r3, [r2, #0]
1a00093e:	3301      	adds	r3, #1
1a000940:	6013      	str	r3, [r2, #0]
				data_in_sample = (data_buffer[offset + 2] & 0x00ff) |
1a000942:	f89d 3006 	ldrb.w	r3, [sp, #6]
									((data_buffer[offset + 3] & 0x00ff) <<8) |
1a000946:	f89d 2007 	ldrb.w	r2, [sp, #7]
				data_in_sample = (data_buffer[offset + 2] & 0x00ff) |
1a00094a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
									((data_buffer[offset ] & 0x00ff) <<16) |
1a00094e:	f89d 2004 	ldrb.w	r2, [sp, #4]
									((data_buffer[offset + 3] & 0x00ff) <<8) |
1a000952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
									(data_buffer[offset + 1]<<24);
1a000956:	f89d 2005 	ldrb.w	r2, [sp, #5]
				data_in_sample = (data_buffer[offset + 2] & 0x00ff) |
1a00095a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
				buffer[i]=data_in_sample;
1a00095e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
	 for(int i=0;i<size;i++){
1a000962:	3401      	adds	r4, #1
1a000964:	e7d9      	b.n	1a00091a <parse_data+0xa>
					 printf("Error reading file %d bytes \n", read);
1a000966:	4601      	mov	r1, r0
1a000968:	480c      	ldr	r0, [pc, #48]	; (1a00099c <parse_data+0x8c>)
1a00096a:	f007 f929 	bl	1a007bc0 <printf>
					 gpioWrite( LEDB, ON );
1a00096e:	2101      	movs	r1, #1
1a000970:	202a      	movs	r0, #42	; 0x2a
1a000972:	f005 fbab 	bl	1a0060cc <gpioWrite>
					 stop_parse();
1a000976:	f7ff ffc1 	bl	1a0008fc <stop_parse>
					 status=0;
1a00097a:	2000      	movs	r0, #0
					 break;
1a00097c:	e007      	b.n	1a00098e <parse_data+0x7e>
			printf("Finish read file\n");
1a00097e:	4808      	ldr	r0, [pc, #32]	; (1a0009a0 <parse_data+0x90>)
1a000980:	f007 f980 	bl	1a007c84 <puts>
			stop_parse();
1a000984:	f7ff ffba 	bl	1a0008fc <stop_parse>
			status=0;
1a000988:	2000      	movs	r0, #0
			break;
1a00098a:	e000      	b.n	1a00098e <parse_data+0x7e>
	 uint8_t status = 1;
1a00098c:	2001      	movs	r0, #1
}
1a00098e:	b003      	add	sp, #12
1a000990:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000992:	bf00      	nop
1a000994:	10000c90 	.word	0x10000c90
1a000998:	10000c94 	.word	0x10000c94
1a00099c:	1a00db04 	.word	0x1a00db04
1a0009a0:	1a00db24 	.word	0x1a00db24

1a0009a4 <config_i2s>:
 *  Created on: 22 oct. 2020
 *      Author: root
 */
#include "auxs.h"

void config_i2s(){
1a0009a4:	b510      	push	{r4, lr}
1a0009a6:	b082      	sub	sp, #8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0009a8:	4b1a      	ldr	r3, [pc, #104]	; (1a000a14 <config_i2s+0x70>)
1a0009aa:	2297      	movs	r2, #151	; 0x97
1a0009ac:	601a      	str	r2, [r3, #0]
1a0009ae:	605a      	str	r2, [r3, #4]
1a0009b0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    );

	int status=0;
	I2S_AUDIO_FORMAT_T audio_Confg;

	audio_Confg.SampleRate = SOUND_MIXER_SAMPLE_RATE;
1a0009b4:	f64a 4344 	movw	r3, #44100	; 0xac44
1a0009b8:	9300      	str	r3, [sp, #0]
	/* Select audio data is 2 channels (1 is mono, 2 is stereo) */
	audio_Confg.ChannelNumber = SOUND_MIXER_CHANNELS;
1a0009ba:	2302      	movs	r3, #2
1a0009bc:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Select audio data is 16 bits */
	audio_Confg.WordWidth = SOUND_MIXER_BITS;
1a0009c0:	2310      	movs	r3, #16
1a0009c2:	f88d 3005 	strb.w	r3, [sp, #5]

	printf("Init I2S\r\n");
1a0009c6:	4814      	ldr	r0, [pc, #80]	; (1a000a18 <config_i2s+0x74>)
1a0009c8:	f007 f95c 	bl	1a007c84 <puts>
	Chip_I2S_Init(SOUND_I2S_PORT);
1a0009cc:	4c13      	ldr	r4, [pc, #76]	; (1a000a1c <config_i2s+0x78>)
1a0009ce:	4620      	mov	r0, r4
1a0009d0:	f005 f8b0 	bl	1a005b34 <Chip_I2S_Init>

	status=Chip_I2S_TxConfig(SOUND_I2S_PORT, &audio_Confg);
1a0009d4:	4669      	mov	r1, sp
1a0009d6:	4620      	mov	r0, r4
1a0009d8:	f005 f8b1 	bl	1a005b3e <Chip_I2S_TxConfig>
	if(status==SUCCESS){
1a0009dc:	2801      	cmp	r0, #1
1a0009de:	d113      	bne.n	1a000a08 <config_i2s+0x64>
 * @return	Nothing
 * @note	Pause, resets the transmit channel and FIFO asynchronously
 */
STATIC INLINE void Chip_I2S_TxStop(LPC_I2S_T *pI2S)
{
	pI2S->DAO &= ~I2S_DAO_MUTE;
1a0009e0:	6822      	ldr	r2, [r4, #0]
1a0009e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
1a0009e6:	6022      	str	r2, [r4, #0]
	pI2S->DAO |= I2S_DAO_STOP | I2S_DAO_RESET;
1a0009e8:	6822      	ldr	r2, [r4, #0]
1a0009ea:	f042 0218 	orr.w	r2, r2, #24
1a0009ee:	6022      	str	r2, [r4, #0]
	pI2S->DAO &= ~I2S_DAO_MUTE;
1a0009f0:	6822      	ldr	r2, [r4, #0]
1a0009f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
1a0009f6:	6022      	str	r2, [r4, #0]
	pI2S->DAO &= ~(I2S_DAO_RESET | I2S_DAO_STOP | I2S_DAO_MUTE);
1a0009f8:	6822      	ldr	r2, [r4, #0]
1a0009fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
1a0009fe:	f022 0218 	bic.w	r2, r2, #24
1a000a02:	6022      	str	r2, [r4, #0]
		printf("Error init_i2s: Chip_I2S_TxConfig status %d\n",status);
	}



}
1a000a04:	b002      	add	sp, #8
1a000a06:	bd10      	pop	{r4, pc}
		printf("Error init_i2s: Chip_I2S_TxConfig status %d\n",status);
1a000a08:	4601      	mov	r1, r0
1a000a0a:	4805      	ldr	r0, [pc, #20]	; (1a000a20 <config_i2s+0x7c>)
1a000a0c:	f007 f8d8 	bl	1a007bc0 <printf>
}
1a000a10:	e7f8      	b.n	1a000a04 <config_i2s+0x60>
1a000a12:	bf00      	nop
1a000a14:	40086000 	.word	0x40086000
1a000a18:	1a00de58 	.word	0x1a00de58
1a000a1c:	400a3000 	.word	0x400a3000
1a000a20:	1a00de64 	.word	0x1a00de64

1a000a24 <tarea_crear>:

// Funcion que crea y valida las tareas de FreeRTOS
void tarea_crear(TaskFunction_t tarea,const char * const nombre,uint8_t stack,void * const parametros,uint8_t prioridad,TaskHandle_t * const puntero)
{
1a000a24:	b510      	push	{r4, lr}
1a000a26:	b082      	sub	sp, #8
	// Crear tarea en freeRTOS
	BaseType_t res = xTaskCreate(tarea,nombre,configMINIMAL_STACK_SIZE*stack,parametros,tskIDLE_PRIORITY+prioridad, puntero);                         		// Puntero a la tarea creada en el sistema
1a000a28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a000a2c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
1a000a30:	0054      	lsls	r4, r2, #1
1a000a32:	b2a2      	uxth	r2, r4
1a000a34:	9c05      	ldr	r4, [sp, #20]
1a000a36:	9401      	str	r4, [sp, #4]
1a000a38:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a000a3c:	9400      	str	r4, [sp, #0]
1a000a3e:	f002 ff6b 	bl	1a003918 <xTaskCreate>

	// Gestion de errores
	if(res == pdFAIL)
1a000a42:	b108      	cbz	r0, 1a000a48 <tarea_crear+0x24>
	{
		gpioWrite( LED_ERROR , ON );
		while(TRUE);
	}
}
1a000a44:	b002      	add	sp, #8
1a000a46:	bd10      	pop	{r4, pc}
		gpioWrite( LED_ERROR , ON );
1a000a48:	2101      	movs	r1, #1
1a000a4a:	2028      	movs	r0, #40	; 0x28
1a000a4c:	f005 fb3e 	bl	1a0060cc <gpioWrite>
		while(TRUE);
1a000a50:	e7fe      	b.n	1a000a50 <tarea_crear+0x2c>
1a000a52:	Address 0x000000001a000a52 is out of bounds.


1a000a54 <main>:
/*=====[Definitions of public global variables]==============================*/
//SemaphoreHandle_t isr_signal_i2s;
/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a000a54:	b500      	push	{lr}
1a000a56:	b083      	sub	sp, #12

    printf("Protocolo\n");
1a000a58:	4813      	ldr	r0, [pc, #76]	; (1a000aa8 <main+0x54>)
1a000a5a:	f007 f913 	bl	1a007c84 <puts>
    // ---------- CONFIGURACIONES ------------------------------
    boardConfig();  // Inicializar y configurar la plataforma
1a000a5e:	f005 fb79 	bl	1a006154 <boardInit>
    config_i2s();
1a000a62:	f7ff ff9f 	bl	1a0009a4 <config_i2s>
    init_parse();
1a000a66:	f7ff ff3d 	bl	1a0008e4 <init_parse>
    parse_header();
1a000a6a:	f7ff fd71 	bl	1a000550 <parse_header>
    tarea_crear(control_satus_buffer,"parse_data_sd",SIZE,NULL,PRIORITY,NULL);
1a000a6e:	2500      	movs	r5, #0
1a000a70:	9501      	str	r5, [sp, #4]
1a000a72:	2401      	movs	r4, #1
1a000a74:	9400      	str	r4, [sp, #0]
1a000a76:	462b      	mov	r3, r5
1a000a78:	4622      	mov	r2, r4
1a000a7a:	490c      	ldr	r1, [pc, #48]	; (1a000aac <main+0x58>)
1a000a7c:	480c      	ldr	r0, [pc, #48]	; (1a000ab0 <main+0x5c>)
1a000a7e:	f7ff ffd1 	bl	1a000a24 <tarea_crear>
    tarea_crear(send_buffer_i2s,"send_buffer_i2s",SIZE,NULL,PRIORITY,NULL);
1a000a82:	9501      	str	r5, [sp, #4]
1a000a84:	9400      	str	r4, [sp, #0]
1a000a86:	462b      	mov	r3, r5
1a000a88:	4622      	mov	r2, r4
1a000a8a:	490a      	ldr	r1, [pc, #40]	; (1a000ab4 <main+0x60>)
1a000a8c:	480a      	ldr	r0, [pc, #40]	; (1a000ab8 <main+0x64>)
1a000a8e:	f7ff ffc9 	bl	1a000a24 <tarea_crear>

//	isr_signal_i2s    = xSemaphoreCreateBinary();
//    configASSERT( isr_signal_i2s != NULL );

    // Iniciar scheduler
    vTaskStartScheduler();					// Enciende tick | Crea idle y pone en ready | Evalua las tareas creadas | Prioridad mas alta pasa a running
1a000a92:	f002 ff73 	bl	1a00397c <vTaskStartScheduler>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000a96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a9a:	f383 8811 	msr	BASEPRI, r3
1a000a9e:	f3bf 8f6f 	isb	sy
1a000aa2:	f3bf 8f4f 	dsb	sy

    /* realizar un assert con "false" es equivalente al while(1) */
    configASSERT( 0 );
1a000aa6:	e7fe      	b.n	1a000aa6 <main+0x52>
1a000aa8:	1a00de94 	.word	0x1a00de94
1a000aac:	1a00dea0 	.word	0x1a00dea0
1a000ab0:	1a000b9d 	.word	0x1a000b9d
1a000ab4:	1a00deb0 	.word	0x1a00deb0
1a000ab8:	1a000add 	.word	0x1a000add

1a000abc <vApplicationMallocFailedHook>:
}


/* hook que se ejecuta si al necesitar un objeto dinamico, no hay memoria disponible */
void vApplicationMallocFailedHook()
{
1a000abc:	b508      	push	{r3, lr}
    printf( "Malloc Failed Hook!\n" );
1a000abe:	4806      	ldr	r0, [pc, #24]	; (1a000ad8 <vApplicationMallocFailedHook+0x1c>)
1a000ac0:	f007 f8e0 	bl	1a007c84 <puts>
1a000ac4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ac8:	f383 8811 	msr	BASEPRI, r3
1a000acc:	f3bf 8f6f 	isb	sy
1a000ad0:	f3bf 8f4f 	dsb	sy
    configASSERT( 0 );
1a000ad4:	e7fe      	b.n	1a000ad4 <vApplicationMallocFailedHook+0x18>
1a000ad6:	bf00      	nop
1a000ad8:	1a00dec0 	.word	0x1a00dec0

1a000adc <send_buffer_i2s>:
int updatebuff2;
int flag;
SemaphoreHandle_t isr_signal_i2s;

void send_buffer_i2s( void* taskParmPtr )
{
1a000adc:	b508      	push	{r3, lr}
	uint8_t  read_index=0;
	isr_signal_i2s    = xSemaphoreCreateBinary();
1a000ade:	2203      	movs	r2, #3
1a000ae0:	2100      	movs	r1, #0
1a000ae2:	2001      	movs	r0, #1
1a000ae4:	f002 fd28 	bl	1a003538 <xQueueGenericCreate>
1a000ae8:	4b22      	ldr	r3, [pc, #136]	; (1a000b74 <send_buffer_i2s+0x98>)
1a000aea:	6018      	str	r0, [r3, #0]
    configASSERT( isr_signal_i2s != NULL );
1a000aec:	b9b8      	cbnz	r0, 1a000b1e <send_buffer_i2s+0x42>
1a000aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000af2:	f383 8811 	msr	BASEPRI, r3
1a000af6:	f3bf 8f6f 	isb	sy
1a000afa:	f3bf 8f4f 	dsb	sy
1a000afe:	e7fe      	b.n	1a000afe <send_buffer_i2s+0x22>
			flag=0;
			read_index=0;
			if(updatebuff1==FULL){
				printf("Send Buffer 1\n");
				while ((Chip_I2S_GetTxLevel(SOUND_I2S_PORT) < 8)) {
					Chip_I2S_Send(SOUND_I2S_PORT, buffer1[read_index++]);
1a000b00:	1c5a      	adds	r2, r3, #1
1a000b02:	491d      	ldr	r1, [pc, #116]	; (1a000b78 <send_buffer_i2s+0x9c>)
1a000b04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	pI2S->TXFIFO = data;
1a000b08:	4b1c      	ldr	r3, [pc, #112]	; (1a000b7c <send_buffer_i2s+0xa0>)
1a000b0a:	6099      	str	r1, [r3, #8]
1a000b0c:	b2d3      	uxtb	r3, r2
 * @param	pI2S	: The base of I2S peripheral on the chip
 * @return	Current level of the Transmit FIFO
 */
STATIC INLINE uint8_t Chip_I2S_GetTxLevel(LPC_I2S_T *pI2S)
{
	return (pI2S->STATE >> 16) & 0xF;
1a000b0e:	4a1b      	ldr	r2, [pc, #108]	; (1a000b7c <send_buffer_i2s+0xa0>)
1a000b10:	6912      	ldr	r2, [r2, #16]
				while ((Chip_I2S_GetTxLevel(SOUND_I2S_PORT) < 8)) {
1a000b12:	f412 2f00 	tst.w	r2, #524288	; 0x80000
1a000b16:	d0f3      	beq.n	1a000b00 <send_buffer_i2s+0x24>
					if((read_index == BUFFER_SIZE)){
						break;
					}
				}
				updatebuff1=EMPTY;
1a000b18:	4b19      	ldr	r3, [pc, #100]	; (1a000b80 <send_buffer_i2s+0xa4>)
1a000b1a:	2201      	movs	r2, #1
1a000b1c:	601a      	str	r2, [r3, #0]
		 if(flag==1){
1a000b1e:	4b19      	ldr	r3, [pc, #100]	; (1a000b84 <send_buffer_i2s+0xa8>)
1a000b20:	681b      	ldr	r3, [r3, #0]
1a000b22:	2b01      	cmp	r3, #1
1a000b24:	d1fb      	bne.n	1a000b1e <send_buffer_i2s+0x42>
			flag=0;
1a000b26:	4b17      	ldr	r3, [pc, #92]	; (1a000b84 <send_buffer_i2s+0xa8>)
1a000b28:	2200      	movs	r2, #0
1a000b2a:	601a      	str	r2, [r3, #0]
			if(updatebuff1==FULL){
1a000b2c:	4b14      	ldr	r3, [pc, #80]	; (1a000b80 <send_buffer_i2s+0xa4>)
1a000b2e:	681b      	ldr	r3, [r3, #0]
1a000b30:	b923      	cbnz	r3, 1a000b3c <send_buffer_i2s+0x60>
				printf("Send Buffer 1\n");
1a000b32:	4815      	ldr	r0, [pc, #84]	; (1a000b88 <send_buffer_i2s+0xac>)
1a000b34:	f007 f8a6 	bl	1a007c84 <puts>
			read_index=0;
1a000b38:	2300      	movs	r3, #0
				while ((Chip_I2S_GetTxLevel(SOUND_I2S_PORT) < 8)) {
1a000b3a:	e7e8      	b.n	1a000b0e <send_buffer_i2s+0x32>
			}else{
				printf("Send Buffer 2\n");
1a000b3c:	4813      	ldr	r0, [pc, #76]	; (1a000b8c <send_buffer_i2s+0xb0>)
1a000b3e:	f007 f8a1 	bl	1a007c84 <puts>
				if(updatebuff2==FULL){
1a000b42:	4b13      	ldr	r3, [pc, #76]	; (1a000b90 <send_buffer_i2s+0xb4>)
1a000b44:	681b      	ldr	r3, [r3, #0]
1a000b46:	b11b      	cbz	r3, 1a000b50 <send_buffer_i2s+0x74>
							break;
						}
					}
					updatebuff2=EMPTY;
				}else{
					printf("Error Ningun buffer lleno para enviar\n");
1a000b48:	4812      	ldr	r0, [pc, #72]	; (1a000b94 <send_buffer_i2s+0xb8>)
1a000b4a:	f007 f89b 	bl	1a007c84 <puts>
1a000b4e:	e7e6      	b.n	1a000b1e <send_buffer_i2s+0x42>
			read_index=0;
1a000b50:	2300      	movs	r3, #0
1a000b52:	4a0a      	ldr	r2, [pc, #40]	; (1a000b7c <send_buffer_i2s+0xa0>)
1a000b54:	6912      	ldr	r2, [r2, #16]
					while ((Chip_I2S_GetTxLevel(SOUND_I2S_PORT) < 8)) {
1a000b56:	f412 2f00 	tst.w	r2, #524288	; 0x80000
1a000b5a:	d107      	bne.n	1a000b6c <send_buffer_i2s+0x90>
						Chip_I2S_Send(SOUND_I2S_PORT, buffer2[read_index++]);
1a000b5c:	1c5a      	adds	r2, r3, #1
1a000b5e:	490e      	ldr	r1, [pc, #56]	; (1a000b98 <send_buffer_i2s+0xbc>)
1a000b60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	pI2S->TXFIFO = data;
1a000b64:	4b05      	ldr	r3, [pc, #20]	; (1a000b7c <send_buffer_i2s+0xa0>)
1a000b66:	6099      	str	r1, [r3, #8]
1a000b68:	b2d3      	uxtb	r3, r2
1a000b6a:	e7f2      	b.n	1a000b52 <send_buffer_i2s+0x76>
					updatebuff2=EMPTY;
1a000b6c:	4b08      	ldr	r3, [pc, #32]	; (1a000b90 <send_buffer_i2s+0xb4>)
1a000b6e:	2201      	movs	r2, #1
1a000b70:	601a      	str	r2, [r3, #0]
1a000b72:	e7d4      	b.n	1a000b1e <send_buffer_i2s+0x42>
1a000b74:	10003530 	.word	0x10003530
1a000b78:	10003934 	.word	0x10003934
1a000b7c:	400a3000 	.word	0x400a3000
1a000b80:	10003528 	.word	0x10003528
1a000b84:	1000352c 	.word	0x1000352c
1a000b88:	1a00dee4 	.word	0x1a00dee4
1a000b8c:	1a00def4 	.word	0x1a00def4
1a000b90:	10003d34 	.word	0x10003d34
1a000b94:	1a00df04 	.word	0x1a00df04
1a000b98:	10003534 	.word	0x10003534

1a000b9c <control_satus_buffer>:
			}
		 }
	}
}
void control_satus_buffer( void* taskParmPtr )
{
1a000b9c:	b508      	push	{r3, lr}
	uint8_t status;
	status=parse_data(buffer1,BUFFER_SIZE);
1a000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
1a000ba2:	4821      	ldr	r0, [pc, #132]	; (1a000c28 <control_satus_buffer+0x8c>)
1a000ba4:	f7ff feb4 	bl	1a000910 <parse_data>
	updatebuff1=FULL;
1a000ba8:	2300      	movs	r3, #0
1a000baa:	4a20      	ldr	r2, [pc, #128]	; (1a000c2c <control_satus_buffer+0x90>)
1a000bac:	6013      	str	r3, [r2, #0]
	updatebuff2=EMPTY;
1a000bae:	2101      	movs	r1, #1
1a000bb0:	4a1f      	ldr	r2, [pc, #124]	; (1a000c30 <control_satus_buffer+0x94>)
1a000bb2:	6011      	str	r1, [r2, #0]
	flag=0;
1a000bb4:	4a1f      	ldr	r2, [pc, #124]	; (1a000c34 <control_satus_buffer+0x98>)
1a000bb6:	6013      	str	r3, [r2, #0]
	Chip_I2S_Int_TxCmd(SOUND_I2S_PORT, ENABLE, 4);
1a000bb8:	2204      	movs	r2, #4
1a000bba:	481f      	ldr	r0, [pc, #124]	; (1a000c38 <control_satus_buffer+0x9c>)
1a000bbc:	f004 fff9 	bl	1a005bb2 <Chip_I2S_Int_TxCmd>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000bc0:	4b1e      	ldr	r3, [pc, #120]	; (1a000c3c <control_satus_buffer+0xa0>)
1a000bc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
1a000bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a000bca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a000bce:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000bd2:	2160      	movs	r1, #96	; 0x60
1a000bd4:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000bd8:	601a      	str	r2, [r3, #0]
1a000bda:	e010      	b.n	1a000bfe <control_satus_buffer+0x62>
	NVIC_EnableIRQ(I2S1_IRQn);

	 while( 1 )
	{
		 if(updatebuff1==EMPTY){
			 status=parse_data(buffer1,BUFFER_SIZE);
1a000bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
1a000be0:	4811      	ldr	r0, [pc, #68]	; (1a000c28 <control_satus_buffer+0x8c>)
1a000be2:	f7ff fe95 	bl	1a000910 <parse_data>
			 updatebuff1=FULL;
1a000be6:	4b11      	ldr	r3, [pc, #68]	; (1a000c2c <control_satus_buffer+0x90>)
1a000be8:	2200      	movs	r2, #0
1a000bea:	601a      	str	r2, [r3, #0]
1a000bec:	4b13      	ldr	r3, [pc, #76]	; (1a000c3c <control_satus_buffer+0xa0>)
1a000bee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
1a000bf2:	601a      	str	r2, [r3, #0]
1a000bf4:	e007      	b.n	1a000c06 <control_satus_buffer+0x6a>
		 if(updatebuff2==EMPTY){
			 status=parse_data(buffer2,BUFFER_SIZE);
			 updatebuff2=FULL;
			 NVIC_EnableIRQ(I2S1_IRQn);
		 }
		 vTaskDelay( pdMS_TO_TICKS( 500 ) );
1a000bf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000bfa:	f003 f80f 	bl	1a003c1c <vTaskDelay>
		 if(updatebuff1==EMPTY){
1a000bfe:	4b0b      	ldr	r3, [pc, #44]	; (1a000c2c <control_satus_buffer+0x90>)
1a000c00:	681b      	ldr	r3, [r3, #0]
1a000c02:	2b01      	cmp	r3, #1
1a000c04:	d0ea      	beq.n	1a000bdc <control_satus_buffer+0x40>
		 if(updatebuff2==EMPTY){
1a000c06:	4b0a      	ldr	r3, [pc, #40]	; (1a000c30 <control_satus_buffer+0x94>)
1a000c08:	681b      	ldr	r3, [r3, #0]
1a000c0a:	2b01      	cmp	r3, #1
1a000c0c:	d1f3      	bne.n	1a000bf6 <control_satus_buffer+0x5a>
			 status=parse_data(buffer2,BUFFER_SIZE);
1a000c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
1a000c12:	480b      	ldr	r0, [pc, #44]	; (1a000c40 <control_satus_buffer+0xa4>)
1a000c14:	f7ff fe7c 	bl	1a000910 <parse_data>
			 updatebuff2=FULL;
1a000c18:	4b05      	ldr	r3, [pc, #20]	; (1a000c30 <control_satus_buffer+0x94>)
1a000c1a:	2200      	movs	r2, #0
1a000c1c:	601a      	str	r2, [r3, #0]
1a000c1e:	4b07      	ldr	r3, [pc, #28]	; (1a000c3c <control_satus_buffer+0xa0>)
1a000c20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
1a000c24:	601a      	str	r2, [r3, #0]
1a000c26:	e7e6      	b.n	1a000bf6 <control_satus_buffer+0x5a>
1a000c28:	10003934 	.word	0x10003934
1a000c2c:	10003528 	.word	0x10003528
1a000c30:	10003d34 	.word	0x10003d34
1a000c34:	1000352c 	.word	0x1000352c
1a000c38:	400a3000 	.word	0x400a3000
1a000c3c:	e000e100 	.word	0xe000e100
1a000c40:	10003534 	.word	0x10003534

1a000c44 <I2S1_IRQHandler>:

	}
}

void I2S1_IRQHandler(void)
{
1a000c44:	b508      	push	{r3, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000c46:	4b09      	ldr	r3, [pc, #36]	; (1a000c6c <I2S1_IRQHandler+0x28>)
1a000c48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
1a000c4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
1a000c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a000c58:	f3bf 8f6f 	isb	sy
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	NVIC_ClearPendingIRQ( I2S1_IRQn );
	NVIC_DisableIRQ(I2S1_IRQn);
	printf("I2S1_IRQHandler\n");
1a000c5c:	4804      	ldr	r0, [pc, #16]	; (1a000c70 <I2S1_IRQHandler+0x2c>)
1a000c5e:	f007 f811 	bl	1a007c84 <puts>
	flag=1;
1a000c62:	4b04      	ldr	r3, [pc, #16]	; (1a000c74 <I2S1_IRQHandler+0x30>)
1a000c64:	2201      	movs	r2, #1
1a000c66:	601a      	str	r2, [r3, #0]
	//xSemaphoreGiveFromISR( isr_signal_i2s, &xHigherPriorityTaskWoken );
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}
1a000c68:	bd08      	pop	{r3, pc}
1a000c6a:	bf00      	nop
1a000c6c:	e000e100 	.word	0xe000e100
1a000c70:	1a00ded4 	.word	0x1a00ded4
1a000c74:	1000352c 	.word	0x1000352c

1a000c78 <initialise_monitor_handles>:
}
1a000c78:	4770      	bx	lr
1a000c7a:	Address 0x000000001a000c7a is out of bounds.


1a000c7c <Reset_Handler>:
void Reset_Handler(void) {
1a000c7c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000c7e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000c80:	4b19      	ldr	r3, [pc, #100]	; (1a000ce8 <Reset_Handler+0x6c>)
1a000c82:	4a1a      	ldr	r2, [pc, #104]	; (1a000cec <Reset_Handler+0x70>)
1a000c84:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000c86:	3304      	adds	r3, #4
1a000c88:	4a19      	ldr	r2, [pc, #100]	; (1a000cf0 <Reset_Handler+0x74>)
1a000c8a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c8c:	2300      	movs	r3, #0
1a000c8e:	e005      	b.n	1a000c9c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000c90:	4a18      	ldr	r2, [pc, #96]	; (1a000cf4 <Reset_Handler+0x78>)
1a000c92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c9a:	3301      	adds	r3, #1
1a000c9c:	2b07      	cmp	r3, #7
1a000c9e:	d9f7      	bls.n	1a000c90 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000ca0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000ca2:	4b15      	ldr	r3, [pc, #84]	; (1a000cf8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000ca4:	e007      	b.n	1a000cb6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000ca6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000caa:	689a      	ldr	r2, [r3, #8]
1a000cac:	6859      	ldr	r1, [r3, #4]
1a000cae:	6818      	ldr	r0, [r3, #0]
1a000cb0:	f7ff fa6b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000cb4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000cb6:	4a11      	ldr	r2, [pc, #68]	; (1a000cfc <Reset_Handler+0x80>)
1a000cb8:	4293      	cmp	r3, r2
1a000cba:	d3f4      	bcc.n	1a000ca6 <Reset_Handler+0x2a>
1a000cbc:	e006      	b.n	1a000ccc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000cbe:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000cc0:	6859      	ldr	r1, [r3, #4]
1a000cc2:	f854 0b08 	ldr.w	r0, [r4], #8
1a000cc6:	f7ff fa6f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000cca:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000ccc:	4a0c      	ldr	r2, [pc, #48]	; (1a000d00 <Reset_Handler+0x84>)
1a000cce:	4293      	cmp	r3, r2
1a000cd0:	d3f5      	bcc.n	1a000cbe <Reset_Handler+0x42>
    SystemInit();
1a000cd2:	f004 ff83 	bl	1a005bdc <SystemInit>
    __libc_init_array();
1a000cd6:	f006 fb99 	bl	1a00740c <__libc_init_array>
    initialise_monitor_handles();
1a000cda:	f7ff ffcd 	bl	1a000c78 <initialise_monitor_handles>
    main();
1a000cde:	f7ff feb9 	bl	1a000a54 <main>
        __asm__ volatile("wfi");
1a000ce2:	bf30      	wfi
1a000ce4:	e7fd      	b.n	1a000ce2 <Reset_Handler+0x66>
1a000ce6:	bf00      	nop
1a000ce8:	40053100 	.word	0x40053100
1a000cec:	10df1000 	.word	0x10df1000
1a000cf0:	01dff7ff 	.word	0x01dff7ff
1a000cf4:	e000e280 	.word	0xe000e280
1a000cf8:	1a000114 	.word	0x1a000114
1a000cfc:	1a000150 	.word	0x1a000150
1a000d00:	1a000178 	.word	0x1a000178

1a000d04 <_fini>:
void _fini(void) {}
1a000d04:	4770      	bx	lr

1a000d06 <_init>:
void _init(void) {}
1a000d06:	4770      	bx	lr

1a000d08 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000d08:	2309      	movs	r3, #9
1a000d0a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d10:	4770      	bx	lr

1a000d12 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000d12:	2358      	movs	r3, #88	; 0x58
1a000d14:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d1a:	4770      	bx	lr

1a000d1c <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000d1c:	2902      	cmp	r1, #2
1a000d1e:	d904      	bls.n	1a000d2a <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000d20:	2309      	movs	r3, #9
1a000d22:	6003      	str	r3, [r0, #0]
       return -1;
1a000d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d28:	4770      	bx	lr
       return 1;
1a000d2a:	2001      	movs	r0, #1
   }
}
1a000d2c:	4770      	bx	lr

1a000d2e <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000d2e:	2358      	movs	r3, #88	; 0x58
1a000d30:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d36:	4770      	bx	lr

1a000d38 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000d38:	2902      	cmp	r1, #2
1a000d3a:	d81f      	bhi.n	1a000d7c <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000d40:	461d      	mov	r5, r3
1a000d42:	4617      	mov	r7, r2
1a000d44:	4606      	mov	r6, r0
  size_t i = 0;
1a000d46:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000d48:	42ac      	cmp	r4, r5
1a000d4a:	d211      	bcs.n	1a000d70 <_read_r+0x38>
         int c = __stdio_getchar();
1a000d4c:	f004 f831 	bl	1a004db2 <__stdio_getchar>
         if( c != -1 ){
1a000d50:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000d54:	d0f8      	beq.n	1a000d48 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000d56:	f104 0801 	add.w	r8, r4, #1
1a000d5a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000d5c:	280d      	cmp	r0, #13
1a000d5e:	d003      	beq.n	1a000d68 <_read_r+0x30>
1a000d60:	280a      	cmp	r0, #10
1a000d62:	d001      	beq.n	1a000d68 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000d64:	4644      	mov	r4, r8
1a000d66:	e7ef      	b.n	1a000d48 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000d68:	f004 f823 	bl	1a004db2 <__stdio_getchar>
               return i;
1a000d6c:	4640      	mov	r0, r8
1a000d6e:	e003      	b.n	1a000d78 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000d70:	2313      	movs	r3, #19
1a000d72:	6033      	str	r3, [r6, #0]
      return -1;
1a000d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000d7c:	2313      	movs	r3, #19
1a000d7e:	6003      	str	r3, [r0, #0]
      return -1;
1a000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000d84:	4770      	bx	lr

1a000d86 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000d86:	2902      	cmp	r1, #2
1a000d88:	d80c      	bhi.n	1a000da4 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000d8a:	b570      	push	{r4, r5, r6, lr}
1a000d8c:	461d      	mov	r5, r3
1a000d8e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000d90:	2400      	movs	r4, #0
1a000d92:	42ac      	cmp	r4, r5
1a000d94:	d204      	bcs.n	1a000da0 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000d96:	5d30      	ldrb	r0, [r6, r4]
1a000d98:	f004 f806 	bl	1a004da8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000d9c:	3401      	adds	r4, #1
1a000d9e:	e7f8      	b.n	1a000d92 <_write_r+0xc>
       return n;
1a000da0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000da2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000da4:	2313      	movs	r3, #19
1a000da6:	6003      	str	r3, [r0, #0]
       return -1;
1a000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000dac:	4770      	bx	lr
1a000dae:	Address 0x000000001a000dae is out of bounds.


1a000db0 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000db0:	4b05      	ldr	r3, [pc, #20]	; (1a000dc8 <_sbrk_r+0x18>)
1a000db2:	681b      	ldr	r3, [r3, #0]
1a000db4:	b123      	cbz	r3, 1a000dc0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000db6:	4b04      	ldr	r3, [pc, #16]	; (1a000dc8 <_sbrk_r+0x18>)
1a000db8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000dba:	4401      	add	r1, r0
1a000dbc:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000dbe:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000dc0:	4b01      	ldr	r3, [pc, #4]	; (1a000dc8 <_sbrk_r+0x18>)
1a000dc2:	4a02      	ldr	r2, [pc, #8]	; (1a000dcc <_sbrk_r+0x1c>)
1a000dc4:	601a      	str	r2, [r3, #0]
1a000dc6:	e7f6      	b.n	1a000db6 <_sbrk_r+0x6>
1a000dc8:	10000c9c 	.word	0x10000c9c
1a000dcc:	10003d64 	.word	0x10003d64

1a000dd0 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a000dd0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a000dd2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000dd4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a000dd8:	4770      	bx	lr

1a000dda <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a000dda:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a000ddc:	7883      	ldrb	r3, [r0, #2]
1a000dde:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a000de2:	7843      	ldrb	r3, [r0, #1]
1a000de4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a000de8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000dea:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a000dee:	4770      	bx	lr

1a000df0 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
1a000df0:	b430      	push	{r4, r5}
	QWORD rv;

	rv = ptr[7];
1a000df2:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
1a000df4:	7984      	ldrb	r4, [r0, #6]
1a000df6:	ea44 2102 	orr.w	r1, r4, r2, lsl #8
	rv = rv << 8 | ptr[5];
1a000dfa:	7944      	ldrb	r4, [r0, #5]
1a000dfc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[4];
1a000e00:	0e0b      	lsrs	r3, r1, #24
1a000e02:	7904      	ldrb	r4, [r0, #4]
1a000e04:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[3];
1a000e08:	021b      	lsls	r3, r3, #8
1a000e0a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
1a000e0e:	78c4      	ldrb	r4, [r0, #3]
1a000e10:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[2];
1a000e14:	021b      	lsls	r3, r3, #8
1a000e16:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
1a000e1a:	7884      	ldrb	r4, [r0, #2]
1a000e1c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[1];
1a000e20:	021b      	lsls	r3, r3, #8
1a000e22:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
1a000e26:	7844      	ldrb	r4, [r0, #1]
1a000e28:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[0];
1a000e2c:	021b      	lsls	r3, r3, #8
1a000e2e:	7804      	ldrb	r4, [r0, #0]
	return rv;
}
1a000e30:	ea44 2001 	orr.w	r0, r4, r1, lsl #8
1a000e34:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
1a000e38:	bc30      	pop	{r4, r5}
1a000e3a:	4770      	bx	lr

1a000e3c <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000e3c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a000e3e:	0a09      	lsrs	r1, r1, #8
1a000e40:	7041      	strb	r1, [r0, #1]
}
1a000e42:	4770      	bx	lr

1a000e44 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000e44:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e46:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a000e4a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e4c:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a000e50:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a000e52:	0e09      	lsrs	r1, r1, #24
1a000e54:	70c1      	strb	r1, [r0, #3]
}
1a000e56:	4770      	bx	lr

1a000e58 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000e58:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e5a:	f3c2 2107 	ubfx	r1, r2, #8, #8
1a000e5e:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e60:	f3c2 4107 	ubfx	r1, r2, #16, #8
1a000e64:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e66:	0e12      	lsrs	r2, r2, #24
1a000e68:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e6a:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000e70:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
1a000e72:	f3c3 4207 	ubfx	r2, r3, #16, #8
1a000e76:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
1a000e78:	0e1b      	lsrs	r3, r3, #24
1a000e7a:	71c3      	strb	r3, [r0, #7]
}
1a000e7c:	4770      	bx	lr

1a000e7e <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
1a000e7e:	4613      	mov	r3, r2
1a000e80:	b12a      	cbz	r2, 1a000e8e <mem_cpy+0x10>
		do {
			*d++ = *s++;
1a000e82:	f811 2b01 	ldrb.w	r2, [r1], #1
1a000e86:	f800 2b01 	strb.w	r2, [r0], #1
		} while (--cnt);
1a000e8a:	3b01      	subs	r3, #1
1a000e8c:	d1f9      	bne.n	1a000e82 <mem_cpy+0x4>
	}
}
1a000e8e:	4770      	bx	lr

1a000e90 <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
1a000e90:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
1a000e94:	3a01      	subs	r2, #1
1a000e96:	d1fb      	bne.n	1a000e90 <mem_set>
}
1a000e98:	4770      	bx	lr

1a000e9a <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
1a000e9a:	b410      	push	{r4}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000e9c:	f810 3b01 	ldrb.w	r3, [r0], #1
1a000ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
1a000ea4:	1b1b      	subs	r3, r3, r4
	} while (--cnt && r == 0);
1a000ea6:	3a01      	subs	r2, #1
1a000ea8:	d001      	beq.n	1a000eae <mem_cmp+0x14>
1a000eaa:	2b00      	cmp	r3, #0
1a000eac:	d0f6      	beq.n	1a000e9c <mem_cmp+0x2>

	return r;
}
1a000eae:	4618      	mov	r0, r3
1a000eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000eb4:	4770      	bx	lr

1a000eb6 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
1a000eb6:	7803      	ldrb	r3, [r0, #0]
1a000eb8:	b11b      	cbz	r3, 1a000ec2 <chk_chr+0xc>
1a000eba:	428b      	cmp	r3, r1
1a000ebc:	d001      	beq.n	1a000ec2 <chk_chr+0xc>
1a000ebe:	3001      	adds	r0, #1
1a000ec0:	e7f9      	b.n	1a000eb6 <chk_chr>
	return *str;
}
1a000ec2:	4618      	mov	r0, r3
1a000ec4:	4770      	bx	lr

1a000ec6 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a000ec6:	2000      	movs	r0, #0
1a000ec8:	4770      	bx	lr
1a000eca:	Address 0x000000001a000eca is out of bounds.


1a000ecc <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
1a000ecc:	b430      	push	{r4, r5}
1a000ece:	4605      	mov	r5, r0

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get a unit */
1a000ed0:	6803      	ldr	r3, [r0, #0]
1a000ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
1a000ed6:	4610      	mov	r0, r2
	if (uc & 0x80) {	/* Multiple byte code? */
1a000ed8:	f012 0f80 	tst.w	r2, #128	; 0x80
1a000edc:	d102      	bne.n	1a000ee4 <tchar2uni+0x18>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
1a000ede:	602b      	str	r3, [r5, #0]
	return uc;
}
1a000ee0:	bc30      	pop	{r4, r5}
1a000ee2:	4770      	bx	lr
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
1a000ee4:	f002 01e0 	and.w	r1, r2, #224	; 0xe0
1a000ee8:	29c0      	cmp	r1, #192	; 0xc0
1a000eea:	d00b      	beq.n	1a000f04 <tchar2uni+0x38>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
1a000eec:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
1a000ef0:	29e0      	cmp	r1, #224	; 0xe0
1a000ef2:	d034      	beq.n	1a000f5e <tchar2uni+0x92>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
1a000ef4:	f002 01f8 	and.w	r1, r2, #248	; 0xf8
1a000ef8:	29f0      	cmp	r1, #240	; 0xf0
1a000efa:	d136      	bne.n	1a000f6a <tchar2uni+0x9e>
					uc &= 0x07; nf = 3;
1a000efc:	f002 0007 	and.w	r0, r2, #7
1a000f00:	2103      	movs	r1, #3
1a000f02:	e002      	b.n	1a000f0a <tchar2uni+0x3e>
			uc &= 0x1F; nf = 1;
1a000f04:	f002 001f 	and.w	r0, r2, #31
1a000f08:	2101      	movs	r1, #1
			b = (BYTE)*p++;
1a000f0a:	461a      	mov	r2, r3
1a000f0c:	f812 3b01 	ldrb.w	r3, [r2], #1
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000f10:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
1a000f14:	2c80      	cmp	r4, #128	; 0x80
1a000f16:	d12b      	bne.n	1a000f70 <tchar2uni+0xa4>
			uc = uc << 6 | (b & 0x3F);
1a000f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a000f1c:	ea43 1080 	orr.w	r0, r3, r0, lsl #6
			b = (BYTE)*p++;
1a000f20:	4613      	mov	r3, r2
		} while (--nf != 0);
1a000f22:	3901      	subs	r1, #1
1a000f24:	d1f1      	bne.n	1a000f0a <tchar2uni+0x3e>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000f26:	287f      	cmp	r0, #127	; 0x7f
1a000f28:	d925      	bls.n	1a000f76 <tchar2uni+0xaa>
1a000f2a:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
1a000f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a000f32:	d323      	bcc.n	1a000f7c <tchar2uni+0xb0>
1a000f34:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
1a000f38:	d223      	bcs.n	1a000f82 <tchar2uni+0xb6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
1a000f3a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a000f3e:	d312      	bcc.n	1a000f66 <tchar2uni+0x9a>
1a000f40:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
1a000f44:	4910      	ldr	r1, [pc, #64]	; (1a000f88 <tchar2uni+0xbc>)
1a000f46:	ea01 1183 	and.w	r1, r1, r3, lsl #6
1a000f4a:	f3c0 0309 	ubfx	r3, r0, #0, #10
1a000f4e:	ea41 0003 	orr.w	r0, r1, r3
1a000f52:	f040 4058 	orr.w	r0, r0, #3623878656	; 0xd8000000
1a000f56:	f440 405c 	orr.w	r0, r0, #56320	; 0xdc00
			b = (BYTE)*p++;
1a000f5a:	4613      	mov	r3, r2
1a000f5c:	e7bf      	b.n	1a000ede <tchar2uni+0x12>
				uc &= 0x0F; nf = 2;
1a000f5e:	f002 000f 	and.w	r0, r2, #15
1a000f62:	2102      	movs	r1, #2
1a000f64:	e7d1      	b.n	1a000f0a <tchar2uni+0x3e>
			b = (BYTE)*p++;
1a000f66:	4613      	mov	r3, r2
1a000f68:	e7b9      	b.n	1a000ede <tchar2uni+0x12>
					return 0xFFFFFFFF;
1a000f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f6e:	e7b7      	b.n	1a000ee0 <tchar2uni+0x14>
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f74:	e7b4      	b.n	1a000ee0 <tchar2uni+0x14>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f7a:	e7b1      	b.n	1a000ee0 <tchar2uni+0x14>
1a000f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f80:	e7ae      	b.n	1a000ee0 <tchar2uni+0x14>
1a000f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f86:	e7ab      	b.n	1a000ee0 <tchar2uni+0x14>
1a000f88:	03ff0000 	.word	0x03ff0000

1a000f8c <clst2sect>:
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
1a000f8c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000f8e:	69c3      	ldr	r3, [r0, #28]
1a000f90:	3b02      	subs	r3, #2
1a000f92:	428b      	cmp	r3, r1
1a000f94:	d904      	bls.n	1a000fa0 <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
1a000f96:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000f98:	8940      	ldrh	r0, [r0, #10]
1a000f9a:	fb01 3000 	mla	r0, r1, r0, r3
1a000f9e:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000fa0:	2000      	movs	r0, #0
}
1a000fa2:	4770      	bx	lr

1a000fa4 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
1a000fa4:	b570      	push	{r4, r5, r6, lr}
1a000fa6:	4606      	mov	r6, r0
1a000fa8:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a000faa:	f101 001a 	add.w	r0, r1, #26
1a000fae:	f7ff ff0f 	bl	1a000dd0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
1a000fb2:	7833      	ldrb	r3, [r6, #0]
1a000fb4:	2b03      	cmp	r3, #3
1a000fb6:	d000      	beq.n	1a000fba <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
1a000fb8:	bd70      	pop	{r4, r5, r6, pc}
1a000fba:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a000fbc:	f105 0014 	add.w	r0, r5, #20
1a000fc0:	f7ff ff06 	bl	1a000dd0 <ld_word>
1a000fc4:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
1a000fc8:	e7f6      	b.n	1a000fb8 <ld_clust+0x14>

1a000fca <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a000fca:	b570      	push	{r4, r5, r6, lr}
1a000fcc:	4606      	mov	r6, r0
1a000fce:	460c      	mov	r4, r1
1a000fd0:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a000fd2:	b291      	uxth	r1, r2
1a000fd4:	f104 001a 	add.w	r0, r4, #26
1a000fd8:	f7ff ff30 	bl	1a000e3c <st_word>
	if (fs->fs_type == FS_FAT32) {
1a000fdc:	7833      	ldrb	r3, [r6, #0]
1a000fde:	2b03      	cmp	r3, #3
1a000fe0:	d000      	beq.n	1a000fe4 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
1a000fe2:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a000fe4:	0c29      	lsrs	r1, r5, #16
1a000fe6:	f104 0014 	add.w	r0, r4, #20
1a000fea:	f7ff ff27 	bl	1a000e3c <st_word>
}
1a000fee:	e7f8      	b.n	1a000fe2 <st_clust+0x18>

1a000ff0 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
1a000ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000ff4:	4680      	mov	r8, r0
1a000ff6:	460f      	mov	r7, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000ff8:	f101 001a 	add.w	r0, r1, #26
1a000ffc:	f7ff fee8 	bl	1a000dd0 <ld_word>
1a001000:	bb50      	cbnz	r0, 1a001058 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1a001002:	783d      	ldrb	r5, [r7, #0]
1a001004:	f025 0540 	bic.w	r5, r5, #64	; 0x40
1a001008:	3d01      	subs	r5, #1
1a00100a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a00100e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a001012:	2601      	movs	r6, #1
1a001014:	2400      	movs	r4, #0
1a001016:	e004      	b.n	1a001022 <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a001018:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a00101c:	4298      	cmp	r0, r3
1a00101e:	d120      	bne.n	1a001062 <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a001020:	3401      	adds	r4, #1
1a001022:	2c0c      	cmp	r4, #12
1a001024:	d80d      	bhi.n	1a001042 <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a001026:	4b12      	ldr	r3, [pc, #72]	; (1a001070 <pick_lfn+0x80>)
1a001028:	5d18      	ldrb	r0, [r3, r4]
1a00102a:	4438      	add	r0, r7
1a00102c:	f7ff fed0 	bl	1a000dd0 <ld_word>
		if (wc != 0) {
1a001030:	2e00      	cmp	r6, #0
1a001032:	d0f1      	beq.n	1a001018 <pick_lfn+0x28>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a001034:	2dfe      	cmp	r5, #254	; 0xfe
1a001036:	d812      	bhi.n	1a00105e <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
1a001038:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
1a00103c:	4606      	mov	r6, r0
1a00103e:	3501      	adds	r5, #1
1a001040:	e7ee      	b.n	1a001020 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1a001042:	783b      	ldrb	r3, [r7, #0]
1a001044:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001048:	d00d      	beq.n	1a001066 <pick_lfn+0x76>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a00104a:	2dfe      	cmp	r5, #254	; 0xfe
1a00104c:	d80d      	bhi.n	1a00106a <pick_lfn+0x7a>
		lfnbuf[i] = 0;
1a00104e:	2300      	movs	r3, #0
1a001050:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
1a001054:	2001      	movs	r0, #1
1a001056:	e000      	b.n	1a00105a <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a001058:	2000      	movs	r0, #0
}
1a00105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a00105e:	2000      	movs	r0, #0
1a001060:	e7fb      	b.n	1a00105a <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a001062:	2000      	movs	r0, #0
1a001064:	e7f9      	b.n	1a00105a <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
1a001066:	2001      	movs	r0, #1
1a001068:	e7f7      	b.n	1a00105a <pick_lfn+0x6a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a00106a:	2000      	movs	r0, #0
1a00106c:	e7f5      	b.n	1a00105a <pick_lfn+0x6a>
1a00106e:	bf00      	nop
1a001070:	1a00dfac 	.word	0x1a00dfac

1a001074 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
1a001074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001078:	4680      	mov	r8, r0
1a00107a:	460f      	mov	r7, r1
1a00107c:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
1a00107e:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1a001080:	230f      	movs	r3, #15
1a001082:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
1a001084:	2400      	movs	r4, #0
1a001086:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
1a001088:	4621      	mov	r1, r4
1a00108a:	f107 001a 	add.w	r0, r7, #26
1a00108e:	f7ff fed5 	bl	1a000e3c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1a001092:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
1a001096:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a00109a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
1a00109e:	4625      	mov	r5, r4
1a0010a0:	e002      	b.n	1a0010a8 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
1a0010a2:	3401      	adds	r4, #1
1a0010a4:	2c0c      	cmp	r4, #12
1a0010a6:	d811      	bhi.n	1a0010cc <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1a0010a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0010ac:	429d      	cmp	r5, r3
1a0010ae:	d002      	beq.n	1a0010b6 <put_lfn+0x42>
1a0010b0:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a0010b4:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
1a0010b6:	4b0c      	ldr	r3, [pc, #48]	; (1a0010e8 <put_lfn+0x74>)
1a0010b8:	5d18      	ldrb	r0, [r3, r4]
1a0010ba:	4629      	mov	r1, r5
1a0010bc:	4438      	add	r0, r7
1a0010be:	f7ff febd 	bl	1a000e3c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1a0010c2:	2d00      	cmp	r5, #0
1a0010c4:	d1ed      	bne.n	1a0010a2 <put_lfn+0x2e>
1a0010c6:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a0010ca:	e7ea      	b.n	1a0010a2 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1a0010cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0010d0:	429d      	cmp	r5, r3
1a0010d2:	d002      	beq.n	1a0010da <put_lfn+0x66>
1a0010d4:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
1a0010d8:	b90b      	cbnz	r3, 1a0010de <put_lfn+0x6a>
1a0010da:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1a0010de:	f887 9000 	strb.w	r9, [r7]
}
1a0010e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0010e6:	bf00      	nop
1a0010e8:	1a00dfac 	.word	0x1a00dfac

1a0010ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
1a0010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0010ee:	b083      	sub	sp, #12
1a0010f0:	4606      	mov	r6, r0
1a0010f2:	4615      	mov	r5, r2
1a0010f4:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
1a0010f6:	220b      	movs	r2, #11
1a0010f8:	f7ff fec1 	bl	1a000e7e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
1a0010fc:	2c05      	cmp	r4, #5
1a0010fe:	d811      	bhi.n	1a001124 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
1a001100:	2707      	movs	r7, #7
1a001102:	e01f      	b.n	1a001144 <gen_numname+0x58>
1a001104:	3201      	adds	r2, #1
1a001106:	2a0f      	cmp	r2, #15
1a001108:	d80c      	bhi.n	1a001124 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
1a00110a:	f003 0101 	and.w	r1, r3, #1
1a00110e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
1a001112:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
1a001114:	f414 3f80 	tst.w	r4, #65536	; 0x10000
1a001118:	d0f4      	beq.n	1a001104 <gen_numname+0x18>
1a00111a:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
1a00111e:	f084 0421 	eor.w	r4, r4, #33	; 0x21
1a001122:	e7ef      	b.n	1a001104 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC as hash value */
1a001124:	882b      	ldrh	r3, [r5, #0]
1a001126:	2b00      	cmp	r3, #0
1a001128:	d0ea      	beq.n	1a001100 <gen_numname+0x14>
			wc = *lfn++;
1a00112a:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
1a00112c:	2200      	movs	r2, #0
1a00112e:	e7ea      	b.n	1a001106 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
1a001130:	1e7d      	subs	r5, r7, #1
1a001132:	aa02      	add	r2, sp, #8
1a001134:	443a      	add	r2, r7
1a001136:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
1a00113a:	0923      	lsrs	r3, r4, #4
	} while (seq);
1a00113c:	2c0f      	cmp	r4, #15
1a00113e:	d90a      	bls.n	1a001156 <gen_numname+0x6a>
		ns[i--] = c;
1a001140:	462f      	mov	r7, r5
		seq /= 16;
1a001142:	461c      	mov	r4, r3
		c = (BYTE)((seq % 16) + '0');
1a001144:	f004 020f 	and.w	r2, r4, #15
1a001148:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
1a00114c:	2b39      	cmp	r3, #57	; 0x39
1a00114e:	d9ef      	bls.n	1a001130 <gen_numname+0x44>
1a001150:	f102 0337 	add.w	r3, r2, #55	; 0x37
1a001154:	e7ec      	b.n	1a001130 <gen_numname+0x44>
	ns[i] = '~';
1a001156:	227e      	movs	r2, #126	; 0x7e
1a001158:	ab02      	add	r3, sp, #8
1a00115a:	442b      	add	r3, r5
1a00115c:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
1a001160:	2400      	movs	r4, #0
1a001162:	e000      	b.n	1a001166 <gen_numname+0x7a>
1a001164:	3401      	adds	r4, #1
1a001166:	42ac      	cmp	r4, r5
1a001168:	d211      	bcs.n	1a00118e <gen_numname+0xa2>
1a00116a:	5d30      	ldrb	r0, [r6, r4]
1a00116c:	2820      	cmp	r0, #32
1a00116e:	d00e      	beq.n	1a00118e <gen_numname+0xa2>
		if (dbc_1st(dst[j])) {
1a001170:	f7ff fea9 	bl	1a000ec6 <dbc_1st>
1a001174:	2800      	cmp	r0, #0
1a001176:	d0f5      	beq.n	1a001164 <gen_numname+0x78>
			if (j == i - 1) break;
1a001178:	1ebb      	subs	r3, r7, #2
1a00117a:	42a3      	cmp	r3, r4
1a00117c:	d007      	beq.n	1a00118e <gen_numname+0xa2>
			j++;
1a00117e:	3401      	adds	r4, #1
1a001180:	e7f0      	b.n	1a001164 <gen_numname+0x78>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a001182:	2220      	movs	r2, #32
1a001184:	1c63      	adds	r3, r4, #1
1a001186:	5532      	strb	r2, [r6, r4]
	} while (j < 8);
1a001188:	2b07      	cmp	r3, #7
1a00118a:	d808      	bhi.n	1a00119e <gen_numname+0xb2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a00118c:	461c      	mov	r4, r3
1a00118e:	2d07      	cmp	r5, #7
1a001190:	d8f7      	bhi.n	1a001182 <gen_numname+0x96>
1a001192:	ab02      	add	r3, sp, #8
1a001194:	442b      	add	r3, r5
1a001196:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a00119a:	3501      	adds	r5, #1
1a00119c:	e7f2      	b.n	1a001184 <gen_numname+0x98>
}
1a00119e:	b003      	add	sp, #12
1a0011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0011a2 <sum_sfn>:
static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
1a0011a2:	210b      	movs	r1, #11
	BYTE sum = 0;
1a0011a4:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
1a0011a6:	01d3      	lsls	r3, r2, #7
1a0011a8:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
1a0011ac:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0011b0:	fa52 f383 	uxtab	r3, r2, r3
1a0011b4:	b2da      	uxtb	r2, r3
	} while (--n);
1a0011b6:	3901      	subs	r1, #1
1a0011b8:	d1f5      	bne.n	1a0011a6 <sum_sfn+0x4>
	return sum;
}
1a0011ba:	4610      	mov	r0, r2
1a0011bc:	4770      	bx	lr

1a0011be <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
1a0011be:	b430      	push	{r4, r5}
1a0011c0:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
1a0011c2:	7841      	ldrb	r1, [r0, #1]
1a0011c4:	3101      	adds	r1, #1
1a0011c6:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
1a0011c8:	2000      	movs	r0, #0
1a0011ca:	4603      	mov	r3, r0
1a0011cc:	e007      	b.n	1a0011de <xdir_sum+0x20>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1a0011ce:	0842      	lsrs	r2, r0, #1
1a0011d0:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
1a0011d4:	5cec      	ldrb	r4, [r5, r3]
1a0011d6:	fa14 f282 	uxtah	r2, r4, r2
1a0011da:	b290      	uxth	r0, r2
	for (i = sum = 0; i < szblk; i++) {
1a0011dc:	3301      	adds	r3, #1
1a0011de:	428b      	cmp	r3, r1
1a0011e0:	d203      	bcs.n	1a0011ea <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
1a0011e2:	2b02      	cmp	r3, #2
1a0011e4:	d1f3      	bne.n	1a0011ce <xdir_sum+0x10>
			i++;
1a0011e6:	3301      	adds	r3, #1
1a0011e8:	e7f8      	b.n	1a0011dc <xdir_sum+0x1e>
		}
	}
	return sum;
}
1a0011ea:	bc30      	pop	{r4, r5}
1a0011ec:	4770      	bx	lr

1a0011ee <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
1a0011ee:	b538      	push	{r3, r4, r5, lr}
1a0011f0:	4605      	mov	r5, r0
1a0011f2:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
1a0011f4:	6900      	ldr	r0, [r0, #16]
1a0011f6:	3034      	adds	r0, #52	; 0x34
1a0011f8:	f7ff fdef 	bl	1a000dda <ld_dword>
1a0011fc:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
1a0011fe:	6928      	ldr	r0, [r5, #16]
1a001200:	3038      	adds	r0, #56	; 0x38
1a001202:	f7ff fdf5 	bl	1a000df0 <ld_qword>
1a001206:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
1a00120a:	692b      	ldr	r3, [r5, #16]
1a00120c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a001210:	f003 0302 	and.w	r3, r3, #2
1a001214:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
1a001216:	2300      	movs	r3, #0
1a001218:	61e3      	str	r3, [r4, #28]
}
1a00121a:	bd38      	pop	{r3, r4, r5, pc}

1a00121c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
1a00121c:	b4f0      	push	{r4, r5, r6, r7}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
1a00121e:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
1a001220:	2f00      	cmp	r7, #0
1a001222:	d04e      	beq.n	1a0012c2 <get_ldnumber+0xa6>
	tt = tp = *path;
1a001224:	4639      	mov	r1, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
1a001226:	460b      	mov	r3, r1
1a001228:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00122c:	2a1f      	cmp	r2, #31
1a00122e:	d902      	bls.n	1a001236 <get_ldnumber+0x1a>
1a001230:	4619      	mov	r1, r3
1a001232:	2a3a      	cmp	r2, #58	; 0x3a
1a001234:	d1f7      	bne.n	1a001226 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
1a001236:	2a3a      	cmp	r2, #58	; 0x3a
1a001238:	d004      	beq.n	1a001244 <get_ldnumber+0x28>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
1a00123a:	f04f 0c00 	mov.w	ip, #0
}
1a00123e:	4660      	mov	r0, ip
1a001240:	bcf0      	pop	{r4, r5, r6, r7}
1a001242:	4770      	bx	lr
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
1a001244:	f897 c000 	ldrb.w	ip, [r7]
1a001248:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
1a00124c:	b2d2      	uxtb	r2, r2
1a00124e:	2a09      	cmp	r2, #9
1a001250:	d808      	bhi.n	1a001264 <get_ldnumber+0x48>
1a001252:	1cba      	adds	r2, r7, #2
1a001254:	429a      	cmp	r2, r3
1a001256:	d002      	beq.n	1a00125e <get_ldnumber+0x42>
1a001258:	f04f 0c00 	mov.w	ip, #0
1a00125c:	e004      	b.n	1a001268 <get_ldnumber+0x4c>
			i = (int)*tp - '0';	/* Get the LD number */
1a00125e:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
1a001262:	e026      	b.n	1a0012b2 <get_ldnumber+0x96>
1a001264:	f04f 0c00 	mov.w	ip, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
1a001268:	4a17      	ldr	r2, [pc, #92]	; (1a0012c8 <get_ldnumber+0xac>)
1a00126a:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
1a00126e:	463d      	mov	r5, r7
1a001270:	e003      	b.n	1a00127a <get_ldnumber+0x5e>
				} while (c && (TCHAR)c == tc);
1a001272:	b1b2      	cbz	r2, 1a0012a2 <get_ldnumber+0x86>
					c = *sp++; tc = *tp++;
1a001274:	4635      	mov	r5, r6
				} while (c && (TCHAR)c == tc);
1a001276:	4294      	cmp	r4, r2
1a001278:	d113      	bne.n	1a0012a2 <get_ldnumber+0x86>
					c = *sp++; tc = *tp++;
1a00127a:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00127e:	462e      	mov	r6, r5
1a001280:	f816 4b01 	ldrb.w	r4, [r6], #1
					if (IsLower(c)) c -= 0x20;
1a001284:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
1a001288:	b2ed      	uxtb	r5, r5
1a00128a:	2d19      	cmp	r5, #25
1a00128c:	d801      	bhi.n	1a001292 <get_ldnumber+0x76>
1a00128e:	3a20      	subs	r2, #32
1a001290:	b2d2      	uxtb	r2, r2
					if (IsLower(tc)) tc -= 0x20;
1a001292:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
1a001296:	b2ed      	uxtb	r5, r5
1a001298:	2d19      	cmp	r5, #25
1a00129a:	d8ea      	bhi.n	1a001272 <get_ldnumber+0x56>
1a00129c:	3c20      	subs	r4, #32
1a00129e:	b2e4      	uxtb	r4, r4
1a0012a0:	e7e7      	b.n	1a001272 <get_ldnumber+0x56>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
1a0012a2:	b90a      	cbnz	r2, 1a0012a8 <get_ldnumber+0x8c>
1a0012a4:	42b3      	cmp	r3, r6
1a0012a6:	d004      	beq.n	1a0012b2 <get_ldnumber+0x96>
1a0012a8:	f10c 0c01 	add.w	ip, ip, #1
1a0012ac:	f1bc 0f01 	cmp.w	ip, #1
1a0012b0:	ddda      	ble.n	1a001268 <get_ldnumber+0x4c>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
1a0012b2:	f1bc 0f01 	cmp.w	ip, #1
1a0012b6:	dd02      	ble.n	1a0012be <get_ldnumber+0xa2>
	int i, vol = -1;
1a0012b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
		return vol;
1a0012bc:	e7bf      	b.n	1a00123e <get_ldnumber+0x22>
			*path = tt;		/* Snip the drive prefix off */
1a0012be:	6003      	str	r3, [r0, #0]
1a0012c0:	e7bd      	b.n	1a00123e <get_ldnumber+0x22>
	if (!tp) return vol;	/* Invalid path name? */
1a0012c2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a0012c6:	e7ba      	b.n	1a00123e <get_ldnumber+0x22>
1a0012c8:	1a00dfbc 	.word	0x1a00dfbc

1a0012cc <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
1a0012cc:	b538      	push	{r3, r4, r5, lr}
1a0012ce:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
1a0012d0:	b1a8      	cbz	r0, 1a0012fe <validate+0x32>
1a0012d2:	4604      	mov	r4, r0
1a0012d4:	6803      	ldr	r3, [r0, #0]
1a0012d6:	b1ab      	cbz	r3, 1a001304 <validate+0x38>
1a0012d8:	781a      	ldrb	r2, [r3, #0]
1a0012da:	b1aa      	cbz	r2, 1a001308 <validate+0x3c>
1a0012dc:	8881      	ldrh	r1, [r0, #4]
1a0012de:	88da      	ldrh	r2, [r3, #6]
1a0012e0:	4291      	cmp	r1, r2
1a0012e2:	d003      	beq.n	1a0012ec <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
1a0012e4:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a0012e6:	2300      	movs	r3, #0
1a0012e8:	602b      	str	r3, [r5, #0]
	return res;
}
1a0012ea:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
1a0012ec:	7858      	ldrb	r0, [r3, #1]
1a0012ee:	f003 fb95 	bl	1a004a1c <disk_status>
1a0012f2:	f010 0f01 	tst.w	r0, #1
1a0012f6:	d10a      	bne.n	1a00130e <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a0012f8:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
1a0012fa:	2000      	movs	r0, #0
1a0012fc:	e7f4      	b.n	1a0012e8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a0012fe:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001300:	2300      	movs	r3, #0
1a001302:	e7f1      	b.n	1a0012e8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a001304:	2009      	movs	r0, #9
1a001306:	e7ef      	b.n	1a0012e8 <validate+0x1c>
1a001308:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a00130a:	2300      	movs	r3, #0
1a00130c:	e7ec      	b.n	1a0012e8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a00130e:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001310:	2300      	movs	r3, #0
1a001312:	e7e9      	b.n	1a0012e8 <validate+0x1c>

1a001314 <sync_window>:
{
1a001314:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
1a001316:	78c3      	ldrb	r3, [r0, #3]
1a001318:	b90b      	cbnz	r3, 1a00131e <sync_window+0xa>
	FRESULT res = FR_OK;
1a00131a:	2000      	movs	r0, #0
}
1a00131c:	bd38      	pop	{r3, r4, r5, pc}
1a00131e:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
1a001320:	f100 0538 	add.w	r5, r0, #56	; 0x38
1a001324:	2301      	movs	r3, #1
1a001326:	6b42      	ldr	r2, [r0, #52]	; 0x34
1a001328:	4629      	mov	r1, r5
1a00132a:	7840      	ldrb	r0, [r0, #1]
1a00132c:	f003 fb94 	bl	1a004a58 <disk_write>
1a001330:	b9a0      	cbnz	r0, 1a00135c <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
1a001332:	2300      	movs	r3, #0
1a001334:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1a001336:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a00133a:	1acb      	subs	r3, r1, r3
1a00133c:	6a22      	ldr	r2, [r4, #32]
1a00133e:	4293      	cmp	r3, r2
1a001340:	d20e      	bcs.n	1a001360 <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a001342:	78a3      	ldrb	r3, [r4, #2]
1a001344:	2b02      	cmp	r3, #2
1a001346:	d001      	beq.n	1a00134c <sync_window+0x38>
	FRESULT res = FR_OK;
1a001348:	2000      	movs	r0, #0
1a00134a:	e7e7      	b.n	1a00131c <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a00134c:	2301      	movs	r3, #1
1a00134e:	440a      	add	r2, r1
1a001350:	4629      	mov	r1, r5
1a001352:	7860      	ldrb	r0, [r4, #1]
1a001354:	f003 fb80 	bl	1a004a58 <disk_write>
	FRESULT res = FR_OK;
1a001358:	2000      	movs	r0, #0
1a00135a:	e7df      	b.n	1a00131c <sync_window+0x8>
			res = FR_DISK_ERR;
1a00135c:	2001      	movs	r0, #1
1a00135e:	e7dd      	b.n	1a00131c <sync_window+0x8>
	FRESULT res = FR_OK;
1a001360:	2000      	movs	r0, #0
1a001362:	e7db      	b.n	1a00131c <sync_window+0x8>

1a001364 <move_window>:
{
1a001364:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
1a001366:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a001368:	428b      	cmp	r3, r1
1a00136a:	d102      	bne.n	1a001372 <move_window+0xe>
	FRESULT res = FR_OK;
1a00136c:	2600      	movs	r6, #0
}
1a00136e:	4630      	mov	r0, r6
1a001370:	bd70      	pop	{r4, r5, r6, pc}
1a001372:	4604      	mov	r4, r0
1a001374:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
1a001376:	f7ff ffcd 	bl	1a001314 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
1a00137a:	4606      	mov	r6, r0
1a00137c:	2800      	cmp	r0, #0
1a00137e:	d1f6      	bne.n	1a00136e <move_window+0xa>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
1a001380:	2301      	movs	r3, #1
1a001382:	462a      	mov	r2, r5
1a001384:	f104 0138 	add.w	r1, r4, #56	; 0x38
1a001388:	7860      	ldrb	r0, [r4, #1]
1a00138a:	f003 fb55 	bl	1a004a38 <disk_read>
1a00138e:	b110      	cbz	r0, 1a001396 <move_window+0x32>
				res = FR_DISK_ERR;
1a001390:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
1a001392:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
1a001396:	6365      	str	r5, [r4, #52]	; 0x34
1a001398:	e7e9      	b.n	1a00136e <move_window+0xa>
1a00139a:	Address 0x000000001a00139a is out of bounds.


1a00139c <check_fs>:
{
1a00139c:	b510      	push	{r4, lr}
1a00139e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a0013a0:	2300      	movs	r3, #0
1a0013a2:	70c3      	strb	r3, [r0, #3]
1a0013a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0013a8:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a0013aa:	f7ff ffdb 	bl	1a001364 <move_window>
1a0013ae:	bb40      	cbnz	r0, 1a001402 <check_fs+0x66>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a0013b0:	f204 2036 	addw	r0, r4, #566	; 0x236
1a0013b4:	f7ff fd0c 	bl	1a000dd0 <ld_word>
1a0013b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a0013bc:	4298      	cmp	r0, r3
1a0013be:	d122      	bne.n	1a001406 <check_fs+0x6a>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a0013c0:	220b      	movs	r2, #11
1a0013c2:	4915      	ldr	r1, [pc, #84]	; (1a001418 <check_fs+0x7c>)
1a0013c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a0013c8:	f7ff fd67 	bl	1a000e9a <mem_cmp>
1a0013cc:	b1e8      	cbz	r0, 1a00140a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
1a0013ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a0013d2:	2be9      	cmp	r3, #233	; 0xe9
1a0013d4:	d005      	beq.n	1a0013e2 <check_fs+0x46>
1a0013d6:	2beb      	cmp	r3, #235	; 0xeb
1a0013d8:	d003      	beq.n	1a0013e2 <check_fs+0x46>
1a0013da:	2be8      	cmp	r3, #232	; 0xe8
1a0013dc:	d001      	beq.n	1a0013e2 <check_fs+0x46>
	return 2;	/* Valid BS but not FAT */
1a0013de:	2002      	movs	r0, #2
1a0013e0:	e012      	b.n	1a001408 <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a0013e2:	2203      	movs	r2, #3
1a0013e4:	490d      	ldr	r1, [pc, #52]	; (1a00141c <check_fs+0x80>)
1a0013e6:	f104 006e 	add.w	r0, r4, #110	; 0x6e
1a0013ea:	f7ff fd56 	bl	1a000e9a <mem_cmp>
1a0013ee:	b170      	cbz	r0, 1a00140e <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a0013f0:	2205      	movs	r2, #5
1a0013f2:	490b      	ldr	r1, [pc, #44]	; (1a001420 <check_fs+0x84>)
1a0013f4:	f104 008a 	add.w	r0, r4, #138	; 0x8a
1a0013f8:	f7ff fd4f 	bl	1a000e9a <mem_cmp>
1a0013fc:	b148      	cbz	r0, 1a001412 <check_fs+0x76>
	return 2;	/* Valid BS but not FAT */
1a0013fe:	2002      	movs	r0, #2
1a001400:	e002      	b.n	1a001408 <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a001402:	2004      	movs	r0, #4
1a001404:	e000      	b.n	1a001408 <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a001406:	2003      	movs	r0, #3
}
1a001408:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a00140a:	2001      	movs	r0, #1
1a00140c:	e7fc      	b.n	1a001408 <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a00140e:	2000      	movs	r0, #0
1a001410:	e7fa      	b.n	1a001408 <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a001412:	2000      	movs	r0, #0
1a001414:	e7f8      	b.n	1a001408 <check_fs+0x6c>
1a001416:	bf00      	nop
1a001418:	1a00dfc4 	.word	0x1a00dfc4
1a00141c:	1a00dfd0 	.word	0x1a00dfd0
1a001420:	1a00dfd4 	.word	0x1a00dfd4

1a001424 <find_volume>:
{
1a001424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001428:	b084      	sub	sp, #16
1a00142a:	460d      	mov	r5, r1
1a00142c:	4617      	mov	r7, r2
	*rfs = 0;
1a00142e:	2300      	movs	r3, #0
1a001430:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a001432:	f7ff fef3 	bl	1a00121c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a001436:	1e06      	subs	r6, r0, #0
1a001438:	f2c0 81fe 	blt.w	1a001838 <find_volume+0x414>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
1a00143c:	4bbd      	ldr	r3, [pc, #756]	; (1a001734 <find_volume+0x310>)
1a00143e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a001442:	2c00      	cmp	r4, #0
1a001444:	f000 81fc 	beq.w	1a001840 <find_volume+0x41c>
	*rfs = fs;							/* Return pointer to the filesystem object */
1a001448:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
1a00144a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
1a00144e:	7823      	ldrb	r3, [r4, #0]
1a001450:	b173      	cbz	r3, 1a001470 <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
1a001452:	7860      	ldrb	r0, [r4, #1]
1a001454:	f003 fae2 	bl	1a004a1c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a001458:	f010 0f01 	tst.w	r0, #1
1a00145c:	d108      	bne.n	1a001470 <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a00145e:	2f00      	cmp	r7, #0
1a001460:	f000 81f0 	beq.w	1a001844 <find_volume+0x420>
1a001464:	f010 0f04 	tst.w	r0, #4
1a001468:	f040 81ee 	bne.w	1a001848 <find_volume+0x424>
			return FR_OK;				/* The filesystem object is valid */
1a00146c:	2000      	movs	r0, #0
1a00146e:	e1e4      	b.n	1a00183a <find_volume+0x416>
	fs->fs_type = 0;					/* Clear the filesystem object */
1a001470:	2300      	movs	r3, #0
1a001472:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a001474:	4bb0      	ldr	r3, [pc, #704]	; (1a001738 <find_volume+0x314>)
1a001476:	f813 0016 	ldrb.w	r0, [r3, r6, lsl #1]
1a00147a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
1a00147c:	f003 fad5 	bl	1a004a2a <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a001480:	f010 0f01 	tst.w	r0, #1
1a001484:	f040 81e2 	bne.w	1a00184c <find_volume+0x428>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a001488:	b11f      	cbz	r7, 1a001492 <find_volume+0x6e>
1a00148a:	f010 0f04 	tst.w	r0, #4
1a00148e:	f040 81df 	bne.w	1a001850 <find_volume+0x42c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a001492:	2100      	movs	r1, #0
1a001494:	4620      	mov	r0, r4
1a001496:	f7ff ff81 	bl	1a00139c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a00149a:	2802      	cmp	r0, #2
1a00149c:	f000 8092 	beq.w	1a0015c4 <find_volume+0x1a0>
1a0014a0:	2801      	cmp	r0, #1
1a0014a2:	d972      	bls.n	1a00158a <find_volume+0x166>
	bsect = 0;
1a0014a4:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a0014a6:	2804      	cmp	r0, #4
1a0014a8:	f000 81d4 	beq.w	1a001854 <find_volume+0x430>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a0014ac:	2801      	cmp	r0, #1
1a0014ae:	f200 81d3 	bhi.w	1a001858 <find_volume+0x434>
	if (fmt == 1) {
1a0014b2:	f000 811d 	beq.w	1a0016f0 <find_volume+0x2cc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a0014b6:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a0014ba:	f7ff fc89 	bl	1a000dd0 <ld_word>
1a0014be:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a0014c2:	f040 81df 	bne.w	1a001884 <find_volume+0x460>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
1a0014c6:	f104 004e 	add.w	r0, r4, #78	; 0x4e
1a0014ca:	f7ff fc81 	bl	1a000dd0 <ld_word>
1a0014ce:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a0014d0:	b920      	cbnz	r0, 1a0014dc <find_volume+0xb8>
1a0014d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0014d6:	f7ff fc80 	bl	1a000dda <ld_dword>
1a0014da:	4680      	mov	r8, r0
		fs->fsize = fasize;
1a0014dc:	f8c4 8020 	str.w	r8, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
1a0014e0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
1a0014e4:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a0014e6:	1e53      	subs	r3, r2, #1
1a0014e8:	b2db      	uxtb	r3, r3
1a0014ea:	2b01      	cmp	r3, #1
1a0014ec:	f200 81cc 	bhi.w	1a001888 <find_volume+0x464>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
1a0014f0:	fb08 f502 	mul.w	r5, r8, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
1a0014f4:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
1a0014f8:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a0014fa:	2e00      	cmp	r6, #0
1a0014fc:	f000 81c6 	beq.w	1a00188c <find_volume+0x468>
1a001500:	1e73      	subs	r3, r6, #1
1a001502:	421e      	tst	r6, r3
1a001504:	f040 81c4 	bne.w	1a001890 <find_volume+0x46c>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a001508:	f104 0049 	add.w	r0, r4, #73	; 0x49
1a00150c:	f7ff fc60 	bl	1a000dd0 <ld_word>
1a001510:	4681      	mov	r9, r0
1a001512:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001514:	f010 0f0f 	tst.w	r0, #15
1a001518:	f040 81bc 	bne.w	1a001894 <find_volume+0x470>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
1a00151c:	f104 004b 	add.w	r0, r4, #75	; 0x4b
1a001520:	f7ff fc56 	bl	1a000dd0 <ld_word>
1a001524:	4682      	mov	sl, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a001526:	b920      	cbnz	r0, 1a001532 <find_volume+0x10e>
1a001528:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00152c:	f7ff fc55 	bl	1a000dda <ld_dword>
1a001530:	4682      	mov	sl, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
1a001532:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a001536:	f7ff fc4b 	bl	1a000dd0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a00153a:	4684      	mov	ip, r0
1a00153c:	2800      	cmp	r0, #0
1a00153e:	f000 81ab 	beq.w	1a001898 <find_volume+0x474>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a001542:	1943      	adds	r3, r0, r5
1a001544:	eb03 1319 	add.w	r3, r3, r9, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a001548:	459a      	cmp	sl, r3
1a00154a:	f0c0 81a7 	bcc.w	1a00189c <find_volume+0x478>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
1a00154e:	ebaa 0203 	sub.w	r2, sl, r3
1a001552:	fbb2 f1f6 	udiv	r1, r2, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a001556:	42b2      	cmp	r2, r6
1a001558:	f0c0 81a2 	bcc.w	1a0018a0 <find_volume+0x47c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a00155c:	4a77      	ldr	r2, [pc, #476]	; (1a00173c <find_volume+0x318>)
1a00155e:	4291      	cmp	r1, r2
1a001560:	f240 80e5 	bls.w	1a00172e <find_volume+0x30a>
		fmt = 0;
1a001564:	f04f 0a00 	mov.w	sl, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a001568:	f64f 72f5 	movw	r2, #65525	; 0xfff5
1a00156c:	4291      	cmp	r1, r2
1a00156e:	d801      	bhi.n	1a001574 <find_volume+0x150>
1a001570:	f04f 0a02 	mov.w	sl, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001574:	f640 72f5 	movw	r2, #4085	; 0xff5
1a001578:	4291      	cmp	r1, r2
1a00157a:	f240 80e3 	bls.w	1a001744 <find_volume+0x320>
		if (fmt == 0) return FR_NO_FILESYSTEM;
1a00157e:	f1ba 0f00 	cmp.w	sl, #0
1a001582:	f040 80e1 	bne.w	1a001748 <find_volume+0x324>
1a001586:	200d      	movs	r0, #13
1a001588:	e157      	b.n	1a00183a <find_volume+0x416>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a00158a:	4b6b      	ldr	r3, [pc, #428]	; (1a001738 <find_volume+0x314>)
1a00158c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a001590:	785b      	ldrb	r3, [r3, #1]
1a001592:	b9cb      	cbnz	r3, 1a0015c8 <find_volume+0x1a4>
	bsect = 0;
1a001594:	2700      	movs	r7, #0
1a001596:	e786      	b.n	1a0014a6 <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001598:	2000      	movs	r0, #0
1a00159a:	ab04      	add	r3, sp, #16
1a00159c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a0015a0:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
1a0015a4:	3501      	adds	r5, #1
1a0015a6:	2d03      	cmp	r5, #3
1a0015a8:	d810      	bhi.n	1a0015cc <find_volume+0x1a8>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a0015aa:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a0015ae:	012b      	lsls	r3, r5, #4
1a0015b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
1a0015b4:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a0015b6:	7903      	ldrb	r3, [r0, #4]
1a0015b8:	2b00      	cmp	r3, #0
1a0015ba:	d0ed      	beq.n	1a001598 <find_volume+0x174>
1a0015bc:	3008      	adds	r0, #8
1a0015be:	f7ff fc0c 	bl	1a000dda <ld_dword>
1a0015c2:	e7ea      	b.n	1a00159a <find_volume+0x176>
1a0015c4:	2500      	movs	r5, #0
1a0015c6:	e7ee      	b.n	1a0015a6 <find_volume+0x182>
1a0015c8:	2500      	movs	r5, #0
1a0015ca:	e7ec      	b.n	1a0015a6 <find_volume+0x182>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
1a0015cc:	4b5a      	ldr	r3, [pc, #360]	; (1a001738 <find_volume+0x314>)
1a0015ce:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a0015d2:	785d      	ldrb	r5, [r3, #1]
		if (i != 0) i--;
1a0015d4:	b19d      	cbz	r5, 1a0015fe <find_volume+0x1da>
1a0015d6:	3d01      	subs	r5, #1
1a0015d8:	e011      	b.n	1a0015fe <find_volume+0x1da>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a0015da:	4639      	mov	r1, r7
1a0015dc:	4620      	mov	r0, r4
1a0015de:	f7ff fedd 	bl	1a00139c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
1a0015e2:	4b55      	ldr	r3, [pc, #340]	; (1a001738 <find_volume+0x314>)
1a0015e4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a0015e8:	785b      	ldrb	r3, [r3, #1]
1a0015ea:	2b00      	cmp	r3, #0
1a0015ec:	f47f af5b 	bne.w	1a0014a6 <find_volume+0x82>
1a0015f0:	2801      	cmp	r0, #1
1a0015f2:	f67f af58 	bls.w	1a0014a6 <find_volume+0x82>
1a0015f6:	3501      	adds	r5, #1
1a0015f8:	2d03      	cmp	r5, #3
1a0015fa:	f63f af54 	bhi.w	1a0014a6 <find_volume+0x82>
			bsect = br[i];
1a0015fe:	ab04      	add	r3, sp, #16
1a001600:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a001604:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a001608:	2f00      	cmp	r7, #0
1a00160a:	d1e6      	bne.n	1a0015da <find_volume+0x1b6>
1a00160c:	2003      	movs	r0, #3
1a00160e:	e7e8      	b.n	1a0015e2 <find_volume+0x1be>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a001610:	3301      	adds	r3, #1
1a001612:	2b3f      	cmp	r3, #63	; 0x3f
1a001614:	d804      	bhi.n	1a001620 <find_volume+0x1fc>
1a001616:	18e2      	adds	r2, r4, r3
1a001618:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a00161c:	2a00      	cmp	r2, #0
1a00161e:	d0f7      	beq.n	1a001610 <find_volume+0x1ec>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a001620:	2b3f      	cmp	r3, #63	; 0x3f
1a001622:	f240 811b 	bls.w	1a00185c <find_volume+0x438>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a001626:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
1a00162a:	f7ff fbd1 	bl	1a000dd0 <ld_word>
1a00162e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
1a001632:	f040 8115 	bne.w	1a001860 <find_volume+0x43c>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
1a001636:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
1a00163a:	2b09      	cmp	r3, #9
1a00163c:	f040 8112 	bne.w	1a001864 <find_volume+0x440>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
1a001640:	f104 0080 	add.w	r0, r4, #128	; 0x80
1a001644:	f7ff fbd4 	bl	1a000df0 <ld_qword>
1a001648:	eb10 0807 	adds.w	r8, r0, r7
1a00164c:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a001650:	f1b9 0f01 	cmp.w	r9, #1
1a001654:	bf08      	it	eq
1a001656:	f1b8 0f00 	cmpeq.w	r8, #0
1a00165a:	f080 8105 	bcs.w	1a001868 <find_volume+0x444>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
1a00165e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
1a001662:	f7ff fbba 	bl	1a000dda <ld_dword>
1a001666:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
1a001668:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
1a00166c:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a00166e:	2b01      	cmp	r3, #1
1a001670:	f040 80fc 	bne.w	1a00186c <find_volume+0x448>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
1a001674:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
1a001678:	2501      	movs	r5, #1
1a00167a:	409d      	lsls	r5, r3
1a00167c:	b2ad      	uxth	r5, r5
1a00167e:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a001680:	2d00      	cmp	r5, #0
1a001682:	f000 80f5 	beq.w	1a001870 <find_volume+0x44c>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
1a001686:	f104 0094 	add.w	r0, r4, #148	; 0x94
1a00168a:	f7ff fba6 	bl	1a000dda <ld_dword>
1a00168e:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a001690:	4b2b      	ldr	r3, [pc, #172]	; (1a001740 <find_volume+0x31c>)
1a001692:	4298      	cmp	r0, r3
1a001694:	f200 80ee 	bhi.w	1a001874 <find_volume+0x450>
		fs->n_fatent = nclst + 2;
1a001698:	1c83      	adds	r3, r0, #2
1a00169a:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
1a00169c:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
1a00169e:	f104 0090 	add.w	r0, r4, #144	; 0x90
1a0016a2:	f7ff fb9a 	bl	1a000dda <ld_dword>
1a0016a6:	19c6      	adds	r6, r0, r7
1a0016a8:	6326      	str	r6, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
1a0016aa:	f104 0088 	add.w	r0, r4, #136	; 0x88
1a0016ae:	f7ff fb94 	bl	1a000dda <ld_dword>
1a0016b2:	4438      	add	r0, r7
1a0016b4:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a0016b6:	fb0a f205 	mul.w	r2, sl, r5
1a0016ba:	2100      	movs	r1, #0
1a0016bc:	1992      	adds	r2, r2, r6
1a0016be:	f141 0300 	adc.w	r3, r1, #0
1a0016c2:	4599      	cmp	r9, r3
1a0016c4:	bf08      	it	eq
1a0016c6:	4590      	cmpeq	r8, r2
1a0016c8:	f0c0 80d6 	bcc.w	1a001878 <find_volume+0x454>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
1a0016cc:	f104 0098 	add.w	r0, r4, #152	; 0x98
1a0016d0:	f7ff fb83 	bl	1a000dda <ld_dword>
1a0016d4:	4601      	mov	r1, r0
1a0016d6:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a0016d8:	4620      	mov	r0, r4
1a0016da:	f7ff fc57 	bl	1a000f8c <clst2sect>
1a0016de:	4601      	mov	r1, r0
1a0016e0:	4620      	mov	r0, r4
1a0016e2:	f7ff fe3f 	bl	1a001364 <move_window>
1a0016e6:	2800      	cmp	r0, #0
1a0016e8:	f040 80c8 	bne.w	1a00187c <find_volume+0x458>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a0016ec:	2500      	movs	r5, #0
1a0016ee:	e002      	b.n	1a0016f6 <find_volume+0x2d2>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a0016f0:	230b      	movs	r3, #11
1a0016f2:	e78e      	b.n	1a001612 <find_volume+0x1ee>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a0016f4:	3520      	adds	r5, #32
1a0016f6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0016fa:	d20d      	bcs.n	1a001718 <find_volume+0x2f4>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
1a0016fc:	1963      	adds	r3, r4, r5
1a0016fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001702:	2b81      	cmp	r3, #129	; 0x81
1a001704:	d1f6      	bne.n	1a0016f4 <find_volume+0x2d0>
1a001706:	f104 0338 	add.w	r3, r4, #56	; 0x38
1a00170a:	f105 0014 	add.w	r0, r5, #20
1a00170e:	4418      	add	r0, r3
1a001710:	f7ff fb63 	bl	1a000dda <ld_dword>
1a001714:	2802      	cmp	r0, #2
1a001716:	d1ed      	bne.n	1a0016f4 <find_volume+0x2d0>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001718:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a00171c:	f000 80b0 	beq.w	1a001880 <find_volume+0x45c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a001720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001724:	61a3      	str	r3, [r4, #24]
1a001726:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
1a001728:	f04f 0a04 	mov.w	sl, #4
1a00172c:	e035      	b.n	1a00179a <find_volume+0x376>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a00172e:	f04f 0a03 	mov.w	sl, #3
1a001732:	e719      	b.n	1a001568 <find_volume+0x144>
1a001734:	10000f00 	.word	0x10000f00
1a001738:	10000014 	.word	0x10000014
1a00173c:	0ffffff5 	.word	0x0ffffff5
1a001740:	7ffffffd 	.word	0x7ffffffd
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001744:	f04f 0a01 	mov.w	sl, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
1a001748:	1c8e      	adds	r6, r1, #2
1a00174a:	61e6      	str	r6, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
1a00174c:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
1a00174e:	eb0c 0207 	add.w	r2, ip, r7
1a001752:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
1a001754:	443b      	add	r3, r7
1a001756:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
1a001758:	f1ba 0f03 	cmp.w	sl, #3
1a00175c:	d02b      	beq.n	1a0017b6 <find_volume+0x392>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a00175e:	f1b9 0f00 	cmp.w	r9, #0
1a001762:	f000 80a3 	beq.w	1a0018ac <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
1a001766:	442a      	add	r2, r5
1a001768:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a00176a:	f1ba 0f02 	cmp.w	sl, #2
1a00176e:	d032      	beq.n	1a0017d6 <find_volume+0x3b2>
1a001770:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a001774:	f006 0601 	and.w	r6, r6, #1
1a001778:	eb06 0653 	add.w	r6, r6, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00177c:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
1a001780:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
1a001784:	f0c0 8094 	bcc.w	1a0018b0 <find_volume+0x48c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a001788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00178c:	61a3      	str	r3, [r4, #24]
1a00178e:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
1a001790:	2380      	movs	r3, #128	; 0x80
1a001792:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
1a001794:	f1ba 0f03 	cmp.w	sl, #3
1a001798:	d01f      	beq.n	1a0017da <find_volume+0x3b6>
	fs->fs_type = fmt;		/* FAT sub-type */
1a00179a:	f884 a000 	strb.w	sl, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
1a00179e:	4a45      	ldr	r2, [pc, #276]	; (1a0018b4 <find_volume+0x490>)
1a0017a0:	8813      	ldrh	r3, [r2, #0]
1a0017a2:	3301      	adds	r3, #1
1a0017a4:	b29b      	uxth	r3, r3
1a0017a6:	8013      	strh	r3, [r2, #0]
1a0017a8:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
1a0017aa:	4b43      	ldr	r3, [pc, #268]	; (1a0018b8 <find_volume+0x494>)
1a0017ac:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
1a0017ae:	4b43      	ldr	r3, [pc, #268]	; (1a0018bc <find_volume+0x498>)
1a0017b0:	6123      	str	r3, [r4, #16]
	return FR_OK;
1a0017b2:	2000      	movs	r0, #0
1a0017b4:	e041      	b.n	1a00183a <find_volume+0x416>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a0017b6:	f104 0062 	add.w	r0, r4, #98	; 0x62
1a0017ba:	f7ff fb09 	bl	1a000dd0 <ld_word>
1a0017be:	2800      	cmp	r0, #0
1a0017c0:	d170      	bne.n	1a0018a4 <find_volume+0x480>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a0017c2:	f1b9 0f00 	cmp.w	r9, #0
1a0017c6:	d16f      	bne.n	1a0018a8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a0017c8:	f104 0064 	add.w	r0, r4, #100	; 0x64
1a0017cc:	f7ff fb05 	bl	1a000dda <ld_dword>
1a0017d0:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
1a0017d2:	00b6      	lsls	r6, r6, #2
1a0017d4:	e7d2      	b.n	1a00177c <find_volume+0x358>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a0017d6:	0076      	lsls	r6, r6, #1
1a0017d8:	e7d0      	b.n	1a00177c <find_volume+0x358>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a0017da:	f104 0068 	add.w	r0, r4, #104	; 0x68
1a0017de:	f7ff faf7 	bl	1a000dd0 <ld_word>
1a0017e2:	2801      	cmp	r0, #1
1a0017e4:	d1d9      	bne.n	1a00179a <find_volume+0x376>
			&& move_window(fs, bsect + 1) == FR_OK)
1a0017e6:	1c79      	adds	r1, r7, #1
1a0017e8:	4620      	mov	r0, r4
1a0017ea:	f7ff fdbb 	bl	1a001364 <move_window>
1a0017ee:	2800      	cmp	r0, #0
1a0017f0:	d1d3      	bne.n	1a00179a <find_volume+0x376>
			fs->fsi_flag = 0;
1a0017f2:	2300      	movs	r3, #0
1a0017f4:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
1a0017f6:	f204 2036 	addw	r0, r4, #566	; 0x236
1a0017fa:	f7ff fae9 	bl	1a000dd0 <ld_word>
1a0017fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a001802:	4298      	cmp	r0, r3
1a001804:	d1c9      	bne.n	1a00179a <find_volume+0x376>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a001806:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a00180a:	f7ff fae6 	bl	1a000dda <ld_dword>
1a00180e:	4b2c      	ldr	r3, [pc, #176]	; (1a0018c0 <find_volume+0x49c>)
1a001810:	4298      	cmp	r0, r3
1a001812:	d1c2      	bne.n	1a00179a <find_volume+0x376>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a001814:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a001818:	f7ff fadf 	bl	1a000dda <ld_dword>
1a00181c:	4b29      	ldr	r3, [pc, #164]	; (1a0018c4 <find_volume+0x4a0>)
1a00181e:	4298      	cmp	r0, r3
1a001820:	d1bb      	bne.n	1a00179a <find_volume+0x376>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a001822:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a001826:	f7ff fad8 	bl	1a000dda <ld_dword>
1a00182a:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a00182c:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a001830:	f7ff fad3 	bl	1a000dda <ld_dword>
1a001834:	6160      	str	r0, [r4, #20]
1a001836:	e7b0      	b.n	1a00179a <find_volume+0x376>
	if (vol < 0) return FR_INVALID_DRIVE;
1a001838:	200b      	movs	r0, #11
}
1a00183a:	b004      	add	sp, #16
1a00183c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a001840:	200c      	movs	r0, #12
1a001842:	e7fa      	b.n	1a00183a <find_volume+0x416>
			return FR_OK;				/* The filesystem object is valid */
1a001844:	2000      	movs	r0, #0
1a001846:	e7f8      	b.n	1a00183a <find_volume+0x416>
				return FR_WRITE_PROTECTED;
1a001848:	200a      	movs	r0, #10
1a00184a:	e7f6      	b.n	1a00183a <find_volume+0x416>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a00184c:	2003      	movs	r0, #3
1a00184e:	e7f4      	b.n	1a00183a <find_volume+0x416>
		return FR_WRITE_PROTECTED;
1a001850:	200a      	movs	r0, #10
1a001852:	e7f2      	b.n	1a00183a <find_volume+0x416>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a001854:	2001      	movs	r0, #1
1a001856:	e7f0      	b.n	1a00183a <find_volume+0x416>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a001858:	200d      	movs	r0, #13
1a00185a:	e7ee      	b.n	1a00183a <find_volume+0x416>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a00185c:	200d      	movs	r0, #13
1a00185e:	e7ec      	b.n	1a00183a <find_volume+0x416>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a001860:	200d      	movs	r0, #13
1a001862:	e7ea      	b.n	1a00183a <find_volume+0x416>
			return FR_NO_FILESYSTEM;
1a001864:	200d      	movs	r0, #13
1a001866:	e7e8      	b.n	1a00183a <find_volume+0x416>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a001868:	200d      	movs	r0, #13
1a00186a:	e7e6      	b.n	1a00183a <find_volume+0x416>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a00186c:	200d      	movs	r0, #13
1a00186e:	e7e4      	b.n	1a00183a <find_volume+0x416>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a001870:	200d      	movs	r0, #13
1a001872:	e7e2      	b.n	1a00183a <find_volume+0x416>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a001874:	200d      	movs	r0, #13
1a001876:	e7e0      	b.n	1a00183a <find_volume+0x416>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001878:	200d      	movs	r0, #13
1a00187a:	e7de      	b.n	1a00183a <find_volume+0x416>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a00187c:	2001      	movs	r0, #1
1a00187e:	e7dc      	b.n	1a00183a <find_volume+0x416>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001880:	200d      	movs	r0, #13
1a001882:	e7da      	b.n	1a00183a <find_volume+0x416>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a001884:	200d      	movs	r0, #13
1a001886:	e7d8      	b.n	1a00183a <find_volume+0x416>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a001888:	200d      	movs	r0, #13
1a00188a:	e7d6      	b.n	1a00183a <find_volume+0x416>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a00188c:	200d      	movs	r0, #13
1a00188e:	e7d4      	b.n	1a00183a <find_volume+0x416>
1a001890:	200d      	movs	r0, #13
1a001892:	e7d2      	b.n	1a00183a <find_volume+0x416>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001894:	200d      	movs	r0, #13
1a001896:	e7d0      	b.n	1a00183a <find_volume+0x416>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a001898:	200d      	movs	r0, #13
1a00189a:	e7ce      	b.n	1a00183a <find_volume+0x416>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a00189c:	200d      	movs	r0, #13
1a00189e:	e7cc      	b.n	1a00183a <find_volume+0x416>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a0018a0:	200d      	movs	r0, #13
1a0018a2:	e7ca      	b.n	1a00183a <find_volume+0x416>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a0018a4:	200d      	movs	r0, #13
1a0018a6:	e7c8      	b.n	1a00183a <find_volume+0x416>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a0018a8:	200d      	movs	r0, #13
1a0018aa:	e7c6      	b.n	1a00183a <find_volume+0x416>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a0018ac:	200d      	movs	r0, #13
1a0018ae:	e7c4      	b.n	1a00183a <find_volume+0x416>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a0018b0:	200d      	movs	r0, #13
1a0018b2:	e7c2      	b.n	1a00183a <find_volume+0x416>
1a0018b4:	10000f08 	.word	0x10000f08
1a0018b8:	10000f0c 	.word	0x10000f0c
1a0018bc:	10000ca0 	.word	0x10000ca0
1a0018c0:	41615252 	.word	0x41615252
1a0018c4:	61417272 	.word	0x61417272

1a0018c8 <find_bitmap>:
{
1a0018c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0018cc:	4605      	mov	r5, r0
1a0018ce:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1a0018d0:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
1a0018d2:	69c3      	ldr	r3, [r0, #28]
1a0018d4:	3b02      	subs	r3, #2
1a0018d6:	42bb      	cmp	r3, r7
1a0018d8:	d800      	bhi.n	1a0018dc <find_bitmap+0x14>
1a0018da:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
1a0018dc:	46b8      	mov	r8, r7
1a0018de:	463c      	mov	r4, r7
1a0018e0:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a0018e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a0018e4:	eb01 3114 	add.w	r1, r1, r4, lsr #12
1a0018e8:	4628      	mov	r0, r5
1a0018ea:	f7ff fd3b 	bl	1a001364 <move_window>
1a0018ee:	bb40      	cbnz	r0, 1a001942 <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1a0018f0:	f3c4 00c8 	ubfx	r0, r4, #3, #9
1a0018f4:	f004 0207 	and.w	r2, r4, #7
1a0018f8:	2301      	movs	r3, #1
1a0018fa:	4093      	lsls	r3, r2
1a0018fc:	b2db      	uxtb	r3, r3
1a0018fe:	e009      	b.n	1a001914 <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1a001900:	46a0      	mov	r8, r4
1a001902:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
1a001904:	42a7      	cmp	r7, r4
1a001906:	d01f      	beq.n	1a001948 <find_bitmap+0x80>
			} while (bm != 0);
1a001908:	b923      	cbnz	r3, 1a001914 <find_bitmap+0x4c>
		} while (++i < SS(fs));
1a00190a:	3001      	adds	r0, #1
1a00190c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a001910:	d2e7      	bcs.n	1a0018e2 <find_bitmap+0x1a>
			bm = 1;
1a001912:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1a001914:	182a      	adds	r2, r5, r0
1a001916:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a00191a:	401a      	ands	r2, r3
1a00191c:	005b      	lsls	r3, r3, #1
1a00191e:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1a001920:	3401      	adds	r4, #1
1a001922:	69e9      	ldr	r1, [r5, #28]
1a001924:	3902      	subs	r1, #2
1a001926:	42a1      	cmp	r1, r4
1a001928:	d803      	bhi.n	1a001932 <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
1a00192a:	2400      	movs	r4, #0
1a00192c:	f44f 7000 	mov.w	r0, #512	; 0x200
1a001930:	4623      	mov	r3, r4
				if (bv == 0) {	/* Is it a free cluster? */
1a001932:	2a00      	cmp	r2, #0
1a001934:	d1e4      	bne.n	1a001900 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1a001936:	3601      	adds	r6, #1
1a001938:	454e      	cmp	r6, r9
1a00193a:	d1e3      	bne.n	1a001904 <find_bitmap+0x3c>
1a00193c:	f108 0002 	add.w	r0, r8, #2
1a001940:	e003      	b.n	1a00194a <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a001942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001946:	e000      	b.n	1a00194a <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
1a001948:	2000      	movs	r0, #0
}
1a00194a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00194e <change_bitmap>:
{
1a00194e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001952:	4606      	mov	r6, r0
1a001954:	4617      	mov	r7, r2
1a001956:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
1a001958:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
1a00195a:	6b01      	ldr	r1, [r0, #48]	; 0x30
1a00195c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1a001960:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1a001964:	f004 0407 	and.w	r4, r4, #7
1a001968:	2301      	movs	r3, #1
1a00196a:	fa03 f404 	lsl.w	r4, r3, r4
1a00196e:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001970:	f101 0901 	add.w	r9, r1, #1
1a001974:	4630      	mov	r0, r6
1a001976:	f7ff fcf5 	bl	1a001364 <move_window>
1a00197a:	4601      	mov	r1, r0
1a00197c:	b110      	cbz	r0, 1a001984 <change_bitmap+0x36>
1a00197e:	2101      	movs	r1, #1
1a001980:	e01e      	b.n	1a0019c0 <change_bitmap+0x72>
			bm = 1;
1a001982:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a001984:	1973      	adds	r3, r6, r5
1a001986:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a00198a:	4223      	tst	r3, r4
1a00198c:	bf14      	ite	ne
1a00198e:	2201      	movne	r2, #1
1a001990:	2200      	moveq	r2, #0
1a001992:	4542      	cmp	r2, r8
1a001994:	d013      	beq.n	1a0019be <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
1a001996:	1972      	adds	r2, r6, r5
1a001998:	4063      	eors	r3, r4
1a00199a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
1a00199e:	2301      	movs	r3, #1
1a0019a0:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1a0019a2:	3f01      	subs	r7, #1
1a0019a4:	d00c      	beq.n	1a0019c0 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
1a0019a6:	409c      	lsls	r4, r3
1a0019a8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a0019ac:	d1ea      	bne.n	1a001984 <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
1a0019ae:	441d      	add	r5, r3
			bm = 1;
1a0019b0:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
1a0019b2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0019b6:	d3e4      	bcc.n	1a001982 <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a0019b8:	4649      	mov	r1, r9
		i = 0;
1a0019ba:	2500      	movs	r5, #0
1a0019bc:	e7d8      	b.n	1a001970 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a0019be:	2102      	movs	r1, #2
}
1a0019c0:	4608      	mov	r0, r1
1a0019c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0019c6 <put_fat>:
{
1a0019c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a0019ca:	2901      	cmp	r1, #1
1a0019cc:	f240 8082 	bls.w	1a001ad4 <put_fat+0x10e>
1a0019d0:	4605      	mov	r5, r0
1a0019d2:	460c      	mov	r4, r1
1a0019d4:	4617      	mov	r7, r2
1a0019d6:	69c3      	ldr	r3, [r0, #28]
1a0019d8:	428b      	cmp	r3, r1
1a0019da:	d97f      	bls.n	1a001adc <put_fat+0x116>
		switch (fs->fs_type) {
1a0019dc:	7803      	ldrb	r3, [r0, #0]
1a0019de:	3b01      	subs	r3, #1
1a0019e0:	2b03      	cmp	r3, #3
1a0019e2:	d87d      	bhi.n	1a001ae0 <put_fat+0x11a>
1a0019e4:	e8df f003 	tbb	[pc, r3]
1a0019e8:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1a0019ec:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0019f0:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a0019f2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a0019f6:	f7ff fcb5 	bl	1a001364 <move_window>
			if (res != FR_OK) break;
1a0019fa:	4606      	mov	r6, r0
1a0019fc:	2800      	cmp	r0, #0
1a0019fe:	d16a      	bne.n	1a001ad6 <put_fat+0x110>
			p = fs->win + bc++ % SS(fs);
1a001a00:	f105 0a38 	add.w	sl, r5, #56	; 0x38
1a001a04:	f108 0901 	add.w	r9, r8, #1
1a001a08:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a001a0c:	f014 0401 	ands.w	r4, r4, #1
1a001a10:	d01f      	beq.n	1a001a52 <put_fat+0x8c>
1a001a12:	f91a 3008 	ldrsb.w	r3, [sl, r8]
1a001a16:	f003 030f 	and.w	r3, r3, #15
1a001a1a:	013a      	lsls	r2, r7, #4
1a001a1c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
1a001a20:	4313      	orrs	r3, r2
1a001a22:	b2db      	uxtb	r3, r3
1a001a24:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
1a001a28:	2301      	movs	r3, #1
1a001a2a:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a001a2c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001a2e:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a001a32:	4628      	mov	r0, r5
1a001a34:	f7ff fc96 	bl	1a001364 <move_window>
			if (res != FR_OK) break;
1a001a38:	4606      	mov	r6, r0
1a001a3a:	2800      	cmp	r0, #0
1a001a3c:	d14b      	bne.n	1a001ad6 <put_fat+0x110>
			p = fs->win + bc % SS(fs);
1a001a3e:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a001a42:	b144      	cbz	r4, 1a001a56 <put_fat+0x90>
1a001a44:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a001a48:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
1a001a4c:	2301      	movs	r3, #1
1a001a4e:	70eb      	strb	r3, [r5, #3]
			break;
1a001a50:	e041      	b.n	1a001ad6 <put_fat+0x110>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a001a52:	b2fb      	uxtb	r3, r7
1a001a54:	e7e6      	b.n	1a001a24 <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a001a56:	f91a 3009 	ldrsb.w	r3, [sl, r9]
1a001a5a:	f023 030f 	bic.w	r3, r3, #15
1a001a5e:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a001a62:	431f      	orrs	r7, r3
1a001a64:	b2ff      	uxtb	r7, r7
1a001a66:	e7ef      	b.n	1a001a48 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a001a68:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001a6a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001a6e:	f7ff fc79 	bl	1a001364 <move_window>
			if (res != FR_OK) break;
1a001a72:	4606      	mov	r6, r0
1a001a74:	bb78      	cbnz	r0, 1a001ad6 <put_fat+0x110>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1a001a76:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001a7a:	0064      	lsls	r4, r4, #1
1a001a7c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001a80:	b2b9      	uxth	r1, r7
1a001a82:	4420      	add	r0, r4
1a001a84:	f7ff f9da 	bl	1a000e3c <st_word>
			fs->wflag = 1;
1a001a88:	2301      	movs	r3, #1
1a001a8a:	70eb      	strb	r3, [r5, #3]
			break;
1a001a8c:	e023      	b.n	1a001ad6 <put_fat+0x110>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a001a8e:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001a90:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001a94:	f7ff fc66 	bl	1a001364 <move_window>
			if (res != FR_OK) break;
1a001a98:	4606      	mov	r6, r0
1a001a9a:	b9e0      	cbnz	r0, 1a001ad6 <put_fat+0x110>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001a9c:	782b      	ldrb	r3, [r5, #0]
1a001a9e:	2b04      	cmp	r3, #4
1a001aa0:	d00c      	beq.n	1a001abc <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a001aa2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a001aa6:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001aaa:	00a3      	lsls	r3, r4, #2
1a001aac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001ab0:	4418      	add	r0, r3
1a001ab2:	f7ff f992 	bl	1a000dda <ld_dword>
1a001ab6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
1a001aba:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a001abc:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001ac0:	00a4      	lsls	r4, r4, #2
1a001ac2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a001ac6:	4639      	mov	r1, r7
1a001ac8:	4420      	add	r0, r4
1a001aca:	f7ff f9bb 	bl	1a000e44 <st_dword>
			fs->wflag = 1;
1a001ace:	2301      	movs	r3, #1
1a001ad0:	70eb      	strb	r3, [r5, #3]
			break;
1a001ad2:	e000      	b.n	1a001ad6 <put_fat+0x110>
	FRESULT res = FR_INT_ERR;
1a001ad4:	2602      	movs	r6, #2
}
1a001ad6:	4630      	mov	r0, r6
1a001ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
1a001adc:	2602      	movs	r6, #2
1a001ade:	e7fa      	b.n	1a001ad6 <put_fat+0x110>
1a001ae0:	2602      	movs	r6, #2
1a001ae2:	e7f8      	b.n	1a001ad6 <put_fat+0x110>

1a001ae4 <fill_last_frag>:
{
1a001ae4:	b570      	push	{r4, r5, r6, lr}
1a001ae6:	4604      	mov	r4, r0
1a001ae8:	460d      	mov	r5, r1
1a001aea:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a001aec:	e007      	b.n	1a001afe <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a001aee:	4632      	mov	r2, r6
1a001af0:	f7ff ff69 	bl	1a0019c6 <put_fat>
		if (res != FR_OK) return res;
1a001af4:	4603      	mov	r3, r0
1a001af6:	b958      	cbnz	r0, 1a001b10 <fill_last_frag+0x2c>
		obj->n_frag--;
1a001af8:	69e3      	ldr	r3, [r4, #28]
1a001afa:	3b01      	subs	r3, #1
1a001afc:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a001afe:	69e3      	ldr	r3, [r4, #28]
1a001b00:	b133      	cbz	r3, 1a001b10 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a001b02:	6820      	ldr	r0, [r4, #0]
1a001b04:	1aea      	subs	r2, r5, r3
1a001b06:	1c51      	adds	r1, r2, #1
1a001b08:	2b01      	cmp	r3, #1
1a001b0a:	d9f0      	bls.n	1a001aee <fill_last_frag+0xa>
1a001b0c:	3202      	adds	r2, #2
1a001b0e:	e7ef      	b.n	1a001af0 <fill_last_frag+0xc>
}
1a001b10:	4618      	mov	r0, r3
1a001b12:	bd70      	pop	{r4, r5, r6, pc}

1a001b14 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1a001b14:	79c3      	ldrb	r3, [r0, #7]
1a001b16:	2b03      	cmp	r3, #3
1a001b18:	d002      	beq.n	1a001b20 <fill_first_frag+0xc>
	return FR_OK;
1a001b1a:	2300      	movs	r3, #0
}
1a001b1c:	4618      	mov	r0, r3
1a001b1e:	4770      	bx	lr
{
1a001b20:	b570      	push	{r4, r5, r6, lr}
1a001b22:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a001b24:	6881      	ldr	r1, [r0, #8]
1a001b26:	6984      	ldr	r4, [r0, #24]
1a001b28:	b14c      	cbz	r4, 1a001b3e <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
1a001b2a:	1c4d      	adds	r5, r1, #1
1a001b2c:	462a      	mov	r2, r5
1a001b2e:	6830      	ldr	r0, [r6, #0]
1a001b30:	f7ff ff49 	bl	1a0019c6 <put_fat>
			if (res != FR_OK) return res;
1a001b34:	4603      	mov	r3, r0
1a001b36:	b920      	cbnz	r0, 1a001b42 <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a001b38:	3c01      	subs	r4, #1
1a001b3a:	4629      	mov	r1, r5
1a001b3c:	e7f4      	b.n	1a001b28 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1a001b3e:	2300      	movs	r3, #0
1a001b40:	71f3      	strb	r3, [r6, #7]
}
1a001b42:	4618      	mov	r0, r3
1a001b44:	bd70      	pop	{r4, r5, r6, pc}

1a001b46 <get_fat>:
{
1a001b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
1a001b48:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a001b4a:	2901      	cmp	r1, #1
1a001b4c:	f240 8099 	bls.w	1a001c82 <get_fat+0x13c>
1a001b50:	69eb      	ldr	r3, [r5, #28]
1a001b52:	428b      	cmp	r3, r1
1a001b54:	f240 8097 	bls.w	1a001c86 <get_fat+0x140>
1a001b58:	460c      	mov	r4, r1
		switch (fs->fs_type) {
1a001b5a:	782b      	ldrb	r3, [r5, #0]
1a001b5c:	3b01      	subs	r3, #1
1a001b5e:	2b03      	cmp	r3, #3
1a001b60:	f200 8093 	bhi.w	1a001c8a <get_fat+0x144>
1a001b64:	e8df f003 	tbb	[pc, r3]
1a001b68:	4f3c2b02 	.word	0x4f3c2b02
			bc = (UINT)clst; bc += bc / 2;
1a001b6c:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001b70:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001b72:	eb01 2156 	add.w	r1, r1, r6, lsr #9
1a001b76:	4628      	mov	r0, r5
1a001b78:	f7ff fbf4 	bl	1a001364 <move_window>
1a001b7c:	b110      	cbz	r0, 1a001b84 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a001b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b82:	e07f      	b.n	1a001c84 <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1a001b84:	1c77      	adds	r7, r6, #1
1a001b86:	f3c6 0608 	ubfx	r6, r6, #0, #9
1a001b8a:	442e      	add	r6, r5
1a001b8c:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001b90:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001b92:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a001b96:	4628      	mov	r0, r5
1a001b98:	f7ff fbe4 	bl	1a001364 <move_window>
1a001b9c:	2800      	cmp	r0, #0
1a001b9e:	d176      	bne.n	1a001c8e <get_fat+0x148>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1a001ba0:	f3c7 0008 	ubfx	r0, r7, #0, #9
1a001ba4:	4428      	add	r0, r5
1a001ba6:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
1a001baa:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1a001bae:	f014 0f01 	tst.w	r4, #1
1a001bb2:	d001      	beq.n	1a001bb8 <get_fat+0x72>
1a001bb4:	0900      	lsrs	r0, r0, #4
1a001bb6:	e065      	b.n	1a001c84 <get_fat+0x13e>
1a001bb8:	f3c0 000b 	ubfx	r0, r0, #0, #12
1a001bbc:	e062      	b.n	1a001c84 <get_fat+0x13e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a001bbe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001bc0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001bc4:	4628      	mov	r0, r5
1a001bc6:	f7ff fbcd 	bl	1a001364 <move_window>
1a001bca:	2800      	cmp	r0, #0
1a001bcc:	d162      	bne.n	1a001c94 <get_fat+0x14e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1a001bce:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001bd2:	0064      	lsls	r4, r4, #1
1a001bd4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001bd8:	4420      	add	r0, r4
1a001bda:	f7ff f8f9 	bl	1a000dd0 <ld_word>
			break;
1a001bde:	e051      	b.n	1a001c84 <get_fat+0x13e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a001be0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001be2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001be6:	4628      	mov	r0, r5
1a001be8:	f7ff fbbc 	bl	1a001364 <move_window>
1a001bec:	2800      	cmp	r0, #0
1a001bee:	d154      	bne.n	1a001c9a <get_fat+0x154>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
1a001bf0:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001bf4:	00a4      	lsls	r4, r4, #2
1a001bf6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a001bfa:	4420      	add	r0, r4
1a001bfc:	f7ff f8ed 	bl	1a000dda <ld_dword>
1a001c00:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a001c04:	e03e      	b.n	1a001c84 <get_fat+0x13e>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
1a001c06:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
1a001c0a:	ea56 0307 	orrs.w	r3, r6, r7
1a001c0e:	d001      	beq.n	1a001c14 <get_fat+0xce>
1a001c10:	6883      	ldr	r3, [r0, #8]
1a001c12:	b913      	cbnz	r3, 1a001c1a <get_fat+0xd4>
1a001c14:	79c3      	ldrb	r3, [r0, #7]
1a001c16:	2b00      	cmp	r3, #0
1a001c18:	d142      	bne.n	1a001ca0 <get_fat+0x15a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1a001c1a:	6883      	ldr	r3, [r0, #8]
1a001c1c:	1ae2      	subs	r2, r4, r3
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1a001c1e:	f116 33ff 	adds.w	r3, r6, #4294967295	; 0xffffffff
1a001c22:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
1a001c26:	0a5b      	lsrs	r3, r3, #9
1a001c28:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
1a001c2c:	8969      	ldrh	r1, [r5, #10]
1a001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a001c32:	79c1      	ldrb	r1, [r0, #7]
1a001c34:	2902      	cmp	r1, #2
1a001c36:	d008      	beq.n	1a001c4a <get_fat+0x104>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a001c38:	2903      	cmp	r1, #3
1a001c3a:	d00b      	beq.n	1a001c54 <get_fat+0x10e>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1a001c3c:	2902      	cmp	r1, #2
1a001c3e:	d034      	beq.n	1a001caa <get_fat+0x164>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1a001c40:	69c3      	ldr	r3, [r0, #28]
1a001c42:	b163      	cbz	r3, 1a001c5e <get_fat+0x118>
						val = 0x7FFFFFFF;	/* Generate EOC */
1a001c44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a001c48:	e01c      	b.n	1a001c84 <get_fat+0x13e>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a001c4a:	429a      	cmp	r2, r3
1a001c4c:	d8f4      	bhi.n	1a001c38 <get_fat+0xf2>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001c4e:	d029      	beq.n	1a001ca4 <get_fat+0x15e>
1a001c50:	1c60      	adds	r0, r4, #1
1a001c52:	e017      	b.n	1a001c84 <get_fat+0x13e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a001c54:	6983      	ldr	r3, [r0, #24]
1a001c56:	4293      	cmp	r3, r2
1a001c58:	d9f0      	bls.n	1a001c3c <get_fat+0xf6>
					val = clst + 1; 	/* Generate the value */
1a001c5a:	1c60      	adds	r0, r4, #1
					break;
1a001c5c:	e012      	b.n	1a001c84 <get_fat+0x13e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a001c5e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001c60:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001c64:	4628      	mov	r0, r5
1a001c66:	f7ff fb7d 	bl	1a001364 <move_window>
1a001c6a:	bb00      	cbnz	r0, 1a001cae <get_fat+0x168>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1a001c6c:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001c70:	00a3      	lsls	r3, r4, #2
1a001c72:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001c76:	4418      	add	r0, r3
1a001c78:	f7ff f8af 	bl	1a000dda <ld_dword>
1a001c7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a001c80:	e000      	b.n	1a001c84 <get_fat+0x13e>
		val = 1;	/* Internal error */
1a001c82:	2001      	movs	r0, #1
}
1a001c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
1a001c86:	2001      	movs	r0, #1
1a001c88:	e7fc      	b.n	1a001c84 <get_fat+0x13e>
			val = 1;	/* Internal error */
1a001c8a:	2001      	movs	r0, #1
1a001c8c:	e7fa      	b.n	1a001c84 <get_fat+0x13e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a001c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c92:	e7f7      	b.n	1a001c84 <get_fat+0x13e>
1a001c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c98:	e7f4      	b.n	1a001c84 <get_fat+0x13e>
1a001c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c9e:	e7f1      	b.n	1a001c84 <get_fat+0x13e>
			val = 1;	/* Internal error */
1a001ca0:	2001      	movs	r0, #1
1a001ca2:	e7ef      	b.n	1a001c84 <get_fat+0x13e>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001ca4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a001ca8:	e7ec      	b.n	1a001c84 <get_fat+0x13e>
			val = 1;	/* Internal error */
1a001caa:	2001      	movs	r0, #1
1a001cac:	e7ea      	b.n	1a001c84 <get_fat+0x13e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a001cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
1a001cb2:	e7e7      	b.n	1a001c84 <get_fat+0x13e>

1a001cb4 <dir_sdi>:
{
1a001cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001cb8:	4606      	mov	r6, r0
1a001cba:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
1a001cbc:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a001cbe:	783b      	ldrb	r3, [r7, #0]
1a001cc0:	2b04      	cmp	r3, #4
1a001cc2:	d024      	beq.n	1a001d0e <dir_sdi+0x5a>
1a001cc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
1a001cc8:	42ab      	cmp	r3, r5
1a001cca:	d941      	bls.n	1a001d50 <dir_sdi+0x9c>
1a001ccc:	f015 0f1f 	tst.w	r5, #31
1a001cd0:	d140      	bne.n	1a001d54 <dir_sdi+0xa0>
	dp->dptr = ofs;				/* Set current offset */
1a001cd2:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a001cd4:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a001cd6:	b92c      	cbnz	r4, 1a001ce4 <dir_sdi+0x30>
1a001cd8:	783b      	ldrb	r3, [r7, #0]
1a001cda:	2b02      	cmp	r3, #2
1a001cdc:	d902      	bls.n	1a001ce4 <dir_sdi+0x30>
		clst = fs->dirbase;
1a001cde:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1a001ce0:	2300      	movs	r3, #0
1a001ce2:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1a001ce4:	b9b4      	cbnz	r4, 1a001d14 <dir_sdi+0x60>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a001ce6:	893b      	ldrh	r3, [r7, #8]
1a001ce8:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001cec:	d934      	bls.n	1a001d58 <dir_sdi+0xa4>
		dp->sect = fs->dirbase;
1a001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001cf0:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
1a001cf2:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
1a001cf4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
1a001cf6:	b3ab      	cbz	r3, 1a001d64 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a001cf8:	eb03 2355 	add.w	r3, r3, r5, lsr #9
1a001cfc:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a001cfe:	3738      	adds	r7, #56	; 0x38
1a001d00:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a001d04:	443d      	add	r5, r7
1a001d06:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
1a001d08:	2000      	movs	r0, #0
}
1a001d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a001d0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a001d12:	e7d9      	b.n	1a001cc8 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a001d14:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a001d18:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a001d1c:	e001      	b.n	1a001d22 <dir_sdi+0x6e>
			ofs -= csz;
1a001d1e:	eba5 0508 	sub.w	r5, r5, r8
		while (ofs >= csz) {				/* Follow cluster chain */
1a001d22:	4545      	cmp	r5, r8
1a001d24:	d30e      	bcc.n	1a001d44 <dir_sdi+0x90>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a001d26:	4621      	mov	r1, r4
1a001d28:	4630      	mov	r0, r6
1a001d2a:	f7ff ff0c 	bl	1a001b46 <get_fat>
1a001d2e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001d30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001d34:	d012      	beq.n	1a001d5c <dir_sdi+0xa8>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a001d36:	2801      	cmp	r0, #1
1a001d38:	d912      	bls.n	1a001d60 <dir_sdi+0xac>
1a001d3a:	69fb      	ldr	r3, [r7, #28]
1a001d3c:	4283      	cmp	r3, r0
1a001d3e:	d8ee      	bhi.n	1a001d1e <dir_sdi+0x6a>
1a001d40:	2002      	movs	r0, #2
1a001d42:	e7e2      	b.n	1a001d0a <dir_sdi+0x56>
		dp->sect = clst2sect(fs, clst);
1a001d44:	4621      	mov	r1, r4
1a001d46:	4638      	mov	r0, r7
1a001d48:	f7ff f920 	bl	1a000f8c <clst2sect>
1a001d4c:	63b0      	str	r0, [r6, #56]	; 0x38
1a001d4e:	e7d0      	b.n	1a001cf2 <dir_sdi+0x3e>
		return FR_INT_ERR;
1a001d50:	2002      	movs	r0, #2
1a001d52:	e7da      	b.n	1a001d0a <dir_sdi+0x56>
1a001d54:	2002      	movs	r0, #2
1a001d56:	e7d8      	b.n	1a001d0a <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a001d58:	2002      	movs	r0, #2
1a001d5a:	e7d6      	b.n	1a001d0a <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001d5c:	2001      	movs	r0, #1
1a001d5e:	e7d4      	b.n	1a001d0a <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a001d60:	2002      	movs	r0, #2
1a001d62:	e7d2      	b.n	1a001d0a <dir_sdi+0x56>
	if (dp->sect == 0) return FR_INT_ERR;
1a001d64:	2002      	movs	r0, #2
1a001d66:	e7d0      	b.n	1a001d0a <dir_sdi+0x56>

1a001d68 <create_chain>:
{
1a001d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001d6c:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
1a001d6e:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
1a001d70:	4689      	mov	r9, r1
1a001d72:	b931      	cbnz	r1, 1a001d82 <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
1a001d74:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001d76:	b1a6      	cbz	r6, 1a001da2 <create_chain+0x3a>
1a001d78:	69fb      	ldr	r3, [r7, #28]
1a001d7a:	42b3      	cmp	r3, r6
1a001d7c:	d812      	bhi.n	1a001da4 <create_chain+0x3c>
1a001d7e:	2601      	movs	r6, #1
1a001d80:	e010      	b.n	1a001da4 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a001d82:	f7ff fee0 	bl	1a001b46 <get_fat>
1a001d86:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
1a001d88:	2801      	cmp	r0, #1
1a001d8a:	f240 80c6 	bls.w	1a001f1a <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1a001d8e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001d92:	f000 80c3 	beq.w	1a001f1c <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a001d96:	69fb      	ldr	r3, [r7, #28]
1a001d98:	4283      	cmp	r3, r0
1a001d9a:	f200 80bf 	bhi.w	1a001f1c <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
1a001d9e:	464e      	mov	r6, r9
1a001da0:	e000      	b.n	1a001da4 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001da2:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
1a001da4:	69bd      	ldr	r5, [r7, #24]
1a001da6:	2d00      	cmp	r5, #0
1a001da8:	f000 80b8 	beq.w	1a001f1c <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001dac:	783b      	ldrb	r3, [r7, #0]
1a001dae:	2b04      	cmp	r3, #4
1a001db0:	d003      	beq.n	1a001dba <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
1a001db2:	454e      	cmp	r6, r9
1a001db4:	d055      	beq.n	1a001e62 <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001db6:	4634      	mov	r4, r6
1a001db8:	e095      	b.n	1a001ee6 <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001dba:	2201      	movs	r2, #1
1a001dbc:	4631      	mov	r1, r6
1a001dbe:	4638      	mov	r0, r7
1a001dc0:	f7ff fd82 	bl	1a0018c8 <find_bitmap>
1a001dc4:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1a001dc6:	1e43      	subs	r3, r0, #1
1a001dc8:	f113 0f03 	cmn.w	r3, #3
1a001dcc:	f200 80a6 	bhi.w	1a001f1c <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1a001dd0:	2301      	movs	r3, #1
1a001dd2:	461a      	mov	r2, r3
1a001dd4:	4601      	mov	r1, r0
1a001dd6:	4638      	mov	r0, r7
1a001dd8:	f7ff fdb9 	bl	1a00194e <change_bitmap>
1a001ddc:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
1a001dde:	2802      	cmp	r0, #2
1a001de0:	f000 809f 	beq.w	1a001f22 <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001de4:	2801      	cmp	r0, #1
1a001de6:	f000 809e 	beq.w	1a001f26 <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
1a001dea:	f1b9 0f00 	cmp.w	r9, #0
1a001dee:	d11e      	bne.n	1a001e2e <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
1a001df0:	2202      	movs	r2, #2
1a001df2:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1a001df6:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001dfa:	2a02      	cmp	r2, #2
1a001dfc:	f000 8082 	beq.w	1a001f04 <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1a001e00:	f109 0201 	add.w	r2, r9, #1
1a001e04:	42aa      	cmp	r2, r5
1a001e06:	d022      	beq.n	1a001e4e <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
1a001e08:	f8d8 301c 	ldr.w	r3, [r8, #28]
1a001e0c:	b913      	cbnz	r3, 1a001e14 <create_chain+0xac>
1a001e0e:	2301      	movs	r3, #1
1a001e10:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
1a001e14:	462a      	mov	r2, r5
1a001e16:	4649      	mov	r1, r9
1a001e18:	4640      	mov	r0, r8
1a001e1a:	f7ff fe63 	bl	1a001ae4 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
1a001e1e:	4603      	mov	r3, r0
1a001e20:	2800      	cmp	r0, #0
1a001e22:	d171      	bne.n	1a001f08 <create_chain+0x1a0>
1a001e24:	2201      	movs	r2, #1
1a001e26:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001e2a:	462c      	mov	r4, r5
1a001e2c:	e03e      	b.n	1a001eac <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1a001e2e:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001e32:	2a02      	cmp	r2, #2
1a001e34:	d1df      	bne.n	1a001df6 <create_chain+0x8e>
1a001e36:	1c72      	adds	r2, r6, #1
1a001e38:	42aa      	cmp	r2, r5
1a001e3a:	d0dc      	beq.n	1a001df6 <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1a001e3c:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a001e40:	1ab2      	subs	r2, r6, r2
1a001e42:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
1a001e46:	2203      	movs	r2, #3
1a001e48:	f888 2007 	strb.w	r2, [r8, #7]
1a001e4c:	e7d3      	b.n	1a001df6 <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001e4e:	f8d8 201c 	ldr.w	r2, [r8, #28]
1a001e52:	b122      	cbz	r2, 1a001e5e <create_chain+0xf6>
1a001e54:	3201      	adds	r2, #1
1a001e56:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001e5a:	462c      	mov	r4, r5
1a001e5c:	e026      	b.n	1a001eac <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001e5e:	2202      	movs	r2, #2
1a001e60:	e7f9      	b.n	1a001e56 <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
1a001e62:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
1a001e64:	69fb      	ldr	r3, [r7, #28]
1a001e66:	42a3      	cmp	r3, r4
1a001e68:	d800      	bhi.n	1a001e6c <create_chain+0x104>
1a001e6a:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
1a001e6c:	4621      	mov	r1, r4
1a001e6e:	4640      	mov	r0, r8
1a001e70:	f7ff fe69 	bl	1a001b46 <get_fat>
1a001e74:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001e76:	2801      	cmp	r0, #1
1a001e78:	d050      	beq.n	1a001f1c <create_chain+0x1b4>
1a001e7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e7e:	d04d      	beq.n	1a001f1c <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
1a001e80:	b138      	cbz	r0, 1a001e92 <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1a001e82:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001e84:	2b01      	cmp	r3, #1
1a001e86:	d996      	bls.n	1a001db6 <create_chain+0x4e>
1a001e88:	69fa      	ldr	r2, [r7, #28]
1a001e8a:	429a      	cmp	r2, r3
1a001e8c:	d993      	bls.n	1a001db6 <create_chain+0x4e>
1a001e8e:	461e      	mov	r6, r3
1a001e90:	e791      	b.n	1a001db6 <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1a001e92:	2c00      	cmp	r4, #0
1a001e94:	d08f      	beq.n	1a001db6 <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1a001e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e9a:	4621      	mov	r1, r4
1a001e9c:	4638      	mov	r0, r7
1a001e9e:	f7ff fd92 	bl	1a0019c6 <put_fat>
		if (res == FR_OK && clst != 0) {
1a001ea2:	4603      	mov	r3, r0
1a001ea4:	b910      	cbnz	r0, 1a001eac <create_chain+0x144>
1a001ea6:	f1b9 0f00 	cmp.w	r9, #0
1a001eaa:	d124      	bne.n	1a001ef6 <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a001eac:	bb73      	cbnz	r3, 1a001f0c <create_chain+0x1a4>
		fs->last_clst = ncl;
1a001eae:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1a001eb0:	69ba      	ldr	r2, [r7, #24]
1a001eb2:	69fb      	ldr	r3, [r7, #28]
1a001eb4:	3b02      	subs	r3, #2
1a001eb6:	429a      	cmp	r2, r3
1a001eb8:	d801      	bhi.n	1a001ebe <create_chain+0x156>
1a001eba:	3a01      	subs	r2, #1
1a001ebc:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
1a001ebe:	793b      	ldrb	r3, [r7, #4]
1a001ec0:	f043 0301 	orr.w	r3, r3, #1
1a001ec4:	713b      	strb	r3, [r7, #4]
1a001ec6:	4625      	mov	r5, r4
1a001ec8:	e028      	b.n	1a001f1c <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
1a001eca:	4621      	mov	r1, r4
1a001ecc:	4640      	mov	r0, r8
1a001ece:	f7ff fe3a 	bl	1a001b46 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
1a001ed2:	4605      	mov	r5, r0
1a001ed4:	2800      	cmp	r0, #0
1a001ed6:	d0de      	beq.n	1a001e96 <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001ed8:	2801      	cmp	r0, #1
1a001eda:	d01f      	beq.n	1a001f1c <create_chain+0x1b4>
1a001edc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001ee0:	d01c      	beq.n	1a001f1c <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001ee2:	42b4      	cmp	r4, r6
1a001ee4:	d024      	beq.n	1a001f30 <create_chain+0x1c8>
				ncl++;							/* Next cluster */
1a001ee6:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a001ee8:	69fb      	ldr	r3, [r7, #28]
1a001eea:	42a3      	cmp	r3, r4
1a001eec:	d8ed      	bhi.n	1a001eca <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001eee:	2e01      	cmp	r6, #1
1a001ef0:	d91c      	bls.n	1a001f2c <create_chain+0x1c4>
					ncl = 2;
1a001ef2:	2402      	movs	r4, #2
1a001ef4:	e7e9      	b.n	1a001eca <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1a001ef6:	4622      	mov	r2, r4
1a001ef8:	4649      	mov	r1, r9
1a001efa:	4638      	mov	r0, r7
1a001efc:	f7ff fd63 	bl	1a0019c6 <put_fat>
1a001f00:	4603      	mov	r3, r0
1a001f02:	e7d3      	b.n	1a001eac <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001f04:	462c      	mov	r4, r5
1a001f06:	e7d1      	b.n	1a001eac <create_chain+0x144>
1a001f08:	462c      	mov	r4, r5
1a001f0a:	e7cf      	b.n	1a001eac <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1a001f0c:	2b01      	cmp	r3, #1
1a001f0e:	d001      	beq.n	1a001f14 <create_chain+0x1ac>
1a001f10:	2501      	movs	r5, #1
1a001f12:	e003      	b.n	1a001f1c <create_chain+0x1b4>
1a001f14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001f18:	e000      	b.n	1a001f1c <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
1a001f1a:	2501      	movs	r5, #1
}
1a001f1c:	4628      	mov	r0, r5
1a001f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
1a001f22:	2501      	movs	r5, #1
1a001f24:	e7fa      	b.n	1a001f1c <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001f26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001f2a:	e7f7      	b.n	1a001f1c <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001f2c:	2500      	movs	r5, #0
1a001f2e:	e7f5      	b.n	1a001f1c <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001f30:	2500      	movs	r5, #0
1a001f32:	e7f3      	b.n	1a001f1c <create_chain+0x1b4>

1a001f34 <remove_chain>:
{
1a001f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
1a001f38:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a001f3a:	2901      	cmp	r1, #1
1a001f3c:	f240 8087 	bls.w	1a00204e <remove_chain+0x11a>
1a001f40:	4607      	mov	r7, r0
1a001f42:	460e      	mov	r6, r1
1a001f44:	4691      	mov	r9, r2
1a001f46:	69e3      	ldr	r3, [r4, #28]
1a001f48:	428b      	cmp	r3, r1
1a001f4a:	f240 8082 	bls.w	1a002052 <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a001f4e:	b172      	cbz	r2, 1a001f6e <remove_chain+0x3a>
1a001f50:	7823      	ldrb	r3, [r4, #0]
1a001f52:	2b04      	cmp	r3, #4
1a001f54:	d102      	bne.n	1a001f5c <remove_chain+0x28>
1a001f56:	79c3      	ldrb	r3, [r0, #7]
1a001f58:	2b02      	cmp	r3, #2
1a001f5a:	d008      	beq.n	1a001f6e <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a001f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001f60:	4649      	mov	r1, r9
1a001f62:	4620      	mov	r0, r4
1a001f64:	f7ff fd2f 	bl	1a0019c6 <put_fat>
		if (res != FR_OK) return res;
1a001f68:	4603      	mov	r3, r0
1a001f6a:	2800      	cmp	r0, #0
1a001f6c:	d172      	bne.n	1a002054 <remove_chain+0x120>
{
1a001f6e:	46b0      	mov	r8, r6
1a001f70:	e012      	b.n	1a001f98 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a001f72:	2200      	movs	r2, #0
1a001f74:	4631      	mov	r1, r6
1a001f76:	4620      	mov	r0, r4
1a001f78:	f7ff fd25 	bl	1a0019c6 <put_fat>
			if (res != FR_OK) return res;
1a001f7c:	4603      	mov	r3, r0
1a001f7e:	b1c8      	cbz	r0, 1a001fb4 <remove_chain+0x80>
1a001f80:	e068      	b.n	1a002054 <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1a001f82:	1c73      	adds	r3, r6, #1
1a001f84:	42ab      	cmp	r3, r5
1a001f86:	d003      	beq.n	1a001f90 <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
1a001f88:	7823      	ldrb	r3, [r4, #0]
1a001f8a:	2b04      	cmp	r3, #4
1a001f8c:	d01e      	beq.n	1a001fcc <remove_chain+0x98>
			scl = ecl = nxt;
1a001f8e:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001f90:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
1a001f92:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001f94:	42ab      	cmp	r3, r5
1a001f96:	d925      	bls.n	1a001fe4 <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a001f98:	4631      	mov	r1, r6
1a001f9a:	4638      	mov	r0, r7
1a001f9c:	f7ff fdd3 	bl	1a001b46 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a001fa0:	4605      	mov	r5, r0
1a001fa2:	b1f8      	cbz	r0, 1a001fe4 <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001fa4:	2801      	cmp	r0, #1
1a001fa6:	d058      	beq.n	1a00205a <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001fa8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001fac:	d057      	beq.n	1a00205e <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001fae:	7823      	ldrb	r3, [r4, #0]
1a001fb0:	2b04      	cmp	r3, #4
1a001fb2:	d1de      	bne.n	1a001f72 <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1a001fb4:	69a2      	ldr	r2, [r4, #24]
1a001fb6:	69e3      	ldr	r3, [r4, #28]
1a001fb8:	3b02      	subs	r3, #2
1a001fba:	429a      	cmp	r2, r3
1a001fbc:	d2e1      	bcs.n	1a001f82 <remove_chain+0x4e>
			fs->free_clst++;
1a001fbe:	3201      	adds	r2, #1
1a001fc0:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
1a001fc2:	7923      	ldrb	r3, [r4, #4]
1a001fc4:	f043 0301 	orr.w	r3, r3, #1
1a001fc8:	7123      	strb	r3, [r4, #4]
1a001fca:	e7da      	b.n	1a001f82 <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
1a001fcc:	eba6 0208 	sub.w	r2, r6, r8
1a001fd0:	2300      	movs	r3, #0
1a001fd2:	3201      	adds	r2, #1
1a001fd4:	4641      	mov	r1, r8
1a001fd6:	4620      	mov	r0, r4
1a001fd8:	f7ff fcb9 	bl	1a00194e <change_bitmap>
				if (res != FR_OK) return res;
1a001fdc:	4603      	mov	r3, r0
1a001fde:	bbc8      	cbnz	r0, 1a002054 <remove_chain+0x120>
			scl = ecl = nxt;
1a001fe0:	46a8      	mov	r8, r5
1a001fe2:	e7d5      	b.n	1a001f90 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
1a001fe4:	7823      	ldrb	r3, [r4, #0]
1a001fe6:	2b04      	cmp	r3, #4
1a001fe8:	d001      	beq.n	1a001fee <remove_chain+0xba>
	return FR_OK;
1a001fea:	2300      	movs	r3, #0
1a001fec:	e032      	b.n	1a002054 <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
1a001fee:	f1b9 0f00 	cmp.w	r9, #0
1a001ff2:	d102      	bne.n	1a001ffa <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
1a001ff4:	2300      	movs	r3, #0
1a001ff6:	71fb      	strb	r3, [r7, #7]
1a001ff8:	e02c      	b.n	1a002054 <remove_chain+0x120>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1a001ffa:	79fb      	ldrb	r3, [r7, #7]
1a001ffc:	b9c3      	cbnz	r3, 1a002030 <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1a001ffe:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
1a002000:	454c      	cmp	r4, r9
1a002002:	d00d      	beq.n	1a002020 <remove_chain+0xec>
					nxt = get_fat(obj, clst);
1a002004:	4621      	mov	r1, r4
1a002006:	4638      	mov	r0, r7
1a002008:	f7ff fd9d 	bl	1a001b46 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
1a00200c:	2801      	cmp	r0, #1
1a00200e:	d928      	bls.n	1a002062 <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a002010:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002014:	d027      	beq.n	1a002066 <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
1a002016:	1c63      	adds	r3, r4, #1
1a002018:	4283      	cmp	r3, r0
1a00201a:	d101      	bne.n	1a002020 <remove_chain+0xec>
					clst++;
1a00201c:	461c      	mov	r4, r3
1a00201e:	e7ef      	b.n	1a002000 <remove_chain+0xcc>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
1a002020:	454c      	cmp	r4, r9
1a002022:	d001      	beq.n	1a002028 <remove_chain+0xf4>
	return FR_OK;
1a002024:	2300      	movs	r3, #0
1a002026:	e015      	b.n	1a002054 <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
1a002028:	2302      	movs	r3, #2
1a00202a:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a00202c:	2300      	movs	r3, #0
1a00202e:	e011      	b.n	1a002054 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a002030:	2b03      	cmp	r3, #3
1a002032:	d001      	beq.n	1a002038 <remove_chain+0x104>
	return FR_OK;
1a002034:	2300      	movs	r3, #0
1a002036:	e00d      	b.n	1a002054 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a002038:	68bb      	ldr	r3, [r7, #8]
1a00203a:	454b      	cmp	r3, r9
1a00203c:	d815      	bhi.n	1a00206a <remove_chain+0x136>
1a00203e:	69ba      	ldr	r2, [r7, #24]
1a002040:	4413      	add	r3, r2
1a002042:	454b      	cmp	r3, r9
1a002044:	d313      	bcc.n	1a00206e <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
1a002046:	2302      	movs	r3, #2
1a002048:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a00204a:	2300      	movs	r3, #0
1a00204c:	e002      	b.n	1a002054 <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a00204e:	2302      	movs	r3, #2
1a002050:	e000      	b.n	1a002054 <remove_chain+0x120>
1a002052:	2302      	movs	r3, #2
}
1a002054:	4618      	mov	r0, r3
1a002056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a00205a:	2302      	movs	r3, #2
1a00205c:	e7fa      	b.n	1a002054 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a00205e:	2301      	movs	r3, #1
1a002060:	e7f8      	b.n	1a002054 <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
1a002062:	2302      	movs	r3, #2
1a002064:	e7f6      	b.n	1a002054 <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a002066:	2301      	movs	r3, #1
1a002068:	e7f4      	b.n	1a002054 <remove_chain+0x120>
	return FR_OK;
1a00206a:	2300      	movs	r3, #0
1a00206c:	e7f2      	b.n	1a002054 <remove_chain+0x120>
1a00206e:	2300      	movs	r3, #0
1a002070:	e7f0      	b.n	1a002054 <remove_chain+0x120>

1a002072 <dir_clear>:
{
1a002072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002074:	4605      	mov	r5, r0
1a002076:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a002078:	f7ff f94c 	bl	1a001314 <sync_window>
1a00207c:	b108      	cbz	r0, 1a002082 <dir_clear+0x10>
1a00207e:	2001      	movs	r0, #1
}
1a002080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
1a002082:	4621      	mov	r1, r4
1a002084:	4628      	mov	r0, r5
1a002086:	f7fe ff81 	bl	1a000f8c <clst2sect>
1a00208a:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
1a00208c:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
1a00208e:	f105 0638 	add.w	r6, r5, #56	; 0x38
1a002092:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002096:	2100      	movs	r1, #0
1a002098:	4630      	mov	r0, r6
1a00209a:	f7fe fef9 	bl	1a000e90 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
1a00209e:	2400      	movs	r4, #0
1a0020a0:	e000      	b.n	1a0020a4 <dir_clear+0x32>
1a0020a2:	3401      	adds	r4, #1
1a0020a4:	896b      	ldrh	r3, [r5, #10]
1a0020a6:	42a3      	cmp	r3, r4
1a0020a8:	d907      	bls.n	1a0020ba <dir_clear+0x48>
1a0020aa:	2301      	movs	r3, #1
1a0020ac:	19e2      	adds	r2, r4, r7
1a0020ae:	4631      	mov	r1, r6
1a0020b0:	7868      	ldrb	r0, [r5, #1]
1a0020b2:	f002 fcd1 	bl	1a004a58 <disk_write>
1a0020b6:	2800      	cmp	r0, #0
1a0020b8:	d0f3      	beq.n	1a0020a2 <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1a0020ba:	8968      	ldrh	r0, [r5, #10]
1a0020bc:	1b00      	subs	r0, r0, r4
1a0020be:	bf18      	it	ne
1a0020c0:	2001      	movne	r0, #1
1a0020c2:	e7dd      	b.n	1a002080 <dir_clear+0xe>

1a0020c4 <dir_next>:
{
1a0020c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
1a0020c8:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a0020ca:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a0020cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0020ce:	2b00      	cmp	r3, #0
1a0020d0:	d056      	beq.n	1a002180 <dir_next+0xbc>
1a0020d2:	3520      	adds	r5, #32
1a0020d4:	7832      	ldrb	r2, [r6, #0]
1a0020d6:	2a04      	cmp	r2, #4
1a0020d8:	d018      	beq.n	1a00210c <dir_next+0x48>
1a0020da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1a0020de:	42aa      	cmp	r2, r5
1a0020e0:	d950      	bls.n	1a002184 <dir_next+0xc0>
1a0020e2:	4688      	mov	r8, r1
1a0020e4:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a0020e6:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a0020ea:	b93f      	cbnz	r7, 1a0020fc <dir_next+0x38>
		dp->sect++;				/* Next sector */
1a0020ec:	3301      	adds	r3, #1
1a0020ee:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
1a0020f0:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a0020f2:	b991      	cbnz	r1, 1a00211a <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a0020f4:	8933      	ldrh	r3, [r6, #8]
1a0020f6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a0020fa:	d90a      	bls.n	1a002112 <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
1a0020fc:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a0020fe:	f106 0338 	add.w	r3, r6, #56	; 0x38
1a002102:	443b      	add	r3, r7
1a002104:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
1a002106:	2000      	movs	r0, #0
}
1a002108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a00210c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002110:	e7e5      	b.n	1a0020de <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
1a002112:	2300      	movs	r3, #0
1a002114:	6383      	str	r3, [r0, #56]	; 0x38
1a002116:	2004      	movs	r0, #4
1a002118:	e7f6      	b.n	1a002108 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1a00211a:	8973      	ldrh	r3, [r6, #10]
1a00211c:	3b01      	subs	r3, #1
1a00211e:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a002122:	d1eb      	bne.n	1a0020fc <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1a002124:	f7ff fd0f 	bl	1a001b46 <get_fat>
1a002128:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a00212a:	2801      	cmp	r0, #1
1a00212c:	d92c      	bls.n	1a002188 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a00212e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002132:	d02b      	beq.n	1a00218c <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1a002134:	69f3      	ldr	r3, [r6, #28]
1a002136:	4283      	cmp	r3, r0
1a002138:	d816      	bhi.n	1a002168 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
1a00213a:	f1b8 0f00 	cmp.w	r8, #0
1a00213e:	d01b      	beq.n	1a002178 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a002140:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002142:	4620      	mov	r0, r4
1a002144:	f7ff fe10 	bl	1a001d68 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a002148:	4681      	mov	r9, r0
1a00214a:	b308      	cbz	r0, 1a002190 <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a00214c:	2801      	cmp	r0, #1
1a00214e:	d021      	beq.n	1a002194 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a002150:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002154:	d020      	beq.n	1a002198 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a002156:	4601      	mov	r1, r0
1a002158:	4630      	mov	r0, r6
1a00215a:	f7ff ff8a 	bl	1a002072 <dir_clear>
1a00215e:	b9e8      	cbnz	r0, 1a00219c <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1a002160:	79e3      	ldrb	r3, [r4, #7]
1a002162:	f043 0304 	orr.w	r3, r3, #4
1a002166:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
1a002168:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
1a00216c:	4649      	mov	r1, r9
1a00216e:	4630      	mov	r0, r6
1a002170:	f7fe ff0c 	bl	1a000f8c <clst2sect>
1a002174:	63a0      	str	r0, [r4, #56]	; 0x38
1a002176:	e7c1      	b.n	1a0020fc <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
1a002178:	2300      	movs	r3, #0
1a00217a:	63a3      	str	r3, [r4, #56]	; 0x38
1a00217c:	2004      	movs	r0, #4
1a00217e:	e7c3      	b.n	1a002108 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a002180:	2004      	movs	r0, #4
1a002182:	e7c1      	b.n	1a002108 <dir_next+0x44>
1a002184:	2004      	movs	r0, #4
1a002186:	e7bf      	b.n	1a002108 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a002188:	2002      	movs	r0, #2
1a00218a:	e7bd      	b.n	1a002108 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a00218c:	2001      	movs	r0, #1
1a00218e:	e7bb      	b.n	1a002108 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a002190:	2007      	movs	r0, #7
1a002192:	e7b9      	b.n	1a002108 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a002194:	2002      	movs	r0, #2
1a002196:	e7b7      	b.n	1a002108 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a002198:	2001      	movs	r0, #1
1a00219a:	e7b5      	b.n	1a002108 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a00219c:	2001      	movs	r0, #1
1a00219e:	e7b3      	b.n	1a002108 <dir_next+0x44>

1a0021a0 <load_xdir>:
{
1a0021a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0021a4:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1a0021a6:	6800      	ldr	r0, [r0, #0]
1a0021a8:	6907      	ldr	r7, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
1a0021aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0021ac:	f7ff f8da 	bl	1a001364 <move_window>
	if (res != FR_OK) return res;
1a0021b0:	4605      	mov	r5, r0
1a0021b2:	b920      	cbnz	r0, 1a0021be <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
1a0021b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a0021b6:	780b      	ldrb	r3, [r1, #0]
1a0021b8:	2b85      	cmp	r3, #133	; 0x85
1a0021ba:	d003      	beq.n	1a0021c4 <load_xdir+0x24>
1a0021bc:	2502      	movs	r5, #2
}
1a0021be:	4628      	mov	r0, r5
1a0021c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
1a0021c4:	2220      	movs	r2, #32
1a0021c6:	4638      	mov	r0, r7
1a0021c8:	f7fe fe59 	bl	1a000e7e <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1a0021cc:	787e      	ldrb	r6, [r7, #1]
1a0021ce:	3601      	adds	r6, #1
1a0021d0:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a0021d2:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
1a0021d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0021da:	d859      	bhi.n	1a002290 <load_xdir+0xf0>
	res = dir_next(dp, 0);
1a0021dc:	2100      	movs	r1, #0
1a0021de:	4620      	mov	r0, r4
1a0021e0:	f7ff ff70 	bl	1a0020c4 <dir_next>
1a0021e4:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a0021e6:	2804      	cmp	r0, #4
1a0021e8:	d00e      	beq.n	1a002208 <load_xdir+0x68>
	if (res != FR_OK) return res;
1a0021ea:	2800      	cmp	r0, #0
1a0021ec:	d1e7      	bne.n	1a0021be <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
1a0021ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0021f0:	6820      	ldr	r0, [r4, #0]
1a0021f2:	f7ff f8b7 	bl	1a001364 <move_window>
	if (res != FR_OK) return res;
1a0021f6:	4605      	mov	r5, r0
1a0021f8:	2800      	cmp	r0, #0
1a0021fa:	d1e0      	bne.n	1a0021be <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
1a0021fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a0021fe:	780b      	ldrb	r3, [r1, #0]
1a002200:	2bc0      	cmp	r3, #192	; 0xc0
1a002202:	d003      	beq.n	1a00220c <load_xdir+0x6c>
1a002204:	2502      	movs	r5, #2
1a002206:	e7da      	b.n	1a0021be <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a002208:	2502      	movs	r5, #2
	if (res != FR_OK) return res;
1a00220a:	e7d8      	b.n	1a0021be <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
1a00220c:	2220      	movs	r2, #32
1a00220e:	18b8      	adds	r0, r7, r2
1a002210:	f7fe fe35 	bl	1a000e7e <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a002214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
1a002218:	332c      	adds	r3, #44	; 0x2c
1a00221a:	4a20      	ldr	r2, [pc, #128]	; (1a00229c <load_xdir+0xfc>)
1a00221c:	fba2 2303 	umull	r2, r3, r2, r3
1a002220:	08db      	lsrs	r3, r3, #3
1a002222:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
1a002226:	d335      	bcc.n	1a002294 <load_xdir+0xf4>
	i = 2 * SZDIRE;	/* C1 offset to load */
1a002228:	f04f 0840 	mov.w	r8, #64	; 0x40
1a00222c:	e005      	b.n	1a00223a <load_xdir+0x9a>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a00222e:	2502      	movs	r5, #2
		if (res != FR_OK) return res;
1a002230:	e7c5      	b.n	1a0021be <load_xdir+0x1e>
	} while ((i += SZDIRE) < sz_ent);
1a002232:	f108 0820 	add.w	r8, r8, #32
1a002236:	4546      	cmp	r6, r8
1a002238:	d91c      	bls.n	1a002274 <load_xdir+0xd4>
		res = dir_next(dp, 0);
1a00223a:	2100      	movs	r1, #0
1a00223c:	4620      	mov	r0, r4
1a00223e:	f7ff ff41 	bl	1a0020c4 <dir_next>
1a002242:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a002244:	2804      	cmp	r0, #4
1a002246:	d0f2      	beq.n	1a00222e <load_xdir+0x8e>
		if (res != FR_OK) return res;
1a002248:	2800      	cmp	r0, #0
1a00224a:	d1b8      	bne.n	1a0021be <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
1a00224c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a00224e:	6820      	ldr	r0, [r4, #0]
1a002250:	f7ff f888 	bl	1a001364 <move_window>
		if (res != FR_OK) return res;
1a002254:	4605      	mov	r5, r0
1a002256:	2800      	cmp	r0, #0
1a002258:	d1b1      	bne.n	1a0021be <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a00225a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a00225c:	780b      	ldrb	r3, [r1, #0]
1a00225e:	2bc1      	cmp	r3, #193	; 0xc1
1a002260:	d11a      	bne.n	1a002298 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
1a002262:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a002266:	d2e4      	bcs.n	1a002232 <load_xdir+0x92>
1a002268:	2220      	movs	r2, #32
1a00226a:	eb07 0008 	add.w	r0, r7, r8
1a00226e:	f7fe fe06 	bl	1a000e7e <mem_cpy>
1a002272:	e7de      	b.n	1a002232 <load_xdir+0x92>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
1a002274:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a002278:	d8a1      	bhi.n	1a0021be <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1a00227a:	4638      	mov	r0, r7
1a00227c:	f7fe ff9f 	bl	1a0011be <xdir_sum>
1a002280:	4604      	mov	r4, r0
1a002282:	1cb8      	adds	r0, r7, #2
1a002284:	f7fe fda4 	bl	1a000dd0 <ld_word>
1a002288:	4284      	cmp	r4, r0
1a00228a:	d098      	beq.n	1a0021be <load_xdir+0x1e>
1a00228c:	2502      	movs	r5, #2
1a00228e:	e796      	b.n	1a0021be <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a002290:	2502      	movs	r5, #2
1a002292:	e794      	b.n	1a0021be <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a002294:	2502      	movs	r5, #2
1a002296:	e792      	b.n	1a0021be <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a002298:	2502      	movs	r5, #2
1a00229a:	e790      	b.n	1a0021be <load_xdir+0x1e>
1a00229c:	88888889 	.word	0x88888889

1a0022a0 <load_obj_xdir>:
{
1a0022a0:	b510      	push	{r4, lr}
1a0022a2:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
1a0022a4:	680b      	ldr	r3, [r1, #0]
1a0022a6:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
1a0022a8:	6a0b      	ldr	r3, [r1, #32]
1a0022aa:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
1a0022ac:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
1a0022b0:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1a0022b2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
1a0022b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0022b8:	2200      	movs	r2, #0
1a0022ba:	6103      	str	r3, [r0, #16]
1a0022bc:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
1a0022be:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
1a0022c0:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a0022c2:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
1a0022c4:	f7ff fcf6 	bl	1a001cb4 <dir_sdi>
	if (res == FR_OK) {
1a0022c8:	4603      	mov	r3, r0
1a0022ca:	b108      	cbz	r0, 1a0022d0 <load_obj_xdir+0x30>
}
1a0022cc:	4618      	mov	r0, r3
1a0022ce:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
1a0022d0:	4620      	mov	r0, r4
1a0022d2:	f7ff ff65 	bl	1a0021a0 <load_xdir>
1a0022d6:	4603      	mov	r3, r0
1a0022d8:	e7f8      	b.n	1a0022cc <load_obj_xdir+0x2c>

1a0022da <dir_read>:
{
1a0022da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0022de:	4604      	mov	r4, r0
1a0022e0:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
1a0022e2:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
1a0022e4:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a0022e8:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
1a0022ea:	2504      	movs	r5, #4
	while (dp->sect) {
1a0022ec:	e008      	b.n	1a002300 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
1a0022ee:	2b85      	cmp	r3, #133	; 0x85
1a0022f0:	d028      	beq.n	1a002344 <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
1a0022f2:	2100      	movs	r1, #0
1a0022f4:	4620      	mov	r0, r4
1a0022f6:	f7ff fee5 	bl	1a0020c4 <dir_next>
		if (res != FR_OK) break;
1a0022fa:	4605      	mov	r5, r0
1a0022fc:	2800      	cmp	r0, #0
1a0022fe:	d15b      	bne.n	1a0023b8 <dir_read+0xde>
	while (dp->sect) {
1a002300:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002302:	2900      	cmp	r1, #0
1a002304:	d058      	beq.n	1a0023b8 <dir_read+0xde>
		res = move_window(fs, dp->sect);
1a002306:	4630      	mov	r0, r6
1a002308:	f7ff f82c 	bl	1a001364 <move_window>
		if (res != FR_OK) break;
1a00230c:	4605      	mov	r5, r0
1a00230e:	2800      	cmp	r0, #0
1a002310:	d152      	bne.n	1a0023b8 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
1a002312:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a002314:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
1a002316:	2b00      	cmp	r3, #0
1a002318:	d04d      	beq.n	1a0023b6 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a00231a:	7832      	ldrb	r2, [r6, #0]
1a00231c:	2a04      	cmp	r2, #4
1a00231e:	d0e6      	beq.n	1a0022ee <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
1a002320:	7aca      	ldrb	r2, [r1, #11]
1a002322:	f002 023f 	and.w	r2, r2, #63	; 0x3f
1a002326:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
1a002328:	2be5      	cmp	r3, #229	; 0xe5
1a00232a:	d03e      	beq.n	1a0023aa <dir_read+0xd0>
1a00232c:	2b2e      	cmp	r3, #46	; 0x2e
1a00232e:	d03e      	beq.n	1a0023ae <dir_read+0xd4>
1a002330:	f022 0020 	bic.w	r0, r2, #32
1a002334:	2808      	cmp	r0, #8
1a002336:	bf14      	ite	ne
1a002338:	2000      	movne	r0, #0
1a00233a:	2001      	moveq	r0, #1
1a00233c:	4540      	cmp	r0, r8
1a00233e:	d00e      	beq.n	1a00235e <dir_read+0x84>
				ord = 0xFF;
1a002340:	27ff      	movs	r7, #255	; 0xff
1a002342:	e7d6      	b.n	1a0022f2 <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
1a002344:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002346:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
1a002348:	4620      	mov	r0, r4
1a00234a:	f7ff ff29 	bl	1a0021a0 <load_xdir>
					if (res == FR_OK) {
1a00234e:	4605      	mov	r5, r0
1a002350:	bb90      	cbnz	r0, 1a0023b8 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
1a002352:	6933      	ldr	r3, [r6, #16]
1a002354:	791b      	ldrb	r3, [r3, #4]
1a002356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a00235a:	71a3      	strb	r3, [r4, #6]
1a00235c:	e02c      	b.n	1a0023b8 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
1a00235e:	2a0f      	cmp	r2, #15
1a002360:	d119      	bne.n	1a002396 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
1a002362:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002366:	d006      	beq.n	1a002376 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
1a002368:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
1a00236c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
1a002370:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a002372:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
1a002374:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002376:	42bb      	cmp	r3, r7
1a002378:	d001      	beq.n	1a00237e <dir_read+0xa4>
1a00237a:	27ff      	movs	r7, #255	; 0xff
1a00237c:	e7b9      	b.n	1a0022f2 <dir_read+0x18>
1a00237e:	7b4b      	ldrb	r3, [r1, #13]
1a002380:	454b      	cmp	r3, r9
1a002382:	d001      	beq.n	1a002388 <dir_read+0xae>
1a002384:	27ff      	movs	r7, #255	; 0xff
1a002386:	e7b4      	b.n	1a0022f2 <dir_read+0x18>
1a002388:	68f0      	ldr	r0, [r6, #12]
1a00238a:	f7fe fe31 	bl	1a000ff0 <pick_lfn>
1a00238e:	b180      	cbz	r0, 1a0023b2 <dir_read+0xd8>
1a002390:	3f01      	subs	r7, #1
1a002392:	b2ff      	uxtb	r7, r7
1a002394:	e7ad      	b.n	1a0022f2 <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
1a002396:	b927      	cbnz	r7, 1a0023a2 <dir_read+0xc8>
1a002398:	4608      	mov	r0, r1
1a00239a:	f7fe ff02 	bl	1a0011a2 <sum_sfn>
1a00239e:	4548      	cmp	r0, r9
1a0023a0:	d00a      	beq.n	1a0023b8 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
1a0023a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0023a6:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0023a8:	e006      	b.n	1a0023b8 <dir_read+0xde>
				ord = 0xFF;
1a0023aa:	27ff      	movs	r7, #255	; 0xff
1a0023ac:	e7a1      	b.n	1a0022f2 <dir_read+0x18>
1a0023ae:	27ff      	movs	r7, #255	; 0xff
1a0023b0:	e79f      	b.n	1a0022f2 <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a0023b2:	27ff      	movs	r7, #255	; 0xff
1a0023b4:	e79d      	b.n	1a0022f2 <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
1a0023b6:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
1a0023b8:	b10d      	cbz	r5, 1a0023be <dir_read+0xe4>
1a0023ba:	2300      	movs	r3, #0
1a0023bc:	63a3      	str	r3, [r4, #56]	; 0x38
}
1a0023be:	4628      	mov	r0, r5
1a0023c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0023c4 <dir_alloc>:
{
1a0023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0023c6:	4604      	mov	r4, r0
1a0023c8:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
1a0023ca:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
1a0023cc:	2100      	movs	r1, #0
1a0023ce:	f7ff fc71 	bl	1a001cb4 <dir_sdi>
	if (res == FR_OK) {
1a0023d2:	4602      	mov	r2, r0
1a0023d4:	bb30      	cbnz	r0, 1a002424 <dir_alloc+0x60>
		n = 0;
1a0023d6:	2500      	movs	r5, #0
1a0023d8:	e00e      	b.n	1a0023f8 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a0023da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0023dc:	f993 3000 	ldrsb.w	r3, [r3]
1a0023e0:	43db      	mvns	r3, r3
1a0023e2:	0fdb      	lsrs	r3, r3, #31
1a0023e4:	b1e3      	cbz	r3, 1a002420 <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a0023e6:	3501      	adds	r5, #1
1a0023e8:	42bd      	cmp	r5, r7
1a0023ea:	d01b      	beq.n	1a002424 <dir_alloc+0x60>
			res = dir_next(dp, 1);
1a0023ec:	2101      	movs	r1, #1
1a0023ee:	4620      	mov	r0, r4
1a0023f0:	f7ff fe68 	bl	1a0020c4 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a0023f4:	4602      	mov	r2, r0
1a0023f6:	b9a8      	cbnz	r0, 1a002424 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
1a0023f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0023fa:	4630      	mov	r0, r6
1a0023fc:	f7fe ffb2 	bl	1a001364 <move_window>
			if (res != FR_OK) break;
1a002400:	4602      	mov	r2, r0
1a002402:	b978      	cbnz	r0, 1a002424 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a002404:	7833      	ldrb	r3, [r6, #0]
1a002406:	2b04      	cmp	r3, #4
1a002408:	d0e7      	beq.n	1a0023da <dir_alloc+0x16>
1a00240a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00240c:	781b      	ldrb	r3, [r3, #0]
1a00240e:	2be5      	cmp	r3, #229	; 0xe5
1a002410:	d002      	beq.n	1a002418 <dir_alloc+0x54>
1a002412:	b91b      	cbnz	r3, 1a00241c <dir_alloc+0x58>
1a002414:	2301      	movs	r3, #1
1a002416:	e7e5      	b.n	1a0023e4 <dir_alloc+0x20>
1a002418:	2301      	movs	r3, #1
1a00241a:	e7e3      	b.n	1a0023e4 <dir_alloc+0x20>
1a00241c:	2300      	movs	r3, #0
1a00241e:	e7e1      	b.n	1a0023e4 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
1a002420:	2500      	movs	r5, #0
1a002422:	e7e3      	b.n	1a0023ec <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a002424:	2a04      	cmp	r2, #4
1a002426:	d001      	beq.n	1a00242c <dir_alloc+0x68>
}
1a002428:	4610      	mov	r0, r2
1a00242a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a00242c:	2207      	movs	r2, #7
1a00242e:	e7fb      	b.n	1a002428 <dir_alloc+0x64>

1a002430 <store_xdir>:
{
1a002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002432:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
1a002434:	6803      	ldr	r3, [r0, #0]
1a002436:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
1a002438:	4630      	mov	r0, r6
1a00243a:	f7fe fec0 	bl	1a0011be <xdir_sum>
1a00243e:	4601      	mov	r1, r0
1a002440:	1cb0      	adds	r0, r6, #2
1a002442:	f7fe fcfb 	bl	1a000e3c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
1a002446:	7877      	ldrb	r7, [r6, #1]
1a002448:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
1a00244a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1a00244c:	4620      	mov	r0, r4
1a00244e:	f7ff fc31 	bl	1a001cb4 <dir_sdi>
1a002452:	4605      	mov	r5, r0
	while (res == FR_OK) {
1a002454:	b9b5      	cbnz	r5, 1a002484 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
1a002456:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002458:	6820      	ldr	r0, [r4, #0]
1a00245a:	f7fe ff83 	bl	1a001364 <move_window>
		if (res != FR_OK) break;
1a00245e:	4605      	mov	r5, r0
1a002460:	b980      	cbnz	r0, 1a002484 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
1a002462:	2220      	movs	r2, #32
1a002464:	4631      	mov	r1, r6
1a002466:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a002468:	f7fe fd09 	bl	1a000e7e <mem_cpy>
		dp->obj.fs->wflag = 1;
1a00246c:	6823      	ldr	r3, [r4, #0]
1a00246e:	2201      	movs	r2, #1
1a002470:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
1a002472:	3f01      	subs	r7, #1
1a002474:	d006      	beq.n	1a002484 <store_xdir+0x54>
		dirb += SZDIRE;
1a002476:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
1a002478:	2100      	movs	r1, #0
1a00247a:	4620      	mov	r0, r4
1a00247c:	f7ff fe22 	bl	1a0020c4 <dir_next>
1a002480:	4605      	mov	r5, r0
1a002482:	e7e7      	b.n	1a002454 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
1a002484:	2d02      	cmp	r5, #2
1a002486:	bf28      	it	cs
1a002488:	2502      	movcs	r5, #2
}
1a00248a:	b2e8      	uxtb	r0, r5
1a00248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00248e:	Address 0x000000001a00248e is out of bounds.


1a002490 <create_name>:
{
1a002490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002494:	b085      	sub	sp, #20
1a002496:	4681      	mov	r9, r0
1a002498:	460f      	mov	r7, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1a00249a:	680b      	ldr	r3, [r1, #0]
1a00249c:	9303      	str	r3, [sp, #12]
1a00249e:	6803      	ldr	r3, [r0, #0]
1a0024a0:	68dd      	ldr	r5, [r3, #12]
1a0024a2:	2400      	movs	r4, #0
1a0024a4:	e00e      	b.n	1a0024c4 <create_name+0x34>
		wc = (WCHAR)uc;
1a0024a6:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
1a0024a8:	2e1f      	cmp	r6, #31
1a0024aa:	d924      	bls.n	1a0024f6 <create_name+0x66>
1a0024ac:	2e2f      	cmp	r6, #47	; 0x2f
1a0024ae:	d022      	beq.n	1a0024f6 <create_name+0x66>
1a0024b0:	2e5c      	cmp	r6, #92	; 0x5c
1a0024b2:	d020      	beq.n	1a0024f6 <create_name+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a0024b4:	2e7f      	cmp	r6, #127	; 0x7f
1a0024b6:	d914      	bls.n	1a0024e2 <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a0024b8:	2cfe      	cmp	r4, #254	; 0xfe
1a0024ba:	f200 8101 	bhi.w	1a0026c0 <create_name+0x230>
		lfn[di++] = wc;					/* Store the Unicode character */
1a0024be:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
1a0024c2:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
1a0024c4:	a803      	add	r0, sp, #12
1a0024c6:	f7fe fd01 	bl	1a000ecc <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a0024ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0024ce:	f000 80f5 	beq.w	1a0026bc <create_name+0x22c>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
1a0024d2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0024d6:	d3e6      	bcc.n	1a0024a6 <create_name+0x16>
1a0024d8:	0c03      	lsrs	r3, r0, #16
1a0024da:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
1a0024de:	3401      	adds	r4, #1
1a0024e0:	e7e1      	b.n	1a0024a6 <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a0024e2:	4631      	mov	r1, r6
1a0024e4:	4878      	ldr	r0, [pc, #480]	; (1a0026c8 <create_name+0x238>)
1a0024e6:	f7fe fce6 	bl	1a000eb6 <chk_chr>
1a0024ea:	2800      	cmp	r0, #0
1a0024ec:	d0e4      	beq.n	1a0024b8 <create_name+0x28>
1a0024ee:	2006      	movs	r0, #6
1a0024f0:	e08f      	b.n	1a002612 <create_name+0x182>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
1a0024f2:	3301      	adds	r3, #1
1a0024f4:	9303      	str	r3, [sp, #12]
1a0024f6:	9b03      	ldr	r3, [sp, #12]
1a0024f8:	781a      	ldrb	r2, [r3, #0]
1a0024fa:	2a2f      	cmp	r2, #47	; 0x2f
1a0024fc:	d0f9      	beq.n	1a0024f2 <create_name+0x62>
1a0024fe:	2a5c      	cmp	r2, #92	; 0x5c
1a002500:	d0f7      	beq.n	1a0024f2 <create_name+0x62>
	*path = p;							/* Return pointer to the next segment */
1a002502:	603b      	str	r3, [r7, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a002504:	2e1f      	cmp	r6, #31
1a002506:	d801      	bhi.n	1a00250c <create_name+0x7c>
1a002508:	2704      	movs	r7, #4
1a00250a:	e002      	b.n	1a002512 <create_name+0x82>
1a00250c:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a00250e:	e000      	b.n	1a002512 <create_name+0x82>
		di--;
1a002510:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a002512:	b144      	cbz	r4, 1a002526 <create_name+0x96>
		wc = lfn[di - 1];
1a002514:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a002518:	3b01      	subs	r3, #1
1a00251a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
1a00251e:	2b20      	cmp	r3, #32
1a002520:	d0f6      	beq.n	1a002510 <create_name+0x80>
1a002522:	2b2e      	cmp	r3, #46	; 0x2e
1a002524:	d0f4      	beq.n	1a002510 <create_name+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
1a002526:	2300      	movs	r3, #0
1a002528:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a00252c:	2c00      	cmp	r4, #0
1a00252e:	f000 80c9 	beq.w	1a0026c4 <create_name+0x234>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
1a002532:	461e      	mov	r6, r3
1a002534:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
1a002538:	2b20      	cmp	r3, #32
1a00253a:	d101      	bne.n	1a002540 <create_name+0xb0>
1a00253c:	3601      	adds	r6, #1
1a00253e:	e7f9      	b.n	1a002534 <create_name+0xa4>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
1a002540:	b90e      	cbnz	r6, 1a002546 <create_name+0xb6>
1a002542:	2b2e      	cmp	r3, #46	; 0x2e
1a002544:	d103      	bne.n	1a00254e <create_name+0xbe>
1a002546:	f047 0703 	orr.w	r7, r7, #3
1a00254a:	e000      	b.n	1a00254e <create_name+0xbe>
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
1a00254c:	3c01      	subs	r4, #1
1a00254e:	b134      	cbz	r4, 1a00255e <create_name+0xce>
1a002550:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a002554:	3b01      	subs	r3, #1
1a002556:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
1a00255a:	2b2e      	cmp	r3, #46	; 0x2e
1a00255c:	d1f6      	bne.n	1a00254c <create_name+0xbc>
	mem_set(dp->fn, ' ', 11);
1a00255e:	220b      	movs	r2, #11
1a002560:	2120      	movs	r1, #32
1a002562:	f109 0040 	add.w	r0, r9, #64	; 0x40
1a002566:	f7fe fc93 	bl	1a000e90 <mem_set>
	i = b = 0; ni = 8;
1a00256a:	f04f 0b08 	mov.w	fp, #8
1a00256e:	2300      	movs	r3, #0
1a002570:	9301      	str	r3, [sp, #4]
1a002572:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
1a002574:	f106 0801 	add.w	r8, r6, #1
1a002578:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
1a00257c:	b346      	cbz	r6, 1a0025d0 <create_name+0x140>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a00257e:	2e20      	cmp	r6, #32
1a002580:	d019      	beq.n	1a0025b6 <create_name+0x126>
1a002582:	2e2e      	cmp	r6, #46	; 0x2e
1a002584:	d015      	beq.n	1a0025b2 <create_name+0x122>
		if (i >= ni || si == di) {		/* End of field? */
1a002586:	9b01      	ldr	r3, [sp, #4]
1a002588:	455b      	cmp	r3, fp
1a00258a:	d218      	bcs.n	1a0025be <create_name+0x12e>
1a00258c:	4544      	cmp	r4, r8
1a00258e:	d016      	beq.n	1a0025be <create_name+0x12e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
1a002590:	2e7f      	cmp	r6, #127	; 0x7f
1a002592:	d84e      	bhi.n	1a002632 <create_name+0x1a2>
		if (wc >= 0x100) {				/* Is this a DBC? */
1a002594:	2eff      	cmp	r6, #255	; 0xff
1a002596:	d962      	bls.n	1a00265e <create_name+0x1ce>
			if (i >= ni - 1) {			/* Field overflow? */
1a002598:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a00259c:	9a01      	ldr	r2, [sp, #4]
1a00259e:	4293      	cmp	r3, r2
1a0025a0:	d957      	bls.n	1a002652 <create_name+0x1c2>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
1a0025a2:	9901      	ldr	r1, [sp, #4]
1a0025a4:	1c4b      	adds	r3, r1, #1
1a0025a6:	f3c6 2207 	ubfx	r2, r6, #8, #8
1a0025aa:	4449      	add	r1, r9
1a0025ac:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
1a0025b0:	e05a      	b.n	1a002668 <create_name+0x1d8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a0025b2:	4544      	cmp	r4, r8
1a0025b4:	d0e7      	beq.n	1a002586 <create_name+0xf6>
			cf |= NS_LOSS | NS_LFN;
1a0025b6:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a0025ba:	4646      	mov	r6, r8
			continue;
1a0025bc:	e7da      	b.n	1a002574 <create_name+0xe4>
			if (ni == 11) {				/* Name extension overflow? */
1a0025be:	f1bb 0f0b 	cmp.w	fp, #11
1a0025c2:	d029      	beq.n	1a002618 <create_name+0x188>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
1a0025c4:	4544      	cmp	r4, r8
1a0025c6:	d001      	beq.n	1a0025cc <create_name+0x13c>
1a0025c8:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
1a0025cc:	4544      	cmp	r4, r8
1a0025ce:	d226      	bcs.n	1a00261e <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a0025d0:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
1a0025d4:	2be5      	cmp	r3, #229	; 0xe5
1a0025d6:	d068      	beq.n	1a0026aa <create_name+0x21a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a0025d8:	f1bb 0f08 	cmp.w	fp, #8
1a0025dc:	d069      	beq.n	1a0026b2 <create_name+0x222>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
1a0025de:	f00a 030c 	and.w	r3, sl, #12
1a0025e2:	2b0c      	cmp	r3, #12
1a0025e4:	d003      	beq.n	1a0025ee <create_name+0x15e>
1a0025e6:	f00a 0303 	and.w	r3, sl, #3
1a0025ea:	2b03      	cmp	r3, #3
1a0025ec:	d101      	bne.n	1a0025f2 <create_name+0x162>
1a0025ee:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
1a0025f2:	f017 0f02 	tst.w	r7, #2
1a0025f6:	d109      	bne.n	1a00260c <create_name+0x17c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
1a0025f8:	f01a 0f01 	tst.w	sl, #1
1a0025fc:	d001      	beq.n	1a002602 <create_name+0x172>
1a0025fe:	f047 0710 	orr.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
1a002602:	f01a 0f04 	tst.w	sl, #4
1a002606:	d001      	beq.n	1a00260c <create_name+0x17c>
1a002608:	f047 0708 	orr.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
1a00260c:	f889 704b 	strb.w	r7, [r9, #75]	; 0x4b
	return FR_OK;
1a002610:	2000      	movs	r0, #0
}
1a002612:	b005      	add	sp, #20
1a002614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
1a002618:	f047 0703 	orr.w	r7, r7, #3
				break;
1a00261c:	e7d8      	b.n	1a0025d0 <create_name+0x140>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
1a00261e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a002622:	fa5f fa8a 	uxtb.w	sl, sl
1a002626:	4626      	mov	r6, r4
1a002628:	f04f 0b0b 	mov.w	fp, #11
1a00262c:	2308      	movs	r3, #8
1a00262e:	9301      	str	r3, [sp, #4]
			continue;
1a002630:	e7a0      	b.n	1a002574 <create_name+0xe4>
			cf |= NS_LFN;	/* LFN entry needs to be created */
1a002632:	f047 0702 	orr.w	r7, r7, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
1a002636:	f240 3152 	movw	r1, #850	; 0x352
1a00263a:	4630      	mov	r0, r6
1a00263c:	f000 fe7a 	bl	1a003334 <ff_uni2oem>
1a002640:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
1a002642:	f010 0f80 	tst.w	r0, #128	; 0x80
1a002646:	d0a5      	beq.n	1a002594 <create_name+0x104>
1a002648:	f000 067f 	and.w	r6, r0, #127	; 0x7f
1a00264c:	4b1f      	ldr	r3, [pc, #124]	; (1a0026cc <create_name+0x23c>)
1a00264e:	5d9e      	ldrb	r6, [r3, r6]
1a002650:	e7a0      	b.n	1a002594 <create_name+0x104>
				cf |= NS_LOSS | NS_LFN;
1a002652:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a002656:	4646      	mov	r6, r8
				i = ni; continue;		/* Next field */
1a002658:	f8cd b004 	str.w	fp, [sp, #4]
1a00265c:	e78a      	b.n	1a002574 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a00265e:	b956      	cbnz	r6, 1a002676 <create_name+0x1e6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1a002660:	f047 0703 	orr.w	r7, r7, #3
1a002664:	9b01      	ldr	r3, [sp, #4]
1a002666:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
1a002668:	1c5a      	adds	r2, r3, #1
1a00266a:	9201      	str	r2, [sp, #4]
1a00266c:	444b      	add	r3, r9
1a00266e:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
1a002672:	4646      	mov	r6, r8
1a002674:	e77e      	b.n	1a002574 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a002676:	4631      	mov	r1, r6
1a002678:	4815      	ldr	r0, [pc, #84]	; (1a0026d0 <create_name+0x240>)
1a00267a:	f7fe fc1c 	bl	1a000eb6 <chk_chr>
1a00267e:	2800      	cmp	r0, #0
1a002680:	d1ee      	bne.n	1a002660 <create_name+0x1d0>
				if (IsUpper(wc)) {		/* ASCII upper case? */
1a002682:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
1a002686:	b29b      	uxth	r3, r3
1a002688:	2b19      	cmp	r3, #25
1a00268a:	d801      	bhi.n	1a002690 <create_name+0x200>
					b |= 2;
1a00268c:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
1a002690:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
1a002694:	b29b      	uxth	r3, r3
1a002696:	2b19      	cmp	r3, #25
1a002698:	d805      	bhi.n	1a0026a6 <create_name+0x216>
					b |= 1; wc -= 0x20;
1a00269a:	f04a 0a01 	orr.w	sl, sl, #1
1a00269e:	3e20      	subs	r6, #32
1a0026a0:	b2b6      	uxth	r6, r6
1a0026a2:	9b01      	ldr	r3, [sp, #4]
1a0026a4:	e7e0      	b.n	1a002668 <create_name+0x1d8>
1a0026a6:	9b01      	ldr	r3, [sp, #4]
1a0026a8:	e7de      	b.n	1a002668 <create_name+0x1d8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a0026aa:	2305      	movs	r3, #5
1a0026ac:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
1a0026b0:	e792      	b.n	1a0025d8 <create_name+0x148>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a0026b2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a0026b6:	fa5f fa8a 	uxtb.w	sl, sl
1a0026ba:	e790      	b.n	1a0025de <create_name+0x14e>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a0026bc:	2006      	movs	r0, #6
1a0026be:	e7a8      	b.n	1a002612 <create_name+0x182>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a0026c0:	2006      	movs	r0, #6
1a0026c2:	e7a6      	b.n	1a002612 <create_name+0x182>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a0026c4:	2006      	movs	r0, #6
1a0026c6:	e7a4      	b.n	1a002612 <create_name+0x182>
1a0026c8:	1a00dfdc 	.word	0x1a00dfdc
1a0026cc:	1a00df2c 	.word	0x1a00df2c
1a0026d0:	1a00dfe8 	.word	0x1a00dfe8

1a0026d4 <xname_sum>:
{
1a0026d4:	b538      	push	{r3, r4, r5, lr}
1a0026d6:	4605      	mov	r5, r0
	WORD sum = 0;
1a0026d8:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
1a0026da:	f835 0b02 	ldrh.w	r0, [r5], #2
1a0026de:	b188      	cbz	r0, 1a002704 <xname_sum+0x30>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
1a0026e0:	f000 fe48 	bl	1a003374 <ff_wtoupper>
1a0026e4:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1a0026e6:	0863      	lsrs	r3, r4, #1
1a0026e8:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
1a0026ec:	b2c3      	uxtb	r3, r0
1a0026ee:	fa13 f484 	uxtah	r4, r3, r4
1a0026f2:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1a0026f4:	085c      	lsrs	r4, r3, #1
1a0026f6:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
1a0026fa:	0a00      	lsrs	r0, r0, #8
1a0026fc:	fa10 f484 	uxtah	r4, r0, r4
1a002700:	b2a4      	uxth	r4, r4
1a002702:	e7ea      	b.n	1a0026da <xname_sum+0x6>
}
1a002704:	4620      	mov	r0, r4
1a002706:	bd38      	pop	{r3, r4, r5, pc}

1a002708 <create_xdir>:
{
1a002708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00270c:	4607      	mov	r7, r0
1a00270e:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
1a002710:	2240      	movs	r2, #64	; 0x40
1a002712:	2100      	movs	r1, #0
1a002714:	f7fe fbbc 	bl	1a000e90 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;	/* 85 entry */
1a002718:	2385      	movs	r3, #133	; 0x85
1a00271a:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;	/* C0 entry */
1a00271c:	23c0      	movs	r3, #192	; 0xc0
1a00271e:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; wc = 1;
1a002722:	2501      	movs	r5, #1
1a002724:	2600      	movs	r6, #0
1a002726:	46b1      	mov	r9, r6
	i = SZDIRE * 2;	/* Top of C1 entries */
1a002728:	2440      	movs	r4, #64	; 0x40
1a00272a:	e017      	b.n	1a00275c <create_xdir+0x54>
			st_word(dirb + i, wc); 		/* Store it */
1a00272c:	4629      	mov	r1, r5
1a00272e:	1938      	adds	r0, r7, r4
1a002730:	f7fe fb84 	bl	1a000e3c <st_word>
			i += 2;
1a002734:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
1a002736:	f014 0f1f 	tst.w	r4, #31
1a00273a:	d008      	beq.n	1a00274e <create_xdir+0x46>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
1a00273c:	2d00      	cmp	r5, #0
1a00273e:	d0f5      	beq.n	1a00272c <create_xdir+0x24>
1a002740:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a002744:	2d00      	cmp	r5, #0
1a002746:	d0f1      	beq.n	1a00272c <create_xdir+0x24>
1a002748:	3601      	adds	r6, #1
1a00274a:	b2f6      	uxtb	r6, r6
1a00274c:	e7ee      	b.n	1a00272c <create_xdir+0x24>
		nc1++;
1a00274e:	f109 0301 	add.w	r3, r9, #1
1a002752:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
1a002754:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
1a002758:	b13a      	cbz	r2, 1a00276a <create_xdir+0x62>
		nc1++;
1a00275a:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
1a00275c:	1c63      	adds	r3, r4, #1
1a00275e:	22c1      	movs	r2, #193	; 0xc1
1a002760:	553a      	strb	r2, [r7, r4]
1a002762:	2200      	movs	r2, #0
1a002764:	54fa      	strb	r2, [r7, r3]
1a002766:	3402      	adds	r4, #2
1a002768:	e7e8      	b.n	1a00273c <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
1a00276a:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
1a00276e:	f109 0902 	add.w	r9, r9, #2
1a002772:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
1a002776:	4640      	mov	r0, r8
1a002778:	f7ff ffac 	bl	1a0026d4 <xname_sum>
1a00277c:	4601      	mov	r1, r0
1a00277e:	f107 0024 	add.w	r0, r7, #36	; 0x24
1a002782:	f7fe fb5b 	bl	1a000e3c <st_word>
}
1a002786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00278a:	Address 0x000000001a00278a is out of bounds.


1a00278c <cmp_lfn>:
{
1a00278c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002790:	4681      	mov	r9, r0
1a002792:	4688      	mov	r8, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a002794:	f101 001a 	add.w	r0, r1, #26
1a002798:	f7fe fb1a 	bl	1a000dd0 <ld_word>
1a00279c:	bbb8      	cbnz	r0, 1a00280e <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1a00279e:	f898 5000 	ldrb.w	r5, [r8]
1a0027a2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
1a0027a6:	3d01      	subs	r5, #1
1a0027a8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a0027ac:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a0027b0:	2701      	movs	r7, #1
1a0027b2:	2400      	movs	r4, #0
1a0027b4:	e006      	b.n	1a0027c4 <cmp_lfn+0x38>
				return 0;					/* Not matched */
1a0027b6:	2000      	movs	r0, #0
1a0027b8:	e02a      	b.n	1a002810 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0027ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0027be:	4298      	cmp	r0, r3
1a0027c0:	d128      	bne.n	1a002814 <cmp_lfn+0x88>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a0027c2:	3401      	adds	r4, #1
1a0027c4:	2c0c      	cmp	r4, #12
1a0027c6:	d817      	bhi.n	1a0027f8 <cmp_lfn+0x6c>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a0027c8:	4b16      	ldr	r3, [pc, #88]	; (1a002824 <cmp_lfn+0x98>)
1a0027ca:	5d18      	ldrb	r0, [r3, r4]
1a0027cc:	4440      	add	r0, r8
1a0027ce:	f7fe faff 	bl	1a000dd0 <ld_word>
1a0027d2:	4606      	mov	r6, r0
		if (wc != 0) {
1a0027d4:	2f00      	cmp	r7, #0
1a0027d6:	d0f0      	beq.n	1a0027ba <cmp_lfn+0x2e>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a0027d8:	2dfe      	cmp	r5, #254	; 0xfe
1a0027da:	d8ec      	bhi.n	1a0027b6 <cmp_lfn+0x2a>
1a0027dc:	f000 fdca 	bl	1a003374 <ff_wtoupper>
1a0027e0:	4607      	mov	r7, r0
1a0027e2:	f105 0a01 	add.w	sl, r5, #1
1a0027e6:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
1a0027ea:	f000 fdc3 	bl	1a003374 <ff_wtoupper>
1a0027ee:	4287      	cmp	r7, r0
1a0027f0:	d1e1      	bne.n	1a0027b6 <cmp_lfn+0x2a>
			wc = uc;
1a0027f2:	4637      	mov	r7, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a0027f4:	4655      	mov	r5, sl
1a0027f6:	e7e4      	b.n	1a0027c2 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a0027f8:	f898 3000 	ldrb.w	r3, [r8]
1a0027fc:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002800:	d00a      	beq.n	1a002818 <cmp_lfn+0x8c>
1a002802:	b15f      	cbz	r7, 1a00281c <cmp_lfn+0x90>
1a002804:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
1a002808:	b953      	cbnz	r3, 1a002820 <cmp_lfn+0x94>
	return 1;		/* The part of LFN matched */
1a00280a:	2001      	movs	r0, #1
1a00280c:	e000      	b.n	1a002810 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a00280e:	2000      	movs	r0, #0
}
1a002810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a002814:	2000      	movs	r0, #0
1a002816:	e7fb      	b.n	1a002810 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
1a002818:	2001      	movs	r0, #1
1a00281a:	e7f9      	b.n	1a002810 <cmp_lfn+0x84>
1a00281c:	2001      	movs	r0, #1
1a00281e:	e7f7      	b.n	1a002810 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a002820:	2000      	movs	r0, #0
1a002822:	e7f5      	b.n	1a002810 <cmp_lfn+0x84>
1a002824:	1a00dfac 	.word	0x1a00dfac

1a002828 <dir_find>:
{
1a002828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00282c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
1a00282e:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a002830:	2100      	movs	r1, #0
1a002832:	f7ff fa3f 	bl	1a001cb4 <dir_sdi>
	if (res != FR_OK) return res;
1a002836:	4606      	mov	r6, r0
1a002838:	2800      	cmp	r0, #0
1a00283a:	f040 80ab 	bne.w	1a002994 <dir_find+0x16c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a00283e:	783b      	ldrb	r3, [r7, #0]
1a002840:	2b04      	cmp	r3, #4
1a002842:	d006      	beq.n	1a002852 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002848:	64e3      	str	r3, [r4, #76]	; 0x4c
1a00284a:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a00284e:	46c8      	mov	r8, r9
1a002850:	e046      	b.n	1a0028e0 <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
1a002852:	68f8      	ldr	r0, [r7, #12]
1a002854:	f7ff ff3e 	bl	1a0026d4 <xname_sum>
1a002858:	4683      	mov	fp, r0
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a00285a:	e020      	b.n	1a00289e <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
1a00285c:	6938      	ldr	r0, [r7, #16]
1a00285e:	4440      	add	r0, r8
1a002860:	f7fe fab6 	bl	1a000dd0 <ld_word>
1a002864:	f000 fd86 	bl	1a003374 <ff_wtoupper>
1a002868:	4682      	mov	sl, r0
1a00286a:	68fb      	ldr	r3, [r7, #12]
1a00286c:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
1a002870:	f000 fd80 	bl	1a003374 <ff_wtoupper>
1a002874:	4582      	cmp	sl, r0
1a002876:	d10c      	bne.n	1a002892 <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a002878:	3d01      	subs	r5, #1
1a00287a:	b2ed      	uxtb	r5, r5
1a00287c:	f108 0802 	add.w	r8, r8, #2
1a002880:	f109 0901 	add.w	r9, r9, #1
1a002884:	b12d      	cbz	r5, 1a002892 <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
1a002886:	f018 0f1f 	tst.w	r8, #31
1a00288a:	d1e7      	bne.n	1a00285c <dir_find+0x34>
1a00288c:	f108 0802 	add.w	r8, r8, #2
1a002890:	e7e4      	b.n	1a00285c <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
1a002892:	b925      	cbnz	r5, 1a00289e <dir_find+0x76>
1a002894:	68fb      	ldr	r3, [r7, #12]
1a002896:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
1a00289a:	2b00      	cmp	r3, #0
1a00289c:	d07a      	beq.n	1a002994 <dir_find+0x16c>
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a00289e:	2100      	movs	r1, #0
1a0028a0:	4620      	mov	r0, r4
1a0028a2:	f7ff fd1a 	bl	1a0022da <dir_read>
1a0028a6:	4606      	mov	r6, r0
1a0028a8:	2800      	cmp	r0, #0
1a0028aa:	d173      	bne.n	1a002994 <dir_find+0x16c>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
1a0028ac:	693d      	ldr	r5, [r7, #16]
1a0028ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0028b2:	f7fe fa8d 	bl	1a000dd0 <ld_word>
1a0028b6:	4558      	cmp	r0, fp
1a0028b8:	d1f1      	bne.n	1a00289e <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a0028ba:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
1a0028be:	f04f 0900 	mov.w	r9, #0
1a0028c2:	f04f 0840 	mov.w	r8, #64	; 0x40
1a0028c6:	e7dd      	b.n	1a002884 <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a0028c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0028cc:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0028ce:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
1a0028d2:	2100      	movs	r1, #0
1a0028d4:	4620      	mov	r0, r4
1a0028d6:	f7ff fbf5 	bl	1a0020c4 <dir_next>
	} while (res == FR_OK);
1a0028da:	4606      	mov	r6, r0
1a0028dc:	2800      	cmp	r0, #0
1a0028de:	d159      	bne.n	1a002994 <dir_find+0x16c>
		res = move_window(fs, dp->sect);
1a0028e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0028e2:	4638      	mov	r0, r7
1a0028e4:	f7fe fd3e 	bl	1a001364 <move_window>
		if (res != FR_OK) break;
1a0028e8:	4606      	mov	r6, r0
1a0028ea:	2800      	cmp	r0, #0
1a0028ec:	d152      	bne.n	1a002994 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
1a0028ee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a0028f0:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a0028f2:	2b00      	cmp	r3, #0
1a0028f4:	d04d      	beq.n	1a002992 <dir_find+0x16a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
1a0028f6:	7ae9      	ldrb	r1, [r5, #11]
1a0028f8:	f001 023f 	and.w	r2, r1, #63	; 0x3f
1a0028fc:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1a0028fe:	2be5      	cmp	r3, #229	; 0xe5
1a002900:	d0e2      	beq.n	1a0028c8 <dir_find+0xa0>
1a002902:	f011 0f08 	tst.w	r1, #8
1a002906:	d001      	beq.n	1a00290c <dir_find+0xe4>
1a002908:	2a0f      	cmp	r2, #15
1a00290a:	d1dd      	bne.n	1a0028c8 <dir_find+0xa0>
			if (a == AM_LFN) {			/* An LFN entry is found */
1a00290c:	2a0f      	cmp	r2, #15
1a00290e:	d019      	beq.n	1a002944 <dir_find+0x11c>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
1a002910:	f1b8 0f00 	cmp.w	r8, #0
1a002914:	d104      	bne.n	1a002920 <dir_find+0xf8>
1a002916:	4628      	mov	r0, r5
1a002918:	f7fe fc43 	bl	1a0011a2 <sum_sfn>
1a00291c:	4548      	cmp	r0, r9
1a00291e:	d039      	beq.n	1a002994 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
1a002920:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
1a002924:	f013 0f01 	tst.w	r3, #1
1a002928:	d106      	bne.n	1a002938 <dir_find+0x110>
1a00292a:	220b      	movs	r2, #11
1a00292c:	f104 0140 	add.w	r1, r4, #64	; 0x40
1a002930:	4628      	mov	r0, r5
1a002932:	f7fe fab2 	bl	1a000e9a <mem_cmp>
1a002936:	b368      	cbz	r0, 1a002994 <dir_find+0x16c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00293c:	64e3      	str	r3, [r4, #76]	; 0x4c
1a00293e:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a002942:	e7c6      	b.n	1a0028d2 <dir_find+0xaa>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
1a002944:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
1a002948:	f012 0f40 	tst.w	r2, #64	; 0x40
1a00294c:	d1c1      	bne.n	1a0028d2 <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
1a00294e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002952:	d006      	beq.n	1a002962 <dir_find+0x13a>
						sum = dp->dir[LDIR_Chksum];
1a002954:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a002958:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
1a00295c:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a00295e:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a002960:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002962:	4543      	cmp	r3, r8
1a002964:	d002      	beq.n	1a00296c <dir_find+0x144>
1a002966:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a00296a:	e7b2      	b.n	1a0028d2 <dir_find+0xaa>
1a00296c:	7b6b      	ldrb	r3, [r5, #13]
1a00296e:	454b      	cmp	r3, r9
1a002970:	d002      	beq.n	1a002978 <dir_find+0x150>
1a002972:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a002976:	e7ac      	b.n	1a0028d2 <dir_find+0xaa>
1a002978:	4629      	mov	r1, r5
1a00297a:	68f8      	ldr	r0, [r7, #12]
1a00297c:	f7ff ff06 	bl	1a00278c <cmp_lfn>
1a002980:	b120      	cbz	r0, 1a00298c <dir_find+0x164>
1a002982:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a002986:	fa5f f888 	uxtb.w	r8, r8
1a00298a:	e7a2      	b.n	1a0028d2 <dir_find+0xaa>
1a00298c:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a002990:	e79f      	b.n	1a0028d2 <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a002992:	2604      	movs	r6, #4
}
1a002994:	4630      	mov	r0, r6
1a002996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00299a <follow_path>:
{
1a00299a:	b530      	push	{r4, r5, lr}
1a00299c:	b083      	sub	sp, #12
1a00299e:	4604      	mov	r4, r0
1a0029a0:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
1a0029a2:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a0029a4:	e001      	b.n	1a0029aa <follow_path+0x10>
1a0029a6:	3301      	adds	r3, #1
1a0029a8:	9301      	str	r3, [sp, #4]
1a0029aa:	9b01      	ldr	r3, [sp, #4]
1a0029ac:	781a      	ldrb	r2, [r3, #0]
1a0029ae:	2a2f      	cmp	r2, #47	; 0x2f
1a0029b0:	d0f9      	beq.n	1a0029a6 <follow_path+0xc>
1a0029b2:	2a5c      	cmp	r2, #92	; 0x5c
1a0029b4:	d0f7      	beq.n	1a0029a6 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
1a0029b6:	2200      	movs	r2, #0
1a0029b8:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
1a0029ba:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a0029bc:	781b      	ldrb	r3, [r3, #0]
1a0029be:	2b1f      	cmp	r3, #31
1a0029c0:	d81f      	bhi.n	1a002a02 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
1a0029c2:	2380      	movs	r3, #128	; 0x80
1a0029c4:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
1a0029c8:	4611      	mov	r1, r2
1a0029ca:	4620      	mov	r0, r4
1a0029cc:	f7ff f972 	bl	1a001cb4 <dir_sdi>
1a0029d0:	4603      	mov	r3, r0
}
1a0029d2:	4618      	mov	r0, r3
1a0029d4:	b003      	add	sp, #12
1a0029d6:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
1a0029d8:	2804      	cmp	r0, #4
1a0029da:	d1fa      	bne.n	1a0029d2 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a0029dc:	f012 0f04 	tst.w	r2, #4
1a0029e0:	d1f7      	bne.n	1a0029d2 <follow_path+0x38>
1a0029e2:	2305      	movs	r3, #5
1a0029e4:	e7f5      	b.n	1a0029d2 <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
1a0029e6:	68a3      	ldr	r3, [r4, #8]
1a0029e8:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a0029ea:	6923      	ldr	r3, [r4, #16]
1a0029ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0029f0:	79e2      	ldrb	r2, [r4, #7]
1a0029f2:	4313      	orrs	r3, r2
1a0029f4:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
1a0029f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a0029f8:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
1a0029fa:	4621      	mov	r1, r4
1a0029fc:	4628      	mov	r0, r5
1a0029fe:	f7fe fbf6 	bl	1a0011ee <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a002a02:	a901      	add	r1, sp, #4
1a002a04:	4620      	mov	r0, r4
1a002a06:	f7ff fd43 	bl	1a002490 <create_name>
			if (res != FR_OK) break;
1a002a0a:	4603      	mov	r3, r0
1a002a0c:	2800      	cmp	r0, #0
1a002a0e:	d1e0      	bne.n	1a0029d2 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
1a002a10:	4620      	mov	r0, r4
1a002a12:	f7ff ff09 	bl	1a002828 <dir_find>
			ns = dp->fn[NSFLAG];
1a002a16:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
1a002a1a:	4603      	mov	r3, r0
1a002a1c:	2800      	cmp	r0, #0
1a002a1e:	d1db      	bne.n	1a0029d8 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a002a20:	f012 0f04 	tst.w	r2, #4
1a002a24:	d1d5      	bne.n	1a0029d2 <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a002a26:	79a3      	ldrb	r3, [r4, #6]
1a002a28:	f013 0f10 	tst.w	r3, #16
1a002a2c:	d00d      	beq.n	1a002a4a <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
1a002a2e:	782b      	ldrb	r3, [r5, #0]
1a002a30:	2b04      	cmp	r3, #4
1a002a32:	d0d8      	beq.n	1a0029e6 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a002a34:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a002a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a002a3e:	4419      	add	r1, r3
1a002a40:	4628      	mov	r0, r5
1a002a42:	f7fe faaf 	bl	1a000fa4 <ld_clust>
1a002a46:	60a0      	str	r0, [r4, #8]
1a002a48:	e7db      	b.n	1a002a02 <follow_path+0x68>
				res = FR_NO_PATH; break;
1a002a4a:	2305      	movs	r3, #5
1a002a4c:	e7c1      	b.n	1a0029d2 <follow_path+0x38>
1a002a4e:	Address 0x000000001a002a4e is out of bounds.


1a002a50 <dir_register>:
{
1a002a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002a54:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
1a002a56:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a002a58:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
1a002a5c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
1a002a60:	f040 80ed 	bne.w	1a002c3e <dir_register+0x1ee>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
1a002a64:	2400      	movs	r4, #0
1a002a66:	68eb      	ldr	r3, [r5, #12]
1a002a68:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
1a002a6c:	b10b      	cbz	r3, 1a002a72 <dir_register+0x22>
1a002a6e:	3401      	adds	r4, #1
1a002a70:	e7f9      	b.n	1a002a66 <dir_register+0x16>
1a002a72:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002a74:	782b      	ldrb	r3, [r5, #0]
1a002a76:	2b04      	cmp	r3, #4
1a002a78:	d011      	beq.n	1a002a9e <dir_register+0x4e>
	mem_cpy(sn, dp->fn, 12);
1a002a7a:	f100 0740 	add.w	r7, r0, #64	; 0x40
1a002a7e:	220c      	movs	r2, #12
1a002a80:	4639      	mov	r1, r7
1a002a82:	a815      	add	r0, sp, #84	; 0x54
1a002a84:	f7fe f9fb 	bl	1a000e7e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1a002a88:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002a8c:	f013 0f01 	tst.w	r3, #1
1a002a90:	d079      	beq.n	1a002b86 <dir_register+0x136>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
1a002a92:	2340      	movs	r3, #64	; 0x40
1a002a94:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
1a002a98:	f04f 0801 	mov.w	r8, #1
1a002a9c:	e05a      	b.n	1a002b54 <dir_register+0x104>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
1a002a9e:	340e      	adds	r4, #14
1a002aa0:	4b6b      	ldr	r3, [pc, #428]	; (1a002c50 <dir_register+0x200>)
1a002aa2:	fba3 3404 	umull	r3, r4, r3, r4
1a002aa6:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
1a002aa8:	1ca1      	adds	r1, r4, #2
1a002aaa:	f7ff fc8b 	bl	1a0023c4 <dir_alloc>
		if (res != FR_OK) return res;
1a002aae:	4681      	mov	r9, r0
1a002ab0:	2800      	cmp	r0, #0
1a002ab2:	d17e      	bne.n	1a002bb2 <dir_register+0x162>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
1a002ab4:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a002ab6:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
1a002aba:	3401      	adds	r4, #1
1a002abc:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
1a002ac0:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
1a002ac2:	79f3      	ldrb	r3, [r6, #7]
1a002ac4:	f013 0f04 	tst.w	r3, #4
1a002ac8:	d013      	beq.n	1a002af2 <dir_register+0xa2>
			dp->obj.stat &= ~4;
1a002aca:	f023 0304 	bic.w	r3, r3, #4
1a002ace:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
1a002ad0:	4630      	mov	r0, r6
1a002ad2:	f7ff f81f 	bl	1a001b14 <fill_first_frag>
			if (res != FR_OK) return res;
1a002ad6:	b108      	cbz	r0, 1a002adc <dir_register+0x8c>
1a002ad8:	4681      	mov	r9, r0
1a002ada:	e06a      	b.n	1a002bb2 <dir_register+0x162>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
1a002adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002ae0:	6b71      	ldr	r1, [r6, #52]	; 0x34
1a002ae2:	4630      	mov	r0, r6
1a002ae4:	f7fe fffe 	bl	1a001ae4 <fill_last_frag>
			if (res != FR_OK) return res;
1a002ae8:	2800      	cmp	r0, #0
1a002aea:	f040 80ab 	bne.w	1a002c44 <dir_register+0x1f4>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
1a002aee:	68b3      	ldr	r3, [r6, #8]
1a002af0:	b923      	cbnz	r3, 1a002afc <dir_register+0xac>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
1a002af2:	68e9      	ldr	r1, [r5, #12]
1a002af4:	6928      	ldr	r0, [r5, #16]
1a002af6:	f7ff fe07 	bl	1a002708 <create_xdir>
		return FR_OK;
1a002afa:	e05a      	b.n	1a002bb2 <dir_register+0x162>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
1a002afc:	4631      	mov	r1, r6
1a002afe:	4668      	mov	r0, sp
1a002b00:	f7ff fbce 	bl	1a0022a0 <load_obj_xdir>
				if (res != FR_OK) return res;
1a002b04:	4603      	mov	r3, r0
1a002b06:	b108      	cbz	r0, 1a002b0c <dir_register+0xbc>
1a002b08:	4699      	mov	r9, r3
1a002b0a:	e052      	b.n	1a002bb2 <dir_register+0x162>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
1a002b0c:	8969      	ldrh	r1, [r5, #10]
1a002b0e:	0249      	lsls	r1, r1, #9
1a002b10:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a002b14:	1857      	adds	r7, r2, r1
1a002b16:	f143 0800 	adc.w	r8, r3, #0
1a002b1a:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
1a002b1e:	6928      	ldr	r0, [r5, #16]
1a002b20:	463a      	mov	r2, r7
1a002b22:	4643      	mov	r3, r8
1a002b24:	3038      	adds	r0, #56	; 0x38
1a002b26:	f7fe f997 	bl	1a000e58 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
1a002b2a:	6928      	ldr	r0, [r5, #16]
1a002b2c:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a002b30:	3028      	adds	r0, #40	; 0x28
1a002b32:	f7fe f991 	bl	1a000e58 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
1a002b36:	79f3      	ldrb	r3, [r6, #7]
1a002b38:	692a      	ldr	r2, [r5, #16]
1a002b3a:	f043 0301 	orr.w	r3, r3, #1
1a002b3e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
1a002b42:	4668      	mov	r0, sp
1a002b44:	f7ff fc74 	bl	1a002430 <store_xdir>
				if (res != FR_OK) return res;
1a002b48:	4603      	mov	r3, r0
1a002b4a:	2800      	cmp	r0, #0
1a002b4c:	d0d1      	beq.n	1a002af2 <dir_register+0xa2>
1a002b4e:	e7db      	b.n	1a002b08 <dir_register+0xb8>
		for (n = 1; n < 100; n++) {
1a002b50:	f108 0801 	add.w	r8, r8, #1
1a002b54:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
1a002b58:	d80b      	bhi.n	1a002b72 <dir_register+0x122>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
1a002b5a:	4643      	mov	r3, r8
1a002b5c:	68ea      	ldr	r2, [r5, #12]
1a002b5e:	a915      	add	r1, sp, #84	; 0x54
1a002b60:	4638      	mov	r0, r7
1a002b62:	f7fe fac3 	bl	1a0010ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1a002b66:	4630      	mov	r0, r6
1a002b68:	f7ff fe5e 	bl	1a002828 <dir_find>
			if (res != FR_OK) break;
1a002b6c:	4681      	mov	r9, r0
1a002b6e:	2800      	cmp	r0, #0
1a002b70:	d0ee      	beq.n	1a002b50 <dir_register+0x100>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a002b72:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
1a002b76:	d067      	beq.n	1a002c48 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1a002b78:	f1b9 0f04 	cmp.w	r9, #4
1a002b7c:	d119      	bne.n	1a002bb2 <dir_register+0x162>
		dp->fn[NSFLAG] = sn[NSFLAG];
1a002b7e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002b82:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002b86:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002b8a:	f013 0f02 	tst.w	r3, #2
1a002b8e:	d014      	beq.n	1a002bba <dir_register+0x16a>
1a002b90:	340c      	adds	r4, #12
1a002b92:	4b30      	ldr	r3, [pc, #192]	; (1a002c54 <dir_register+0x204>)
1a002b94:	fba3 3404 	umull	r3, r4, r3, r4
1a002b98:	08a4      	lsrs	r4, r4, #2
1a002b9a:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
1a002b9c:	4621      	mov	r1, r4
1a002b9e:	4630      	mov	r0, r6
1a002ba0:	f7ff fc10 	bl	1a0023c4 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1a002ba4:	4681      	mov	r9, r0
1a002ba6:	b908      	cbnz	r0, 1a002bac <dir_register+0x15c>
1a002ba8:	3c01      	subs	r4, #1
1a002baa:	d108      	bne.n	1a002bbe <dir_register+0x16e>
	if (res == FR_OK) {
1a002bac:	f1b9 0f00 	cmp.w	r9, #0
1a002bb0:	d02b      	beq.n	1a002c0a <dir_register+0x1ba>
}
1a002bb2:	4648      	mov	r0, r9
1a002bb4:	b019      	add	sp, #100	; 0x64
1a002bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002bba:	2401      	movs	r4, #1
1a002bbc:	e7ee      	b.n	1a002b9c <dir_register+0x14c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
1a002bbe:	6b31      	ldr	r1, [r6, #48]	; 0x30
1a002bc0:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
1a002bc4:	4630      	mov	r0, r6
1a002bc6:	f7ff f875 	bl	1a001cb4 <dir_sdi>
		if (res == FR_OK) {
1a002bca:	4681      	mov	r9, r0
1a002bcc:	2800      	cmp	r0, #0
1a002bce:	d1ed      	bne.n	1a002bac <dir_register+0x15c>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
1a002bd0:	4638      	mov	r0, r7
1a002bd2:	f7fe fae6 	bl	1a0011a2 <sum_sfn>
1a002bd6:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
1a002bd8:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a002bda:	4628      	mov	r0, r5
1a002bdc:	f7fe fbc2 	bl	1a001364 <move_window>
				if (res != FR_OK) break;
1a002be0:	4681      	mov	r9, r0
1a002be2:	2800      	cmp	r0, #0
1a002be4:	d1e2      	bne.n	1a002bac <dir_register+0x15c>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
1a002be6:	4643      	mov	r3, r8
1a002be8:	b2e2      	uxtb	r2, r4
1a002bea:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1a002bec:	68e8      	ldr	r0, [r5, #12]
1a002bee:	f7fe fa41 	bl	1a001074 <put_lfn>
				fs->wflag = 1;
1a002bf2:	2301      	movs	r3, #1
1a002bf4:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
1a002bf6:	2100      	movs	r1, #0
1a002bf8:	4630      	mov	r0, r6
1a002bfa:	f7ff fa63 	bl	1a0020c4 <dir_next>
			} while (res == FR_OK && --nent);
1a002bfe:	4681      	mov	r9, r0
1a002c00:	2800      	cmp	r0, #0
1a002c02:	d1d3      	bne.n	1a002bac <dir_register+0x15c>
1a002c04:	3c01      	subs	r4, #1
1a002c06:	d1e7      	bne.n	1a002bd8 <dir_register+0x188>
1a002c08:	e7d0      	b.n	1a002bac <dir_register+0x15c>
		res = move_window(fs, dp->sect);
1a002c0a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a002c0c:	4628      	mov	r0, r5
1a002c0e:	f7fe fba9 	bl	1a001364 <move_window>
		if (res == FR_OK) {
1a002c12:	4681      	mov	r9, r0
1a002c14:	2800      	cmp	r0, #0
1a002c16:	d1cc      	bne.n	1a002bb2 <dir_register+0x162>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a002c18:	2220      	movs	r2, #32
1a002c1a:	2100      	movs	r1, #0
1a002c1c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a002c1e:	f7fe f937 	bl	1a000e90 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a002c22:	220b      	movs	r2, #11
1a002c24:	4639      	mov	r1, r7
1a002c26:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a002c28:	f7fe f929 	bl	1a000e7e <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1a002c2c:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
1a002c30:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
1a002c32:	f003 0318 	and.w	r3, r3, #24
1a002c36:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
1a002c38:	2301      	movs	r3, #1
1a002c3a:	70eb      	strb	r3, [r5, #3]
1a002c3c:	e7b9      	b.n	1a002bb2 <dir_register+0x162>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a002c3e:	f04f 0906 	mov.w	r9, #6
1a002c42:	e7b6      	b.n	1a002bb2 <dir_register+0x162>
			if (res != FR_OK) return res;
1a002c44:	4681      	mov	r9, r0
1a002c46:	e7b4      	b.n	1a002bb2 <dir_register+0x162>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a002c48:	f04f 0907 	mov.w	r9, #7
1a002c4c:	e7b1      	b.n	1a002bb2 <dir_register+0x162>
1a002c4e:	bf00      	nop
1a002c50:	88888889 	.word	0x88888889
1a002c54:	4ec4ec4f 	.word	0x4ec4ec4f

1a002c58 <sync_fs>:
{
1a002c58:	b570      	push	{r4, r5, r6, lr}
1a002c5a:	4604      	mov	r4, r0
	res = sync_window(fs);
1a002c5c:	f7fe fb5a 	bl	1a001314 <sync_window>
	if (res == FR_OK) {
1a002c60:	4605      	mov	r5, r0
1a002c62:	b948      	cbnz	r0, 1a002c78 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002c64:	7823      	ldrb	r3, [r4, #0]
1a002c66:	2b03      	cmp	r3, #3
1a002c68:	d008      	beq.n	1a002c7c <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a002c6a:	2200      	movs	r2, #0
1a002c6c:	4611      	mov	r1, r2
1a002c6e:	7860      	ldrb	r0, [r4, #1]
1a002c70:	f001 ff02 	bl	1a004a78 <disk_ioctl>
1a002c74:	b100      	cbz	r0, 1a002c78 <sync_fs+0x20>
1a002c76:	2501      	movs	r5, #1
}
1a002c78:	4628      	mov	r0, r5
1a002c7a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002c7c:	7923      	ldrb	r3, [r4, #4]
1a002c7e:	2b01      	cmp	r3, #1
1a002c80:	d1f3      	bne.n	1a002c6a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
1a002c82:	f104 0638 	add.w	r6, r4, #56	; 0x38
1a002c86:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002c8a:	2100      	movs	r1, #0
1a002c8c:	4630      	mov	r0, r6
1a002c8e:	f7fe f8ff 	bl	1a000e90 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a002c92:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a002c96:	f204 2036 	addw	r0, r4, #566	; 0x236
1a002c9a:	f7fe f8cf 	bl	1a000e3c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a002c9e:	490f      	ldr	r1, [pc, #60]	; (1a002cdc <sync_fs+0x84>)
1a002ca0:	4630      	mov	r0, r6
1a002ca2:	f7fe f8cf 	bl	1a000e44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a002ca6:	490e      	ldr	r1, [pc, #56]	; (1a002ce0 <sync_fs+0x88>)
1a002ca8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a002cac:	f7fe f8ca 	bl	1a000e44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a002cb0:	69a1      	ldr	r1, [r4, #24]
1a002cb2:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a002cb6:	f7fe f8c5 	bl	1a000e44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a002cba:	6961      	ldr	r1, [r4, #20]
1a002cbc:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a002cc0:	f7fe f8c0 	bl	1a000e44 <st_dword>
			fs->winsect = fs->volbase + 1;
1a002cc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a002cc6:	3201      	adds	r2, #1
1a002cc8:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1a002cca:	2301      	movs	r3, #1
1a002ccc:	4631      	mov	r1, r6
1a002cce:	7860      	ldrb	r0, [r4, #1]
1a002cd0:	f001 fec2 	bl	1a004a58 <disk_write>
			fs->fsi_flag = 0;
1a002cd4:	2300      	movs	r3, #0
1a002cd6:	7123      	strb	r3, [r4, #4]
1a002cd8:	e7c7      	b.n	1a002c6a <sync_fs+0x12>
1a002cda:	bf00      	nop
1a002cdc:	41615252 	.word	0x41615252
1a002ce0:	61417272 	.word	0x61417272

1a002ce4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a002ce4:	b510      	push	{r4, lr}
1a002ce6:	b084      	sub	sp, #16
1a002ce8:	9001      	str	r0, [sp, #4]
1a002cea:	9100      	str	r1, [sp, #0]
1a002cec:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a002cee:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
1a002cf0:	a803      	add	r0, sp, #12
1a002cf2:	f7fe fa93 	bl	1a00121c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a002cf6:	2800      	cmp	r0, #0
1a002cf8:	db17      	blt.n	1a002d2a <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a002cfa:	4b0d      	ldr	r3, [pc, #52]	; (1a002d30 <f_mount+0x4c>)
1a002cfc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a002d00:	b10b      	cbz	r3, 1a002d06 <f_mount+0x22>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a002d02:	2200      	movs	r2, #0
1a002d04:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a002d06:	9b01      	ldr	r3, [sp, #4]
1a002d08:	b10b      	cbz	r3, 1a002d0e <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
1a002d0a:	2200      	movs	r2, #0
1a002d0c:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a002d0e:	4b08      	ldr	r3, [pc, #32]	; (1a002d30 <f_mount+0x4c>)
1a002d10:	9a01      	ldr	r2, [sp, #4]
1a002d12:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
1a002d16:	b914      	cbnz	r4, 1a002d1e <f_mount+0x3a>
1a002d18:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a002d1a:	b004      	add	sp, #16
1a002d1c:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a002d1e:	2200      	movs	r2, #0
1a002d20:	a901      	add	r1, sp, #4
1a002d22:	4668      	mov	r0, sp
1a002d24:	f7fe fb7e 	bl	1a001424 <find_volume>
	LEAVE_FF(fs, res);
1a002d28:	e7f7      	b.n	1a002d1a <f_mount+0x36>
	if (vol < 0) return FR_INVALID_DRIVE;
1a002d2a:	200b      	movs	r0, #11
1a002d2c:	e7f5      	b.n	1a002d1a <f_mount+0x36>
1a002d2e:	bf00      	nop
1a002d30:	10000f00 	.word	0x10000f00

1a002d34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a002d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002d38:	b099      	sub	sp, #100	; 0x64
1a002d3a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a002d3c:	2800      	cmp	r0, #0
1a002d3e:	f000 814e 	beq.w	1a002fde <f_open+0x2aa>
1a002d42:	4604      	mov	r4, r0
1a002d44:	4616      	mov	r6, r2

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
1a002d46:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a002d4a:	463a      	mov	r2, r7
1a002d4c:	a903      	add	r1, sp, #12
1a002d4e:	a801      	add	r0, sp, #4
1a002d50:	f7fe fb68 	bl	1a001424 <find_volume>
	if (res == FR_OK) {
1a002d54:	4605      	mov	r5, r0
1a002d56:	b130      	cbz	r0, 1a002d66 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a002d58:	b10d      	cbz	r5, 1a002d5e <f_open+0x2a>
1a002d5a:	2300      	movs	r3, #0
1a002d5c:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
1a002d5e:	4628      	mov	r0, r5
1a002d60:	b019      	add	sp, #100	; 0x64
1a002d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
1a002d66:	9b03      	ldr	r3, [sp, #12]
1a002d68:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
1a002d6a:	9901      	ldr	r1, [sp, #4]
1a002d6c:	a804      	add	r0, sp, #16
1a002d6e:	f7ff fe14 	bl	1a00299a <follow_path>
		if (res == FR_OK) {
1a002d72:	4605      	mov	r5, r0
1a002d74:	b918      	cbnz	r0, 1a002d7e <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a002d76:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
1a002d7a:	2b00      	cmp	r3, #0
1a002d7c:	db47      	blt.n	1a002e0e <f_open+0xda>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a002d7e:	f016 0f1c 	tst.w	r6, #28
1a002d82:	f000 808a 	beq.w	1a002e9a <f_open+0x166>
			if (res != FR_OK) {					/* No file, create new */
1a002d86:	2d00      	cmp	r5, #0
1a002d88:	d048      	beq.n	1a002e1c <f_open+0xe8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
1a002d8a:	2d04      	cmp	r5, #4
1a002d8c:	d041      	beq.n	1a002e12 <f_open+0xde>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a002d8e:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
1a002d92:	2d00      	cmp	r5, #0
1a002d94:	f040 8090 	bne.w	1a002eb8 <f_open+0x184>
1a002d98:	f017 0f08 	tst.w	r7, #8
1a002d9c:	f000 808c 	beq.w	1a002eb8 <f_open+0x184>
				if (fs->fs_type == FS_EXFAT) {
1a002da0:	9803      	ldr	r0, [sp, #12]
1a002da2:	7803      	ldrb	r3, [r0, #0]
1a002da4:	2b04      	cmp	r3, #4
1a002da6:	d043      	beq.n	1a002e30 <f_open+0xfc>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
1a002da8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002daa:	4631      	mov	r1, r6
1a002dac:	f7fe f8fa 	bl	1a000fa4 <ld_clust>
1a002db0:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
1a002db2:	f001 fe11 	bl	1a0049d8 <get_fattime>
1a002db6:	4601      	mov	r1, r0
1a002db8:	f106 000e 	add.w	r0, r6, #14
1a002dbc:	f7fe f842 	bl	1a000e44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a002dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002dc2:	2220      	movs	r2, #32
1a002dc4:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a002dc6:	2200      	movs	r2, #0
1a002dc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a002dca:	9803      	ldr	r0, [sp, #12]
1a002dcc:	f7fe f8fd 	bl	1a000fca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a002dd0:	2100      	movs	r1, #0
1a002dd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
1a002dd4:	301c      	adds	r0, #28
1a002dd6:	f7fe f835 	bl	1a000e44 <st_dword>
					fs->wflag = 1;
1a002dda:	9b03      	ldr	r3, [sp, #12]
1a002ddc:	2201      	movs	r2, #1
1a002dde:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
1a002de0:	f1b8 0f00 	cmp.w	r8, #0
1a002de4:	d068      	beq.n	1a002eb8 <f_open+0x184>
						dw = fs->winsect;
1a002de6:	9b03      	ldr	r3, [sp, #12]
1a002de8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
1a002dea:	2200      	movs	r2, #0
1a002dec:	4641      	mov	r1, r8
1a002dee:	a804      	add	r0, sp, #16
1a002df0:	f7ff f8a0 	bl	1a001f34 <remove_chain>
						if (res == FR_OK) {
1a002df4:	4605      	mov	r5, r0
1a002df6:	2800      	cmp	r0, #0
1a002df8:	d15e      	bne.n	1a002eb8 <f_open+0x184>
							res = move_window(fs, dw);
1a002dfa:	4631      	mov	r1, r6
1a002dfc:	9803      	ldr	r0, [sp, #12]
1a002dfe:	f7fe fab1 	bl	1a001364 <move_window>
1a002e02:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a002e04:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a002e08:	9a03      	ldr	r2, [sp, #12]
1a002e0a:	6153      	str	r3, [r2, #20]
1a002e0c:	e054      	b.n	1a002eb8 <f_open+0x184>
				res = FR_INVALID_NAME;
1a002e0e:	2506      	movs	r5, #6
1a002e10:	e7b5      	b.n	1a002d7e <f_open+0x4a>
					res = dir_register(&dj);
1a002e12:	a804      	add	r0, sp, #16
1a002e14:	f7ff fe1c 	bl	1a002a50 <dir_register>
1a002e18:	4605      	mov	r5, r0
1a002e1a:	e7b8      	b.n	1a002d8e <f_open+0x5a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a002e1c:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a002e20:	f013 0f11 	tst.w	r3, #17
1a002e24:	d147      	bne.n	1a002eb6 <f_open+0x182>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a002e26:	f016 0f04 	tst.w	r6, #4
1a002e2a:	d0b2      	beq.n	1a002d92 <f_open+0x5e>
1a002e2c:	2508      	movs	r5, #8
1a002e2e:	e043      	b.n	1a002eb8 <f_open+0x184>
					fp->obj.fs = fs;
1a002e30:	6020      	str	r0, [r4, #0]
					init_alloc_info(fs, &fp->obj);
1a002e32:	4621      	mov	r1, r4
1a002e34:	9803      	ldr	r0, [sp, #12]
1a002e36:	f7fe f9da 	bl	1a0011ee <init_alloc_info>
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
1a002e3a:	9b03      	ldr	r3, [sp, #12]
1a002e3c:	6918      	ldr	r0, [r3, #16]
1a002e3e:	221e      	movs	r2, #30
1a002e40:	2100      	movs	r1, #0
1a002e42:	3002      	adds	r0, #2
1a002e44:	f7fe f824 	bl	1a000e90 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
1a002e48:	9b03      	ldr	r3, [sp, #12]
1a002e4a:	6918      	ldr	r0, [r3, #16]
1a002e4c:	221a      	movs	r2, #26
1a002e4e:	2100      	movs	r1, #0
1a002e50:	3026      	adds	r0, #38	; 0x26
1a002e52:	f7fe f81d 	bl	1a000e90 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
1a002e56:	9b03      	ldr	r3, [sp, #12]
1a002e58:	691a      	ldr	r2, [r3, #16]
1a002e5a:	2120      	movs	r1, #32
1a002e5c:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
1a002e5e:	691d      	ldr	r5, [r3, #16]
1a002e60:	f001 fdba 	bl	1a0049d8 <get_fattime>
1a002e64:	4601      	mov	r1, r0
1a002e66:	f105 0008 	add.w	r0, r5, #8
1a002e6a:	f7fd ffeb 	bl	1a000e44 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
1a002e6e:	9b03      	ldr	r3, [sp, #12]
1a002e70:	691b      	ldr	r3, [r3, #16]
1a002e72:	2201      	movs	r2, #1
1a002e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
1a002e78:	a804      	add	r0, sp, #16
1a002e7a:	f7ff fad9 	bl	1a002430 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
1a002e7e:	4605      	mov	r5, r0
1a002e80:	b9d0      	cbnz	r0, 1a002eb8 <f_open+0x184>
1a002e82:	68a1      	ldr	r1, [r4, #8]
1a002e84:	b1c1      	cbz	r1, 1a002eb8 <f_open+0x184>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
1a002e86:	2200      	movs	r2, #0
1a002e88:	4620      	mov	r0, r4
1a002e8a:	f7ff f853 	bl	1a001f34 <remove_chain>
1a002e8e:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
1a002e90:	68a3      	ldr	r3, [r4, #8]
1a002e92:	3b01      	subs	r3, #1
1a002e94:	9a03      	ldr	r2, [sp, #12]
1a002e96:	6153      	str	r3, [r2, #20]
1a002e98:	e00e      	b.n	1a002eb8 <f_open+0x184>
			if (res == FR_OK) {					/* Is the object exsiting? */
1a002e9a:	b96d      	cbnz	r5, 1a002eb8 <f_open+0x184>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
1a002e9c:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a002ea0:	f013 0f10 	tst.w	r3, #16
1a002ea4:	d14e      	bne.n	1a002f44 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
1a002ea6:	f016 0f02 	tst.w	r6, #2
1a002eaa:	d005      	beq.n	1a002eb8 <f_open+0x184>
1a002eac:	f013 0f01 	tst.w	r3, #1
1a002eb0:	d002      	beq.n	1a002eb8 <f_open+0x184>
						res = FR_DENIED;
1a002eb2:	2507      	movs	r5, #7
1a002eb4:	e00b      	b.n	1a002ece <f_open+0x19a>
					res = FR_DENIED;
1a002eb6:	2507      	movs	r5, #7
		if (res == FR_OK) {
1a002eb8:	b94d      	cbnz	r5, 1a002ece <f_open+0x19a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
1a002eba:	f017 0f08 	tst.w	r7, #8
1a002ebe:	d001      	beq.n	1a002ec4 <f_open+0x190>
1a002ec0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a002ec4:	9b03      	ldr	r3, [sp, #12]
1a002ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a002ec8:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
1a002eca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002ecc:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
1a002ece:	2d00      	cmp	r5, #0
1a002ed0:	f47f af42 	bne.w	1a002d58 <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
1a002ed4:	9803      	ldr	r0, [sp, #12]
1a002ed6:	7803      	ldrb	r3, [r0, #0]
1a002ed8:	2b04      	cmp	r3, #4
1a002eda:	d035      	beq.n	1a002f48 <f_open+0x214>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
1a002edc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002ede:	4631      	mov	r1, r6
1a002ee0:	f7fe f860 	bl	1a000fa4 <ld_clust>
1a002ee4:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a002ee6:	f106 001c 	add.w	r0, r6, #28
1a002eea:	f7fd ff76 	bl	1a000dda <ld_dword>
1a002eee:	6120      	str	r0, [r4, #16]
1a002ef0:	2300      	movs	r3, #0
1a002ef2:	6163      	str	r3, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
1a002ef4:	9b03      	ldr	r3, [sp, #12]
1a002ef6:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
1a002ef8:	88db      	ldrh	r3, [r3, #6]
1a002efa:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
1a002efc:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
1a002f00:	2100      	movs	r1, #0
1a002f02:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
1a002f06:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
1a002f08:	2200      	movs	r2, #0
1a002f0a:	2300      	movs	r3, #0
1a002f0c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
1a002f10:	f104 0a50 	add.w	sl, r4, #80	; 0x50
1a002f14:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002f18:	4650      	mov	r0, sl
1a002f1a:	f7fd ffb9 	bl	1a000e90 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a002f1e:	f017 0f20 	tst.w	r7, #32
1a002f22:	f43f af19 	beq.w	1a002d58 <f_open+0x24>
1a002f26:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
1a002f2a:	ea56 0307 	orrs.w	r3, r6, r7
1a002f2e:	f43f af13 	beq.w	1a002d58 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a002f32:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a002f36:	9b03      	ldr	r3, [sp, #12]
1a002f38:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
1a002f3c:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a002f40:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002f42:	e017      	b.n	1a002f74 <f_open+0x240>
					res = FR_NO_FILE;
1a002f44:	2504      	movs	r5, #4
1a002f46:	e7c2      	b.n	1a002ece <f_open+0x19a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
1a002f48:	9b06      	ldr	r3, [sp, #24]
1a002f4a:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
1a002f4c:	9b08      	ldr	r3, [sp, #32]
1a002f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002f52:	f89d 2017 	ldrb.w	r2, [sp, #23]
1a002f56:	4313      	orrs	r3, r2
1a002f58:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
1a002f5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a002f5c:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
1a002f5e:	4621      	mov	r1, r4
1a002f60:	f7fe f945 	bl	1a0011ee <init_alloc_info>
1a002f64:	e7c6      	b.n	1a002ef4 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002f66:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
1a002f6a:	d013      	beq.n	1a002f94 <f_open+0x260>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002f6c:	ebb6 0608 	subs.w	r6, r6, r8
1a002f70:	eb67 0709 	sbc.w	r7, r7, r9
1a002f74:	b985      	cbnz	r5, 1a002f98 <f_open+0x264>
1a002f76:	46d8      	mov	r8, fp
1a002f78:	f04f 0900 	mov.w	r9, #0
1a002f7c:	45b9      	cmp	r9, r7
1a002f7e:	bf08      	it	eq
1a002f80:	45b3      	cmpeq	fp, r6
1a002f82:	d209      	bcs.n	1a002f98 <f_open+0x264>
					clst = get_fat(&fp->obj, clst);
1a002f84:	4620      	mov	r0, r4
1a002f86:	f7fe fdde 	bl	1a001b46 <get_fat>
1a002f8a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a002f8c:	2801      	cmp	r0, #1
1a002f8e:	d8ea      	bhi.n	1a002f66 <f_open+0x232>
1a002f90:	2502      	movs	r5, #2
1a002f92:	e7e8      	b.n	1a002f66 <f_open+0x232>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002f94:	2501      	movs	r5, #1
1a002f96:	e7e9      	b.n	1a002f6c <f_open+0x238>
				fp->clust = clst;
1a002f98:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a002f9a:	2d00      	cmp	r5, #0
1a002f9c:	f47f aedc 	bne.w	1a002d58 <f_open+0x24>
1a002fa0:	f3c6 0208 	ubfx	r2, r6, #0, #9
1a002fa4:	2300      	movs	r3, #0
1a002fa6:	4313      	orrs	r3, r2
1a002fa8:	f43f aed6 	beq.w	1a002d58 <f_open+0x24>
					if ((sc = clst2sect(fs, clst)) == 0) {
1a002fac:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a002fb0:	4640      	mov	r0, r8
1a002fb2:	f7fd ffeb 	bl	1a000f8c <clst2sect>
1a002fb6:	4602      	mov	r2, r0
1a002fb8:	b908      	cbnz	r0, 1a002fbe <f_open+0x28a>
						res = FR_INT_ERR;
1a002fba:	2502      	movs	r5, #2
1a002fbc:	e6cd      	b.n	1a002d5a <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a002fbe:	0a73      	lsrs	r3, r6, #9
1a002fc0:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
1a002fc4:	441a      	add	r2, r3
1a002fc6:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a002fc8:	2301      	movs	r3, #1
1a002fca:	4651      	mov	r1, sl
1a002fcc:	f898 0001 	ldrb.w	r0, [r8, #1]
1a002fd0:	f001 fd32 	bl	1a004a38 <disk_read>
1a002fd4:	2800      	cmp	r0, #0
1a002fd6:	f43f aebf 	beq.w	1a002d58 <f_open+0x24>
1a002fda:	2501      	movs	r5, #1
1a002fdc:	e6bd      	b.n	1a002d5a <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
1a002fde:	2509      	movs	r5, #9
1a002fe0:	e6bd      	b.n	1a002d5e <f_open+0x2a>

1a002fe2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
1a002fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002fe6:	b087      	sub	sp, #28
1a002fe8:	4604      	mov	r4, r0
1a002fea:	4688      	mov	r8, r1
1a002fec:	4616      	mov	r6, r2
1a002fee:	4699      	mov	r9, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
1a002ff0:	2300      	movs	r3, #0
1a002ff2:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
1a002ff6:	9003      	str	r0, [sp, #12]
1a002ff8:	a905      	add	r1, sp, #20
1a002ffa:	f7fe f967 	bl	1a0012cc <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a002ffe:	9002      	str	r0, [sp, #8]
1a003000:	2800      	cmp	r0, #0
1a003002:	f040 80b2 	bne.w	1a00316a <f_read+0x188>
1a003006:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
1a00300a:	9302      	str	r3, [sp, #8]
1a00300c:	2b00      	cmp	r3, #0
1a00300e:	f040 80ac 	bne.w	1a00316a <f_read+0x188>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
1a003012:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a003016:	f013 0f01 	tst.w	r3, #1
1a00301a:	f000 80c3 	beq.w	1a0031a4 <f_read+0x1c2>
	remain = fp->obj.objsize - fp->fptr;
1a00301e:	6922      	ldr	r2, [r4, #16]
1a003020:	6960      	ldr	r0, [r4, #20]
1a003022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a003024:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a003026:	ebb2 0a03 	subs.w	sl, r2, r3
1a00302a:	eb60 0b01 	sbc.w	fp, r0, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
1a00302e:	2300      	movs	r3, #0
1a003030:	459b      	cmp	fp, r3
1a003032:	bf08      	it	eq
1a003034:	45b2      	cmpeq	sl, r6
1a003036:	d259      	bcs.n	1a0030ec <f_read+0x10a>
1a003038:	4656      	mov	r6, sl
1a00303a:	e057      	b.n	1a0030ec <f_read+0x10a>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
1a00303c:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a00303e:	9803      	ldr	r0, [sp, #12]
1a003040:	f7fe fd81 	bl	1a001b46 <get_fat>
1a003044:	e06a      	b.n	1a00311c <f_read+0x13a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
1a003046:	2302      	movs	r3, #2
1a003048:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a00304c:	9302      	str	r3, [sp, #8]
1a00304e:	e08c      	b.n	1a00316a <f_read+0x188>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a003050:	2301      	movs	r3, #1
1a003052:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a003056:	9302      	str	r3, [sp, #8]
1a003058:	e087      	b.n	1a00316a <f_read+0x188>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a00305a:	2302      	movs	r3, #2
1a00305c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a003060:	9302      	str	r3, [sp, #8]
1a003062:	e082      	b.n	1a00316a <f_read+0x188>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
1a003064:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
1a003068:	2b00      	cmp	r3, #0
1a00306a:	db01      	blt.n	1a003070 <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
1a00306c:	026d      	lsls	r5, r5, #9
				continue;
1a00306e:	e02f      	b.n	1a0030d0 <f_read+0xee>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
1a003070:	6c60      	ldr	r0, [r4, #68]	; 0x44
1a003072:	eba0 000a 	sub.w	r0, r0, sl
1a003076:	42a8      	cmp	r0, r5
1a003078:	d2f8      	bcs.n	1a00306c <f_read+0x8a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
1a00307a:	f44f 7200 	mov.w	r2, #512	; 0x200
1a00307e:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a003082:	eb08 2040 	add.w	r0, r8, r0, lsl #9
1a003086:	f7fd fefa 	bl	1a000e7e <mem_cpy>
1a00308a:	e7ef      	b.n	1a00306c <f_read+0x8a>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
1a00308c:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a00308e:	4552      	cmp	r2, sl
1a003090:	d00d      	beq.n	1a0030ae <f_read+0xcc>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
1a003092:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
1a003096:	2b00      	cmp	r3, #0
1a003098:	db6b      	blt.n	1a003172 <f_read+0x190>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
1a00309a:	2301      	movs	r3, #1
1a00309c:	4652      	mov	r2, sl
1a00309e:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a0030a2:	9805      	ldr	r0, [sp, #20]
1a0030a4:	7840      	ldrb	r0, [r0, #1]
1a0030a6:	f001 fcc7 	bl	1a004a38 <disk_read>
1a0030aa:	2800      	cmp	r0, #0
1a0030ac:	d175      	bne.n	1a00319a <f_read+0x1b8>
			}
#endif
			fp->sect = sect;
1a0030ae:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a0030b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0030b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a0030b8:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
1a0030bc:	42ae      	cmp	r6, r5
1a0030be:	d200      	bcs.n	1a0030c2 <f_read+0xe0>
1a0030c0:	4635      	mov	r5, r6
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
1a0030c2:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a0030c6:	462a      	mov	r2, r5
1a0030c8:	4419      	add	r1, r3
1a0030ca:	4640      	mov	r0, r8
1a0030cc:	f7fd fed7 	bl	1a000e7e <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
1a0030d0:	1b76      	subs	r6, r6, r5
1a0030d2:	f8d9 3000 	ldr.w	r3, [r9]
1a0030d6:	442b      	add	r3, r5
1a0030d8:	f8c9 3000 	str.w	r3, [r9]
1a0030dc:	44a8      	add	r8, r5
1a0030de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a0030e2:	1950      	adds	r0, r2, r5
1a0030e4:	f143 0100 	adc.w	r1, r3, #0
1a0030e8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
	for ( ;  btr;								/* Repeat until btr bytes read */
1a0030ec:	2e00      	cmp	r6, #0
1a0030ee:	d03c      	beq.n	1a00316a <f_read+0x188>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
1a0030f0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a0030f4:	f3c2 0108 	ubfx	r1, r2, #0, #9
1a0030f8:	9100      	str	r1, [sp, #0]
1a0030fa:	2100      	movs	r1, #0
1a0030fc:	9101      	str	r1, [sp, #4]
1a0030fe:	e9dd 0100 	ldrd	r0, r1, [sp]
1a003102:	4301      	orrs	r1, r0
1a003104:	d1d5      	bne.n	1a0030b2 <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
1a003106:	0a57      	lsrs	r7, r2, #9
1a003108:	ea47 57c3 	orr.w	r7, r7, r3, lsl #23
1a00310c:	9905      	ldr	r1, [sp, #20]
1a00310e:	8949      	ldrh	r1, [r1, #10]
1a003110:	3901      	subs	r1, #1
			if (csect == 0) {					/* On the cluster boundary? */
1a003112:	400f      	ands	r7, r1
1a003114:	d108      	bne.n	1a003128 <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
1a003116:	4313      	orrs	r3, r2
1a003118:	d190      	bne.n	1a00303c <f_read+0x5a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
1a00311a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
1a00311c:	2801      	cmp	r0, #1
1a00311e:	d992      	bls.n	1a003046 <f_read+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a003120:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003124:	d094      	beq.n	1a003050 <f_read+0x6e>
				fp->clust = clst;				/* Update current cluster */
1a003126:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
1a003128:	f8dd b014 	ldr.w	fp, [sp, #20]
1a00312c:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a00312e:	4658      	mov	r0, fp
1a003130:	f7fd ff2c 	bl	1a000f8c <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a003134:	4682      	mov	sl, r0
1a003136:	2800      	cmp	r0, #0
1a003138:	d08f      	beq.n	1a00305a <f_read+0x78>
			sect += csect;
1a00313a:	44ba      	add	sl, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
1a00313c:	0a75      	lsrs	r5, r6, #9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
1a00313e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a003142:	d3a3      	bcc.n	1a00308c <f_read+0xaa>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a003144:	197b      	adds	r3, r7, r5
1a003146:	f8bb 200a 	ldrh.w	r2, [fp, #10]
1a00314a:	4293      	cmp	r3, r2
1a00314c:	d900      	bls.n	1a003150 <f_read+0x16e>
					cc = fs->csize - csect;
1a00314e:	1bd5      	subs	r5, r2, r7
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a003150:	462b      	mov	r3, r5
1a003152:	4652      	mov	r2, sl
1a003154:	4641      	mov	r1, r8
1a003156:	f89b 0001 	ldrb.w	r0, [fp, #1]
1a00315a:	f001 fc6d 	bl	1a004a38 <disk_read>
1a00315e:	2800      	cmp	r0, #0
1a003160:	d080      	beq.n	1a003064 <f_read+0x82>
1a003162:	2301      	movs	r3, #1
1a003164:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a003168:	9302      	str	r3, [sp, #8]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
1a00316a:	9802      	ldr	r0, [sp, #8]
1a00316c:	b007      	add	sp, #28
1a00316e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a003172:	2301      	movs	r3, #1
1a003174:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a003178:	f89b 0001 	ldrb.w	r0, [fp, #1]
1a00317c:	f001 fc6c 	bl	1a004a58 <disk_write>
1a003180:	b930      	cbnz	r0, 1a003190 <f_read+0x1ae>
					fp->flag &= (BYTE)~FA_DIRTY;
1a003182:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a003186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a00318a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a00318e:	e784      	b.n	1a00309a <f_read+0xb8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a003190:	2301      	movs	r3, #1
1a003192:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a003196:	9302      	str	r3, [sp, #8]
1a003198:	e7e7      	b.n	1a00316a <f_read+0x188>
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
1a00319a:	2301      	movs	r3, #1
1a00319c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a0031a0:	9302      	str	r3, [sp, #8]
1a0031a2:	e7e2      	b.n	1a00316a <f_read+0x188>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
1a0031a4:	2307      	movs	r3, #7
1a0031a6:	9302      	str	r3, [sp, #8]
1a0031a8:	e7df      	b.n	1a00316a <f_read+0x188>

1a0031aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a0031aa:	b570      	push	{r4, r5, r6, lr}
1a0031ac:	b096      	sub	sp, #88	; 0x58
1a0031ae:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
1a0031b0:	a915      	add	r1, sp, #84	; 0x54
1a0031b2:	f7fe f88b 	bl	1a0012cc <validate>
	if (res == FR_OK) {
1a0031b6:	4603      	mov	r3, r0
1a0031b8:	b9a0      	cbnz	r0, 1a0031e4 <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a0031ba:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a0031be:	f012 0f40 	tst.w	r2, #64	; 0x40
1a0031c2:	d00f      	beq.n	1a0031e4 <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a0031c4:	f012 0f80 	tst.w	r2, #128	; 0x80
1a0031c8:	d10f      	bne.n	1a0031ea <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
1a0031ca:	f001 fc05 	bl	1a0049d8 <get_fattime>
1a0031ce:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
1a0031d0:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0031d2:	7803      	ldrb	r3, [r0, #0]
1a0031d4:	2b04      	cmp	r3, #4
1a0031d6:	d01a      	beq.n	1a00320e <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a0031d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a0031da:	f7fe f8c3 	bl	1a001364 <move_window>
				if (res == FR_OK) {
1a0031de:	4603      	mov	r3, r0
1a0031e0:	2800      	cmp	r0, #0
1a0031e2:	d069      	beq.n	1a0032b8 <f_sync+0x10e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a0031e4:	4618      	mov	r0, r3
1a0031e6:	b016      	add	sp, #88	; 0x58
1a0031e8:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a0031ea:	2301      	movs	r3, #1
1a0031ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a0031ee:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a0031f2:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0031f4:	7840      	ldrb	r0, [r0, #1]
1a0031f6:	f001 fc2f 	bl	1a004a58 <disk_write>
1a0031fa:	2800      	cmp	r0, #0
1a0031fc:	f040 8083 	bne.w	1a003306 <f_sync+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
1a003200:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a003204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a003208:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a00320c:	e7dd      	b.n	1a0031ca <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
1a00320e:	4620      	mov	r0, r4
1a003210:	f7fe fc80 	bl	1a001b14 <fill_first_frag>
				if (res == FR_OK) {
1a003214:	4603      	mov	r3, r0
1a003216:	2800      	cmp	r0, #0
1a003218:	d046      	beq.n	1a0032a8 <f_sync+0xfe>
				if (res == FR_OK) {
1a00321a:	2b00      	cmp	r3, #0
1a00321c:	d1e2      	bne.n	1a0031e4 <f_sync+0x3a>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
1a00321e:	4621      	mov	r1, r4
1a003220:	4668      	mov	r0, sp
1a003222:	f7ff f83d 	bl	1a0022a0 <load_obj_xdir>
					if (res == FR_OK) {
1a003226:	4603      	mov	r3, r0
1a003228:	2800      	cmp	r0, #0
1a00322a:	d1db      	bne.n	1a0031e4 <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
1a00322c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00322e:	6919      	ldr	r1, [r3, #16]
1a003230:	790a      	ldrb	r2, [r1, #4]
1a003232:	f042 0220 	orr.w	r2, r2, #32
1a003236:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
1a003238:	79e2      	ldrb	r2, [r4, #7]
1a00323a:	6919      	ldr	r1, [r3, #16]
1a00323c:	f042 0201 	orr.w	r2, r2, #1
1a003240:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
1a003244:	6918      	ldr	r0, [r3, #16]
1a003246:	68a1      	ldr	r1, [r4, #8]
1a003248:	3034      	adds	r0, #52	; 0x34
1a00324a:	f7fd fdfb 	bl	1a000e44 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
1a00324e:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003250:	6918      	ldr	r0, [r3, #16]
1a003252:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a003256:	3038      	adds	r0, #56	; 0x38
1a003258:	f7fd fdfe 	bl	1a000e58 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
1a00325c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00325e:	6918      	ldr	r0, [r3, #16]
1a003260:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a003264:	3028      	adds	r0, #40	; 0x28
1a003266:	f7fd fdf7 	bl	1a000e58 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
1a00326a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00326c:	6918      	ldr	r0, [r3, #16]
1a00326e:	4631      	mov	r1, r6
1a003270:	300c      	adds	r0, #12
1a003272:	f7fd fde7 	bl	1a000e44 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
1a003276:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003278:	691a      	ldr	r2, [r3, #16]
1a00327a:	2100      	movs	r1, #0
1a00327c:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
1a00327e:	6918      	ldr	r0, [r3, #16]
1a003280:	3010      	adds	r0, #16
1a003282:	f7fd fddf 	bl	1a000e44 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
1a003286:	4668      	mov	r0, sp
1a003288:	f7ff f8d2 	bl	1a002430 <store_xdir>
						if (res == FR_OK) {
1a00328c:	4603      	mov	r3, r0
1a00328e:	2800      	cmp	r0, #0
1a003290:	d1a8      	bne.n	1a0031e4 <f_sync+0x3a>
							res = sync_fs(fs);
1a003292:	9815      	ldr	r0, [sp, #84]	; 0x54
1a003294:	f7ff fce0 	bl	1a002c58 <sync_fs>
1a003298:	4603      	mov	r3, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
1a00329a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a00329e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a0032a2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
					FREE_NAMBUF();
1a0032a6:	e79d      	b.n	1a0031e4 <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
1a0032a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0032ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a0032ae:	4620      	mov	r0, r4
1a0032b0:	f7fe fc18 	bl	1a001ae4 <fill_last_frag>
1a0032b4:	4603      	mov	r3, r0
1a0032b6:	e7b0      	b.n	1a00321a <f_sync+0x70>
					dir = fp->dir_ptr;
1a0032b8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
1a0032ba:	7aeb      	ldrb	r3, [r5, #11]
1a0032bc:	f043 0320 	orr.w	r3, r3, #32
1a0032c0:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
1a0032c2:	68a2      	ldr	r2, [r4, #8]
1a0032c4:	4629      	mov	r1, r5
1a0032c6:	6820      	ldr	r0, [r4, #0]
1a0032c8:	f7fd fe7f 	bl	1a000fca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a0032cc:	6921      	ldr	r1, [r4, #16]
1a0032ce:	f105 001c 	add.w	r0, r5, #28
1a0032d2:	f7fd fdb7 	bl	1a000e44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a0032d6:	4631      	mov	r1, r6
1a0032d8:	f105 0016 	add.w	r0, r5, #22
1a0032dc:	f7fd fdb2 	bl	1a000e44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a0032e0:	2100      	movs	r1, #0
1a0032e2:	f105 0012 	add.w	r0, r5, #18
1a0032e6:	f7fd fda9 	bl	1a000e3c <st_word>
					fs->wflag = 1;
1a0032ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0032ec:	2201      	movs	r2, #1
1a0032ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a0032f0:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0032f2:	f7ff fcb1 	bl	1a002c58 <sync_fs>
1a0032f6:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
1a0032f8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a0032fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a003300:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a003304:	e76e      	b.n	1a0031e4 <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a003306:	2301      	movs	r3, #1
1a003308:	e76c      	b.n	1a0031e4 <f_sync+0x3a>

1a00330a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a00330a:	b510      	push	{r4, lr}
1a00330c:	b082      	sub	sp, #8
1a00330e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a003310:	f7ff ff4b 	bl	1a0031aa <f_sync>
	if (res == FR_OK)
1a003314:	4603      	mov	r3, r0
1a003316:	b110      	cbz	r0, 1a00331e <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a003318:	4618      	mov	r0, r3
1a00331a:	b002      	add	sp, #8
1a00331c:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
1a00331e:	a901      	add	r1, sp, #4
1a003320:	4620      	mov	r0, r4
1a003322:	f7fd ffd3 	bl	1a0012cc <validate>
		if (res == FR_OK) {
1a003326:	4603      	mov	r3, r0
1a003328:	2800      	cmp	r0, #0
1a00332a:	d1f5      	bne.n	1a003318 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
1a00332c:	2200      	movs	r2, #0
1a00332e:	6022      	str	r2, [r4, #0]
1a003330:	e7f2      	b.n	1a003318 <f_close+0xe>
1a003332:	Address 0x000000001a003332 is out of bounds.


1a003334 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
1a003334:	287f      	cmp	r0, #127	; 0x7f
1a003336:	d801      	bhi.n	1a00333c <ff_uni2oem+0x8>
		c = (WCHAR)uni;
1a003338:	b280      	uxth	r0, r0
1a00333a:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
1a00333c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a003340:	d213      	bcs.n	1a00336a <ff_uni2oem+0x36>
1a003342:	f240 3352 	movw	r3, #850	; 0x352
1a003346:	4299      	cmp	r1, r3
1a003348:	d001      	beq.n	1a00334e <ff_uni2oem+0x1a>
	WCHAR c = 0;
1a00334a:	2000      	movs	r0, #0
1a00334c:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1a00334e:	2300      	movs	r3, #0
1a003350:	2b7f      	cmp	r3, #127	; 0x7f
1a003352:	d807      	bhi.n	1a003364 <ff_uni2oem+0x30>
1a003354:	4a06      	ldr	r2, [pc, #24]	; (1a003370 <ff_uni2oem+0x3c>)
1a003356:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a00335a:	4282      	cmp	r2, r0
1a00335c:	d002      	beq.n	1a003364 <ff_uni2oem+0x30>
1a00335e:	3301      	adds	r3, #1
1a003360:	b29b      	uxth	r3, r3
1a003362:	e7f5      	b.n	1a003350 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
1a003364:	3380      	adds	r3, #128	; 0x80
1a003366:	b2d8      	uxtb	r0, r3
1a003368:	4770      	bx	lr
	WCHAR c = 0;
1a00336a:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a00336c:	4770      	bx	lr
1a00336e:	bf00      	nop
1a003370:	1a00e2a8 	.word	0x1a00e2a8

1a003374 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
1a003374:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a003378:	d245      	bcs.n	1a003406 <ff_wtoupper+0x92>
{
1a00337a:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
1a00337c:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
1a00337e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
1a003382:	d201      	bcs.n	1a003388 <ff_wtoupper+0x14>
1a003384:	4b20      	ldr	r3, [pc, #128]	; (1a003408 <ff_wtoupper+0x94>)
1a003386:	e002      	b.n	1a00338e <ff_wtoupper+0x1a>
1a003388:	4b20      	ldr	r3, [pc, #128]	; (1a00340c <ff_wtoupper+0x98>)
1a00338a:	e000      	b.n	1a00338e <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a00338c:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
1a00338e:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
1a003390:	b1d2      	cbz	r2, 1a0033c8 <ff_wtoupper+0x54>
1a003392:	4297      	cmp	r7, r2
1a003394:	d318      	bcc.n	1a0033c8 <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a003396:	1d1e      	adds	r6, r3, #4
1a003398:	885b      	ldrh	r3, [r3, #2]
1a00339a:	0a19      	lsrs	r1, r3, #8
1a00339c:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
1a00339e:	b284      	uxth	r4, r0
1a0033a0:	189d      	adds	r5, r3, r2
1a0033a2:	42ac      	cmp	r4, r5
1a0033a4:	db04      	blt.n	1a0033b0 <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
1a0033a6:	2900      	cmp	r1, #0
1a0033a8:	d1f0      	bne.n	1a00338c <ff_wtoupper+0x18>
1a0033aa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
1a0033ae:	e7ee      	b.n	1a00338e <ff_wtoupper+0x1a>
				switch (cmd) {
1a0033b0:	2908      	cmp	r1, #8
1a0033b2:	d809      	bhi.n	1a0033c8 <ff_wtoupper+0x54>
1a0033b4:	e8df f001 	tbb	[pc, r1]
1a0033b8:	14110b05 	.word	0x14110b05
1a0033bc:	201d1a17 	.word	0x201d1a17
1a0033c0:	23          	.byte	0x23
1a0033c1:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
1a0033c2:	1aa4      	subs	r4, r4, r2
1a0033c4:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
1a0033c8:	4638      	mov	r0, r7
	}

	return uni;
}
1a0033ca:	bcf0      	pop	{r4, r5, r6, r7}
1a0033cc:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
1a0033ce:	1aba      	subs	r2, r7, r2
1a0033d0:	f002 0301 	and.w	r3, r2, #1
1a0033d4:	1aff      	subs	r7, r7, r3
1a0033d6:	b2bf      	uxth	r7, r7
1a0033d8:	e7f6      	b.n	1a0033c8 <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
1a0033da:	3f10      	subs	r7, #16
1a0033dc:	b2bf      	uxth	r7, r7
1a0033de:	e7f3      	b.n	1a0033c8 <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
1a0033e0:	3f20      	subs	r7, #32
1a0033e2:	b2bf      	uxth	r7, r7
1a0033e4:	e7f0      	b.n	1a0033c8 <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
1a0033e6:	3f30      	subs	r7, #48	; 0x30
1a0033e8:	b2bf      	uxth	r7, r7
1a0033ea:	e7ed      	b.n	1a0033c8 <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
1a0033ec:	3f1a      	subs	r7, #26
1a0033ee:	b2bf      	uxth	r7, r7
1a0033f0:	e7ea      	b.n	1a0033c8 <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
1a0033f2:	3708      	adds	r7, #8
1a0033f4:	b2bf      	uxth	r7, r7
1a0033f6:	e7e7      	b.n	1a0033c8 <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
1a0033f8:	3f50      	subs	r7, #80	; 0x50
1a0033fa:	b2bf      	uxth	r7, r7
1a0033fc:	e7e4      	b.n	1a0033c8 <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
1a0033fe:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
1a003402:	b2bf      	uxth	r7, r7
1a003404:	e7e0      	b.n	1a0033c8 <ff_wtoupper+0x54>
}
1a003406:	4770      	bx	lr
1a003408:	1a00dff8 	.word	0x1a00dff8
1a00340c:	1a00e1ec 	.word	0x1a00e1ec

1a003410 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a003410:	b538      	push	{r3, r4, r5, lr}
1a003412:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a003414:	f010 0f07 	tst.w	r0, #7
1a003418:	d002      	beq.n	1a003420 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00341a:	f020 0407 	bic.w	r4, r0, #7
1a00341e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a003420:	f000 faea 	bl	1a0039f8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a003424:	4b13      	ldr	r3, [pc, #76]	; (1a003474 <pvPortMalloc+0x64>)
1a003426:	681b      	ldr	r3, [r3, #0]
1a003428:	b17b      	cbz	r3, 1a00344a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a00342a:	4b13      	ldr	r3, [pc, #76]	; (1a003478 <pvPortMalloc+0x68>)
1a00342c:	681b      	ldr	r3, [r3, #0]
1a00342e:	441c      	add	r4, r3
1a003430:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a003434:	4294      	cmp	r4, r2
1a003436:	d80e      	bhi.n	1a003456 <pvPortMalloc+0x46>
1a003438:	42a3      	cmp	r3, r4
1a00343a:	d310      	bcc.n	1a00345e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00343c:	f000 fb70 	bl	1a003b20 <xTaskResumeAll>
void *pvReturn = NULL;
1a003440:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a003442:	f7fd fb3b 	bl	1a000abc <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a003446:	4628      	mov	r0, r5
1a003448:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00344a:	4b0c      	ldr	r3, [pc, #48]	; (1a00347c <pvPortMalloc+0x6c>)
1a00344c:	f023 0307 	bic.w	r3, r3, #7
1a003450:	4a08      	ldr	r2, [pc, #32]	; (1a003474 <pvPortMalloc+0x64>)
1a003452:	6013      	str	r3, [r2, #0]
1a003454:	e7e9      	b.n	1a00342a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a003456:	f000 fb63 	bl	1a003b20 <xTaskResumeAll>
void *pvReturn = NULL;
1a00345a:	2500      	movs	r5, #0
1a00345c:	e7f1      	b.n	1a003442 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00345e:	4a05      	ldr	r2, [pc, #20]	; (1a003474 <pvPortMalloc+0x64>)
1a003460:	6815      	ldr	r5, [r2, #0]
1a003462:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a003464:	4b04      	ldr	r3, [pc, #16]	; (1a003478 <pvPortMalloc+0x68>)
1a003466:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a003468:	f000 fb5a 	bl	1a003b20 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00346c:	2d00      	cmp	r5, #0
1a00346e:	d1ea      	bne.n	1a003446 <pvPortMalloc+0x36>
1a003470:	e7e7      	b.n	1a003442 <pvPortMalloc+0x32>
1a003472:	bf00      	nop
1a003474:	1000110c 	.word	0x1000110c
1a003478:	10003110 	.word	0x10003110
1a00347c:	10001118 	.word	0x10001118

1a003480 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a003480:	b140      	cbz	r0, 1a003494 <vPortFree+0x14>
1a003482:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003486:	f383 8811 	msr	BASEPRI, r3
1a00348a:	f3bf 8f6f 	isb	sy
1a00348e:	f3bf 8f4f 	dsb	sy
1a003492:	e7fe      	b.n	1a003492 <vPortFree+0x12>
}
1a003494:	4770      	bx	lr
1a003496:	Address 0x000000001a003496 is out of bounds.


1a003498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a003498:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a00349a:	b1e0      	cbz	r0, 1a0034d6 <xQueueGenericReset+0x3e>
1a00349c:	4604      	mov	r4, r0
1a00349e:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
1a0034a0:	f000 fcf8 	bl	1a003e94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0034a4:	6821      	ldr	r1, [r4, #0]
1a0034a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0034a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0034aa:	fb03 1002 	mla	r0, r3, r2, r1
1a0034ae:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0034b0:	2000      	movs	r0, #0
1a0034b2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0034b4:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0034b6:	3a01      	subs	r2, #1
1a0034b8:	fb02 1303 	mla	r3, r2, r3, r1
1a0034bc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0034be:	23ff      	movs	r3, #255	; 0xff
1a0034c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0034c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a0034c8:	b9ed      	cbnz	r5, 1a003506 <xQueueGenericReset+0x6e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0034ca:	6923      	ldr	r3, [r4, #16]
1a0034cc:	b963      	cbnz	r3, 1a0034e8 <xQueueGenericReset+0x50>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
1a0034ce:	f000 fd03 	bl	1a003ed8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
1a0034d2:	2001      	movs	r0, #1
1a0034d4:	bd38      	pop	{r3, r4, r5, pc}
1a0034d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034da:	f383 8811 	msr	BASEPRI, r3
1a0034de:	f3bf 8f6f 	isb	sy
1a0034e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0034e6:	e7fe      	b.n	1a0034e6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0034e8:	f104 0010 	add.w	r0, r4, #16
1a0034ec:	f000 fc22 	bl	1a003d34 <xTaskRemoveFromEventList>
1a0034f0:	2800      	cmp	r0, #0
1a0034f2:	d0ec      	beq.n	1a0034ce <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a0034f4:	4b08      	ldr	r3, [pc, #32]	; (1a003518 <xQueueGenericReset+0x80>)
1a0034f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0034fa:	601a      	str	r2, [r3, #0]
1a0034fc:	f3bf 8f4f 	dsb	sy
1a003500:	f3bf 8f6f 	isb	sy
1a003504:	e7e3      	b.n	1a0034ce <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a003506:	f104 0010 	add.w	r0, r4, #16
1a00350a:	f000 f839 	bl	1a003580 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00350e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003512:	f000 f835 	bl	1a003580 <vListInitialise>
1a003516:	e7da      	b.n	1a0034ce <xQueueGenericReset+0x36>
1a003518:	e000ed04 	.word	0xe000ed04

1a00351c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a00351c:	b510      	push	{r4, lr}
1a00351e:	9b02      	ldr	r3, [sp, #8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a003520:	460c      	mov	r4, r1
1a003522:	b939      	cbnz	r1, 1a003534 <prvInitialiseNewQueue+0x18>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a003524:	601b      	str	r3, [r3, #0]
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a003526:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a003528:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00352a:	2101      	movs	r1, #1
1a00352c:	4618      	mov	r0, r3
1a00352e:	f7ff ffb3 	bl	1a003498 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
1a003532:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a003534:	601a      	str	r2, [r3, #0]
1a003536:	e7f6      	b.n	1a003526 <prvInitialiseNewQueue+0xa>

1a003538 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a003538:	b940      	cbnz	r0, 1a00354c <xQueueGenericCreate+0x14>
1a00353a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00353e:	f383 8811 	msr	BASEPRI, r3
1a003542:	f3bf 8f6f 	isb	sy
1a003546:	f3bf 8f4f 	dsb	sy
1a00354a:	e7fe      	b.n	1a00354a <xQueueGenericCreate+0x12>
	{
1a00354c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00354e:	b083      	sub	sp, #12
1a003550:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a003552:	b199      	cbz	r1, 1a00357c <xQueueGenericCreate+0x44>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003554:	fb01 f000 	mul.w	r0, r1, r0
1a003558:	4617      	mov	r7, r2
1a00355a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00355c:	3048      	adds	r0, #72	; 0x48
1a00355e:	f7ff ff57 	bl	1a003410 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a003562:	4606      	mov	r6, r0
1a003564:	b138      	cbz	r0, 1a003576 <xQueueGenericCreate+0x3e>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a003566:	9000      	str	r0, [sp, #0]
1a003568:	463b      	mov	r3, r7
1a00356a:	f100 0248 	add.w	r2, r0, #72	; 0x48
1a00356e:	4621      	mov	r1, r4
1a003570:	4628      	mov	r0, r5
1a003572:	f7ff ffd3 	bl	1a00351c <prvInitialiseNewQueue>
	}
1a003576:	4630      	mov	r0, r6
1a003578:	b003      	add	sp, #12
1a00357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a00357c:	2000      	movs	r0, #0
1a00357e:	e7eb      	b.n	1a003558 <xQueueGenericCreate+0x20>

1a003580 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003580:	f100 0308 	add.w	r3, r0, #8
1a003584:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a003586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00358a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00358c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00358e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a003590:	2300      	movs	r3, #0
1a003592:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a003594:	4770      	bx	lr

1a003596 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a003596:	2300      	movs	r3, #0
1a003598:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a00359a:	4770      	bx	lr

1a00359c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a00359c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a00359e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0035a0:	689a      	ldr	r2, [r3, #8]
1a0035a2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0035a4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0035a6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0035a8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0035aa:	6803      	ldr	r3, [r0, #0]
1a0035ac:	3301      	adds	r3, #1
1a0035ae:	6003      	str	r3, [r0, #0]
}
1a0035b0:	4770      	bx	lr

1a0035b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0035b2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0035b4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0035b6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0035ba:	d002      	beq.n	1a0035c2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0035bc:	f100 0208 	add.w	r2, r0, #8
1a0035c0:	e002      	b.n	1a0035c8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0035c2:	6902      	ldr	r2, [r0, #16]
1a0035c4:	e004      	b.n	1a0035d0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0035c6:	461a      	mov	r2, r3
1a0035c8:	6853      	ldr	r3, [r2, #4]
1a0035ca:	681c      	ldr	r4, [r3, #0]
1a0035cc:	42ac      	cmp	r4, r5
1a0035ce:	d9fa      	bls.n	1a0035c6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0035d0:	6853      	ldr	r3, [r2, #4]
1a0035d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0035d4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0035d6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0035d8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0035da:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0035dc:	6803      	ldr	r3, [r0, #0]
1a0035de:	3301      	adds	r3, #1
1a0035e0:	6003      	str	r3, [r0, #0]
}
1a0035e2:	bc30      	pop	{r4, r5}
1a0035e4:	4770      	bx	lr

1a0035e6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0035e6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0035e8:	6841      	ldr	r1, [r0, #4]
1a0035ea:	6882      	ldr	r2, [r0, #8]
1a0035ec:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0035ee:	6841      	ldr	r1, [r0, #4]
1a0035f0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0035f2:	685a      	ldr	r2, [r3, #4]
1a0035f4:	4282      	cmp	r2, r0
1a0035f6:	d006      	beq.n	1a003606 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0035f8:	2200      	movs	r2, #0
1a0035fa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0035fc:	681a      	ldr	r2, [r3, #0]
1a0035fe:	3a01      	subs	r2, #1
1a003600:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a003602:	6818      	ldr	r0, [r3, #0]
}
1a003604:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a003606:	6882      	ldr	r2, [r0, #8]
1a003608:	605a      	str	r2, [r3, #4]
1a00360a:	e7f5      	b.n	1a0035f8 <uxListRemove+0x12>

1a00360c <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a00360c:	b510      	push	{r4, lr}
1a00360e:	b082      	sub	sp, #8
1a003610:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a003612:	9001      	str	r0, [sp, #4]
1a003614:	2300      	movs	r3, #0
1a003616:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a003618:	f000 fc3c 	bl	1a003e94 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a00361c:	9901      	ldr	r1, [sp, #4]
1a00361e:	4622      	mov	r2, r4
1a003620:	4804      	ldr	r0, [pc, #16]	; (1a003634 <vAssertCalled+0x28>)
1a003622:	f004 facd 	bl	1a007bc0 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a003626:	9b00      	ldr	r3, [sp, #0]
1a003628:	2b00      	cmp	r3, #0
1a00362a:	d0fc      	beq.n	1a003626 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a00362c:	f000 fc54 	bl	1a003ed8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a003630:	b002      	add	sp, #8
1a003632:	bd10      	pop	{r4, pc}
1a003634:	1a00e41c 	.word	0x1a00e41c

1a003638 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a003638:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00363a:	4804      	ldr	r0, [pc, #16]	; (1a00364c <vApplicationStackOverflowHook+0x14>)
1a00363c:	f004 fac0 	bl	1a007bc0 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a003640:	4903      	ldr	r1, [pc, #12]	; (1a003650 <vApplicationStackOverflowHook+0x18>)
1a003642:	2050      	movs	r0, #80	; 0x50
1a003644:	f7ff ffe2 	bl	1a00360c <vAssertCalled>
}
1a003648:	bd08      	pop	{r3, pc}
1a00364a:	bf00      	nop
1a00364c:	1a00e3ec 	.word	0x1a00e3ec
1a003650:	1a00e3cc 	.word	0x1a00e3cc

1a003654 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a003654:	4b08      	ldr	r3, [pc, #32]	; (1a003678 <prvResetNextTaskUnblockTime+0x24>)
1a003656:	681b      	ldr	r3, [r3, #0]
1a003658:	681b      	ldr	r3, [r3, #0]
1a00365a:	b923      	cbnz	r3, 1a003666 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a00365c:	4b07      	ldr	r3, [pc, #28]	; (1a00367c <prvResetNextTaskUnblockTime+0x28>)
1a00365e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003662:	601a      	str	r2, [r3, #0]
1a003664:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a003666:	4b04      	ldr	r3, [pc, #16]	; (1a003678 <prvResetNextTaskUnblockTime+0x24>)
1a003668:	681b      	ldr	r3, [r3, #0]
1a00366a:	68db      	ldr	r3, [r3, #12]
1a00366c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a00366e:	685a      	ldr	r2, [r3, #4]
1a003670:	4b02      	ldr	r3, [pc, #8]	; (1a00367c <prvResetNextTaskUnblockTime+0x28>)
1a003672:	601a      	str	r2, [r3, #0]
	}
}
1a003674:	4770      	bx	lr
1a003676:	bf00      	nop
1a003678:	10003118 	.word	0x10003118
1a00367c:	100031f0 	.word	0x100031f0

1a003680 <prvDeleteTCB>:
	{
1a003680:	b510      	push	{r4, lr}
1a003682:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
1a003684:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003686:	f7ff fefb 	bl	1a003480 <vPortFree>
			vPortFree( pxTCB );
1a00368a:	4620      	mov	r0, r4
1a00368c:	f7ff fef8 	bl	1a003480 <vPortFree>
	}
1a003690:	bd10      	pop	{r4, pc}

1a003692 <prvInitialiseNewTask>:
{
1a003692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003696:	4681      	mov	r9, r0
1a003698:	460d      	mov	r5, r1
1a00369a:	4617      	mov	r7, r2
1a00369c:	469a      	mov	sl, r3
1a00369e:	9e08      	ldr	r6, [sp, #32]
1a0036a0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0036a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0036a6:	0092      	lsls	r2, r2, #2
1a0036a8:	21a5      	movs	r1, #165	; 0xa5
1a0036aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0036ac:	f004 fa2c 	bl	1a007b08 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0036b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0036b2:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0036b6:	3a01      	subs	r2, #1
1a0036b8:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0036bc:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0036c0:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0036c2:	2300      	movs	r3, #0
1a0036c4:	2b0f      	cmp	r3, #15
1a0036c6:	d806      	bhi.n	1a0036d6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0036c8:	5cea      	ldrb	r2, [r5, r3]
1a0036ca:	18e1      	adds	r1, r4, r3
1a0036cc:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0036d0:	b10a      	cbz	r2, 1a0036d6 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0036d2:	3301      	adds	r3, #1
1a0036d4:	e7f6      	b.n	1a0036c4 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0036d6:	2300      	movs	r3, #0
1a0036d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0036dc:	2e06      	cmp	r6, #6
1a0036de:	d900      	bls.n	1a0036e2 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0036e0:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0036e2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0036e4:	64a6      	str	r6, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
1a0036e6:	2500      	movs	r5, #0
1a0036e8:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0036ea:	1d20      	adds	r0, r4, #4
1a0036ec:	f7ff ff53 	bl	1a003596 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0036f0:	f104 0018 	add.w	r0, r4, #24
1a0036f4:	f7ff ff4f 	bl	1a003596 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0036f8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0036fa:	f1c6 0607 	rsb	r6, r6, #7
1a0036fe:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a003700:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a003702:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a003704:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a003708:	4652      	mov	r2, sl
1a00370a:	4649      	mov	r1, r9
1a00370c:	4638      	mov	r0, r7
1a00370e:	f000 fb95 	bl	1a003e3c <pxPortInitialiseStack>
1a003712:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a003714:	f1b8 0f00 	cmp.w	r8, #0
1a003718:	d001      	beq.n	1a00371e <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00371a:	f8c8 4000 	str.w	r4, [r8]
}
1a00371e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003722:	Address 0x000000001a003722 is out of bounds.


1a003724 <prvInitialiseTaskLists>:
{
1a003724:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a003726:	2400      	movs	r4, #0
1a003728:	2c06      	cmp	r4, #6
1a00372a:	d808      	bhi.n	1a00373e <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00372c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a003730:	0093      	lsls	r3, r2, #2
1a003732:	480c      	ldr	r0, [pc, #48]	; (1a003764 <prvInitialiseTaskLists+0x40>)
1a003734:	4418      	add	r0, r3
1a003736:	f7ff ff23 	bl	1a003580 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00373a:	3401      	adds	r4, #1
1a00373c:	e7f4      	b.n	1a003728 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a00373e:	4d0a      	ldr	r5, [pc, #40]	; (1a003768 <prvInitialiseTaskLists+0x44>)
1a003740:	4628      	mov	r0, r5
1a003742:	f7ff ff1d 	bl	1a003580 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a003746:	4c09      	ldr	r4, [pc, #36]	; (1a00376c <prvInitialiseTaskLists+0x48>)
1a003748:	4620      	mov	r0, r4
1a00374a:	f7ff ff19 	bl	1a003580 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00374e:	4808      	ldr	r0, [pc, #32]	; (1a003770 <prvInitialiseTaskLists+0x4c>)
1a003750:	f7ff ff16 	bl	1a003580 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a003754:	4807      	ldr	r0, [pc, #28]	; (1a003774 <prvInitialiseTaskLists+0x50>)
1a003756:	f7ff ff13 	bl	1a003580 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00375a:	4b07      	ldr	r3, [pc, #28]	; (1a003778 <prvInitialiseTaskLists+0x54>)
1a00375c:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a00375e:	4b07      	ldr	r3, [pc, #28]	; (1a00377c <prvInitialiseTaskLists+0x58>)
1a003760:	601c      	str	r4, [r3, #0]
}
1a003762:	bd38      	pop	{r3, r4, r5, pc}
1a003764:	10003120 	.word	0x10003120
1a003768:	100031c4 	.word	0x100031c4
1a00376c:	100031d8 	.word	0x100031d8
1a003770:	100031f8 	.word	0x100031f8
1a003774:	10003210 	.word	0x10003210
1a003778:	10003118 	.word	0x10003118
1a00377c:	1000311c 	.word	0x1000311c

1a003780 <prvAddNewTaskToReadyList>:
{
1a003780:	b510      	push	{r4, lr}
1a003782:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a003784:	f000 fb86 	bl	1a003e94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a003788:	4a20      	ldr	r2, [pc, #128]	; (1a00380c <prvAddNewTaskToReadyList+0x8c>)
1a00378a:	6813      	ldr	r3, [r2, #0]
1a00378c:	3301      	adds	r3, #1
1a00378e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a003790:	4b1f      	ldr	r3, [pc, #124]	; (1a003810 <prvAddNewTaskToReadyList+0x90>)
1a003792:	681b      	ldr	r3, [r3, #0]
1a003794:	b15b      	cbz	r3, 1a0037ae <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a003796:	4b1f      	ldr	r3, [pc, #124]	; (1a003814 <prvAddNewTaskToReadyList+0x94>)
1a003798:	681b      	ldr	r3, [r3, #0]
1a00379a:	b96b      	cbnz	r3, 1a0037b8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a00379c:	4b1c      	ldr	r3, [pc, #112]	; (1a003810 <prvAddNewTaskToReadyList+0x90>)
1a00379e:	681b      	ldr	r3, [r3, #0]
1a0037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0037a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0037a4:	429a      	cmp	r2, r3
1a0037a6:	d807      	bhi.n	1a0037b8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0037a8:	4b19      	ldr	r3, [pc, #100]	; (1a003810 <prvAddNewTaskToReadyList+0x90>)
1a0037aa:	601c      	str	r4, [r3, #0]
1a0037ac:	e004      	b.n	1a0037b8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0037ae:	4b18      	ldr	r3, [pc, #96]	; (1a003810 <prvAddNewTaskToReadyList+0x90>)
1a0037b0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0037b2:	6813      	ldr	r3, [r2, #0]
1a0037b4:	2b01      	cmp	r3, #1
1a0037b6:	d026      	beq.n	1a003806 <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
1a0037b8:	4a17      	ldr	r2, [pc, #92]	; (1a003818 <prvAddNewTaskToReadyList+0x98>)
1a0037ba:	6813      	ldr	r3, [r2, #0]
1a0037bc:	3301      	adds	r3, #1
1a0037be:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
1a0037c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0037c2:	2201      	movs	r2, #1
1a0037c4:	409a      	lsls	r2, r3
1a0037c6:	4915      	ldr	r1, [pc, #84]	; (1a00381c <prvAddNewTaskToReadyList+0x9c>)
1a0037c8:	6808      	ldr	r0, [r1, #0]
1a0037ca:	4302      	orrs	r2, r0
1a0037cc:	600a      	str	r2, [r1, #0]
1a0037ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0037d2:	009a      	lsls	r2, r3, #2
1a0037d4:	1d21      	adds	r1, r4, #4
1a0037d6:	4812      	ldr	r0, [pc, #72]	; (1a003820 <prvAddNewTaskToReadyList+0xa0>)
1a0037d8:	4410      	add	r0, r2
1a0037da:	f7ff fedf 	bl	1a00359c <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0037de:	f000 fb7b 	bl	1a003ed8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0037e2:	4b0c      	ldr	r3, [pc, #48]	; (1a003814 <prvAddNewTaskToReadyList+0x94>)
1a0037e4:	681b      	ldr	r3, [r3, #0]
1a0037e6:	b16b      	cbz	r3, 1a003804 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0037e8:	4b09      	ldr	r3, [pc, #36]	; (1a003810 <prvAddNewTaskToReadyList+0x90>)
1a0037ea:	681b      	ldr	r3, [r3, #0]
1a0037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0037ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0037f0:	429a      	cmp	r2, r3
1a0037f2:	d207      	bcs.n	1a003804 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
1a0037f4:	4b0b      	ldr	r3, [pc, #44]	; (1a003824 <prvAddNewTaskToReadyList+0xa4>)
1a0037f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0037fa:	601a      	str	r2, [r3, #0]
1a0037fc:	f3bf 8f4f 	dsb	sy
1a003800:	f3bf 8f6f 	isb	sy
}
1a003804:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a003806:	f7ff ff8d 	bl	1a003724 <prvInitialiseTaskLists>
1a00380a:	e7d5      	b.n	1a0037b8 <prvAddNewTaskToReadyList+0x38>
1a00380c:	100031ac 	.word	0x100031ac
1a003810:	10003114 	.word	0x10003114
1a003814:	1000320c 	.word	0x1000320c
1a003818:	100031bc 	.word	0x100031bc
1a00381c:	100031c0 	.word	0x100031c0
1a003820:	10003120 	.word	0x10003120
1a003824:	e000ed04 	.word	0xe000ed04

1a003828 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a003828:	4b0f      	ldr	r3, [pc, #60]	; (1a003868 <prvCheckTasksWaitingTermination+0x40>)
1a00382a:	681b      	ldr	r3, [r3, #0]
1a00382c:	b1d3      	cbz	r3, 1a003864 <prvCheckTasksWaitingTermination+0x3c>
{
1a00382e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a003830:	f000 fb30 	bl	1a003e94 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a003834:	4b0d      	ldr	r3, [pc, #52]	; (1a00386c <prvCheckTasksWaitingTermination+0x44>)
1a003836:	68db      	ldr	r3, [r3, #12]
1a003838:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00383a:	1d20      	adds	r0, r4, #4
1a00383c:	f7ff fed3 	bl	1a0035e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a003840:	4a0b      	ldr	r2, [pc, #44]	; (1a003870 <prvCheckTasksWaitingTermination+0x48>)
1a003842:	6813      	ldr	r3, [r2, #0]
1a003844:	3b01      	subs	r3, #1
1a003846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a003848:	4a07      	ldr	r2, [pc, #28]	; (1a003868 <prvCheckTasksWaitingTermination+0x40>)
1a00384a:	6813      	ldr	r3, [r2, #0]
1a00384c:	3b01      	subs	r3, #1
1a00384e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a003850:	f000 fb42 	bl	1a003ed8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a003854:	4620      	mov	r0, r4
1a003856:	f7ff ff13 	bl	1a003680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00385a:	4b03      	ldr	r3, [pc, #12]	; (1a003868 <prvCheckTasksWaitingTermination+0x40>)
1a00385c:	681b      	ldr	r3, [r3, #0]
1a00385e:	2b00      	cmp	r3, #0
1a003860:	d1e6      	bne.n	1a003830 <prvCheckTasksWaitingTermination+0x8>
}
1a003862:	bd10      	pop	{r4, pc}
1a003864:	4770      	bx	lr
1a003866:	bf00      	nop
1a003868:	100031b0 	.word	0x100031b0
1a00386c:	10003210 	.word	0x10003210
1a003870:	100031ac 	.word	0x100031ac

1a003874 <prvIdleTask>:
{
1a003874:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a003876:	f7ff ffd7 	bl	1a003828 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00387a:	4b06      	ldr	r3, [pc, #24]	; (1a003894 <prvIdleTask+0x20>)
1a00387c:	681b      	ldr	r3, [r3, #0]
1a00387e:	2b01      	cmp	r3, #1
1a003880:	d9f9      	bls.n	1a003876 <prvIdleTask+0x2>
				taskYIELD();
1a003882:	4b05      	ldr	r3, [pc, #20]	; (1a003898 <prvIdleTask+0x24>)
1a003884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003888:	601a      	str	r2, [r3, #0]
1a00388a:	f3bf 8f4f 	dsb	sy
1a00388e:	f3bf 8f6f 	isb	sy
1a003892:	e7f0      	b.n	1a003876 <prvIdleTask+0x2>
1a003894:	10003120 	.word	0x10003120
1a003898:	e000ed04 	.word	0xe000ed04

1a00389c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a00389c:	b538      	push	{r3, r4, r5, lr}
1a00389e:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0038a0:	4b17      	ldr	r3, [pc, #92]	; (1a003900 <prvAddCurrentTaskToDelayedList+0x64>)
1a0038a2:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0038a4:	4b17      	ldr	r3, [pc, #92]	; (1a003904 <prvAddCurrentTaskToDelayedList+0x68>)
1a0038a6:	6818      	ldr	r0, [r3, #0]
1a0038a8:	3004      	adds	r0, #4
1a0038aa:	f7ff fe9c 	bl	1a0035e6 <uxListRemove>
1a0038ae:	b950      	cbnz	r0, 1a0038c6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0038b0:	4b14      	ldr	r3, [pc, #80]	; (1a003904 <prvAddCurrentTaskToDelayedList+0x68>)
1a0038b2:	681b      	ldr	r3, [r3, #0]
1a0038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0038b6:	2301      	movs	r3, #1
1a0038b8:	fa03 f202 	lsl.w	r2, r3, r2
1a0038bc:	4912      	ldr	r1, [pc, #72]	; (1a003908 <prvAddCurrentTaskToDelayedList+0x6c>)
1a0038be:	680b      	ldr	r3, [r1, #0]
1a0038c0:	ea23 0302 	bic.w	r3, r3, r2
1a0038c4:	600b      	str	r3, [r1, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
1a0038c6:	442c      	add	r4, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0038c8:	4b0e      	ldr	r3, [pc, #56]	; (1a003904 <prvAddCurrentTaskToDelayedList+0x68>)
1a0038ca:	681b      	ldr	r3, [r3, #0]
1a0038cc:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
1a0038ce:	42a5      	cmp	r5, r4
1a0038d0:	d907      	bls.n	1a0038e2 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0038d2:	4b0e      	ldr	r3, [pc, #56]	; (1a00390c <prvAddCurrentTaskToDelayedList+0x70>)
1a0038d4:	6818      	ldr	r0, [r3, #0]
1a0038d6:	4b0b      	ldr	r3, [pc, #44]	; (1a003904 <prvAddCurrentTaskToDelayedList+0x68>)
1a0038d8:	6819      	ldr	r1, [r3, #0]
1a0038da:	3104      	adds	r1, #4
1a0038dc:	f7ff fe69 	bl	1a0035b2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0038e0:	bd38      	pop	{r3, r4, r5, pc}
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0038e2:	4b0b      	ldr	r3, [pc, #44]	; (1a003910 <prvAddCurrentTaskToDelayedList+0x74>)
1a0038e4:	6818      	ldr	r0, [r3, #0]
1a0038e6:	4b07      	ldr	r3, [pc, #28]	; (1a003904 <prvAddCurrentTaskToDelayedList+0x68>)
1a0038e8:	6819      	ldr	r1, [r3, #0]
1a0038ea:	3104      	adds	r1, #4
1a0038ec:	f7ff fe61 	bl	1a0035b2 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
1a0038f0:	4b08      	ldr	r3, [pc, #32]	; (1a003914 <prvAddCurrentTaskToDelayedList+0x78>)
1a0038f2:	681b      	ldr	r3, [r3, #0]
1a0038f4:	42a3      	cmp	r3, r4
1a0038f6:	d9f3      	bls.n	1a0038e0 <prvAddCurrentTaskToDelayedList+0x44>
				xNextTaskUnblockTime = xTimeToWake;
1a0038f8:	4b06      	ldr	r3, [pc, #24]	; (1a003914 <prvAddCurrentTaskToDelayedList+0x78>)
1a0038fa:	601c      	str	r4, [r3, #0]
}
1a0038fc:	e7f0      	b.n	1a0038e0 <prvAddCurrentTaskToDelayedList+0x44>
1a0038fe:	bf00      	nop
1a003900:	10003224 	.word	0x10003224
1a003904:	10003114 	.word	0x10003114
1a003908:	100031c0 	.word	0x100031c0
1a00390c:	1000311c 	.word	0x1000311c
1a003910:	10003118 	.word	0x10003118
1a003914:	100031f0 	.word	0x100031f0

1a003918 <xTaskCreate>:
	{
1a003918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00391c:	b085      	sub	sp, #20
1a00391e:	4607      	mov	r7, r0
1a003920:	4688      	mov	r8, r1
1a003922:	4614      	mov	r4, r2
1a003924:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003926:	0090      	lsls	r0, r2, #2
1a003928:	f7ff fd72 	bl	1a003410 <pvPortMalloc>
			if( pxStack != NULL )
1a00392c:	b1e8      	cbz	r0, 1a00396a <xTaskCreate+0x52>
1a00392e:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a003930:	2058      	movs	r0, #88	; 0x58
1a003932:	f7ff fd6d 	bl	1a003410 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a003936:	4605      	mov	r5, r0
1a003938:	b198      	cbz	r0, 1a003962 <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
1a00393a:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a00393c:	b1d5      	cbz	r5, 1a003974 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00393e:	2300      	movs	r3, #0
1a003940:	9303      	str	r3, [sp, #12]
1a003942:	9502      	str	r5, [sp, #8]
1a003944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003946:	9301      	str	r3, [sp, #4]
1a003948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00394a:	9300      	str	r3, [sp, #0]
1a00394c:	464b      	mov	r3, r9
1a00394e:	4622      	mov	r2, r4
1a003950:	4641      	mov	r1, r8
1a003952:	4638      	mov	r0, r7
1a003954:	f7ff fe9d 	bl	1a003692 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a003958:	4628      	mov	r0, r5
1a00395a:	f7ff ff11 	bl	1a003780 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a00395e:	2001      	movs	r0, #1
1a003960:	e005      	b.n	1a00396e <xTaskCreate+0x56>
					vPortFree( pxStack );
1a003962:	4630      	mov	r0, r6
1a003964:	f7ff fd8c 	bl	1a003480 <vPortFree>
1a003968:	e7e8      	b.n	1a00393c <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00396a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a00396e:	b005      	add	sp, #20
1a003970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a003974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a003978:	e7f9      	b.n	1a00396e <xTaskCreate+0x56>
1a00397a:	Address 0x000000001a00397a is out of bounds.


1a00397c <vTaskStartScheduler>:
{
1a00397c:	b500      	push	{lr}
1a00397e:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a003980:	4b17      	ldr	r3, [pc, #92]	; (1a0039e0 <vTaskStartScheduler+0x64>)
1a003982:	9301      	str	r3, [sp, #4]
1a003984:	2300      	movs	r3, #0
1a003986:	9300      	str	r3, [sp, #0]
1a003988:	225a      	movs	r2, #90	; 0x5a
1a00398a:	4916      	ldr	r1, [pc, #88]	; (1a0039e4 <vTaskStartScheduler+0x68>)
1a00398c:	4816      	ldr	r0, [pc, #88]	; (1a0039e8 <vTaskStartScheduler+0x6c>)
1a00398e:	f7ff ffc3 	bl	1a003918 <xTaskCreate>
	if( xReturn == pdPASS )
1a003992:	2801      	cmp	r0, #1
1a003994:	d005      	beq.n	1a0039a2 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a003996:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00399a:	d017      	beq.n	1a0039cc <vTaskStartScheduler+0x50>
}
1a00399c:	b003      	add	sp, #12
1a00399e:	f85d fb04 	ldr.w	pc, [sp], #4
1a0039a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0039a6:	f383 8811 	msr	BASEPRI, r3
1a0039aa:	f3bf 8f6f 	isb	sy
1a0039ae:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0039b2:	4b0e      	ldr	r3, [pc, #56]	; (1a0039ec <vTaskStartScheduler+0x70>)
1a0039b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0039b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0039ba:	4b0d      	ldr	r3, [pc, #52]	; (1a0039f0 <vTaskStartScheduler+0x74>)
1a0039bc:	2201      	movs	r2, #1
1a0039be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0039c0:	4b0c      	ldr	r3, [pc, #48]	; (1a0039f4 <vTaskStartScheduler+0x78>)
1a0039c2:	2200      	movs	r2, #0
1a0039c4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0039c6:	f000 fb07 	bl	1a003fd8 <xPortStartScheduler>
1a0039ca:	e7e7      	b.n	1a00399c <vTaskStartScheduler+0x20>
1a0039cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0039d0:	f383 8811 	msr	BASEPRI, r3
1a0039d4:	f3bf 8f6f 	isb	sy
1a0039d8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0039dc:	e7fe      	b.n	1a0039dc <vTaskStartScheduler+0x60>
1a0039de:	bf00      	nop
1a0039e0:	100031ec 	.word	0x100031ec
1a0039e4:	1a00e45c 	.word	0x1a00e45c
1a0039e8:	1a003875 	.word	0x1a003875
1a0039ec:	100031f0 	.word	0x100031f0
1a0039f0:	1000320c 	.word	0x1000320c
1a0039f4:	10003224 	.word	0x10003224

1a0039f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0039f8:	4a02      	ldr	r2, [pc, #8]	; (1a003a04 <vTaskSuspendAll+0xc>)
1a0039fa:	6813      	ldr	r3, [r2, #0]
1a0039fc:	3301      	adds	r3, #1
1a0039fe:	6013      	str	r3, [r2, #0]
}
1a003a00:	4770      	bx	lr
1a003a02:	bf00      	nop
1a003a04:	100031b8 	.word	0x100031b8

1a003a08 <xTaskIncrementTick>:
{
1a003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003a0a:	4b3a      	ldr	r3, [pc, #232]	; (1a003af4 <xTaskIncrementTick+0xec>)
1a003a0c:	681b      	ldr	r3, [r3, #0]
1a003a0e:	2b00      	cmp	r3, #0
1a003a10:	d164      	bne.n	1a003adc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a003a12:	4b39      	ldr	r3, [pc, #228]	; (1a003af8 <xTaskIncrementTick+0xf0>)
1a003a14:	681d      	ldr	r5, [r3, #0]
1a003a16:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a003a18:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a003a1a:	b9c5      	cbnz	r5, 1a003a4e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a003a1c:	4b37      	ldr	r3, [pc, #220]	; (1a003afc <xTaskIncrementTick+0xf4>)
1a003a1e:	681b      	ldr	r3, [r3, #0]
1a003a20:	681b      	ldr	r3, [r3, #0]
1a003a22:	b143      	cbz	r3, 1a003a36 <xTaskIncrementTick+0x2e>
1a003a24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003a28:	f383 8811 	msr	BASEPRI, r3
1a003a2c:	f3bf 8f6f 	isb	sy
1a003a30:	f3bf 8f4f 	dsb	sy
1a003a34:	e7fe      	b.n	1a003a34 <xTaskIncrementTick+0x2c>
1a003a36:	4a31      	ldr	r2, [pc, #196]	; (1a003afc <xTaskIncrementTick+0xf4>)
1a003a38:	6811      	ldr	r1, [r2, #0]
1a003a3a:	4b31      	ldr	r3, [pc, #196]	; (1a003b00 <xTaskIncrementTick+0xf8>)
1a003a3c:	6818      	ldr	r0, [r3, #0]
1a003a3e:	6010      	str	r0, [r2, #0]
1a003a40:	6019      	str	r1, [r3, #0]
1a003a42:	4a30      	ldr	r2, [pc, #192]	; (1a003b04 <xTaskIncrementTick+0xfc>)
1a003a44:	6813      	ldr	r3, [r2, #0]
1a003a46:	3301      	adds	r3, #1
1a003a48:	6013      	str	r3, [r2, #0]
1a003a4a:	f7ff fe03 	bl	1a003654 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a003a4e:	4b2e      	ldr	r3, [pc, #184]	; (1a003b08 <xTaskIncrementTick+0x100>)
1a003a50:	681b      	ldr	r3, [r3, #0]
1a003a52:	42ab      	cmp	r3, r5
1a003a54:	d938      	bls.n	1a003ac8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a003a56:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a003a58:	4b2c      	ldr	r3, [pc, #176]	; (1a003b0c <xTaskIncrementTick+0x104>)
1a003a5a:	681b      	ldr	r3, [r3, #0]
1a003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003a5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003a62:	009a      	lsls	r2, r3, #2
1a003a64:	4b2a      	ldr	r3, [pc, #168]	; (1a003b10 <xTaskIncrementTick+0x108>)
1a003a66:	589b      	ldr	r3, [r3, r2]
1a003a68:	2b01      	cmp	r3, #1
1a003a6a:	d93c      	bls.n	1a003ae6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a003a6c:	2401      	movs	r4, #1
1a003a6e:	e03a      	b.n	1a003ae6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a003a70:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a003a72:	4b22      	ldr	r3, [pc, #136]	; (1a003afc <xTaskIncrementTick+0xf4>)
1a003a74:	681b      	ldr	r3, [r3, #0]
1a003a76:	681b      	ldr	r3, [r3, #0]
1a003a78:	b343      	cbz	r3, 1a003acc <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a003a7a:	4b20      	ldr	r3, [pc, #128]	; (1a003afc <xTaskIncrementTick+0xf4>)
1a003a7c:	681b      	ldr	r3, [r3, #0]
1a003a7e:	68db      	ldr	r3, [r3, #12]
1a003a80:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a003a82:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a003a84:	429d      	cmp	r5, r3
1a003a86:	d326      	bcc.n	1a003ad6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a003a88:	1d37      	adds	r7, r6, #4
1a003a8a:	4638      	mov	r0, r7
1a003a8c:	f7ff fdab 	bl	1a0035e6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a003a90:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a003a92:	b11b      	cbz	r3, 1a003a9c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a003a94:	f106 0018 	add.w	r0, r6, #24
1a003a98:	f7ff fda5 	bl	1a0035e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a003a9c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a003a9e:	2201      	movs	r2, #1
1a003aa0:	409a      	lsls	r2, r3
1a003aa2:	491c      	ldr	r1, [pc, #112]	; (1a003b14 <xTaskIncrementTick+0x10c>)
1a003aa4:	6808      	ldr	r0, [r1, #0]
1a003aa6:	4302      	orrs	r2, r0
1a003aa8:	600a      	str	r2, [r1, #0]
1a003aaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003aae:	009a      	lsls	r2, r3, #2
1a003ab0:	4639      	mov	r1, r7
1a003ab2:	4817      	ldr	r0, [pc, #92]	; (1a003b10 <xTaskIncrementTick+0x108>)
1a003ab4:	4410      	add	r0, r2
1a003ab6:	f7ff fd71 	bl	1a00359c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a003aba:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a003abc:	4b13      	ldr	r3, [pc, #76]	; (1a003b0c <xTaskIncrementTick+0x104>)
1a003abe:	681b      	ldr	r3, [r3, #0]
1a003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003ac2:	429a      	cmp	r2, r3
1a003ac4:	d2d4      	bcs.n	1a003a70 <xTaskIncrementTick+0x68>
1a003ac6:	e7d4      	b.n	1a003a72 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a003ac8:	2400      	movs	r4, #0
1a003aca:	e7d2      	b.n	1a003a72 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003acc:	4b0e      	ldr	r3, [pc, #56]	; (1a003b08 <xTaskIncrementTick+0x100>)
1a003ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003ad2:	601a      	str	r2, [r3, #0]
					break;
1a003ad4:	e7c0      	b.n	1a003a58 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a003ad6:	4a0c      	ldr	r2, [pc, #48]	; (1a003b08 <xTaskIncrementTick+0x100>)
1a003ad8:	6013      	str	r3, [r2, #0]
						break;
1a003ada:	e7bd      	b.n	1a003a58 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a003adc:	4a0e      	ldr	r2, [pc, #56]	; (1a003b18 <xTaskIncrementTick+0x110>)
1a003ade:	6813      	ldr	r3, [r2, #0]
1a003ae0:	3301      	adds	r3, #1
1a003ae2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a003ae4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a003ae6:	4b0d      	ldr	r3, [pc, #52]	; (1a003b1c <xTaskIncrementTick+0x114>)
1a003ae8:	681b      	ldr	r3, [r3, #0]
1a003aea:	b103      	cbz	r3, 1a003aee <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a003aec:	2401      	movs	r4, #1
}
1a003aee:	4620      	mov	r0, r4
1a003af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003af2:	bf00      	nop
1a003af4:	100031b8 	.word	0x100031b8
1a003af8:	10003224 	.word	0x10003224
1a003afc:	10003118 	.word	0x10003118
1a003b00:	1000311c 	.word	0x1000311c
1a003b04:	100031f4 	.word	0x100031f4
1a003b08:	100031f0 	.word	0x100031f0
1a003b0c:	10003114 	.word	0x10003114
1a003b10:	10003120 	.word	0x10003120
1a003b14:	100031c0 	.word	0x100031c0
1a003b18:	100031b4 	.word	0x100031b4
1a003b1c:	10003228 	.word	0x10003228

1a003b20 <xTaskResumeAll>:
{
1a003b20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a003b22:	4b35      	ldr	r3, [pc, #212]	; (1a003bf8 <xTaskResumeAll+0xd8>)
1a003b24:	681b      	ldr	r3, [r3, #0]
1a003b26:	b943      	cbnz	r3, 1a003b3a <xTaskResumeAll+0x1a>
1a003b28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003b2c:	f383 8811 	msr	BASEPRI, r3
1a003b30:	f3bf 8f6f 	isb	sy
1a003b34:	f3bf 8f4f 	dsb	sy
1a003b38:	e7fe      	b.n	1a003b38 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a003b3a:	f000 f9ab 	bl	1a003e94 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a003b3e:	4b2e      	ldr	r3, [pc, #184]	; (1a003bf8 <xTaskResumeAll+0xd8>)
1a003b40:	681a      	ldr	r2, [r3, #0]
1a003b42:	3a01      	subs	r2, #1
1a003b44:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003b46:	681b      	ldr	r3, [r3, #0]
1a003b48:	2b00      	cmp	r3, #0
1a003b4a:	d14d      	bne.n	1a003be8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a003b4c:	4b2b      	ldr	r3, [pc, #172]	; (1a003bfc <xTaskResumeAll+0xdc>)
1a003b4e:	681b      	ldr	r3, [r3, #0]
1a003b50:	b90b      	cbnz	r3, 1a003b56 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a003b52:	2400      	movs	r4, #0
1a003b54:	e049      	b.n	1a003bea <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a003b56:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a003b58:	4b29      	ldr	r3, [pc, #164]	; (1a003c00 <xTaskResumeAll+0xe0>)
1a003b5a:	681b      	ldr	r3, [r3, #0]
1a003b5c:	b31b      	cbz	r3, 1a003ba6 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a003b5e:	4b28      	ldr	r3, [pc, #160]	; (1a003c00 <xTaskResumeAll+0xe0>)
1a003b60:	68db      	ldr	r3, [r3, #12]
1a003b62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a003b64:	f104 0018 	add.w	r0, r4, #24
1a003b68:	f7ff fd3d 	bl	1a0035e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a003b6c:	1d25      	adds	r5, r4, #4
1a003b6e:	4628      	mov	r0, r5
1a003b70:	f7ff fd39 	bl	1a0035e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a003b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003b76:	2201      	movs	r2, #1
1a003b78:	409a      	lsls	r2, r3
1a003b7a:	4922      	ldr	r1, [pc, #136]	; (1a003c04 <xTaskResumeAll+0xe4>)
1a003b7c:	6808      	ldr	r0, [r1, #0]
1a003b7e:	4302      	orrs	r2, r0
1a003b80:	600a      	str	r2, [r1, #0]
1a003b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003b86:	009a      	lsls	r2, r3, #2
1a003b88:	4629      	mov	r1, r5
1a003b8a:	481f      	ldr	r0, [pc, #124]	; (1a003c08 <xTaskResumeAll+0xe8>)
1a003b8c:	4410      	add	r0, r2
1a003b8e:	f7ff fd05 	bl	1a00359c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a003b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a003b94:	4b1d      	ldr	r3, [pc, #116]	; (1a003c0c <xTaskResumeAll+0xec>)
1a003b96:	681b      	ldr	r3, [r3, #0]
1a003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003b9a:	429a      	cmp	r2, r3
1a003b9c:	d3dc      	bcc.n	1a003b58 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a003b9e:	4b1c      	ldr	r3, [pc, #112]	; (1a003c10 <xTaskResumeAll+0xf0>)
1a003ba0:	2201      	movs	r2, #1
1a003ba2:	601a      	str	r2, [r3, #0]
1a003ba4:	e7d8      	b.n	1a003b58 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a003ba6:	b10c      	cbz	r4, 1a003bac <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a003ba8:	f7ff fd54 	bl	1a003654 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a003bac:	4b19      	ldr	r3, [pc, #100]	; (1a003c14 <xTaskResumeAll+0xf4>)
1a003bae:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a003bb0:	b974      	cbnz	r4, 1a003bd0 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a003bb2:	4b17      	ldr	r3, [pc, #92]	; (1a003c10 <xTaskResumeAll+0xf0>)
1a003bb4:	681b      	ldr	r3, [r3, #0]
1a003bb6:	b1e3      	cbz	r3, 1a003bf2 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a003bb8:	4b17      	ldr	r3, [pc, #92]	; (1a003c18 <xTaskResumeAll+0xf8>)
1a003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003bbe:	601a      	str	r2, [r3, #0]
1a003bc0:	f3bf 8f4f 	dsb	sy
1a003bc4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a003bc8:	2401      	movs	r4, #1
1a003bca:	e00e      	b.n	1a003bea <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a003bcc:	3c01      	subs	r4, #1
1a003bce:	d007      	beq.n	1a003be0 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a003bd0:	f7ff ff1a 	bl	1a003a08 <xTaskIncrementTick>
1a003bd4:	2800      	cmp	r0, #0
1a003bd6:	d0f9      	beq.n	1a003bcc <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a003bd8:	4b0d      	ldr	r3, [pc, #52]	; (1a003c10 <xTaskResumeAll+0xf0>)
1a003bda:	2201      	movs	r2, #1
1a003bdc:	601a      	str	r2, [r3, #0]
1a003bde:	e7f5      	b.n	1a003bcc <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a003be0:	4b0c      	ldr	r3, [pc, #48]	; (1a003c14 <xTaskResumeAll+0xf4>)
1a003be2:	2200      	movs	r2, #0
1a003be4:	601a      	str	r2, [r3, #0]
1a003be6:	e7e4      	b.n	1a003bb2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a003be8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a003bea:	f000 f975 	bl	1a003ed8 <vPortExitCritical>
}
1a003bee:	4620      	mov	r0, r4
1a003bf0:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a003bf2:	2400      	movs	r4, #0
1a003bf4:	e7f9      	b.n	1a003bea <xTaskResumeAll+0xca>
1a003bf6:	bf00      	nop
1a003bf8:	100031b8 	.word	0x100031b8
1a003bfc:	100031ac 	.word	0x100031ac
1a003c00:	100031f8 	.word	0x100031f8
1a003c04:	100031c0 	.word	0x100031c0
1a003c08:	10003120 	.word	0x10003120
1a003c0c:	10003114 	.word	0x10003114
1a003c10:	10003228 	.word	0x10003228
1a003c14:	100031b4 	.word	0x100031b4
1a003c18:	e000ed04 	.word	0xe000ed04

1a003c1c <vTaskDelay>:
	{
1a003c1c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a003c1e:	b1a8      	cbz	r0, 1a003c4c <vTaskDelay+0x30>
1a003c20:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a003c22:	4b0f      	ldr	r3, [pc, #60]	; (1a003c60 <vTaskDelay+0x44>)
1a003c24:	681b      	ldr	r3, [r3, #0]
1a003c26:	b143      	cbz	r3, 1a003c3a <vTaskDelay+0x1e>
1a003c28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003c2c:	f383 8811 	msr	BASEPRI, r3
1a003c30:	f3bf 8f6f 	isb	sy
1a003c34:	f3bf 8f4f 	dsb	sy
1a003c38:	e7fe      	b.n	1a003c38 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a003c3a:	f7ff fedd 	bl	1a0039f8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a003c3e:	2100      	movs	r1, #0
1a003c40:	4620      	mov	r0, r4
1a003c42:	f7ff fe2b 	bl	1a00389c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a003c46:	f7ff ff6b 	bl	1a003b20 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a003c4a:	b938      	cbnz	r0, 1a003c5c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a003c4c:	4b05      	ldr	r3, [pc, #20]	; (1a003c64 <vTaskDelay+0x48>)
1a003c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003c52:	601a      	str	r2, [r3, #0]
1a003c54:	f3bf 8f4f 	dsb	sy
1a003c58:	f3bf 8f6f 	isb	sy
	}
1a003c5c:	bd10      	pop	{r4, pc}
1a003c5e:	bf00      	nop
1a003c60:	100031b8 	.word	0x100031b8
1a003c64:	e000ed04 	.word	0xe000ed04

1a003c68 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a003c68:	4b2d      	ldr	r3, [pc, #180]	; (1a003d20 <vTaskSwitchContext+0xb8>)
1a003c6a:	681b      	ldr	r3, [r3, #0]
1a003c6c:	b11b      	cbz	r3, 1a003c76 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a003c6e:	4b2d      	ldr	r3, [pc, #180]	; (1a003d24 <vTaskSwitchContext+0xbc>)
1a003c70:	2201      	movs	r2, #1
1a003c72:	601a      	str	r2, [r3, #0]
1a003c74:	4770      	bx	lr
{
1a003c76:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a003c78:	4b2a      	ldr	r3, [pc, #168]	; (1a003d24 <vTaskSwitchContext+0xbc>)
1a003c7a:	2200      	movs	r2, #0
1a003c7c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a003c7e:	4b2a      	ldr	r3, [pc, #168]	; (1a003d28 <vTaskSwitchContext+0xc0>)
1a003c80:	681b      	ldr	r3, [r3, #0]
1a003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a003c84:	681a      	ldr	r2, [r3, #0]
1a003c86:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a003c8a:	d103      	bne.n	1a003c94 <vTaskSwitchContext+0x2c>
1a003c8c:	685a      	ldr	r2, [r3, #4]
1a003c8e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a003c92:	d01b      	beq.n	1a003ccc <vTaskSwitchContext+0x64>
1a003c94:	4b24      	ldr	r3, [pc, #144]	; (1a003d28 <vTaskSwitchContext+0xc0>)
1a003c96:	6818      	ldr	r0, [r3, #0]
1a003c98:	6819      	ldr	r1, [r3, #0]
1a003c9a:	3134      	adds	r1, #52	; 0x34
1a003c9c:	f7ff fccc 	bl	1a003638 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a003ca0:	4b22      	ldr	r3, [pc, #136]	; (1a003d2c <vTaskSwitchContext+0xc4>)
1a003ca2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a003ca4:	fab3 f383 	clz	r3, r3
1a003ca8:	b2db      	uxtb	r3, r3
1a003caa:	f1c3 031f 	rsb	r3, r3, #31
1a003cae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a003cb2:	008a      	lsls	r2, r1, #2
1a003cb4:	491e      	ldr	r1, [pc, #120]	; (1a003d30 <vTaskSwitchContext+0xc8>)
1a003cb6:	588a      	ldr	r2, [r1, r2]
1a003cb8:	b98a      	cbnz	r2, 1a003cde <vTaskSwitchContext+0x76>
	__asm volatile
1a003cba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003cbe:	f383 8811 	msr	BASEPRI, r3
1a003cc2:	f3bf 8f6f 	isb	sy
1a003cc6:	f3bf 8f4f 	dsb	sy
1a003cca:	e7fe      	b.n	1a003cca <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a003ccc:	689a      	ldr	r2, [r3, #8]
1a003cce:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a003cd2:	d1df      	bne.n	1a003c94 <vTaskSwitchContext+0x2c>
1a003cd4:	68db      	ldr	r3, [r3, #12]
1a003cd6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a003cda:	d1db      	bne.n	1a003c94 <vTaskSwitchContext+0x2c>
1a003cdc:	e7e0      	b.n	1a003ca0 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a003cde:	4814      	ldr	r0, [pc, #80]	; (1a003d30 <vTaskSwitchContext+0xc8>)
1a003ce0:	009a      	lsls	r2, r3, #2
1a003ce2:	18d4      	adds	r4, r2, r3
1a003ce4:	00a1      	lsls	r1, r4, #2
1a003ce6:	4401      	add	r1, r0
1a003ce8:	684c      	ldr	r4, [r1, #4]
1a003cea:	6864      	ldr	r4, [r4, #4]
1a003cec:	604c      	str	r4, [r1, #4]
1a003cee:	441a      	add	r2, r3
1a003cf0:	0091      	lsls	r1, r2, #2
1a003cf2:	3108      	adds	r1, #8
1a003cf4:	4408      	add	r0, r1
1a003cf6:	4284      	cmp	r4, r0
1a003cf8:	d009      	beq.n	1a003d0e <vTaskSwitchContext+0xa6>
1a003cfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003cfe:	009a      	lsls	r2, r3, #2
1a003d00:	4b0b      	ldr	r3, [pc, #44]	; (1a003d30 <vTaskSwitchContext+0xc8>)
1a003d02:	4413      	add	r3, r2
1a003d04:	685b      	ldr	r3, [r3, #4]
1a003d06:	68da      	ldr	r2, [r3, #12]
1a003d08:	4b07      	ldr	r3, [pc, #28]	; (1a003d28 <vTaskSwitchContext+0xc0>)
1a003d0a:	601a      	str	r2, [r3, #0]
}
1a003d0c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a003d0e:	6860      	ldr	r0, [r4, #4]
1a003d10:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a003d14:	0091      	lsls	r1, r2, #2
1a003d16:	4a06      	ldr	r2, [pc, #24]	; (1a003d30 <vTaskSwitchContext+0xc8>)
1a003d18:	440a      	add	r2, r1
1a003d1a:	6050      	str	r0, [r2, #4]
1a003d1c:	e7ed      	b.n	1a003cfa <vTaskSwitchContext+0x92>
1a003d1e:	bf00      	nop
1a003d20:	100031b8 	.word	0x100031b8
1a003d24:	10003228 	.word	0x10003228
1a003d28:	10003114 	.word	0x10003114
1a003d2c:	100031c0 	.word	0x100031c0
1a003d30:	10003120 	.word	0x10003120

1a003d34 <xTaskRemoveFromEventList>:
{
1a003d34:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a003d36:	68c3      	ldr	r3, [r0, #12]
1a003d38:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a003d3a:	b324      	cbz	r4, 1a003d86 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a003d3c:	f104 0518 	add.w	r5, r4, #24
1a003d40:	4628      	mov	r0, r5
1a003d42:	f7ff fc50 	bl	1a0035e6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003d46:	4b18      	ldr	r3, [pc, #96]	; (1a003da8 <xTaskRemoveFromEventList+0x74>)
1a003d48:	681b      	ldr	r3, [r3, #0]
1a003d4a:	bb2b      	cbnz	r3, 1a003d98 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a003d4c:	1d25      	adds	r5, r4, #4
1a003d4e:	4628      	mov	r0, r5
1a003d50:	f7ff fc49 	bl	1a0035e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a003d54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003d56:	2201      	movs	r2, #1
1a003d58:	409a      	lsls	r2, r3
1a003d5a:	4914      	ldr	r1, [pc, #80]	; (1a003dac <xTaskRemoveFromEventList+0x78>)
1a003d5c:	6808      	ldr	r0, [r1, #0]
1a003d5e:	4302      	orrs	r2, r0
1a003d60:	600a      	str	r2, [r1, #0]
1a003d62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003d66:	009a      	lsls	r2, r3, #2
1a003d68:	4629      	mov	r1, r5
1a003d6a:	4811      	ldr	r0, [pc, #68]	; (1a003db0 <xTaskRemoveFromEventList+0x7c>)
1a003d6c:	4410      	add	r0, r2
1a003d6e:	f7ff fc15 	bl	1a00359c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a003d72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a003d74:	4b0f      	ldr	r3, [pc, #60]	; (1a003db4 <xTaskRemoveFromEventList+0x80>)
1a003d76:	681b      	ldr	r3, [r3, #0]
1a003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003d7a:	429a      	cmp	r2, r3
1a003d7c:	d911      	bls.n	1a003da2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a003d7e:	2001      	movs	r0, #1
1a003d80:	4b0d      	ldr	r3, [pc, #52]	; (1a003db8 <xTaskRemoveFromEventList+0x84>)
1a003d82:	6018      	str	r0, [r3, #0]
1a003d84:	e00e      	b.n	1a003da4 <xTaskRemoveFromEventList+0x70>
1a003d86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d8a:	f383 8811 	msr	BASEPRI, r3
1a003d8e:	f3bf 8f6f 	isb	sy
1a003d92:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a003d96:	e7fe      	b.n	1a003d96 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a003d98:	4629      	mov	r1, r5
1a003d9a:	4808      	ldr	r0, [pc, #32]	; (1a003dbc <xTaskRemoveFromEventList+0x88>)
1a003d9c:	f7ff fbfe 	bl	1a00359c <vListInsertEnd>
1a003da0:	e7e7      	b.n	1a003d72 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a003da2:	2000      	movs	r0, #0
}
1a003da4:	bd38      	pop	{r3, r4, r5, pc}
1a003da6:	bf00      	nop
1a003da8:	100031b8 	.word	0x100031b8
1a003dac:	100031c0 	.word	0x100031c0
1a003db0:	10003120 	.word	0x10003120
1a003db4:	10003114 	.word	0x10003114
1a003db8:	10003228 	.word	0x10003228
1a003dbc:	100031f8 	.word	0x100031f8

1a003dc0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a003dc0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a003dc2:	2300      	movs	r3, #0
1a003dc4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a003dc6:	4b0d      	ldr	r3, [pc, #52]	; (1a003dfc <prvTaskExitError+0x3c>)
1a003dc8:	681b      	ldr	r3, [r3, #0]
1a003dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003dce:	d008      	beq.n	1a003de2 <prvTaskExitError+0x22>
1a003dd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003dd4:	f383 8811 	msr	BASEPRI, r3
1a003dd8:	f3bf 8f6f 	isb	sy
1a003ddc:	f3bf 8f4f 	dsb	sy
1a003de0:	e7fe      	b.n	1a003de0 <prvTaskExitError+0x20>
1a003de2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003de6:	f383 8811 	msr	BASEPRI, r3
1a003dea:	f3bf 8f6f 	isb	sy
1a003dee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a003df2:	9b01      	ldr	r3, [sp, #4]
1a003df4:	2b00      	cmp	r3, #0
1a003df6:	d0fc      	beq.n	1a003df2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a003df8:	b002      	add	sp, #8
1a003dfa:	4770      	bx	lr
1a003dfc:	10000004 	.word	0x10000004

1a003e00 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a003e00:	4808      	ldr	r0, [pc, #32]	; (1a003e24 <prvPortStartFirstTask+0x24>)
1a003e02:	6800      	ldr	r0, [r0, #0]
1a003e04:	6800      	ldr	r0, [r0, #0]
1a003e06:	f380 8808 	msr	MSP, r0
1a003e0a:	f04f 0000 	mov.w	r0, #0
1a003e0e:	f380 8814 	msr	CONTROL, r0
1a003e12:	b662      	cpsie	i
1a003e14:	b661      	cpsie	f
1a003e16:	f3bf 8f4f 	dsb	sy
1a003e1a:	f3bf 8f6f 	isb	sy
1a003e1e:	df00      	svc	0
1a003e20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a003e22:	0000      	.short	0x0000
1a003e24:	e000ed08 	.word	0xe000ed08

1a003e28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a003e28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a003e38 <vPortEnableVFP+0x10>
1a003e2c:	6801      	ldr	r1, [r0, #0]
1a003e2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003e32:	6001      	str	r1, [r0, #0]
1a003e34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a003e36:	0000      	.short	0x0000
1a003e38:	e000ed88 	.word	0xe000ed88

1a003e3c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a003e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a003e40:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a003e44:	f021 0101 	bic.w	r1, r1, #1
1a003e48:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a003e4c:	4b05      	ldr	r3, [pc, #20]	; (1a003e64 <pxPortInitialiseStack+0x28>)
1a003e4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a003e52:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a003e56:	f06f 0302 	mvn.w	r3, #2
1a003e5a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a003e5e:	3844      	subs	r0, #68	; 0x44
1a003e60:	4770      	bx	lr
1a003e62:	bf00      	nop
1a003e64:	1a003dc1 	.word	0x1a003dc1
1a003e68:	ffffffff 	.word	0xffffffff
1a003e6c:	ffffffff 	.word	0xffffffff

1a003e70 <SVC_Handler>:
	__asm volatile (
1a003e70:	4b07      	ldr	r3, [pc, #28]	; (1a003e90 <pxCurrentTCBConst2>)
1a003e72:	6819      	ldr	r1, [r3, #0]
1a003e74:	6808      	ldr	r0, [r1, #0]
1a003e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003e7a:	f380 8809 	msr	PSP, r0
1a003e7e:	f3bf 8f6f 	isb	sy
1a003e82:	f04f 0000 	mov.w	r0, #0
1a003e86:	f380 8811 	msr	BASEPRI, r0
1a003e8a:	4770      	bx	lr
1a003e8c:	f3af 8000 	nop.w

1a003e90 <pxCurrentTCBConst2>:
1a003e90:	10003114 	.word	0x10003114

1a003e94 <vPortEnterCritical>:
1a003e94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e98:	f383 8811 	msr	BASEPRI, r3
1a003e9c:	f3bf 8f6f 	isb	sy
1a003ea0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a003ea4:	4a0a      	ldr	r2, [pc, #40]	; (1a003ed0 <vPortEnterCritical+0x3c>)
1a003ea6:	6813      	ldr	r3, [r2, #0]
1a003ea8:	3301      	adds	r3, #1
1a003eaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a003eac:	2b01      	cmp	r3, #1
1a003eae:	d000      	beq.n	1a003eb2 <vPortEnterCritical+0x1e>
}
1a003eb0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a003eb2:	4b08      	ldr	r3, [pc, #32]	; (1a003ed4 <vPortEnterCritical+0x40>)
1a003eb4:	681b      	ldr	r3, [r3, #0]
1a003eb6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a003eba:	d0f9      	beq.n	1a003eb0 <vPortEnterCritical+0x1c>
1a003ebc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003ec0:	f383 8811 	msr	BASEPRI, r3
1a003ec4:	f3bf 8f6f 	isb	sy
1a003ec8:	f3bf 8f4f 	dsb	sy
1a003ecc:	e7fe      	b.n	1a003ecc <vPortEnterCritical+0x38>
1a003ece:	bf00      	nop
1a003ed0:	10000004 	.word	0x10000004
1a003ed4:	e000ed04 	.word	0xe000ed04

1a003ed8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a003ed8:	4b09      	ldr	r3, [pc, #36]	; (1a003f00 <vPortExitCritical+0x28>)
1a003eda:	681b      	ldr	r3, [r3, #0]
1a003edc:	b943      	cbnz	r3, 1a003ef0 <vPortExitCritical+0x18>
1a003ede:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003ee2:	f383 8811 	msr	BASEPRI, r3
1a003ee6:	f3bf 8f6f 	isb	sy
1a003eea:	f3bf 8f4f 	dsb	sy
1a003eee:	e7fe      	b.n	1a003eee <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a003ef0:	3b01      	subs	r3, #1
1a003ef2:	4a03      	ldr	r2, [pc, #12]	; (1a003f00 <vPortExitCritical+0x28>)
1a003ef4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a003ef6:	b90b      	cbnz	r3, 1a003efc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a003ef8:	f383 8811 	msr	BASEPRI, r3
}
1a003efc:	4770      	bx	lr
1a003efe:	bf00      	nop
1a003f00:	10000004 	.word	0x10000004
1a003f04:	ffffffff 	.word	0xffffffff
1a003f08:	ffffffff 	.word	0xffffffff
1a003f0c:	ffffffff 	.word	0xffffffff

1a003f10 <PendSV_Handler>:
	__asm volatile
1a003f10:	f3ef 8009 	mrs	r0, PSP
1a003f14:	f3bf 8f6f 	isb	sy
1a003f18:	4b15      	ldr	r3, [pc, #84]	; (1a003f70 <pxCurrentTCBConst>)
1a003f1a:	681a      	ldr	r2, [r3, #0]
1a003f1c:	f01e 0f10 	tst.w	lr, #16
1a003f20:	bf08      	it	eq
1a003f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a003f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003f2a:	6010      	str	r0, [r2, #0]
1a003f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a003f30:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a003f34:	f380 8811 	msr	BASEPRI, r0
1a003f38:	f3bf 8f4f 	dsb	sy
1a003f3c:	f3bf 8f6f 	isb	sy
1a003f40:	f7ff fe92 	bl	1a003c68 <vTaskSwitchContext>
1a003f44:	f04f 0000 	mov.w	r0, #0
1a003f48:	f380 8811 	msr	BASEPRI, r0
1a003f4c:	bc09      	pop	{r0, r3}
1a003f4e:	6819      	ldr	r1, [r3, #0]
1a003f50:	6808      	ldr	r0, [r1, #0]
1a003f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003f56:	f01e 0f10 	tst.w	lr, #16
1a003f5a:	bf08      	it	eq
1a003f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a003f60:	f380 8809 	msr	PSP, r0
1a003f64:	f3bf 8f6f 	isb	sy
1a003f68:	4770      	bx	lr
1a003f6a:	bf00      	nop
1a003f6c:	f3af 8000 	nop.w

1a003f70 <pxCurrentTCBConst>:
1a003f70:	10003114 	.word	0x10003114

1a003f74 <SysTick_Handler>:
{
1a003f74:	b508      	push	{r3, lr}
	__asm volatile
1a003f76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f7a:	f383 8811 	msr	BASEPRI, r3
1a003f7e:	f3bf 8f6f 	isb	sy
1a003f82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a003f86:	f7ff fd3f 	bl	1a003a08 <xTaskIncrementTick>
1a003f8a:	b118      	cbz	r0, 1a003f94 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a003f8c:	4b03      	ldr	r3, [pc, #12]	; (1a003f9c <SysTick_Handler+0x28>)
1a003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003f92:	601a      	str	r2, [r3, #0]
	__asm volatile
1a003f94:	2300      	movs	r3, #0
1a003f96:	f383 8811 	msr	BASEPRI, r3
}
1a003f9a:	bd08      	pop	{r3, pc}
1a003f9c:	e000ed04 	.word	0xe000ed04

1a003fa0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a003fa0:	4a08      	ldr	r2, [pc, #32]	; (1a003fc4 <vPortSetupTimerInterrupt+0x24>)
1a003fa2:	2300      	movs	r3, #0
1a003fa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a003fa6:	4908      	ldr	r1, [pc, #32]	; (1a003fc8 <vPortSetupTimerInterrupt+0x28>)
1a003fa8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a003faa:	4b08      	ldr	r3, [pc, #32]	; (1a003fcc <vPortSetupTimerInterrupt+0x2c>)
1a003fac:	681b      	ldr	r3, [r3, #0]
1a003fae:	4908      	ldr	r1, [pc, #32]	; (1a003fd0 <vPortSetupTimerInterrupt+0x30>)
1a003fb0:	fba1 1303 	umull	r1, r3, r1, r3
1a003fb4:	099b      	lsrs	r3, r3, #6
1a003fb6:	3b01      	subs	r3, #1
1a003fb8:	4906      	ldr	r1, [pc, #24]	; (1a003fd4 <vPortSetupTimerInterrupt+0x34>)
1a003fba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a003fbc:	2307      	movs	r3, #7
1a003fbe:	6013      	str	r3, [r2, #0]
}
1a003fc0:	4770      	bx	lr
1a003fc2:	bf00      	nop
1a003fc4:	e000e010 	.word	0xe000e010
1a003fc8:	e000e018 	.word	0xe000e018
1a003fcc:	10003d38 	.word	0x10003d38
1a003fd0:	10624dd3 	.word	0x10624dd3
1a003fd4:	e000e014 	.word	0xe000e014

1a003fd8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a003fd8:	4b3a      	ldr	r3, [pc, #232]	; (1a0040c4 <xPortStartScheduler+0xec>)
1a003fda:	681a      	ldr	r2, [r3, #0]
1a003fdc:	4b3a      	ldr	r3, [pc, #232]	; (1a0040c8 <xPortStartScheduler+0xf0>)
1a003fde:	429a      	cmp	r2, r3
1a003fe0:	d029      	beq.n	1a004036 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a003fe2:	4b38      	ldr	r3, [pc, #224]	; (1a0040c4 <xPortStartScheduler+0xec>)
1a003fe4:	681a      	ldr	r2, [r3, #0]
1a003fe6:	4b39      	ldr	r3, [pc, #228]	; (1a0040cc <xPortStartScheduler+0xf4>)
1a003fe8:	429a      	cmp	r2, r3
1a003fea:	d02d      	beq.n	1a004048 <xPortStartScheduler+0x70>
{
1a003fec:	b510      	push	{r4, lr}
1a003fee:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a003ff0:	4b37      	ldr	r3, [pc, #220]	; (1a0040d0 <xPortStartScheduler+0xf8>)
1a003ff2:	781a      	ldrb	r2, [r3, #0]
1a003ff4:	b2d2      	uxtb	r2, r2
1a003ff6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a003ff8:	22ff      	movs	r2, #255	; 0xff
1a003ffa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a003ffc:	781b      	ldrb	r3, [r3, #0]
1a003ffe:	b2db      	uxtb	r3, r3
1a004000:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a004004:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004008:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00400c:	4a31      	ldr	r2, [pc, #196]	; (1a0040d4 <xPortStartScheduler+0xfc>)
1a00400e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a004010:	4b31      	ldr	r3, [pc, #196]	; (1a0040d8 <xPortStartScheduler+0x100>)
1a004012:	2207      	movs	r2, #7
1a004014:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a004016:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00401a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00401e:	d01c      	beq.n	1a00405a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a004020:	4a2d      	ldr	r2, [pc, #180]	; (1a0040d8 <xPortStartScheduler+0x100>)
1a004022:	6813      	ldr	r3, [r2, #0]
1a004024:	3b01      	subs	r3, #1
1a004026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a004028:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00402c:	005b      	lsls	r3, r3, #1
1a00402e:	b2db      	uxtb	r3, r3
1a004030:	f88d 3003 	strb.w	r3, [sp, #3]
1a004034:	e7ef      	b.n	1a004016 <xPortStartScheduler+0x3e>
	__asm volatile
1a004036:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00403a:	f383 8811 	msr	BASEPRI, r3
1a00403e:	f3bf 8f6f 	isb	sy
1a004042:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a004046:	e7fe      	b.n	1a004046 <xPortStartScheduler+0x6e>
1a004048:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00404c:	f383 8811 	msr	BASEPRI, r3
1a004050:	f3bf 8f6f 	isb	sy
1a004054:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a004058:	e7fe      	b.n	1a004058 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00405a:	4b1f      	ldr	r3, [pc, #124]	; (1a0040d8 <xPortStartScheduler+0x100>)
1a00405c:	681b      	ldr	r3, [r3, #0]
1a00405e:	2b04      	cmp	r3, #4
1a004060:	d008      	beq.n	1a004074 <xPortStartScheduler+0x9c>
1a004062:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004066:	f383 8811 	msr	BASEPRI, r3
1a00406a:	f3bf 8f6f 	isb	sy
1a00406e:	f3bf 8f4f 	dsb	sy
1a004072:	e7fe      	b.n	1a004072 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a004074:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a004076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00407a:	4a17      	ldr	r2, [pc, #92]	; (1a0040d8 <xPortStartScheduler+0x100>)
1a00407c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00407e:	9b01      	ldr	r3, [sp, #4]
1a004080:	b2db      	uxtb	r3, r3
1a004082:	4a13      	ldr	r2, [pc, #76]	; (1a0040d0 <xPortStartScheduler+0xf8>)
1a004084:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a004086:	4b15      	ldr	r3, [pc, #84]	; (1a0040dc <xPortStartScheduler+0x104>)
1a004088:	681a      	ldr	r2, [r3, #0]
1a00408a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00408e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a004090:	681a      	ldr	r2, [r3, #0]
1a004092:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a004096:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a004098:	f7ff ff82 	bl	1a003fa0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00409c:	2400      	movs	r4, #0
1a00409e:	4b10      	ldr	r3, [pc, #64]	; (1a0040e0 <xPortStartScheduler+0x108>)
1a0040a0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0040a2:	f7ff fec1 	bl	1a003e28 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0040a6:	4a0f      	ldr	r2, [pc, #60]	; (1a0040e4 <xPortStartScheduler+0x10c>)
1a0040a8:	6813      	ldr	r3, [r2, #0]
1a0040aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0040ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0040b0:	f7ff fea6 	bl	1a003e00 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0040b4:	f7ff fdd8 	bl	1a003c68 <vTaskSwitchContext>
	prvTaskExitError();
1a0040b8:	f7ff fe82 	bl	1a003dc0 <prvTaskExitError>
}
1a0040bc:	4620      	mov	r0, r4
1a0040be:	b002      	add	sp, #8
1a0040c0:	bd10      	pop	{r4, pc}
1a0040c2:	bf00      	nop
1a0040c4:	e000ed00 	.word	0xe000ed00
1a0040c8:	410fc271 	.word	0x410fc271
1a0040cc:	410fc270 	.word	0x410fc270
1a0040d0:	e000e400 	.word	0xe000e400
1a0040d4:	1000322c 	.word	0x1000322c
1a0040d8:	10003230 	.word	0x10003230
1a0040dc:	e000ed20 	.word	0xe000ed20
1a0040e0:	10000004 	.word	0x10000004
1a0040e4:	e000ef34 	.word	0xe000ef34

1a0040e8 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0040e8:	b508      	push	{r3, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0040ea:	4b05      	ldr	r3, [pc, #20]	; (1a004100 <DAC_IRQHandler+0x18>)
1a0040ec:	2201      	movs	r2, #1
1a0040ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0040f2:	4b04      	ldr	r3, [pc, #16]	; (1a004104 <DAC_IRQHandler+0x1c>)
1a0040f4:	681b      	ldr	r3, [r3, #0]
1a0040f6:	b113      	cbz	r3, 1a0040fe <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0040f8:	4b02      	ldr	r3, [pc, #8]	; (1a004104 <DAC_IRQHandler+0x1c>)
1a0040fa:	681b      	ldr	r3, [r3, #0]
1a0040fc:	4798      	blx	r3
   }
}
1a0040fe:	bd08      	pop	{r3, pc}
1a004100:	e000e100 	.word	0xe000e100
1a004104:	10003234 	.word	0x10003234

1a004108 <newCardStatus>:
static FSSDC_StatusUpdateCallback_Func  g_statusUpdateCallback = NULL;
static enum FSSDC_CardStatus            g_cardStatus = FSSDC_CardStatus_Removed;


static void newCardStatus (enum FSSDC_CardStatus cardStatus)
{
1a004108:	b508      	push	{r3, lr}
    g_cardStatus = cardStatus;
1a00410a:	4b03      	ldr	r3, [pc, #12]	; (1a004118 <newCardStatus+0x10>)
1a00410c:	7018      	strb	r0, [r3, #0]
    if (g_statusUpdateCallback)
1a00410e:	4b03      	ldr	r3, [pc, #12]	; (1a00411c <newCardStatus+0x14>)
1a004110:	681b      	ldr	r3, [r3, #0]
1a004112:	b103      	cbz	r3, 1a004116 <newCardStatus+0xe>
    {
        g_statusUpdateCallback (g_cardStatus);
1a004114:	4798      	blx	r3
    }
}
1a004116:	bd08      	pop	{r3, pc}
1a004118:	10000008 	.word	0x10000008
1a00411c:	1000323c 	.word	0x1000323c

1a004120 <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a004120:	2001      	movs	r0, #1
1a004122:	4770      	bx	lr

1a004124 <SSPSend>:
{
1a004124:	b500      	push	{lr}
1a004126:	b087      	sub	sp, #28
	xferConfig.tx_data = buf;
1a004128:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a00412a:	2300      	movs	r3, #0
1a00412c:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a00412e:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a004130:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a004132:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a004134:	a901      	add	r1, sp, #4
1a004136:	4803      	ldr	r0, [pc, #12]	; (1a004144 <SSPSend+0x20>)
1a004138:	f001 fbf9 	bl	1a00592e <Chip_SSP_RWFrames_Blocking>
}
1a00413c:	b007      	add	sp, #28
1a00413e:	f85d fb04 	ldr.w	pc, [sp], #4
1a004142:	bf00      	nop
1a004144:	400c5000 	.word	0x400c5000

1a004148 <xmit_spi>:
{
1a004148:	b500      	push	{lr}
1a00414a:	b083      	sub	sp, #12
1a00414c:	f88d 0007 	strb.w	r0, [sp, #7]
    SSPSend((uint8_t*) &dat, 1);
1a004150:	2101      	movs	r1, #1
1a004152:	f10d 0007 	add.w	r0, sp, #7
1a004156:	f7ff ffe5 	bl	1a004124 <SSPSend>
}
1a00415a:	b003      	add	sp, #12
1a00415c:	f85d fb04 	ldr.w	pc, [sp], #4

1a004160 <SSPReceive>:
{
1a004160:	b500      	push	{lr}
1a004162:	b087      	sub	sp, #28
	xferConfig.tx_data = NULL;
1a004164:	2300      	movs	r3, #0
1a004166:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a004168:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a00416a:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a00416c:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a00416e:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a004170:	a901      	add	r1, sp, #4
1a004172:	4803      	ldr	r0, [pc, #12]	; (1a004180 <SSPReceive+0x20>)
1a004174:	f001 fbdb 	bl	1a00592e <Chip_SSP_RWFrames_Blocking>
}
1a004178:	b007      	add	sp, #28
1a00417a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00417e:	bf00      	nop
1a004180:	400c5000 	.word	0x400c5000

1a004184 <rcvr_spi>:
{
1a004184:	b500      	push	{lr}
1a004186:	b083      	sub	sp, #12
    BYTE data = 0;
1a004188:	2300      	movs	r3, #0
1a00418a:	f88d 3007 	strb.w	r3, [sp, #7]
    SSPReceive(&data, 1);
1a00418e:	2101      	movs	r1, #1
1a004190:	f10d 0007 	add.w	r0, sp, #7
1a004194:	f7ff ffe4 	bl	1a004160 <SSPReceive>
}
1a004198:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a00419c:	b003      	add	sp, #12
1a00419e:	f85d fb04 	ldr.w	pc, [sp], #4
1a0041a2:	Address 0x000000001a0041a2 is out of bounds.


1a0041a4 <wait_ready>:
{
1a0041a4:	b508      	push	{r3, lr}
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a0041a6:	4b07      	ldr	r3, [pc, #28]	; (1a0041c4 <wait_ready+0x20>)
1a0041a8:	2232      	movs	r2, #50	; 0x32
1a0041aa:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a0041ac:	f7ff ffea 	bl	1a004184 <rcvr_spi>
		res = rcvr_spi();
1a0041b0:	f7ff ffe8 	bl	1a004184 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a0041b4:	28ff      	cmp	r0, #255	; 0xff
1a0041b6:	d003      	beq.n	1a0041c0 <wait_ready+0x1c>
1a0041b8:	4b02      	ldr	r3, [pc, #8]	; (1a0041c4 <wait_ready+0x20>)
1a0041ba:	781b      	ldrb	r3, [r3, #0]
1a0041bc:	2b00      	cmp	r3, #0
1a0041be:	d1f7      	bne.n	1a0041b0 <wait_ready+0xc>
}
1a0041c0:	bd08      	pop	{r3, pc}
1a0041c2:	bf00      	nop
1a0041c4:	1000323a 	.word	0x1000323a

1a0041c8 <deselect>:
{
1a0041c8:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a0041ca:	4a04      	ldr	r2, [pc, #16]	; (1a0041dc <deselect+0x14>)
1a0041cc:	f242 230c 	movw	r3, #8716	; 0x220c
1a0041d0:	2101      	movs	r1, #1
1a0041d2:	50d1      	str	r1, [r2, r3]
	rcvr_spi();
1a0041d4:	f7ff ffd6 	bl	1a004184 <rcvr_spi>
}
1a0041d8:	bd08      	pop	{r3, pc}
1a0041da:	bf00      	nop
1a0041dc:	400f4000 	.word	0x400f4000

1a0041e0 <select_>:
{
1a0041e0:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a0041e2:	4a07      	ldr	r2, [pc, #28]	; (1a004200 <select_+0x20>)
1a0041e4:	f242 238c 	movw	r3, #8844	; 0x228c
1a0041e8:	2101      	movs	r1, #1
1a0041ea:	50d1      	str	r1, [r2, r3]
	if (wait_ready() != 0xFF) {
1a0041ec:	f7ff ffda 	bl	1a0041a4 <wait_ready>
1a0041f0:	28ff      	cmp	r0, #255	; 0xff
1a0041f2:	d101      	bne.n	1a0041f8 <select_+0x18>
	return TRUE;
1a0041f4:	2001      	movs	r0, #1
}
1a0041f6:	bd08      	pop	{r3, pc}
		deselect();
1a0041f8:	f7ff ffe6 	bl	1a0041c8 <deselect>
		return FALSE;
1a0041fc:	2000      	movs	r0, #0
1a0041fe:	e7fa      	b.n	1a0041f6 <select_+0x16>
1a004200:	400f4000 	.word	0x400f4000

1a004204 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a004204:	b538      	push	{r3, r4, r5, lr}
1a004206:	4604      	mov	r4, r0
1a004208:	460d      	mov	r5, r1
	BYTE n, res;


    if (cmd & 0x80)                     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a00420a:	f010 0f80 	tst.w	r0, #128	; 0x80
1a00420e:	d129      	bne.n	1a004264 <send_cmd+0x60>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
1a004210:	f7ff ffda 	bl	1a0041c8 <deselect>
	if (!select_()) 
1a004214:	f7ff ffe4 	bl	1a0041e0 <select_>
1a004218:	b3a0      	cbz	r0, 1a004284 <send_cmd+0x80>
    {
        return 0xFF;
    }

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a00421a:	4620      	mov	r0, r4
1a00421c:	f7ff ff94 	bl	1a004148 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a004220:	0e28      	lsrs	r0, r5, #24
1a004222:	f7ff ff91 	bl	1a004148 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a004226:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a00422a:	f7ff ff8d 	bl	1a004148 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a00422e:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a004232:	f7ff ff89 	bl	1a004148 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a004236:	b2e8      	uxtb	r0, r5
1a004238:	f7ff ff86 	bl	1a004148 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
    
	if (cmd == CMD0_) 
1a00423c:	2c40      	cmp	r4, #64	; 0x40
1a00423e:	d01a      	beq.n	1a004276 <send_cmd+0x72>
	n = 0x01;							/* Dummy CRC + Stop */
1a004240:	2001      	movs	r0, #1
    {
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
    }
    
	if (cmd == CMD8)
1a004242:	2c48      	cmp	r4, #72	; 0x48
1a004244:	d019      	beq.n	1a00427a <send_cmd+0x76>
    {
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
    }
    
	xmit_spi(n);
1a004246:	f7ff ff7f 	bl	1a004148 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) 
1a00424a:	2c4c      	cmp	r4, #76	; 0x4c
1a00424c:	d017      	beq.n	1a00427e <send_cmd+0x7a>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a00424e:	240a      	movs	r4, #10
    }
    
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
    {
		res = rcvr_spi();
1a004250:	f7ff ff98 	bl	1a004184 <rcvr_spi>
    }
	while ((res & 0x80) && --n);
1a004254:	f010 0f80 	tst.w	r0, #128	; 0x80
1a004258:	d003      	beq.n	1a004262 <send_cmd+0x5e>
1a00425a:	1e63      	subs	r3, r4, #1
1a00425c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a004260:	d1f6      	bne.n	1a004250 <send_cmd+0x4c>

	return res;			/* Return with the response value */
}
1a004262:	bd38      	pop	{r3, r4, r5, pc}
		cmd &= 0x7F;
1a004264:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a004268:	2100      	movs	r1, #0
1a00426a:	2077      	movs	r0, #119	; 0x77
1a00426c:	f7ff ffca 	bl	1a004204 <send_cmd>
		if (res > 1) return res;
1a004270:	2801      	cmp	r0, #1
1a004272:	d9cd      	bls.n	1a004210 <send_cmd+0xc>
1a004274:	e7f5      	b.n	1a004262 <send_cmd+0x5e>
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
1a004276:	2095      	movs	r0, #149	; 0x95
1a004278:	e7e3      	b.n	1a004242 <send_cmd+0x3e>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a00427a:	2087      	movs	r0, #135	; 0x87
1a00427c:	e7e3      	b.n	1a004246 <send_cmd+0x42>
        rcvr_spi();                     /* Skip a stuff byte when stop reading */
1a00427e:	f7ff ff81 	bl	1a004184 <rcvr_spi>
1a004282:	e7e4      	b.n	1a00424e <send_cmd+0x4a>
        return 0xFF;
1a004284:	20ff      	movs	r0, #255	; 0xff
1a004286:	e7ec      	b.n	1a004262 <send_cmd+0x5e>

1a004288 <xmit_datablock>:
{
1a004288:	b570      	push	{r4, r5, r6, lr}
1a00428a:	4606      	mov	r6, r0
1a00428c:	460c      	mov	r4, r1
	if (wait_ready() != 0xFF) 
1a00428e:	f7ff ff89 	bl	1a0041a4 <wait_ready>
1a004292:	28ff      	cmp	r0, #255	; 0xff
1a004294:	d001      	beq.n	1a00429a <xmit_datablock+0x12>
        return FALSE;
1a004296:	2000      	movs	r0, #0
}
1a004298:	bd70      	pop	{r4, r5, r6, pc}
	xmit_spi(token);					/* Xmit data token */
1a00429a:	4620      	mov	r0, r4
1a00429c:	f7ff ff54 	bl	1a004148 <xmit_spi>
	if (token != 0xFD)                  /* Is data token */
1a0042a0:	2cfd      	cmp	r4, #253	; 0xfd
1a0042a2:	d01b      	beq.n	1a0042dc <xmit_datablock+0x54>
		wc = 0;
1a0042a4:	2400      	movs	r4, #0
			xmit_spi(*buff++);
1a0042a6:	4635      	mov	r5, r6
1a0042a8:	f815 0b02 	ldrb.w	r0, [r5], #2
1a0042ac:	f7ff ff4c 	bl	1a004148 <xmit_spi>
			xmit_spi(*buff++);
1a0042b0:	7870      	ldrb	r0, [r6, #1]
1a0042b2:	f7ff ff49 	bl	1a004148 <xmit_spi>
        while (--wc);
1a0042b6:	1e63      	subs	r3, r4, #1
			xmit_spi(*buff++);
1a0042b8:	462e      	mov	r6, r5
        while (--wc);
1a0042ba:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a0042be:	d1f2      	bne.n	1a0042a6 <xmit_datablock+0x1e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a0042c0:	20ff      	movs	r0, #255	; 0xff
1a0042c2:	f7ff ff41 	bl	1a004148 <xmit_spi>
		xmit_spi(0xFF);
1a0042c6:	20ff      	movs	r0, #255	; 0xff
1a0042c8:	f7ff ff3e 	bl	1a004148 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a0042cc:	f7ff ff5a 	bl	1a004184 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a0042d0:	f000 001f 	and.w	r0, r0, #31
1a0042d4:	2805      	cmp	r0, #5
1a0042d6:	d103      	bne.n	1a0042e0 <xmit_datablock+0x58>
	return TRUE;
1a0042d8:	2001      	movs	r0, #1
1a0042da:	e7dd      	b.n	1a004298 <xmit_datablock+0x10>
1a0042dc:	2001      	movs	r0, #1
1a0042de:	e7db      	b.n	1a004298 <xmit_datablock+0x10>
			return FALSE;
1a0042e0:	2000      	movs	r0, #0
1a0042e2:	e7d9      	b.n	1a004298 <xmit_datablock+0x10>

1a0042e4 <rcvr_datablock>:
{
1a0042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0042e6:	4604      	mov	r4, r0
1a0042e8:	460e      	mov	r6, r1
	Timer1 = 20;
1a0042ea:	4b15      	ldr	r3, [pc, #84]	; (1a004340 <rcvr_datablock+0x5c>)
1a0042ec:	2214      	movs	r2, #20
1a0042ee:	701a      	strb	r2, [r3, #0]
		token = rcvr_spi();
1a0042f0:	f7ff ff48 	bl	1a004184 <rcvr_spi>
    while ((token == 0xFF) && Timer1);
1a0042f4:	28ff      	cmp	r0, #255	; 0xff
1a0042f6:	d103      	bne.n	1a004300 <rcvr_datablock+0x1c>
1a0042f8:	4b11      	ldr	r3, [pc, #68]	; (1a004340 <rcvr_datablock+0x5c>)
1a0042fa:	781b      	ldrb	r3, [r3, #0]
1a0042fc:	2b00      	cmp	r3, #0
1a0042fe:	d1f7      	bne.n	1a0042f0 <rcvr_datablock+0xc>
	if (token != 0xFE) 
1a004300:	28fe      	cmp	r0, #254	; 0xfe
1a004302:	d11b      	bne.n	1a00433c <rcvr_datablock+0x58>
		rcvr_spi_m(buff++);
1a004304:	1c65      	adds	r5, r4, #1
1a004306:	2101      	movs	r1, #1
1a004308:	4620      	mov	r0, r4
1a00430a:	f7ff ff29 	bl	1a004160 <SSPReceive>
		rcvr_spi_m(buff++);
1a00430e:	1ca7      	adds	r7, r4, #2
1a004310:	2101      	movs	r1, #1
1a004312:	4628      	mov	r0, r5
1a004314:	f7ff ff24 	bl	1a004160 <SSPReceive>
		rcvr_spi_m(buff++);
1a004318:	1ce5      	adds	r5, r4, #3
1a00431a:	2101      	movs	r1, #1
1a00431c:	4638      	mov	r0, r7
1a00431e:	f7ff ff1f 	bl	1a004160 <SSPReceive>
		rcvr_spi_m(buff++);
1a004322:	2101      	movs	r1, #1
1a004324:	4628      	mov	r0, r5
1a004326:	3404      	adds	r4, #4
1a004328:	f7ff ff1a 	bl	1a004160 <SSPReceive>
    while (btr -= 4);
1a00432c:	3e04      	subs	r6, #4
1a00432e:	d1e9      	bne.n	1a004304 <rcvr_datablock+0x20>
	rcvr_spi();						/* Discard CRC */
1a004330:	f7ff ff28 	bl	1a004184 <rcvr_spi>
	rcvr_spi();
1a004334:	f7ff ff26 	bl	1a004184 <rcvr_spi>
	return TRUE;					/* Return with success */
1a004338:	2001      	movs	r0, #1
}
1a00433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FALSE;               /* If not valid data token, retutn with error */
1a00433c:	2000      	movs	r0, #0
1a00433e:	e7fc      	b.n	1a00433a <rcvr_datablock+0x56>
1a004340:	10003239 	.word	0x10003239

1a004344 <FSSDC_FatFs_DiskStatus>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskStatus ()
{
	return g_diskStats;
1a004344:	4b01      	ldr	r3, [pc, #4]	; (1a00434c <FSSDC_FatFs_DiskStatus+0x8>)
1a004346:	7818      	ldrb	r0, [r3, #0]
}
1a004348:	4770      	bx	lr
1a00434a:	bf00      	nop
1a00434c:	10000009 	.word	0x10000009

1a004350 <FSSDC_FatFs_DiskInitialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskInitialize ()
{
1a004350:	b570      	push	{r4, r5, r6, lr}
1a004352:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

    if (g_diskStats & STA_NODISK)
1a004354:	4b5f      	ldr	r3, [pc, #380]	; (1a0044d4 <FSSDC_FatFs_DiskInitialize+0x184>)
1a004356:	781b      	ldrb	r3, [r3, #0]
1a004358:	f013 0f02 	tst.w	r3, #2
1a00435c:	d109      	bne.n	1a004372 <FSSDC_FatFs_DiskInitialize+0x22>
    {
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
        return g_diskStats;                 /* No card in the socket */
    }
    
    if (!(g_diskStats & STA_NOINIT))        /* Already initialized */
1a00435e:	4b5d      	ldr	r3, [pc, #372]	; (1a0044d4 <FSSDC_FatFs_DiskInitialize+0x184>)
1a004360:	781b      	ldrb	r3, [r3, #0]
1a004362:	f013 0f01 	tst.w	r3, #1
1a004366:	d10b      	bne.n	1a004380 <FSSDC_FatFs_DiskInitialize+0x30>
    {
        return g_diskStats;
1a004368:	4b5a      	ldr	r3, [pc, #360]	; (1a0044d4 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00436a:	7818      	ldrb	r0, [r3, #0]
1a00436c:	b2c0      	uxtb	r0, r0
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
        newCardStatus (FSSDC_CardStatus_Error); 
	}

	return g_diskStats;
}
1a00436e:	b002      	add	sp, #8
1a004370:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
1a004372:	4859      	ldr	r0, [pc, #356]	; (1a0044d8 <FSSDC_FatFs_DiskInitialize+0x188>)
1a004374:	f000 fcf6 	bl	1a004d64 <Board_UARTPutSTR>
        return g_diskStats;                 /* No card in the socket */
1a004378:	4b56      	ldr	r3, [pc, #344]	; (1a0044d4 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00437a:	7818      	ldrb	r0, [r3, #0]
1a00437c:	b2c0      	uxtb	r0, r0
1a00437e:	e7f6      	b.n	1a00436e <FSSDC_FatFs_DiskInitialize+0x1e>
    Board_UARTPutSTR ("FSSDC: [Init] Initialization begins.\r\n");
1a004380:	4856      	ldr	r0, [pc, #344]	; (1a0044dc <FSSDC_FatFs_DiskInitialize+0x18c>)
1a004382:	f000 fcef 	bl	1a004d64 <Board_UARTPutSTR>
	FCLK_SLOW();
1a004386:	4b56      	ldr	r3, [pc, #344]	; (1a0044e0 <FSSDC_FatFs_DiskInitialize+0x190>)
1a004388:	6819      	ldr	r1, [r3, #0]
1a00438a:	4856      	ldr	r0, [pc, #344]	; (1a0044e4 <FSSDC_FatFs_DiskInitialize+0x194>)
1a00438c:	f001 fb23 	bl	1a0059d6 <Chip_SSP_SetBitRate>
	for (n = 10; n; n--) 
1a004390:	240a      	movs	r4, #10
1a004392:	b124      	cbz	r4, 1a00439e <FSSDC_FatFs_DiskInitialize+0x4e>
        rcvr_spi();	/* 80 dummy clocks */
1a004394:	f7ff fef6 	bl	1a004184 <rcvr_spi>
	for (n = 10; n; n--) 
1a004398:	3c01      	subs	r4, #1
1a00439a:	b2e4      	uxtb	r4, r4
1a00439c:	e7f9      	b.n	1a004392 <FSSDC_FatFs_DiskInitialize+0x42>
    Board_UARTPutSTR ("FSSDC: [Init] New card status: Native Mode.\r\n");
1a00439e:	4852      	ldr	r0, [pc, #328]	; (1a0044e8 <FSSDC_FatFs_DiskInitialize+0x198>)
1a0043a0:	f000 fce0 	bl	1a004d64 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_NativeMode);    
1a0043a4:	2003      	movs	r0, #3
1a0043a6:	f7ff feaf 	bl	1a004108 <newCardStatus>
	if (send_cmd(CMD0_, 0) == 1)                                /* Enter Idle state */
1a0043aa:	2100      	movs	r1, #0
1a0043ac:	2040      	movs	r0, #64	; 0x40
1a0043ae:	f7ff ff29 	bl	1a004204 <send_cmd>
1a0043b2:	4605      	mov	r5, r0
1a0043b4:	2801      	cmp	r0, #1
1a0043b6:	d019      	beq.n	1a0043ec <FSSDC_FatFs_DiskInitialize+0x9c>
	CardType = ty;
1a0043b8:	4b4c      	ldr	r3, [pc, #304]	; (1a0044ec <FSSDC_FatFs_DiskInitialize+0x19c>)
1a0043ba:	701c      	strb	r4, [r3, #0]
	deselect();
1a0043bc:	f7ff ff04 	bl	1a0041c8 <deselect>
    if (ty)                                             /* Initialization succeded */
1a0043c0:	2c00      	cmp	r4, #0
1a0043c2:	d07f      	beq.n	1a0044c4 <FSSDC_FatFs_DiskInitialize+0x174>
		g_diskStats &= ~STA_NOINIT;                     /* Clear STA_NOINIT */
1a0043c4:	4a43      	ldr	r2, [pc, #268]	; (1a0044d4 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0043c6:	7813      	ldrb	r3, [r2, #0]
1a0043c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a0043cc:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
1a0043ce:	4b48      	ldr	r3, [pc, #288]	; (1a0044f0 <FSSDC_FatFs_DiskInitialize+0x1a0>)
1a0043d0:	6819      	ldr	r1, [r3, #0]
1a0043d2:	4844      	ldr	r0, [pc, #272]	; (1a0044e4 <FSSDC_FatFs_DiskInitialize+0x194>)
1a0043d4:	f001 faff 	bl	1a0059d6 <Chip_SSP_SetBitRate>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Ready (Fast Clock).\r\n");        
1a0043d8:	4846      	ldr	r0, [pc, #280]	; (1a0044f4 <FSSDC_FatFs_DiskInitialize+0x1a4>)
1a0043da:	f000 fcc3 	bl	1a004d64 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Ready);        
1a0043de:	2005      	movs	r0, #5
1a0043e0:	f7ff fe92 	bl	1a004108 <newCardStatus>
	return g_diskStats;
1a0043e4:	4b3b      	ldr	r3, [pc, #236]	; (1a0044d4 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0043e6:	7818      	ldrb	r0, [r3, #0]
1a0043e8:	b2c0      	uxtb	r0, r0
1a0043ea:	e7c0      	b.n	1a00436e <FSSDC_FatFs_DiskInitialize+0x1e>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Initializing.\r\n");        
1a0043ec:	4842      	ldr	r0, [pc, #264]	; (1a0044f8 <FSSDC_FatFs_DiskInitialize+0x1a8>)
1a0043ee:	f000 fcb9 	bl	1a004d64 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Initializing);
1a0043f2:	2004      	movs	r0, #4
1a0043f4:	f7ff fe88 	bl	1a004108 <newCardStatus>
		Timer1 = 100;                                           /* Initialization timeout of 1000 msec */
1a0043f8:	4b40      	ldr	r3, [pc, #256]	; (1a0044fc <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0043fa:	2264      	movs	r2, #100	; 0x64
1a0043fc:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1)                         /* SDHC */
1a0043fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a004402:	2048      	movs	r0, #72	; 0x48
1a004404:	f7ff fefe 	bl	1a004204 <send_cmd>
1a004408:	2801      	cmp	r0, #1
1a00440a:	d139      	bne.n	1a004480 <FSSDC_FatFs_DiskInitialize+0x130>
			for (n = 0; n < 4; n++) 
1a00440c:	4625      	mov	r5, r4
1a00440e:	e007      	b.n	1a004420 <FSSDC_FatFs_DiskInitialize+0xd0>
                ocr[n] = rcvr_spi();                            /* Get trailing return value of R7 resp */
1a004410:	f7ff feb8 	bl	1a004184 <rcvr_spi>
1a004414:	ab02      	add	r3, sp, #8
1a004416:	442b      	add	r3, r5
1a004418:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++) 
1a00441c:	3501      	adds	r5, #1
1a00441e:	b2ed      	uxtb	r5, r5
1a004420:	2d03      	cmp	r5, #3
1a004422:	d9f5      	bls.n	1a004410 <FSSDC_FatFs_DiskInitialize+0xc0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */ 
1a004424:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a004428:	2b01      	cmp	r3, #1
1a00442a:	d1c5      	bne.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
1a00442c:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a004430:	2baa      	cmp	r3, #170	; 0xaa
1a004432:	d1c1      	bne.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a004434:	4b31      	ldr	r3, [pc, #196]	; (1a0044fc <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a004436:	781b      	ldrb	r3, [r3, #0]
1a004438:	b133      	cbz	r3, 1a004448 <FSSDC_FatFs_DiskInitialize+0xf8>
1a00443a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a00443e:	20e9      	movs	r0, #233	; 0xe9
1a004440:	f7ff fee0 	bl	1a004204 <send_cmd>
1a004444:	2800      	cmp	r0, #0
1a004446:	d1f5      	bne.n	1a004434 <FSSDC_FatFs_DiskInitialize+0xe4>
                if (Timer1 && send_cmd(CMD58, 0) == 0) 
1a004448:	4b2c      	ldr	r3, [pc, #176]	; (1a0044fc <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00444a:	781b      	ldrb	r3, [r3, #0]
1a00444c:	2b00      	cmp	r3, #0
1a00444e:	d0b3      	beq.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
1a004450:	2100      	movs	r1, #0
1a004452:	207a      	movs	r0, #122	; 0x7a
1a004454:	f7ff fed6 	bl	1a004204 <send_cmd>
1a004458:	4605      	mov	r5, r0
1a00445a:	b140      	cbz	r0, 1a00446e <FSSDC_FatFs_DiskInitialize+0x11e>
1a00445c:	e7ac      	b.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
                        ocr[n] = rcvr_spi();
1a00445e:	f7ff fe91 	bl	1a004184 <rcvr_spi>
1a004462:	ab02      	add	r3, sp, #8
1a004464:	442b      	add	r3, r5
1a004466:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)                     /* Check CCS bit in the OCR */
1a00446a:	3501      	adds	r5, #1
1a00446c:	b2ed      	uxtb	r5, r5
1a00446e:	2d03      	cmp	r5, #3
1a004470:	d9f5      	bls.n	1a00445e <FSSDC_FatFs_DiskInitialize+0x10e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a004472:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a004476:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00447a:	d021      	beq.n	1a0044c0 <FSSDC_FatFs_DiskInitialize+0x170>
1a00447c:	240c      	movs	r4, #12
1a00447e:	e79b      	b.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
			if (send_cmd(ACMD41, 0) <= 1)
1a004480:	2100      	movs	r1, #0
1a004482:	20e9      	movs	r0, #233	; 0xe9
1a004484:	f7ff febe 	bl	1a004204 <send_cmd>
1a004488:	2801      	cmp	r0, #1
1a00448a:	d916      	bls.n	1a0044ba <FSSDC_FatFs_DiskInitialize+0x16a>
				ty = CT_MMC; cmd = CMD1;                        /* MMCv3 */
1a00448c:	2641      	movs	r6, #65	; 0x41
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a00448e:	4b1b      	ldr	r3, [pc, #108]	; (1a0044fc <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a004490:	781b      	ldrb	r3, [r3, #0]
1a004492:	b12b      	cbz	r3, 1a0044a0 <FSSDC_FatFs_DiskInitialize+0x150>
1a004494:	2100      	movs	r1, #0
1a004496:	4630      	mov	r0, r6
1a004498:	f7ff feb4 	bl	1a004204 <send_cmd>
1a00449c:	2800      	cmp	r0, #0
1a00449e:	d1f6      	bne.n	1a00448e <FSSDC_FatFs_DiskInitialize+0x13e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a0044a0:	4b16      	ldr	r3, [pc, #88]	; (1a0044fc <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0044a2:	781b      	ldrb	r3, [r3, #0]
1a0044a4:	2b00      	cmp	r3, #0
1a0044a6:	d087      	beq.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
1a0044a8:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0044ac:	2050      	movs	r0, #80	; 0x50
1a0044ae:	f7ff fea9 	bl	1a004204 <send_cmd>
1a0044b2:	2800      	cmp	r0, #0
1a0044b4:	d180      	bne.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
1a0044b6:	462c      	mov	r4, r5
1a0044b8:	e77e      	b.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
				ty = CT_SD1; cmd = ACMD41;                      /* SDv1 */
1a0044ba:	2502      	movs	r5, #2
1a0044bc:	26e9      	movs	r6, #233	; 0xe9
1a0044be:	e7e6      	b.n	1a00448e <FSSDC_FatFs_DiskInitialize+0x13e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0044c0:	2404      	movs	r4, #4
1a0044c2:	e779      	b.n	1a0043b8 <FSSDC_FatFs_DiskInitialize+0x68>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
1a0044c4:	480e      	ldr	r0, [pc, #56]	; (1a004500 <FSSDC_FatFs_DiskInitialize+0x1b0>)
1a0044c6:	f000 fc4d 	bl	1a004d64 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Error); 
1a0044ca:	2000      	movs	r0, #0
1a0044cc:	f7ff fe1c 	bl	1a004108 <newCardStatus>
1a0044d0:	e788      	b.n	1a0043e4 <FSSDC_FatFs_DiskInitialize+0x94>
1a0044d2:	bf00      	nop
1a0044d4:	10000009 	.word	0x10000009
1a0044d8:	1a00e464 	.word	0x1a00e464
1a0044dc:	1a00e488 	.word	0x1a00e488
1a0044e0:	10000010 	.word	0x10000010
1a0044e4:	400c5000 	.word	0x400c5000
1a0044e8:	1a00e4b0 	.word	0x1a00e4b0
1a0044ec:	10003238 	.word	0x10003238
1a0044f0:	1000000c 	.word	0x1000000c
1a0044f4:	1a00e510 	.word	0x1a00e510
1a0044f8:	1a00e4e0 	.word	0x1a00e4e0
1a0044fc:	10003239 	.word	0x10003239
1a004500:	1a00e548 	.word	0x1a00e548

1a004504 <FSSDC_FatFs_DiskRead>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskRead (BYTE *buff, DWORD sector, UINT count)
{   
1a004504:	b538      	push	{r3, r4, r5, lr}
	if (g_diskStats & STA_NOINIT)
1a004506:	4b1d      	ldr	r3, [pc, #116]	; (1a00457c <FSSDC_FatFs_DiskRead+0x78>)
1a004508:	781b      	ldrb	r3, [r3, #0]
1a00450a:	f013 0f01 	tst.w	r3, #1
1a00450e:	d121      	bne.n	1a004554 <FSSDC_FatFs_DiskRead+0x50>
1a004510:	4605      	mov	r5, r0
1a004512:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
        return RES_NOTRDY;
    }

	if (!(CardType & CT_BLOCK)) 
1a004514:	4b1a      	ldr	r3, [pc, #104]	; (1a004580 <FSSDC_FatFs_DiskRead+0x7c>)
1a004516:	781b      	ldrb	r3, [r3, #0]
1a004518:	f013 0f08 	tst.w	r3, #8
1a00451c:	d100      	bne.n	1a004520 <FSSDC_FatFs_DiskRead+0x1c>
    {
        sector *= 512;                      /* Convert to byte address if needed */
1a00451e:	0249      	lsls	r1, r1, #9
    }

	if (count == 1) 
1a004520:	2c01      	cmp	r4, #1
1a004522:	d01c      	beq.n	1a00455e <FSSDC_FatFs_DiskRead+0x5a>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else 
    {                                       /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) 
1a004524:	2052      	movs	r0, #82	; 0x52
1a004526:	f7ff fe6d 	bl	1a004204 <send_cmd>
1a00452a:	b968      	cbnz	r0, 1a004548 <FSSDC_FatFs_DiskRead+0x44>
        {                                   /* READ_MULTIPLE_BLOCK */
			do 
            {
				if (!rcvr_datablock(buff, 512)) 
1a00452c:	f44f 7100 	mov.w	r1, #512	; 0x200
1a004530:	4628      	mov	r0, r5
1a004532:	f7ff fed7 	bl	1a0042e4 <rcvr_datablock>
1a004536:	b118      	cbz	r0, 1a004540 <FSSDC_FatFs_DiskRead+0x3c>
                {
                    break;
                }
				buff += 512;
1a004538:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a00453c:	3c01      	subs	r4, #1
1a00453e:	d1f5      	bne.n	1a00452c <FSSDC_FatFs_DiskRead+0x28>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a004540:	2100      	movs	r1, #0
1a004542:	204c      	movs	r0, #76	; 0x4c
1a004544:	f7ff fe5e 	bl	1a004204 <send_cmd>
		}
	}
	deselect();
1a004548:	f7ff fe3e 	bl	1a0041c8 <deselect>

	return count ? RES_ERROR : RES_OK;
1a00454c:	1c20      	adds	r0, r4, #0
1a00454e:	bf18      	it	ne
1a004550:	2001      	movne	r0, #1
}
1a004552:	bd38      	pop	{r3, r4, r5, pc}
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
1a004554:	480b      	ldr	r0, [pc, #44]	; (1a004584 <FSSDC_FatFs_DiskRead+0x80>)
1a004556:	f000 fc05 	bl	1a004d64 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a00455a:	2003      	movs	r0, #3
1a00455c:	e7f9      	b.n	1a004552 <FSSDC_FatFs_DiskRead+0x4e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a00455e:	2051      	movs	r0, #81	; 0x51
1a004560:	f7ff fe50 	bl	1a004204 <send_cmd>
1a004564:	2800      	cmp	r0, #0
1a004566:	d1ef      	bne.n	1a004548 <FSSDC_FatFs_DiskRead+0x44>
			&& rcvr_datablock(buff, 512))
1a004568:	f44f 7100 	mov.w	r1, #512	; 0x200
1a00456c:	4628      	mov	r0, r5
1a00456e:	f7ff feb9 	bl	1a0042e4 <rcvr_datablock>
1a004572:	2800      	cmp	r0, #0
1a004574:	d0e8      	beq.n	1a004548 <FSSDC_FatFs_DiskRead+0x44>
			count = 0;
1a004576:	2400      	movs	r4, #0
1a004578:	e7e6      	b.n	1a004548 <FSSDC_FatFs_DiskRead+0x44>
1a00457a:	bf00      	nop
1a00457c:	10000009 	.word	0x10000009
1a004580:	10003238 	.word	0x10003238
1a004584:	1a00e5d0 	.word	0x1a00e5d0

1a004588 <FSSDC_FatFs_DiskWrite>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
DRESULT FSSDC_FatFs_DiskWrite (const BYTE *buff, DWORD sector, UINT count)
{
1a004588:	b570      	push	{r4, r5, r6, lr}
	if (g_diskStats & STA_NOINIT)
1a00458a:	4b28      	ldr	r3, [pc, #160]	; (1a00462c <FSSDC_FatFs_DiskWrite+0xa4>)
1a00458c:	781b      	ldrb	r3, [r3, #0]
1a00458e:	f013 0f01 	tst.w	r3, #1
1a004592:	d12b      	bne.n	1a0045ec <FSSDC_FatFs_DiskWrite+0x64>
1a004594:	4605      	mov	r5, r0
1a004596:	460e      	mov	r6, r1
1a004598:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
        return RES_NOTRDY;
    }
    
	if (g_diskStats & STA_PROTECT)
1a00459a:	4b24      	ldr	r3, [pc, #144]	; (1a00462c <FSSDC_FatFs_DiskWrite+0xa4>)
1a00459c:	781b      	ldrb	r3, [r3, #0]
1a00459e:	f013 0f04 	tst.w	r3, #4
1a0045a2:	d128      	bne.n	1a0045f6 <FSSDC_FatFs_DiskWrite+0x6e>
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
        return RES_WRPRT;
    }

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0045a4:	4b22      	ldr	r3, [pc, #136]	; (1a004630 <FSSDC_FatFs_DiskWrite+0xa8>)
1a0045a6:	781b      	ldrb	r3, [r3, #0]
1a0045a8:	f013 0f08 	tst.w	r3, #8
1a0045ac:	d100      	bne.n	1a0045b0 <FSSDC_FatFs_DiskWrite+0x28>
1a0045ae:	024e      	lsls	r6, r1, #9

	if (count == 1) 
1a0045b0:	2c01      	cmp	r4, #1
1a0045b2:	d025      	beq.n	1a004600 <FSSDC_FatFs_DiskWrite+0x78>
			count = 0;
        }
	}
	else 
    {                                           /* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0045b4:	f013 0f06 	tst.w	r3, #6
1a0045b8:	d130      	bne.n	1a00461c <FSSDC_FatFs_DiskWrite+0x94>
		if (send_cmd(CMD25, sector) == 0) 
1a0045ba:	4631      	mov	r1, r6
1a0045bc:	2059      	movs	r0, #89	; 0x59
1a0045be:	f7ff fe21 	bl	1a004204 <send_cmd>
1a0045c2:	b968      	cbnz	r0, 1a0045e0 <FSSDC_FatFs_DiskWrite+0x58>
        {                                       /* WRITE_MULTIPLE_BLOCK */
			do 
            {
				if (!xmit_datablock(buff, 0xFC))
1a0045c4:	21fc      	movs	r1, #252	; 0xfc
1a0045c6:	4628      	mov	r0, r5
1a0045c8:	f7ff fe5e 	bl	1a004288 <xmit_datablock>
1a0045cc:	b118      	cbz	r0, 1a0045d6 <FSSDC_FatFs_DiskWrite+0x4e>
                {
                    break;
                }
				buff += 512;
1a0045ce:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a0045d2:	3c01      	subs	r4, #1
1a0045d4:	d1f6      	bne.n	1a0045c4 <FSSDC_FatFs_DiskWrite+0x3c>
			if (!xmit_datablock(0, 0xFD))       /* STOP_TRAN token */
1a0045d6:	21fd      	movs	r1, #253	; 0xfd
1a0045d8:	2000      	movs	r0, #0
1a0045da:	f7ff fe55 	bl	1a004288 <xmit_datablock>
1a0045de:	b310      	cbz	r0, 1a004626 <FSSDC_FatFs_DiskWrite+0x9e>
            {
				count = 1;
            }
		}
	}
	deselect();
1a0045e0:	f7ff fdf2 	bl	1a0041c8 <deselect>

	return count ? RES_ERROR : RES_OK;
1a0045e4:	1c20      	adds	r0, r4, #0
1a0045e6:	bf18      	it	ne
1a0045e8:	2001      	movne	r0, #1
}
1a0045ea:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
1a0045ec:	4811      	ldr	r0, [pc, #68]	; (1a004634 <FSSDC_FatFs_DiskWrite+0xac>)
1a0045ee:	f000 fbb9 	bl	1a004d64 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a0045f2:	2003      	movs	r0, #3
1a0045f4:	e7f9      	b.n	1a0045ea <FSSDC_FatFs_DiskWrite+0x62>
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
1a0045f6:	4810      	ldr	r0, [pc, #64]	; (1a004638 <FSSDC_FatFs_DiskWrite+0xb0>)
1a0045f8:	f000 fbb4 	bl	1a004d64 <Board_UARTPutSTR>
        return RES_WRPRT;
1a0045fc:	2002      	movs	r0, #2
1a0045fe:	e7f4      	b.n	1a0045ea <FSSDC_FatFs_DiskWrite+0x62>
		if ((send_cmd(CMD24, sector) == 0)      /* WRITE_BLOCK */
1a004600:	4631      	mov	r1, r6
1a004602:	2058      	movs	r0, #88	; 0x58
1a004604:	f7ff fdfe 	bl	1a004204 <send_cmd>
1a004608:	2800      	cmp	r0, #0
1a00460a:	d1e9      	bne.n	1a0045e0 <FSSDC_FatFs_DiskWrite+0x58>
                    && xmit_datablock(buff, 0xFE))
1a00460c:	21fe      	movs	r1, #254	; 0xfe
1a00460e:	4628      	mov	r0, r5
1a004610:	f7ff fe3a 	bl	1a004288 <xmit_datablock>
1a004614:	2800      	cmp	r0, #0
1a004616:	d0e3      	beq.n	1a0045e0 <FSSDC_FatFs_DiskWrite+0x58>
			count = 0;
1a004618:	2400      	movs	r4, #0
1a00461a:	e7e1      	b.n	1a0045e0 <FSSDC_FatFs_DiskWrite+0x58>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a00461c:	4621      	mov	r1, r4
1a00461e:	20d7      	movs	r0, #215	; 0xd7
1a004620:	f7ff fdf0 	bl	1a004204 <send_cmd>
1a004624:	e7c9      	b.n	1a0045ba <FSSDC_FatFs_DiskWrite+0x32>
				count = 1;
1a004626:	2401      	movs	r4, #1
1a004628:	e7da      	b.n	1a0045e0 <FSSDC_FatFs_DiskWrite+0x58>
1a00462a:	bf00      	nop
1a00462c:	10000009 	.word	0x10000009
1a004630:	10003238 	.word	0x10003238
1a004634:	1a00e5f8 	.word	0x1a00e5f8
1a004638:	1a00e620 	.word	0x1a00e620

1a00463c <FSSDC_FatFs_DiskIoCtl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskIoCtl (BYTE cmd, void *buff)
{
1a00463c:	b530      	push	{r4, r5, lr}
1a00463e:	b085      	sub	sp, #20
1a004640:	460c      	mov	r4, r1
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	res = RES_ERROR;

	if (cmd == CTRL_POWER)
1a004642:	2805      	cmp	r0, #5
1a004644:	d018      	beq.n	1a004678 <FSSDC_FatFs_DiskIoCtl+0x3c>
			res = RES_PARERR;
		}
	}
	else 
    {
		if (g_diskStats & STA_NOINIT)
1a004646:	4bb4      	ldr	r3, [pc, #720]	; (1a004918 <FSSDC_FatFs_DiskIoCtl+0x2dc>)
1a004648:	781b      	ldrb	r3, [r3, #0]
1a00464a:	f013 0f01 	tst.w	r3, #1
1a00464e:	d11f      	bne.n	1a004690 <FSSDC_FatFs_DiskIoCtl+0x54>
        {
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
            return RES_NOTRDY;
        }

		switch (cmd) {
1a004650:	280e      	cmp	r0, #14
1a004652:	f200 8148 	bhi.w	1a0048e6 <FSSDC_FatFs_DiskIoCtl+0x2aa>
1a004656:	e8df f010 	tbh	[pc, r0, lsl #1]
1a00465a:	0020      	.short	0x0020
1a00465c:	006d002b 	.word	0x006d002b
1a004660:	01460074 	.word	0x01460074
1a004664:	01460146 	.word	0x01460146
1a004668:	01460146 	.word	0x01460146
1a00466c:	00d20146 	.word	0x00d20146
1a004670:	00e900d9 	.word	0x00e900d9
1a004674:	010a00f7 	.word	0x010a00f7
		switch (*ptr) {
1a004678:	780b      	ldrb	r3, [r1, #0]
1a00467a:	2b01      	cmp	r3, #1
1a00467c:	f240 814a 	bls.w	1a004914 <FSSDC_FatFs_DiskIoCtl+0x2d8>
1a004680:	2b02      	cmp	r3, #2
1a004682:	f040 8140 	bne.w	1a004906 <FSSDC_FatFs_DiskIoCtl+0x2ca>
			*(ptr+1) = (BYTE)chk_power();
1a004686:	f7ff fd4b 	bl	1a004120 <chk_power>
1a00468a:	7060      	strb	r0, [r4, #1]
			res = RES_OK;
1a00468c:	2400      	movs	r4, #0
1a00468e:	e13e      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
1a004690:	48a2      	ldr	r0, [pc, #648]	; (1a00491c <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a004692:	f000 fb67 	bl	1a004d64 <Board_UARTPutSTR>
            return RES_NOTRDY;
1a004696:	2403      	movs	r4, #3
1a004698:	e139      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
		case CTRL_SYNC :                    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) 
1a00469a:	f7ff fda1 	bl	1a0041e0 <select_>
1a00469e:	2800      	cmp	r0, #0
1a0046a0:	f000 811d 	beq.w	1a0048de <FSSDC_FatFs_DiskIoCtl+0x2a2>
            {
				res = RES_OK;
				deselect();
1a0046a4:	f7ff fd90 	bl	1a0041c8 <deselect>

		default:
			res = RES_PARERR;
		}

		deselect();
1a0046a8:	f7ff fd8e 	bl	1a0041c8 <deselect>
				res = RES_OK;
1a0046ac:	2400      	movs	r4, #0
1a0046ae:	e12e      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if ((send_cmd(CMD9, 0) == 0) 
1a0046b0:	2100      	movs	r1, #0
1a0046b2:	2049      	movs	r0, #73	; 0x49
1a0046b4:	f7ff fda6 	bl	1a004204 <send_cmd>
1a0046b8:	2800      	cmp	r0, #0
1a0046ba:	f040 810c 	bne.w	1a0048d6 <FSSDC_FatFs_DiskIoCtl+0x29a>
                    && rcvr_datablock(csd, 16))
1a0046be:	2110      	movs	r1, #16
1a0046c0:	4668      	mov	r0, sp
1a0046c2:	f7ff fe0f 	bl	1a0042e4 <rcvr_datablock>
1a0046c6:	2800      	cmp	r0, #0
1a0046c8:	f000 8119 	beq.w	1a0048fe <FSSDC_FatFs_DiskIoCtl+0x2c2>
				if ((csd[0] >> 6) == 1) 
1a0046cc:	f89d 3000 	ldrb.w	r3, [sp]
1a0046d0:	099b      	lsrs	r3, r3, #6
1a0046d2:	2b01      	cmp	r3, #1
1a0046d4:	d022      	beq.n	1a00471c <FSSDC_FatFs_DiskIoCtl+0xe0>
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a0046d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
1a0046da:	f002 020f 	and.w	r2, r2, #15
1a0046de:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0046e2:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
1a0046e6:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a0046ea:	005b      	lsls	r3, r3, #1
1a0046ec:	f003 0306 	and.w	r3, r3, #6
1a0046f0:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a0046f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a0046f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0046fa:	099b      	lsrs	r3, r3, #6
1a0046fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
1a004700:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a004704:	0289      	lsls	r1, r1, #10
1a004706:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
1a00470a:	440b      	add	r3, r1
1a00470c:	3301      	adds	r3, #1
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a00470e:	3a07      	subs	r2, #7
1a004710:	4093      	lsls	r3, r2
1a004712:	6023      	str	r3, [r4, #0]
		deselect();
1a004714:	f7ff fd58 	bl	1a0041c8 <deselect>
				res = RES_OK;
1a004718:	2400      	movs	r4, #0
1a00471a:	e0f8      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a00471c:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a004720:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a004724:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a004728:	b29b      	uxth	r3, r3
1a00472a:	3301      	adds	r3, #1
1a00472c:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a00472e:	029b      	lsls	r3, r3, #10
1a004730:	6023      	str	r3, [r4, #0]
1a004732:	e7ef      	b.n	1a004714 <FSSDC_FatFs_DiskIoCtl+0xd8>
			*(WORD*)buff = 512;
1a004734:	f44f 7300 	mov.w	r3, #512	; 0x200
1a004738:	800b      	strh	r3, [r1, #0]
		deselect();
1a00473a:	f7ff fd45 	bl	1a0041c8 <deselect>
			res = RES_OK;
1a00473e:	2400      	movs	r4, #0
1a004740:	e0e5      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if (CardType & CT_SD2) {                            /* SDC ver 2.00 */
1a004742:	4b77      	ldr	r3, [pc, #476]	; (1a004920 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a004744:	781b      	ldrb	r3, [r3, #0]
1a004746:	f013 0f04 	tst.w	r3, #4
1a00474a:	d021      	beq.n	1a004790 <FSSDC_FatFs_DiskIoCtl+0x154>
				if (send_cmd(ACMD13, 0) == 0)                   /* Read SD status */
1a00474c:	2100      	movs	r1, #0
1a00474e:	20cd      	movs	r0, #205	; 0xcd
1a004750:	f7ff fd58 	bl	1a004204 <send_cmd>
1a004754:	2800      	cmp	r0, #0
1a004756:	f040 80b6 	bne.w	1a0048c6 <FSSDC_FatFs_DiskIoCtl+0x28a>
					rcvr_spi();
1a00475a:	f7ff fd13 	bl	1a004184 <rcvr_spi>
					if (rcvr_datablock(csd, 16))                /* Read partial block */
1a00475e:	2110      	movs	r1, #16
1a004760:	4668      	mov	r0, sp
1a004762:	f7ff fdbf 	bl	1a0042e4 <rcvr_datablock>
1a004766:	2800      	cmp	r0, #0
1a004768:	f000 80b1 	beq.w	1a0048ce <FSSDC_FatFs_DiskIoCtl+0x292>
						for (n = 64 - 16; n; n--) 
1a00476c:	2530      	movs	r5, #48	; 0x30
1a00476e:	e003      	b.n	1a004778 <FSSDC_FatFs_DiskIoCtl+0x13c>
                            rcvr_spi();                         /* Purge trailing data */
1a004770:	f7ff fd08 	bl	1a004184 <rcvr_spi>
						for (n = 64 - 16; n; n--) 
1a004774:	3d01      	subs	r5, #1
1a004776:	b2ed      	uxtb	r5, r5
1a004778:	2d00      	cmp	r5, #0
1a00477a:	d1f9      	bne.n	1a004770 <FSSDC_FatFs_DiskIoCtl+0x134>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a00477c:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a004780:	091a      	lsrs	r2, r3, #4
1a004782:	2310      	movs	r3, #16
1a004784:	4093      	lsls	r3, r2
1a004786:	6023      	str	r3, [r4, #0]
		deselect();
1a004788:	f7ff fd1e 	bl	1a0041c8 <deselect>
						res = RES_OK;
1a00478c:	2400      	movs	r4, #0
1a00478e:	e0be      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
				if ((send_cmd(CMD9, 0) == 0) 
1a004790:	2100      	movs	r1, #0
1a004792:	2049      	movs	r0, #73	; 0x49
1a004794:	f7ff fd36 	bl	1a004204 <send_cmd>
1a004798:	2800      	cmp	r0, #0
1a00479a:	f040 80ac 	bne.w	1a0048f6 <FSSDC_FatFs_DiskIoCtl+0x2ba>
                        && rcvr_datablock(csd, 16)) 
1a00479e:	2110      	movs	r1, #16
1a0047a0:	4668      	mov	r0, sp
1a0047a2:	f7ff fd9f 	bl	1a0042e4 <rcvr_datablock>
1a0047a6:	2800      	cmp	r0, #0
1a0047a8:	f000 8089 	beq.w	1a0048be <FSSDC_FatFs_DiskIoCtl+0x282>
					if (CardType & CT_SD1)
1a0047ac:	4b5c      	ldr	r3, [pc, #368]	; (1a004920 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a0047ae:	781b      	ldrb	r3, [r3, #0]
1a0047b0:	f013 0f02 	tst.w	r3, #2
1a0047b4:	d013      	beq.n	1a0047de <FSSDC_FatFs_DiskIoCtl+0x1a2>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a0047b6:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0047ba:	005b      	lsls	r3, r3, #1
1a0047bc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
1a0047c0:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0047c4:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
1a0047c8:	3301      	adds	r3, #1
1a0047ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0047ce:	0992      	lsrs	r2, r2, #6
1a0047d0:	3a01      	subs	r2, #1
1a0047d2:	4093      	lsls	r3, r2
1a0047d4:	6023      	str	r3, [r4, #0]
		deselect();
1a0047d6:	f7ff fcf7 	bl	1a0041c8 <deselect>
					res = RES_OK;
1a0047da:	2400      	movs	r4, #0
1a0047dc:	e097      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a0047de:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0047e2:	f3c3 0284 	ubfx	r2, r3, #2, #5
1a0047e6:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a0047ea:	00cb      	lsls	r3, r1, #3
1a0047ec:	f003 0318 	and.w	r3, r3, #24
1a0047f0:	eb03 1351 	add.w	r3, r3, r1, lsr #5
1a0047f4:	3301      	adds	r3, #1
1a0047f6:	fb02 3303 	mla	r3, r2, r3, r3
1a0047fa:	6023      	str	r3, [r4, #0]
1a0047fc:	e7eb      	b.n	1a0047d6 <FSSDC_FatFs_DiskIoCtl+0x19a>
			*ptr = CardType;
1a0047fe:	4b48      	ldr	r3, [pc, #288]	; (1a004920 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a004800:	781b      	ldrb	r3, [r3, #0]
1a004802:	700b      	strb	r3, [r1, #0]
		deselect();
1a004804:	f7ff fce0 	bl	1a0041c8 <deselect>
			res = RES_OK;
1a004808:	2400      	movs	r4, #0
1a00480a:	e080      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a00480c:	2100      	movs	r1, #0
1a00480e:	2049      	movs	r0, #73	; 0x49
1a004810:	f7ff fcf8 	bl	1a004204 <send_cmd>
1a004814:	2800      	cmp	r0, #0
1a004816:	d14e      	bne.n	1a0048b6 <FSSDC_FatFs_DiskIoCtl+0x27a>
                    && rcvr_datablock(ptr, 16))
1a004818:	2110      	movs	r1, #16
1a00481a:	4620      	mov	r0, r4
1a00481c:	f7ff fd62 	bl	1a0042e4 <rcvr_datablock>
1a004820:	2800      	cmp	r0, #0
1a004822:	d144      	bne.n	1a0048ae <FSSDC_FatFs_DiskIoCtl+0x272>
		deselect();
1a004824:	f7ff fcd0 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a004828:	2401      	movs	r4, #1
1a00482a:	e06d      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a00482c:	2100      	movs	r1, #0
1a00482e:	204a      	movs	r0, #74	; 0x4a
1a004830:	f7ff fce8 	bl	1a004204 <send_cmd>
1a004834:	bbb8      	cbnz	r0, 1a0048a6 <FSSDC_FatFs_DiskIoCtl+0x26a>
                    && rcvr_datablock(ptr, 16))
1a004836:	2110      	movs	r1, #16
1a004838:	4620      	mov	r0, r4
1a00483a:	f7ff fd53 	bl	1a0042e4 <rcvr_datablock>
1a00483e:	bb70      	cbnz	r0, 1a00489e <FSSDC_FatFs_DiskIoCtl+0x262>
		deselect();
1a004840:	f7ff fcc2 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a004844:	2401      	movs	r4, #1
1a004846:	e05f      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
			if (send_cmd(CMD58, 0) == 0) 
1a004848:	2100      	movs	r1, #0
1a00484a:	207a      	movs	r0, #122	; 0x7a
1a00484c:	f7ff fcda 	bl	1a004204 <send_cmd>
1a004850:	bb08      	cbnz	r0, 1a004896 <FSSDC_FatFs_DiskIoCtl+0x25a>
				for (n = 4; n; n--) 
1a004852:	2504      	movs	r5, #4
1a004854:	e005      	b.n	1a004862 <FSSDC_FatFs_DiskIoCtl+0x226>
                    *ptr++ = rcvr_spi();
1a004856:	f7ff fc95 	bl	1a004184 <rcvr_spi>
1a00485a:	f804 0b01 	strb.w	r0, [r4], #1
				for (n = 4; n; n--) 
1a00485e:	3d01      	subs	r5, #1
1a004860:	b2ed      	uxtb	r5, r5
1a004862:	2d00      	cmp	r5, #0
1a004864:	d1f7      	bne.n	1a004856 <FSSDC_FatFs_DiskIoCtl+0x21a>
		deselect();
1a004866:	f7ff fcaf 	bl	1a0041c8 <deselect>
				res = RES_OK;
1a00486a:	2400      	movs	r4, #0
1a00486c:	e04f      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if (send_cmd(ACMD13, 0) == 0) 
1a00486e:	2100      	movs	r1, #0
1a004870:	20cd      	movs	r0, #205	; 0xcd
1a004872:	f7ff fcc7 	bl	1a004204 <send_cmd>
1a004876:	b950      	cbnz	r0, 1a00488e <FSSDC_FatFs_DiskIoCtl+0x252>
				rcvr_spi();
1a004878:	f7ff fc84 	bl	1a004184 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a00487c:	2140      	movs	r1, #64	; 0x40
1a00487e:	4620      	mov	r0, r4
1a004880:	f7ff fd30 	bl	1a0042e4 <rcvr_datablock>
1a004884:	b398      	cbz	r0, 1a0048ee <FSSDC_FatFs_DiskIoCtl+0x2b2>
		deselect();
1a004886:	f7ff fc9f 	bl	1a0041c8 <deselect>
					res = RES_OK;
1a00488a:	2400      	movs	r4, #0
1a00488c:	e03f      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
		deselect();
1a00488e:	f7ff fc9b 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a004892:	2401      	movs	r4, #1
1a004894:	e038      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a004896:	f7ff fc97 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a00489a:	2401      	movs	r4, #1
1a00489c:	e034      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a00489e:	f7ff fc93 	bl	1a0041c8 <deselect>
				res = RES_OK;
1a0048a2:	2400      	movs	r4, #0
1a0048a4:	e033      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
		deselect();
1a0048a6:	f7ff fc8f 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048aa:	2401      	movs	r4, #1
1a0048ac:	e02c      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048ae:	f7ff fc8b 	bl	1a0041c8 <deselect>
				res = RES_OK;
1a0048b2:	2400      	movs	r4, #0
1a0048b4:	e02b      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
		deselect();
1a0048b6:	f7ff fc87 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048ba:	2401      	movs	r4, #1
1a0048bc:	e024      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048be:	f7ff fc83 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048c2:	2401      	movs	r4, #1
1a0048c4:	e020      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048c6:	f7ff fc7f 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048ca:	2401      	movs	r4, #1
1a0048cc:	e01c      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048ce:	f7ff fc7b 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048d2:	2401      	movs	r4, #1
1a0048d4:	e018      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048d6:	f7ff fc77 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048da:	2401      	movs	r4, #1
1a0048dc:	e014      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048de:	f7ff fc73 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048e2:	2401      	movs	r4, #1
1a0048e4:	e010      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048e6:	f7ff fc6f 	bl	1a0041c8 <deselect>
			res = RES_PARERR;
1a0048ea:	2404      	movs	r4, #4
1a0048ec:	e00c      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048ee:	f7ff fc6b 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048f2:	2401      	movs	r4, #1
1a0048f4:	e008      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048f6:	f7ff fc67 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a0048fa:	2401      	movs	r4, #1
1a0048fc:	e004      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0048fe:	f7ff fc63 	bl	1a0041c8 <deselect>
	res = RES_ERROR;
1a004902:	2401      	movs	r4, #1
1a004904:	e000      	b.n	1a004908 <FSSDC_FatFs_DiskIoCtl+0x2cc>
			res = RES_PARERR;
1a004906:	2404      	movs	r4, #4
	}
    
    if (res != RES_OK)
    {
        Board_UARTPutSTR ("FSSDC: [IOCtl] Returning Error.\r\n");        
1a004908:	4806      	ldr	r0, [pc, #24]	; (1a004924 <FSSDC_FatFs_DiskIoCtl+0x2e8>)
1a00490a:	f000 fa2b 	bl	1a004d64 <Board_UARTPutSTR>
    }

	return res;
}
1a00490e:	4620      	mov	r0, r4
1a004910:	b005      	add	sp, #20
1a004912:	bd30      	pop	{r4, r5, pc}
			res = RES_OK;
1a004914:	2400      	movs	r4, #0
1a004916:	e7fa      	b.n	1a00490e <FSSDC_FatFs_DiskIoCtl+0x2d2>
1a004918:	10000009 	.word	0x10000009
1a00491c:	1a00e584 	.word	0x1a00e584
1a004920:	10003238 	.word	0x10003238
1a004924:	1a00e5ac 	.word	0x1a00e5ac

1a004928 <FSSDC_InitSPI>:
    WARNING: for card connectors without presence detection
    >>>> Only call this function when the card is inserted!
--------------------------------------------------------------------------------
*/
void FSSDC_InitSPI ()
{
1a004928:	b510      	push	{r4, lr}
        seems to work at mode 0 at the SPI mode. Thus the SPI mode 0 (CPHA=0, CPOL=0)
        is the proper setting to control MMC/SDC
        
        http://elm-chan.org/docs/mmc/mmc_e.html#spimode
    */
    Chip_SSP_Init       (LPC_SSP1);
1a00492a:	4c13      	ldr	r4, [pc, #76]	; (1a004978 <FSSDC_InitSPI+0x50>)
1a00492c:	4620      	mov	r0, r4
1a00492e:	f001 f871 	bl	1a005a14 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004932:	6863      	ldr	r3, [r4, #4]
1a004934:	f023 0304 	bic.w	r3, r3, #4
1a004938:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00493a:	6823      	ldr	r3, [r4, #0]
1a00493c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004940:	f043 0307 	orr.w	r3, r3, #7
1a004944:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode   (LPC_SSP1, SSP_MODE_MASTER);
    Chip_SSP_SetFormat  (LPC_SSP1, SSP_BITS_8, SSP_FRAMEFORMAT_SPI,
                         SSP_CLOCK_CPHA0_CPOL0);
    FCLK_SLOW           ();
1a004946:	4b0d      	ldr	r3, [pc, #52]	; (1a00497c <FSSDC_InitSPI+0x54>)
1a004948:	6819      	ldr	r1, [r3, #0]
1a00494a:	4620      	mov	r0, r4
1a00494c:	f001 f843 	bl	1a0059d6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a004950:	6863      	ldr	r3, [r4, #4]
1a004952:	f043 0302 	orr.w	r3, r3, #2
1a004956:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable     (LPC_SSP1);
    
    // PLEASE NOTE: muxing and direction of CS signal on FSSDC_CS_{PIN/PORT}
    //              must be configured beforehand!
    deselect ();    
1a004958:	f7ff fc36 	bl	1a0041c8 <deselect>
    
#ifndef FSSDC_SUPPORTS_HOT_INSERTION
    g_diskStats &= ~STA_NODISK;
1a00495c:	4a08      	ldr	r2, [pc, #32]	; (1a004980 <FSSDC_InitSPI+0x58>)
1a00495e:	7813      	ldrb	r3, [r2, #0]
1a004960:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
1a004964:	7013      	strb	r3, [r2, #0]
    Board_UARTPutSTR ("FSSDC: [InitSPI] New card status: Inserted.\r\n");
1a004966:	4807      	ldr	r0, [pc, #28]	; (1a004984 <FSSDC_InitSPI+0x5c>)
1a004968:	f000 f9fc 	bl	1a004d64 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_Inserted);
1a00496c:	2002      	movs	r0, #2
1a00496e:	f7ff fbcb 	bl	1a004108 <newCardStatus>
    FSSDC_FatFs_DiskInitialize ();
1a004972:	f7ff fced 	bl	1a004350 <FSSDC_FatFs_DiskInitialize>
#endif
}
1a004976:	bd10      	pop	{r4, pc}
1a004978:	400c5000 	.word	0x400c5000
1a00497c:	10000010 	.word	0x10000010
1a004980:	10000009 	.word	0x10000009
1a004984:	1a00e64c 	.word	0x1a00e64c

1a004988 <FSSDC_GetSlowClock>:


uint32_t FSSDC_GetSlowClock ()
{
    return g_spiSlowClock;
1a004988:	4b01      	ldr	r3, [pc, #4]	; (1a004990 <FSSDC_GetSlowClock+0x8>)
1a00498a:	6818      	ldr	r0, [r3, #0]
}
1a00498c:	4770      	bx	lr
1a00498e:	bf00      	nop
1a004990:	10000010 	.word	0x10000010

1a004994 <FSSDC_GetFastClock>:


uint32_t FSSDC_GetFastClock ()
{
    return g_spiFastClock;
1a004994:	4b01      	ldr	r3, [pc, #4]	; (1a00499c <FSSDC_GetFastClock+0x8>)
1a004996:	6818      	ldr	r0, [r3, #0]
}
1a004998:	4770      	bx	lr
1a00499a:	bf00      	nop
1a00499c:	1000000c 	.word	0x1000000c

1a0049a0 <FSSDC_SetStatusUpdateCallback>:
}


void FSSDC_SetStatusUpdateCallback (FSSDC_StatusUpdateCallback_Func func)
{
    g_statusUpdateCallback = func;
1a0049a0:	4b01      	ldr	r3, [pc, #4]	; (1a0049a8 <FSSDC_SetStatusUpdateCallback+0x8>)
1a0049a2:	6018      	str	r0, [r3, #0]
}
1a0049a4:	4770      	bx	lr
1a0049a6:	bf00      	nop
1a0049a8:	1000323c 	.word	0x1000323c

1a0049ac <FSSDC_Update>:
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */
void FSSDC_Update ()
{   
    if (Timer1)             /* 100Hz decrement timer */
1a0049ac:	4b08      	ldr	r3, [pc, #32]	; (1a0049d0 <FSSDC_Update+0x24>)
1a0049ae:	781b      	ldrb	r3, [r3, #0]
1a0049b0:	b123      	cbz	r3, 1a0049bc <FSSDC_Update+0x10>
    {
        -- Timer1;
1a0049b2:	4a07      	ldr	r2, [pc, #28]	; (1a0049d0 <FSSDC_Update+0x24>)
1a0049b4:	7813      	ldrb	r3, [r2, #0]
1a0049b6:	3b01      	subs	r3, #1
1a0049b8:	b2db      	uxtb	r3, r3
1a0049ba:	7013      	strb	r3, [r2, #0]
    }
    
    if (Timer2)
1a0049bc:	4b05      	ldr	r3, [pc, #20]	; (1a0049d4 <FSSDC_Update+0x28>)
1a0049be:	781b      	ldrb	r3, [r3, #0]
1a0049c0:	b123      	cbz	r3, 1a0049cc <FSSDC_Update+0x20>
    {
        -- Timer2;
1a0049c2:	4a04      	ldr	r2, [pc, #16]	; (1a0049d4 <FSSDC_Update+0x28>)
1a0049c4:	7813      	ldrb	r3, [r2, #0]
1a0049c6:	3b01      	subs	r3, #1
1a0049c8:	b2db      	uxtb	r3, r3
1a0049ca:	7013      	strb	r3, [r2, #0]
			s &= ~STA_NODISK;

		g_diskStats = s;
	}
    #endif
}
1a0049cc:	4770      	bx	lr
1a0049ce:	bf00      	nop
1a0049d0:	10003239 	.word	0x10003239
1a0049d4:	1000323a 	.word	0x1000323a

1a0049d8 <get_fattime>:


// Definitions required by FatFs according to ffconf.h
#if !FF_FS_READONLY && !FF_FS_NORTC
DWORD get_fattime (void)
{
1a0049d8:	b500      	push	{lr}
1a0049da:	b089      	sub	sp, #36	; 0x24
	/* Get local time */
    RTC_TIME_T rtcTime;
	Chip_RTC_GetFullTime (LPC_RTC, &rtcTime);
1a0049dc:	4669      	mov	r1, sp
1a0049de:	480c      	ldr	r0, [pc, #48]	; (1a004a10 <get_fattime+0x38>)
1a0049e0:	f000 fed6 	bl	1a005790 <Chip_RTC_GetFullTime>

	/* Pack date and time into a DWORD variable */
	return (  (DWORD) (rtcTime.time[RTC_TIMETYPE_YEAR] - 1980)  << 25)
1a0049e4:	9b07      	ldr	r3, [sp, #28]
1a0049e6:	f2a3 70bc 	subw	r0, r3, #1980	; 0x7bc
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MONTH]         << 21)
1a0049ea:	9b06      	ldr	r3, [sp, #24]
1a0049ec:	055b      	lsls	r3, r3, #21
1a0049ee:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_DAYOFMONTH]    << 16)
1a0049f2:	9803      	ldr	r0, [sp, #12]
1a0049f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_HOUR]          << 11)
1a0049f8:	9802      	ldr	r0, [sp, #8]
1a0049fa:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MINUTE]        << 5)
1a0049fe:	9801      	ldr	r0, [sp, #4]
1a004a00:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_SECOND]        >> 1);
}
1a004a04:	9800      	ldr	r0, [sp, #0]
1a004a06:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
1a004a0a:	b009      	add	sp, #36	; 0x24
1a004a0c:	f85d fb04 	ldr.w	pc, [sp], #4
1a004a10:	40046000 	.word	0x40046000

1a004a14 <disk_timerproc>:
};
#endif

// Must be called once every 10 ms ideally from PendSV, not SysTickHandler!
void disk_timerproc (void)
{
1a004a14:	b508      	push	{r3, lr}
    FSSDC_Update ();
1a004a16:	f7ff ffc9 	bl	1a0049ac <FSSDC_Update>
    #ifdef LPCUSBLIB_HOST_MASS_STORAGE
    FSUSB_Update ();
    #endif
}
1a004a1a:	bd08      	pop	{r3, pc}

1a004a1c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{    
    switch (pdrv)
1a004a1c:	b108      	cbz	r0, 1a004a22 <disk_status+0x6>
            #else
            break;
            #endif
    }

    return STA_NOINIT;
1a004a1e:	2001      	movs	r0, #1
}
1a004a20:	4770      	bx	lr
{    
1a004a22:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskStatus ();
1a004a24:	f7ff fc8e 	bl	1a004344 <FSSDC_FatFs_DiskStatus>
}
1a004a28:	bd08      	pop	{r3, pc}

1a004a2a <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
1a004a2a:	b108      	cbz	r0, 1a004a30 <disk_initialize+0x6>
            #else
            break;
            #endif
    }
    
    return STA_NOINIT;
1a004a2c:	2001      	movs	r0, #1
}
1a004a2e:	4770      	bx	lr
{
1a004a30:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskInitialize ();
1a004a32:	f7ff fc8d 	bl	1a004350 <FSSDC_FatFs_DiskInitialize>
}
1a004a36:	bd08      	pop	{r3, pc}

1a004a38 <disk_read>:
	BYTE *buff,         /* Data buffer to store read data */
	DWORD sector,       /* Start sector in LBA */
	UINT count          /* Number of sectors to read */
)
{
	if (!buff || !count) 
1a004a38:	b151      	cbz	r1, 1a004a50 <disk_read+0x18>
{
1a004a3a:	b510      	push	{r4, lr}
	if (!buff || !count) 
1a004a3c:	b153      	cbz	r3, 1a004a54 <disk_read+0x1c>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a004a3e:	b108      	cbz	r0, 1a004a44 <disk_read+0xc>
            #else
            break;
            #endif
    }
    
    return RES_PARERR;
1a004a40:	2004      	movs	r0, #4
}
1a004a42:	bd10      	pop	{r4, pc}
1a004a44:	4608      	mov	r0, r1
1a004a46:	4611      	mov	r1, r2
            return FSSDC_FatFs_DiskRead (buff, sector, count);
1a004a48:	461a      	mov	r2, r3
1a004a4a:	f7ff fd5b 	bl	1a004504 <FSSDC_FatFs_DiskRead>
1a004a4e:	e7f8      	b.n	1a004a42 <disk_read+0xa>
		return RES_PARERR;
1a004a50:	2004      	movs	r0, #4
}
1a004a52:	4770      	bx	lr
		return RES_PARERR;
1a004a54:	2004      	movs	r0, #4
1a004a56:	e7f4      	b.n	1a004a42 <disk_read+0xa>

1a004a58 <disk_write>:
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
	if (!buff || !count)
1a004a58:	b151      	cbz	r1, 1a004a70 <disk_write+0x18>
{
1a004a5a:	b510      	push	{r4, lr}
	if (!buff || !count)
1a004a5c:	b153      	cbz	r3, 1a004a74 <disk_write+0x1c>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a004a5e:	b108      	cbz	r0, 1a004a64 <disk_write+0xc>
            #else
            break;
            #endif
    }
    
	return RES_PARERR;
1a004a60:	2004      	movs	r0, #4
}
1a004a62:	bd10      	pop	{r4, pc}
1a004a64:	4608      	mov	r0, r1
1a004a66:	4611      	mov	r1, r2
            return FSSDC_FatFs_DiskWrite (buff, sector, count);
1a004a68:	461a      	mov	r2, r3
1a004a6a:	f7ff fd8d 	bl	1a004588 <FSSDC_FatFs_DiskWrite>
1a004a6e:	e7f8      	b.n	1a004a62 <disk_write+0xa>
		return RES_PARERR;
1a004a70:	2004      	movs	r0, #4
}
1a004a72:	4770      	bx	lr
		return RES_PARERR;
1a004a74:	2004      	movs	r0, #4
1a004a76:	e7f4      	b.n	1a004a62 <disk_write+0xa>

1a004a78 <disk_ioctl>:
	BYTE pdrv,          /* Physical drive nmuber (0..) */
	BYTE cmd,           /* Control code */
	void *buff          /* Buffer to send/receive control data */
)
{   
    switch (pdrv)
1a004a78:	b108      	cbz	r0, 1a004a7e <disk_ioctl+0x6>
            #else
            break;
            #endif
    }

	return RES_PARERR;
1a004a7a:	2004      	movs	r0, #4
}
1a004a7c:	4770      	bx	lr
{   
1a004a7e:	b508      	push	{r3, lr}
1a004a80:	4608      	mov	r0, r1
            return FSSDC_FatFs_DiskIoCtl (cmd, buff);
1a004a82:	4611      	mov	r1, r2
1a004a84:	f7ff fdda 	bl	1a00463c <FSSDC_FatFs_DiskIoCtl>
}
1a004a88:	bd08      	pop	{r3, pc}
1a004a8a:	Address 0x000000001a004a8a is out of bounds.


1a004a8c <sdcardInit>:
}


bool sdcardInit( sdcard_t *u )
{
    if( !u || g_sdcard )
1a004a8c:	b1a0      	cbz	r0, 1a004ab8 <sdcardInit+0x2c>
{
1a004a8e:	b510      	push	{r4, lr}
1a004a90:	4604      	mov	r4, r0
    if( !u || g_sdcard )
1a004a92:	4a0a      	ldr	r2, [pc, #40]	; (1a004abc <sdcardInit+0x30>)
1a004a94:	6812      	ldr	r2, [r2, #0]
1a004a96:	b10a      	cbz	r2, 1a004a9c <sdcardInit+0x10>
    {
        return false;
1a004a98:	2000      	movs	r0, #0
    g_sdcard = u;
    
    FSSDC_SetStatusUpdateCallback( statusUpdateCallback );
    FSSDC_InitSPI( );
    return true;
}
1a004a9a:	bd10      	pop	{r4, pc}
    memset( u, 0, sizeof( sdcard_t ));
1a004a9c:	f44f 720f 	mov.w	r2, #572	; 0x23c
1a004aa0:	2100      	movs	r1, #0
1a004aa2:	f003 f831 	bl	1a007b08 <memset>
    g_sdcard = u;
1a004aa6:	4b05      	ldr	r3, [pc, #20]	; (1a004abc <sdcardInit+0x30>)
1a004aa8:	601c      	str	r4, [r3, #0]
    FSSDC_SetStatusUpdateCallback( statusUpdateCallback );
1a004aaa:	4805      	ldr	r0, [pc, #20]	; (1a004ac0 <sdcardInit+0x34>)
1a004aac:	f7ff ff78 	bl	1a0049a0 <FSSDC_SetStatusUpdateCallback>
    FSSDC_InitSPI( );
1a004ab0:	f7ff ff3a 	bl	1a004928 <FSSDC_InitSPI>
    return true;
1a004ab4:	2001      	movs	r0, #1
1a004ab6:	e7f0      	b.n	1a004a9a <sdcardInit+0xe>
        return false;
1a004ab8:	2000      	movs	r0, #0
}
1a004aba:	4770      	bx	lr
1a004abc:	10003240 	.word	0x10003240
1a004ac0:	1a004b4d 	.word	0x1a004b4d

1a004ac4 <sdcardStatus>:
}


sdcardStatus_t sdcardStatus( void )
{
    if( !g_sdcard )
1a004ac4:	4b03      	ldr	r3, [pc, #12]	; (1a004ad4 <sdcardStatus+0x10>)
1a004ac6:	681b      	ldr	r3, [r3, #0]
1a004ac8:	b113      	cbz	r3, 1a004ad0 <sdcardStatus+0xc>
    {
        return SDCARD_Status_Error;
    }
    
    return g_sdcard->status;
1a004aca:	f893 0239 	ldrb.w	r0, [r3, #569]	; 0x239
1a004ace:	4770      	bx	lr
        return SDCARD_Status_Error;
1a004ad0:	2006      	movs	r0, #6
}
1a004ad2:	4770      	bx	lr
1a004ad4:	10003240 	.word	0x10003240

1a004ad8 <sdcardDriveName>:


const char *sdcardDriveName( void )
{
    return g_sdcardDriveName;
}
1a004ad8:	4800      	ldr	r0, [pc, #0]	; (1a004adc <sdcardDriveName+0x4>)
1a004ada:	4770      	bx	lr
1a004adc:	1a00e67c 	.word	0x1a00e67c

1a004ae0 <sdcardMount>:


bool sdcardMount( bool mount )
{
1a004ae0:	b538      	push	{r3, r4, r5, lr}
    if( !g_sdcard )
1a004ae2:	4b18      	ldr	r3, [pc, #96]	; (1a004b44 <sdcardMount+0x64>)
1a004ae4:	681d      	ldr	r5, [r3, #0]
1a004ae6:	b335      	cbz	r5, 1a004b36 <sdcardMount+0x56>
    {
        return false;
    }
    
    if( mount && g_sdcard->status != SDCARD_Status_ReadyUnmounted )
1a004ae8:	b118      	cbz	r0, 1a004af2 <sdcardMount+0x12>
1a004aea:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
1a004aee:	2b04      	cmp	r3, #4
1a004af0:	d123      	bne.n	1a004b3a <sdcardMount+0x5a>
    {
        return false;
    }
    
    if(( g_sdcard->result = f_mount( mount? &g_sdcard->fatFs : NULL, 
1a004af2:	b108      	cbz	r0, 1a004af8 <sdcardMount+0x18>
1a004af4:	462b      	mov	r3, r5
1a004af6:	e000      	b.n	1a004afa <sdcardMount+0x1a>
1a004af8:	2300      	movs	r3, #0
1a004afa:	4604      	mov	r4, r0
1a004afc:	2201      	movs	r2, #1
1a004afe:	4912      	ldr	r1, [pc, #72]	; (1a004b48 <sdcardMount+0x68>)
1a004b00:	4618      	mov	r0, r3
1a004b02:	f7fe f8ef 	bl	1a002ce4 <f_mount>
1a004b06:	f885 0238 	strb.w	r0, [r5, #568]	; 0x238
1a004b0a:	b9c0      	cbnz	r0, 1a004b3e <sdcardMount+0x5e>
                                    g_sdcardDriveName, 1 )) != FR_OK )
    {
        return false;
    }
    
    if( mount )
1a004b0c:	b134      	cbz	r4, 1a004b1c <sdcardMount+0x3c>
    {
        g_sdcard->status = SDCARD_Status_ReadyMounted;
1a004b0e:	4b0d      	ldr	r3, [pc, #52]	; (1a004b44 <sdcardMount+0x64>)
1a004b10:	681b      	ldr	r3, [r3, #0]
1a004b12:	2205      	movs	r2, #5
1a004b14:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
    else if( g_sdcard->status == SDCARD_Status_ReadyMounted )
    {
        g_sdcard->status = SDCARD_Status_ReadyUnmounted;
    }
    
    return true;
1a004b18:	4620      	mov	r0, r4
1a004b1a:	e011      	b.n	1a004b40 <sdcardMount+0x60>
    else if( g_sdcard->status == SDCARD_Status_ReadyMounted )
1a004b1c:	4b09      	ldr	r3, [pc, #36]	; (1a004b44 <sdcardMount+0x64>)
1a004b1e:	681b      	ldr	r3, [r3, #0]
1a004b20:	f893 2239 	ldrb.w	r2, [r3, #569]	; 0x239
1a004b24:	2a05      	cmp	r2, #5
1a004b26:	d001      	beq.n	1a004b2c <sdcardMount+0x4c>
    return true;
1a004b28:	2001      	movs	r0, #1
1a004b2a:	e009      	b.n	1a004b40 <sdcardMount+0x60>
        g_sdcard->status = SDCARD_Status_ReadyUnmounted;
1a004b2c:	2204      	movs	r2, #4
1a004b2e:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
    return true;
1a004b32:	2001      	movs	r0, #1
1a004b34:	e004      	b.n	1a004b40 <sdcardMount+0x60>
        return false;
1a004b36:	2000      	movs	r0, #0
1a004b38:	e002      	b.n	1a004b40 <sdcardMount+0x60>
        return false;
1a004b3a:	2000      	movs	r0, #0
1a004b3c:	e000      	b.n	1a004b40 <sdcardMount+0x60>
        return false;
1a004b3e:	2000      	movs	r0, #0
}
1a004b40:	bd38      	pop	{r3, r4, r5, pc}
1a004b42:	bf00      	nop
1a004b44:	10003240 	.word	0x10003240
1a004b48:	1a00e67c 	.word	0x1a00e67c

1a004b4c <statusUpdateCallback>:
{    
1a004b4c:	b508      	push	{r3, lr}
    switch( cardStatus )
1a004b4e:	2805      	cmp	r0, #5
1a004b50:	d80b      	bhi.n	1a004b6a <statusUpdateCallback+0x1e>
1a004b52:	e8df f000 	tbb	[pc, r0]
1a004b56:	032b      	.short	0x032b
1a004b58:	1d17110b 	.word	0x1d17110b
            g_sdcard->status = SDCARD_Status_Removed;
1a004b5c:	4b16      	ldr	r3, [pc, #88]	; (1a004bb8 <statusUpdateCallback+0x6c>)
1a004b5e:	681b      	ldr	r3, [r3, #0]
1a004b60:	2000      	movs	r0, #0
1a004b62:	f883 0239 	strb.w	r0, [r3, #569]	; 0x239
            sdcardMount( false );
1a004b66:	f7ff ffbb 	bl	1a004ae0 <sdcardMount>
}
1a004b6a:	bd08      	pop	{r3, pc}
            g_sdcard->status = SDCARD_Status_Inserted;
1a004b6c:	4b12      	ldr	r3, [pc, #72]	; (1a004bb8 <statusUpdateCallback+0x6c>)
1a004b6e:	681b      	ldr	r3, [r3, #0]
1a004b70:	2201      	movs	r2, #1
1a004b72:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
            break;
1a004b76:	e7f8      	b.n	1a004b6a <statusUpdateCallback+0x1e>
            g_sdcard->status = SDCARD_Status_NativeMode;
1a004b78:	4b0f      	ldr	r3, [pc, #60]	; (1a004bb8 <statusUpdateCallback+0x6c>)
1a004b7a:	681b      	ldr	r3, [r3, #0]
1a004b7c:	2202      	movs	r2, #2
1a004b7e:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
            break;
1a004b82:	e7f2      	b.n	1a004b6a <statusUpdateCallback+0x1e>
            g_sdcard->status = SDCARD_Status_Initializing;
1a004b84:	4b0c      	ldr	r3, [pc, #48]	; (1a004bb8 <statusUpdateCallback+0x6c>)
1a004b86:	681b      	ldr	r3, [r3, #0]
1a004b88:	2203      	movs	r2, #3
1a004b8a:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
            break;
1a004b8e:	e7ec      	b.n	1a004b6a <statusUpdateCallback+0x1e>
            g_sdcard->status = SDCARD_Status_ReadyUnmounted;
1a004b90:	4b09      	ldr	r3, [pc, #36]	; (1a004bb8 <statusUpdateCallback+0x6c>)
1a004b92:	681b      	ldr	r3, [r3, #0]
1a004b94:	2204      	movs	r2, #4
1a004b96:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
            if (!sdcardMount( true ))
1a004b9a:	2001      	movs	r0, #1
1a004b9c:	f7ff ffa0 	bl	1a004ae0 <sdcardMount>
1a004ba0:	2800      	cmp	r0, #0
1a004ba2:	d1e2      	bne.n	1a004b6a <statusUpdateCallback+0x1e>
                Board_UARTPutSTR ("sapi_sdcard: Automount failed!\r\n");
1a004ba4:	4805      	ldr	r0, [pc, #20]	; (1a004bbc <statusUpdateCallback+0x70>)
1a004ba6:	f000 f8dd 	bl	1a004d64 <Board_UARTPutSTR>
1a004baa:	e7de      	b.n	1a004b6a <statusUpdateCallback+0x1e>
            g_sdcard->status = SDCARD_Status_Error;
1a004bac:	4b02      	ldr	r3, [pc, #8]	; (1a004bb8 <statusUpdateCallback+0x6c>)
1a004bae:	681b      	ldr	r3, [r3, #0]
1a004bb0:	2206      	movs	r2, #6
1a004bb2:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
}
1a004bb6:	e7d8      	b.n	1a004b6a <statusUpdateCallback+0x1e>
1a004bb8:	10003240 	.word	0x10003240
1a004bbc:	1a00e684 	.word	0x1a00e684

1a004bc0 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a004bc0:	2200      	movs	r2, #0
1a004bc2:	2a05      	cmp	r2, #5
1a004bc4:	d819      	bhi.n	1a004bfa <Board_LED_Init+0x3a>
{
1a004bc6:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a004bc8:	490c      	ldr	r1, [pc, #48]	; (1a004bfc <Board_LED_Init+0x3c>)
1a004bca:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a004bce:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a004bd2:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a004bd4:	4b0a      	ldr	r3, [pc, #40]	; (1a004c00 <Board_LED_Init+0x40>)
1a004bd6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a004bda:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a004bde:	2001      	movs	r0, #1
1a004be0:	40a0      	lsls	r0, r4
1a004be2:	4301      	orrs	r1, r0
1a004be4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a004be8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a004bec:	2100      	movs	r1, #0
1a004bee:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a004bf0:	3201      	adds	r2, #1
1a004bf2:	2a05      	cmp	r2, #5
1a004bf4:	d9e8      	bls.n	1a004bc8 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a004bf6:	bc70      	pop	{r4, r5, r6}
1a004bf8:	4770      	bx	lr
1a004bfa:	4770      	bx	lr
1a004bfc:	1a00e6b4 	.word	0x1a00e6b4
1a004c00:	400f4000 	.word	0x400f4000

1a004c04 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a004c04:	2300      	movs	r3, #0
1a004c06:	2b03      	cmp	r3, #3
1a004c08:	d816      	bhi.n	1a004c38 <Board_TEC_Init+0x34>
{
1a004c0a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a004c0c:	490b      	ldr	r1, [pc, #44]	; (1a004c3c <Board_TEC_Init+0x38>)
1a004c0e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a004c12:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a004c16:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a004c18:	4c09      	ldr	r4, [pc, #36]	; (1a004c40 <Board_TEC_Init+0x3c>)
1a004c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004c1e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a004c22:	2001      	movs	r0, #1
1a004c24:	40a8      	lsls	r0, r5
1a004c26:	ea21 0100 	bic.w	r1, r1, r0
1a004c2a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a004c2e:	3301      	adds	r3, #1
1a004c30:	2b03      	cmp	r3, #3
1a004c32:	d9eb      	bls.n	1a004c0c <Board_TEC_Init+0x8>
   }
}
1a004c34:	bc30      	pop	{r4, r5}
1a004c36:	4770      	bx	lr
1a004c38:	4770      	bx	lr
1a004c3a:	bf00      	nop
1a004c3c:	1a00e6ac 	.word	0x1a00e6ac
1a004c40:	400f4000 	.word	0x400f4000

1a004c44 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a004c44:	2300      	movs	r3, #0
1a004c46:	2b08      	cmp	r3, #8
1a004c48:	d816      	bhi.n	1a004c78 <Board_GPIO_Init+0x34>
{
1a004c4a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a004c4c:	490b      	ldr	r1, [pc, #44]	; (1a004c7c <Board_GPIO_Init+0x38>)
1a004c4e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a004c52:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a004c56:	784d      	ldrb	r5, [r1, #1]
1a004c58:	4c09      	ldr	r4, [pc, #36]	; (1a004c80 <Board_GPIO_Init+0x3c>)
1a004c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004c5e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a004c62:	2001      	movs	r0, #1
1a004c64:	40a8      	lsls	r0, r5
1a004c66:	ea21 0100 	bic.w	r1, r1, r0
1a004c6a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a004c6e:	3301      	adds	r3, #1
1a004c70:	2b08      	cmp	r3, #8
1a004c72:	d9eb      	bls.n	1a004c4c <Board_GPIO_Init+0x8>
   }
}
1a004c74:	bc30      	pop	{r4, r5}
1a004c76:	4770      	bx	lr
1a004c78:	4770      	bx	lr
1a004c7a:	bf00      	nop
1a004c7c:	1a00e6c0 	.word	0x1a00e6c0
1a004c80:	400f4000 	.word	0x400f4000

1a004c84 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a004c84:	b510      	push	{r4, lr}
1a004c86:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a004c88:	4c08      	ldr	r4, [pc, #32]	; (1a004cac <Board_ADC_Init+0x28>)
1a004c8a:	4669      	mov	r1, sp
1a004c8c:	4620      	mov	r0, r4
1a004c8e:	f000 f9c3 	bl	1a005018 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a004c92:	4a07      	ldr	r2, [pc, #28]	; (1a004cb0 <Board_ADC_Init+0x2c>)
1a004c94:	4669      	mov	r1, sp
1a004c96:	4620      	mov	r0, r4
1a004c98:	f000 f9de 	bl	1a005058 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a004c9c:	2200      	movs	r2, #0
1a004c9e:	4669      	mov	r1, sp
1a004ca0:	4620      	mov	r0, r4
1a004ca2:	f000 f9f2 	bl	1a00508a <Chip_ADC_SetResolution>
}
1a004ca6:	b002      	add	sp, #8
1a004ca8:	bd10      	pop	{r4, pc}
1a004caa:	bf00      	nop
1a004cac:	400e3000 	.word	0x400e3000
1a004cb0:	00061a80 	.word	0x00061a80

1a004cb4 <Board_SPI_Init>:
{
1a004cb4:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a004cb6:	4c0b      	ldr	r4, [pc, #44]	; (1a004ce4 <Board_SPI_Init+0x30>)
1a004cb8:	4620      	mov	r0, r4
1a004cba:	f000 feab 	bl	1a005a14 <Chip_SSP_Init>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004cbe:	6863      	ldr	r3, [r4, #4]
1a004cc0:	f023 0304 	bic.w	r3, r3, #4
1a004cc4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004cc6:	6823      	ldr	r3, [r4, #0]
1a004cc8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004ccc:	f043 0307 	orr.w	r3, r3, #7
1a004cd0:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a004cd2:	4905      	ldr	r1, [pc, #20]	; (1a004ce8 <Board_SPI_Init+0x34>)
1a004cd4:	4620      	mov	r0, r4
1a004cd6:	f000 fe7e 	bl	1a0059d6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a004cda:	6863      	ldr	r3, [r4, #4]
1a004cdc:	f043 0302 	orr.w	r3, r3, #2
1a004ce0:	6063      	str	r3, [r4, #4]
}
1a004ce2:	bd10      	pop	{r4, pc}
1a004ce4:	400c5000 	.word	0x400c5000
1a004ce8:	000186a0 	.word	0x000186a0

1a004cec <Board_I2C_Init>:
{
1a004cec:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a004cee:	2000      	movs	r0, #0
1a004cf0:	f000 fd76 	bl	1a0057e0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a004cf4:	4b04      	ldr	r3, [pc, #16]	; (1a004d08 <Board_I2C_Init+0x1c>)
1a004cf6:	f640 0208 	movw	r2, #2056	; 0x808
1a004cfa:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a004cfe:	4903      	ldr	r1, [pc, #12]	; (1a004d0c <Board_I2C_Init+0x20>)
1a004d00:	2000      	movs	r0, #0
1a004d02:	f000 fd7f 	bl	1a005804 <Chip_I2C_SetClockRate>
}
1a004d06:	bd08      	pop	{r3, pc}
1a004d08:	40086000 	.word	0x40086000
1a004d0c:	000f4240 	.word	0x000f4240

1a004d10 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a004d10:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a004d12:	4c07      	ldr	r4, [pc, #28]	; (1a004d30 <Board_Debug_Init+0x20>)
1a004d14:	4620      	mov	r0, r4
1a004d16:	f000 f8c3 	bl	1a004ea0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a004d1a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a004d1e:	4620      	mov	r0, r4
1a004d20:	f000 f8e8 	bl	1a004ef4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a004d24:	2303      	movs	r3, #3
1a004d26:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a004d28:	2301      	movs	r3, #1
1a004d2a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a004d2c:	bd10      	pop	{r4, pc}
1a004d2e:	bf00      	nop
1a004d30:	400c1000 	.word	0x400c1000

1a004d34 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a004d34:	4b03      	ldr	r3, [pc, #12]	; (1a004d44 <Board_UARTPutChar+0x10>)
1a004d36:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a004d38:	f013 0f20 	tst.w	r3, #32
1a004d3c:	d0fa      	beq.n	1a004d34 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a004d3e:	4b01      	ldr	r3, [pc, #4]	; (1a004d44 <Board_UARTPutChar+0x10>)
1a004d40:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a004d42:	4770      	bx	lr
1a004d44:	400c1000 	.word	0x400c1000

1a004d48 <Board_UARTGetChar>:
	return pUART->LSR;
1a004d48:	4b05      	ldr	r3, [pc, #20]	; (1a004d60 <Board_UARTGetChar+0x18>)
1a004d4a:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a004d4c:	f013 0f01 	tst.w	r3, #1
1a004d50:	d003      	beq.n	1a004d5a <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004d52:	4b03      	ldr	r3, [pc, #12]	; (1a004d60 <Board_UARTGetChar+0x18>)
1a004d54:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a004d56:	b2c0      	uxtb	r0, r0
1a004d58:	4770      	bx	lr
   }
   return EOF;
1a004d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a004d5e:	4770      	bx	lr
1a004d60:	400c1000 	.word	0x400c1000

1a004d64 <Board_UARTPutSTR>:


void Board_UARTPutSTR(const char *str)
{
1a004d64:	b510      	push	{r4, lr}
1a004d66:	4604      	mov	r4, r0
   while (*str != '\0') {
1a004d68:	7820      	ldrb	r0, [r4, #0]
1a004d6a:	b118      	cbz	r0, 1a004d74 <Board_UARTPutSTR+0x10>
      Board_UARTPutChar(*str++);
1a004d6c:	3401      	adds	r4, #1
1a004d6e:	f7ff ffe1 	bl	1a004d34 <Board_UARTPutChar>
1a004d72:	e7f9      	b.n	1a004d68 <Board_UARTPutSTR+0x4>
   }
}
1a004d74:	bd10      	pop	{r4, pc}
1a004d76:	Address 0x000000001a004d76 is out of bounds.


1a004d78 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a004d78:	b508      	push	{r3, lr}
   DEBUGINIT();
1a004d7a:	f7ff ffc9 	bl	1a004d10 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a004d7e:	4809      	ldr	r0, [pc, #36]	; (1a004da4 <Board_Init+0x2c>)
1a004d80:	f000 fd1c 	bl	1a0057bc <Chip_GPIO_Init>

   Board_GPIO_Init();
1a004d84:	f7ff ff5e 	bl	1a004c44 <Board_GPIO_Init>
   Board_ADC_Init();
1a004d88:	f7ff ff7c 	bl	1a004c84 <Board_ADC_Init>
   Board_SPI_Init();
1a004d8c:	f7ff ff92 	bl	1a004cb4 <Board_SPI_Init>
   Board_I2C_Init();
1a004d90:	f7ff ffac 	bl	1a004cec <Board_I2C_Init>

   Board_LED_Init();
1a004d94:	f7ff ff14 	bl	1a004bc0 <Board_LED_Init>
   Board_TEC_Init();
1a004d98:	f7ff ff34 	bl	1a004c04 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a004d9c:	f000 f97c 	bl	1a005098 <SystemCoreClockUpdate>
}
1a004da0:	bd08      	pop	{r3, pc}
1a004da2:	bf00      	nop
1a004da4:	400f4000 	.word	0x400f4000

1a004da8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a004da8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a004daa:	b2c0      	uxtb	r0, r0
1a004dac:	f7ff ffc2 	bl	1a004d34 <Board_UARTPutChar>
}
1a004db0:	bd08      	pop	{r3, pc}

1a004db2 <__stdio_getchar>:

int __stdio_getchar()
{
1a004db2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a004db4:	f7ff ffc8 	bl	1a004d48 <Board_UARTGetChar>
}
1a004db8:	bd08      	pop	{r3, pc}

1a004dba <__stdio_init>:

void __stdio_init()
{
1a004dba:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a004dbc:	f7ff ffa8 	bl	1a004d10 <Board_Debug_Init>
1a004dc0:	bd08      	pop	{r3, pc}
1a004dc2:	Address 0x000000001a004dc2 is out of bounds.


1a004dc4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a004dc4:	2300      	movs	r3, #0
1a004dc6:	2b1c      	cmp	r3, #28
1a004dc8:	d812      	bhi.n	1a004df0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a004dca:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a004dcc:	4a09      	ldr	r2, [pc, #36]	; (1a004df4 <Board_SetupMuxing+0x30>)
1a004dce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a004dd2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a004dd6:	784a      	ldrb	r2, [r1, #1]
1a004dd8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004dda:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a004dde:	4906      	ldr	r1, [pc, #24]	; (1a004df8 <Board_SetupMuxing+0x34>)
1a004de0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a004de4:	3301      	adds	r3, #1
1a004de6:	2b1c      	cmp	r3, #28
1a004de8:	d9f0      	bls.n	1a004dcc <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a004dea:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004dee:	4770      	bx	lr
1a004df0:	4770      	bx	lr
1a004df2:	bf00      	nop
1a004df4:	1a00e6dc 	.word	0x1a00e6dc
1a004df8:	40086000 	.word	0x40086000

1a004dfc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a004dfc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a004dfe:	4a17      	ldr	r2, [pc, #92]	; (1a004e5c <Board_SetupClocking+0x60>)
1a004e00:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a004e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a004e08:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a004e0c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a004e10:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a004e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a004e18:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a004e1c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a004e20:	2201      	movs	r2, #1
1a004e22:	490f      	ldr	r1, [pc, #60]	; (1a004e60 <Board_SetupClocking+0x64>)
1a004e24:	2006      	movs	r0, #6
1a004e26:	f000 fc07 	bl	1a005638 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a004e2a:	2400      	movs	r4, #0
1a004e2c:	b14c      	cbz	r4, 1a004e42 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a004e2e:	4b0b      	ldr	r3, [pc, #44]	; (1a004e5c <Board_SetupClocking+0x60>)
1a004e30:	685a      	ldr	r2, [r3, #4]
1a004e32:	f022 020c 	bic.w	r2, r2, #12
1a004e36:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a004e38:	685a      	ldr	r2, [r3, #4]
1a004e3a:	f042 0203 	orr.w	r2, r2, #3
1a004e3e:	605a      	str	r2, [r3, #4]
}
1a004e40:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a004e42:	4808      	ldr	r0, [pc, #32]	; (1a004e64 <Board_SetupClocking+0x68>)
1a004e44:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004e48:	2301      	movs	r3, #1
1a004e4a:	788a      	ldrb	r2, [r1, #2]
1a004e4c:	7849      	ldrb	r1, [r1, #1]
1a004e4e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a004e52:	f000 fb4d 	bl	1a0054f0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a004e56:	3401      	adds	r4, #1
1a004e58:	e7e8      	b.n	1a004e2c <Board_SetupClocking+0x30>
1a004e5a:	bf00      	nop
1a004e5c:	40043000 	.word	0x40043000
1a004e60:	0c28cb00 	.word	0x0c28cb00
1a004e64:	1a00e6d8 	.word	0x1a00e6d8

1a004e68 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a004e68:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a004e6a:	f7ff ffab 	bl	1a004dc4 <Board_SetupMuxing>
    Board_SetupClocking();
1a004e6e:	f7ff ffc5 	bl	1a004dfc <Board_SetupClocking>
}
1a004e72:	bd08      	pop	{r3, pc}

1a004e74 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a004e74:	4b09      	ldr	r3, [pc, #36]	; (1a004e9c <Chip_UART_GetIndex+0x28>)
1a004e76:	4298      	cmp	r0, r3
1a004e78:	d009      	beq.n	1a004e8e <Chip_UART_GetIndex+0x1a>
1a004e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a004e7e:	4298      	cmp	r0, r3
1a004e80:	d007      	beq.n	1a004e92 <Chip_UART_GetIndex+0x1e>
1a004e82:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a004e86:	4298      	cmp	r0, r3
1a004e88:	d005      	beq.n	1a004e96 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a004e8a:	2000      	movs	r0, #0
1a004e8c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a004e8e:	2002      	movs	r0, #2
1a004e90:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a004e92:	2003      	movs	r0, #3
1a004e94:	4770      	bx	lr
			return 1;
1a004e96:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a004e98:	4770      	bx	lr
1a004e9a:	bf00      	nop
1a004e9c:	400c1000 	.word	0x400c1000

1a004ea0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a004ea0:	b530      	push	{r4, r5, lr}
1a004ea2:	b083      	sub	sp, #12
1a004ea4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a004ea6:	f7ff ffe5 	bl	1a004e74 <Chip_UART_GetIndex>
1a004eaa:	2301      	movs	r3, #1
1a004eac:	461a      	mov	r2, r3
1a004eae:	4619      	mov	r1, r3
1a004eb0:	4d0e      	ldr	r5, [pc, #56]	; (1a004eec <Chip_UART_Init+0x4c>)
1a004eb2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a004eb6:	f000 fb61 	bl	1a00557c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a004eba:	2307      	movs	r3, #7
1a004ebc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a004ebe:	2300      	movs	r3, #0
1a004ec0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a004ec2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a004ec4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a004ec6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a004ec8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a004eca:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a004ecc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a004ece:	4b08      	ldr	r3, [pc, #32]	; (1a004ef0 <Chip_UART_Init+0x50>)
1a004ed0:	429c      	cmp	r4, r3
1a004ed2:	d006      	beq.n	1a004ee2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a004ed4:	2303      	movs	r3, #3
1a004ed6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a004ed8:	2310      	movs	r3, #16
1a004eda:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a004edc:	9b01      	ldr	r3, [sp, #4]
}
1a004ede:	b003      	add	sp, #12
1a004ee0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a004ee2:	2300      	movs	r3, #0
1a004ee4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a004ee6:	69a3      	ldr	r3, [r4, #24]
1a004ee8:	9301      	str	r3, [sp, #4]
1a004eea:	e7f3      	b.n	1a004ed4 <Chip_UART_Init+0x34>
1a004eec:	1a00e758 	.word	0x1a00e758
1a004ef0:	40082000 	.word	0x40082000

1a004ef4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004ef8:	b083      	sub	sp, #12
1a004efa:	9001      	str	r0, [sp, #4]
1a004efc:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a004efe:	f7ff ffb9 	bl	1a004e74 <Chip_UART_GetIndex>
1a004f02:	4b32      	ldr	r3, [pc, #200]	; (1a004fcc <Chip_UART_SetBaudFDR+0xd8>)
1a004f04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a004f08:	f000 fb70 	bl	1a0055ec <Chip_Clock_GetRate>
1a004f0c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a004f0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a004f12:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a004f14:	f04f 0b00 	mov.w	fp, #0
1a004f18:	46a2      	mov	sl, r4
1a004f1a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a004f1c:	e02a      	b.n	1a004f74 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a004f1e:	4242      	negs	r2, r0
				div ++;
1a004f20:	1c4b      	adds	r3, r1, #1
1a004f22:	e017      	b.n	1a004f54 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a004f24:	b30a      	cbz	r2, 1a004f6a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a004f26:	4617      	mov	r7, r2
			sd = d;
1a004f28:	46ab      	mov	fp, r5
			sm = m;
1a004f2a:	46a2      	mov	sl, r4
			sdiv = div;
1a004f2c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a004f2e:	3501      	adds	r5, #1
1a004f30:	42ac      	cmp	r4, r5
1a004f32:	d91e      	bls.n	1a004f72 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a004f34:	0933      	lsrs	r3, r6, #4
1a004f36:	0730      	lsls	r0, r6, #28
1a004f38:	fba4 0100 	umull	r0, r1, r4, r0
1a004f3c:	fb04 1103 	mla	r1, r4, r3, r1
1a004f40:	1962      	adds	r2, r4, r5
1a004f42:	fb08 f202 	mul.w	r2, r8, r2
1a004f46:	2300      	movs	r3, #0
1a004f48:	f001 fdce 	bl	1a006ae8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a004f4c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a004f4e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a004f50:	2800      	cmp	r0, #0
1a004f52:	dbe4      	blt.n	1a004f1e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a004f54:	4297      	cmp	r7, r2
1a004f56:	d3ea      	bcc.n	1a004f2e <Chip_UART_SetBaudFDR+0x3a>
1a004f58:	2b00      	cmp	r3, #0
1a004f5a:	d0e8      	beq.n	1a004f2e <Chip_UART_SetBaudFDR+0x3a>
1a004f5c:	0c19      	lsrs	r1, r3, #16
1a004f5e:	d1e6      	bne.n	1a004f2e <Chip_UART_SetBaudFDR+0x3a>
1a004f60:	2b02      	cmp	r3, #2
1a004f62:	d8df      	bhi.n	1a004f24 <Chip_UART_SetBaudFDR+0x30>
1a004f64:	2d00      	cmp	r5, #0
1a004f66:	d0dd      	beq.n	1a004f24 <Chip_UART_SetBaudFDR+0x30>
1a004f68:	e7e1      	b.n	1a004f2e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a004f6a:	4617      	mov	r7, r2
			sd = d;
1a004f6c:	46ab      	mov	fp, r5
			sm = m;
1a004f6e:	46a2      	mov	sl, r4
			sdiv = div;
1a004f70:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a004f72:	3401      	adds	r4, #1
1a004f74:	b11f      	cbz	r7, 1a004f7e <Chip_UART_SetBaudFDR+0x8a>
1a004f76:	2c0f      	cmp	r4, #15
1a004f78:	d801      	bhi.n	1a004f7e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a004f7a:	2500      	movs	r5, #0
1a004f7c:	e7d8      	b.n	1a004f30 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a004f7e:	f1b9 0f00 	cmp.w	r9, #0
1a004f82:	d01e      	beq.n	1a004fc2 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a004f84:	9a01      	ldr	r2, [sp, #4]
1a004f86:	4611      	mov	r1, r2
1a004f88:	68d3      	ldr	r3, [r2, #12]
1a004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004f8e:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a004f90:	fa5f f389 	uxtb.w	r3, r9
1a004f94:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a004f96:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a004f9a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a004f9c:	68d3      	ldr	r3, [r2, #12]
1a004f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a004fa2:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a004fa4:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a004fa8:	b2db      	uxtb	r3, r3
1a004faa:	f00b 020f 	and.w	r2, fp, #15
1a004fae:	4313      	orrs	r3, r2
1a004fb0:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a004fb2:	0933      	lsrs	r3, r6, #4
1a004fb4:	fb0a f303 	mul.w	r3, sl, r3
1a004fb8:	44da      	add	sl, fp
1a004fba:	fb09 f90a 	mul.w	r9, r9, sl
1a004fbe:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a004fc2:	4648      	mov	r0, r9
1a004fc4:	b003      	add	sp, #12
1a004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004fca:	bf00      	nop
1a004fcc:	1a00e750 	.word	0x1a00e750

1a004fd0 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a004fd0:	4b03      	ldr	r3, [pc, #12]	; (1a004fe0 <Chip_ADC_GetClockIndex+0x10>)
1a004fd2:	4298      	cmp	r0, r3
1a004fd4:	d001      	beq.n	1a004fda <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a004fd6:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a004fd8:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a004fda:	2004      	movs	r0, #4
1a004fdc:	4770      	bx	lr
1a004fde:	bf00      	nop
1a004fe0:	400e4000 	.word	0x400e4000

1a004fe4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a004fe4:	b570      	push	{r4, r5, r6, lr}
1a004fe6:	460d      	mov	r5, r1
1a004fe8:	4614      	mov	r4, r2
1a004fea:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a004fec:	f7ff fff0 	bl	1a004fd0 <Chip_ADC_GetClockIndex>
1a004ff0:	f000 fafc 	bl	1a0055ec <Chip_Clock_GetRate>
	if (burstMode) {
1a004ff4:	b155      	cbz	r5, 1a00500c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a004ff6:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a004ffa:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a004ffe:	0064      	lsls	r4, r4, #1
1a005000:	fbb0 f0f4 	udiv	r0, r0, r4
1a005004:	b2c0      	uxtb	r0, r0
1a005006:	3801      	subs	r0, #1
	return div;
}
1a005008:	b2c0      	uxtb	r0, r0
1a00500a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00500c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a005010:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a005014:	e7f1      	b.n	1a004ffa <getClkDiv+0x16>
1a005016:	Address 0x000000001a005016 is out of bounds.


1a005018 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a005018:	b538      	push	{r3, r4, r5, lr}
1a00501a:	4605      	mov	r5, r0
1a00501c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00501e:	f7ff ffd7 	bl	1a004fd0 <Chip_ADC_GetClockIndex>
1a005022:	2301      	movs	r3, #1
1a005024:	461a      	mov	r2, r3
1a005026:	4619      	mov	r1, r3
1a005028:	f000 faa8 	bl	1a00557c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00502c:	2100      	movs	r1, #0
1a00502e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a005030:	4a08      	ldr	r2, [pc, #32]	; (1a005054 <Chip_ADC_Init+0x3c>)
1a005032:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a005034:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a005036:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a005038:	230b      	movs	r3, #11
1a00503a:	4628      	mov	r0, r5
1a00503c:	f7ff ffd2 	bl	1a004fe4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a005040:	0200      	lsls	r0, r0, #8
1a005042:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a005046:	7920      	ldrb	r0, [r4, #4]
1a005048:	0440      	lsls	r0, r0, #17
1a00504a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00504e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a005050:	6028      	str	r0, [r5, #0]
}
1a005052:	bd38      	pop	{r3, r4, r5, pc}
1a005054:	00061a80 	.word	0x00061a80

1a005058 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a005058:	b570      	push	{r4, r5, r6, lr}
1a00505a:	4605      	mov	r5, r0
1a00505c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00505e:	6804      	ldr	r4, [r0, #0]
1a005060:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a005064:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a005068:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00506a:	790b      	ldrb	r3, [r1, #4]
1a00506c:	f1c3 030b 	rsb	r3, r3, #11
1a005070:	b2db      	uxtb	r3, r3
1a005072:	7949      	ldrb	r1, [r1, #5]
1a005074:	f7ff ffb6 	bl	1a004fe4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a005078:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00507c:	7933      	ldrb	r3, [r6, #4]
1a00507e:	045b      	lsls	r3, r3, #17
1a005080:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a005084:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a005086:	602b      	str	r3, [r5, #0]
}
1a005088:	bd70      	pop	{r4, r5, r6, pc}

1a00508a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00508a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00508c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00508e:	680a      	ldr	r2, [r1, #0]
1a005090:	f7ff ffe2 	bl	1a005058 <Chip_ADC_SetSampleRate>
}
1a005094:	bd08      	pop	{r3, pc}
1a005096:	Address 0x000000001a005096 is out of bounds.


1a005098 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a005098:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00509a:	2069      	movs	r0, #105	; 0x69
1a00509c:	f000 faa6 	bl	1a0055ec <Chip_Clock_GetRate>
1a0050a0:	4b01      	ldr	r3, [pc, #4]	; (1a0050a8 <SystemCoreClockUpdate+0x10>)
1a0050a2:	6018      	str	r0, [r3, #0]
}
1a0050a4:	bd08      	pop	{r3, pc}
1a0050a6:	bf00      	nop
1a0050a8:	10003d38 	.word	0x10003d38

1a0050ac <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0050ac:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0050ae:	680b      	ldr	r3, [r1, #0]
1a0050b0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0050b4:	d002      	beq.n	1a0050bc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0050b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0050ba:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0050bc:	4607      	mov	r7, r0
1a0050be:	2501      	movs	r5, #1
1a0050c0:	e03a      	b.n	1a005138 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0050c2:	694b      	ldr	r3, [r1, #20]
1a0050c4:	fb03 f302 	mul.w	r3, r3, r2
1a0050c8:	fbb3 f3f5 	udiv	r3, r3, r5
1a0050cc:	e01c      	b.n	1a005108 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0050ce:	461c      	mov	r4, r3
	if (val < 0)
1a0050d0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0050d4:	d427      	bmi.n	1a005126 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0050d6:	4567      	cmp	r7, ip
1a0050d8:	d906      	bls.n	1a0050e8 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0050da:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0050dc:	1c77      	adds	r7, r6, #1
1a0050de:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0050e0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0050e2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0050e4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0050e6:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0050e8:	3201      	adds	r2, #1
1a0050ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0050ee:	dc1d      	bgt.n	1a00512c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0050f0:	680c      	ldr	r4, [r1, #0]
1a0050f2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0050f6:	d0e4      	beq.n	1a0050c2 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0050f8:	1c73      	adds	r3, r6, #1
1a0050fa:	fa02 fc03 	lsl.w	ip, r2, r3
1a0050fe:	694b      	ldr	r3, [r1, #20]
1a005100:	fb03 f30c 	mul.w	r3, r3, ip
1a005104:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a005108:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a005144 <pll_calc_divs+0x98>
1a00510c:	4563      	cmp	r3, ip
1a00510e:	d9eb      	bls.n	1a0050e8 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a005110:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a005148 <pll_calc_divs+0x9c>
1a005114:	4563      	cmp	r3, ip
1a005116:	d809      	bhi.n	1a00512c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a005118:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00511c:	d1d7      	bne.n	1a0050ce <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00511e:	1c74      	adds	r4, r6, #1
1a005120:	fa23 f404 	lsr.w	r4, r3, r4
1a005124:	e7d4      	b.n	1a0050d0 <pll_calc_divs+0x24>
		return -val;
1a005126:	f1cc 0c00 	rsb	ip, ip, #0
1a00512a:	e7d4      	b.n	1a0050d6 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a00512c:	3601      	adds	r6, #1
1a00512e:	2e03      	cmp	r6, #3
1a005130:	dc01      	bgt.n	1a005136 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a005132:	2201      	movs	r2, #1
1a005134:	e7d9      	b.n	1a0050ea <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a005136:	3501      	adds	r5, #1
1a005138:	2d04      	cmp	r5, #4
1a00513a:	dc01      	bgt.n	1a005140 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a00513c:	2600      	movs	r6, #0
1a00513e:	e7f6      	b.n	1a00512e <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a005140:	bcf0      	pop	{r4, r5, r6, r7}
1a005142:	4770      	bx	lr
1a005144:	094c5eff 	.word	0x094c5eff
1a005148:	1312d000 	.word	0x1312d000

1a00514c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00514c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00514e:	b099      	sub	sp, #100	; 0x64
1a005150:	4605      	mov	r5, r0
1a005152:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a005154:	225c      	movs	r2, #92	; 0x5c
1a005156:	2100      	movs	r1, #0
1a005158:	a801      	add	r0, sp, #4
1a00515a:	f002 fcd5 	bl	1a007b08 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00515e:	2380      	movs	r3, #128	; 0x80
1a005160:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a005162:	6963      	ldr	r3, [r4, #20]
1a005164:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a005166:	7923      	ldrb	r3, [r4, #4]
1a005168:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00516c:	4669      	mov	r1, sp
1a00516e:	4628      	mov	r0, r5
1a005170:	f7ff ff9c 	bl	1a0050ac <pll_calc_divs>
	if (pll[0].fout == freq) {
1a005174:	9b06      	ldr	r3, [sp, #24]
1a005176:	42ab      	cmp	r3, r5
1a005178:	d027      	beq.n	1a0051ca <pll_get_frac+0x7e>
	if (val < 0)
1a00517a:	1aeb      	subs	r3, r5, r3
1a00517c:	d42e      	bmi.n	1a0051dc <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00517e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a005180:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a005186:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a005188:	6963      	ldr	r3, [r4, #20]
1a00518a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00518c:	7923      	ldrb	r3, [r4, #4]
1a00518e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a005192:	a910      	add	r1, sp, #64	; 0x40
1a005194:	4628      	mov	r0, r5
1a005196:	f7ff ff89 	bl	1a0050ac <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00519a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00519c:	42ab      	cmp	r3, r5
1a00519e:	d01f      	beq.n	1a0051e0 <pll_get_frac+0x94>
	if (val < 0)
1a0051a0:	1aeb      	subs	r3, r5, r3
1a0051a2:	d425      	bmi.n	1a0051f0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0051a4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0051a6:	4b2b      	ldr	r3, [pc, #172]	; (1a005254 <pll_get_frac+0x108>)
1a0051a8:	429d      	cmp	r5, r3
1a0051aa:	d923      	bls.n	1a0051f4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0051ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0051ae:	1aed      	subs	r5, r5, r3
1a0051b0:	d433      	bmi.n	1a00521a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0051b2:	42ae      	cmp	r6, r5
1a0051b4:	dc3b      	bgt.n	1a00522e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0051b6:	42be      	cmp	r6, r7
1a0051b8:	dc31      	bgt.n	1a00521e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0051ba:	466d      	mov	r5, sp
1a0051bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0051be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0051c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0051c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0051c8:	e006      	b.n	1a0051d8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0051ca:	466d      	mov	r5, sp
1a0051cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0051ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0051d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0051d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0051d8:	b019      	add	sp, #100	; 0x64
1a0051da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0051dc:	425b      	negs	r3, r3
1a0051de:	e7ce      	b.n	1a00517e <pll_get_frac+0x32>
		*ppll = pll[2];
1a0051e0:	ad10      	add	r5, sp, #64	; 0x40
1a0051e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0051e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0051e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0051ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0051ee:	e7f3      	b.n	1a0051d8 <pll_get_frac+0x8c>
		return -val;
1a0051f0:	425b      	negs	r3, r3
1a0051f2:	e7d7      	b.n	1a0051a4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0051f4:	2340      	movs	r3, #64	; 0x40
1a0051f6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0051f8:	6963      	ldr	r3, [r4, #20]
1a0051fa:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0051fc:	a908      	add	r1, sp, #32
1a0051fe:	4628      	mov	r0, r5
1a005200:	f7ff ff54 	bl	1a0050ac <pll_calc_divs>
		if (pll[1].fout == freq) {
1a005204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005206:	42ab      	cmp	r3, r5
1a005208:	d1d0      	bne.n	1a0051ac <pll_get_frac+0x60>
			*ppll = pll[1];
1a00520a:	ad08      	add	r5, sp, #32
1a00520c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00520e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005210:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a005218:	e7de      	b.n	1a0051d8 <pll_get_frac+0x8c>
		return -val;
1a00521a:	426d      	negs	r5, r5
1a00521c:	e7c9      	b.n	1a0051b2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a00521e:	ad10      	add	r5, sp, #64	; 0x40
1a005220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005224:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00522c:	e7d4      	b.n	1a0051d8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00522e:	42af      	cmp	r7, r5
1a005230:	db07      	blt.n	1a005242 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a005232:	ad08      	add	r5, sp, #32
1a005234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005238:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00523c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005240:	e7ca      	b.n	1a0051d8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a005242:	ad10      	add	r5, sp, #64	; 0x40
1a005244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005248:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00524c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005250:	e7c2      	b.n	1a0051d8 <pll_get_frac+0x8c>
1a005252:	bf00      	nop
1a005254:	068e7780 	.word	0x068e7780

1a005258 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a005258:	b430      	push	{r4, r5}
1a00525a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00525c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00525e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a005260:	e000      	b.n	1a005264 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a005262:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a005264:	281c      	cmp	r0, #28
1a005266:	d118      	bne.n	1a00529a <Chip_Clock_FindBaseClock+0x42>
1a005268:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00526c:	0051      	lsls	r1, r2, #1
1a00526e:	4a0c      	ldr	r2, [pc, #48]	; (1a0052a0 <Chip_Clock_FindBaseClock+0x48>)
1a005270:	440a      	add	r2, r1
1a005272:	7914      	ldrb	r4, [r2, #4]
1a005274:	4284      	cmp	r4, r0
1a005276:	d010      	beq.n	1a00529a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a005278:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00527c:	004a      	lsls	r2, r1, #1
1a00527e:	4908      	ldr	r1, [pc, #32]	; (1a0052a0 <Chip_Clock_FindBaseClock+0x48>)
1a005280:	5a8a      	ldrh	r2, [r1, r2]
1a005282:	42aa      	cmp	r2, r5
1a005284:	d8ed      	bhi.n	1a005262 <Chip_Clock_FindBaseClock+0xa>
1a005286:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00528a:	0051      	lsls	r1, r2, #1
1a00528c:	4a04      	ldr	r2, [pc, #16]	; (1a0052a0 <Chip_Clock_FindBaseClock+0x48>)
1a00528e:	440a      	add	r2, r1
1a005290:	8852      	ldrh	r2, [r2, #2]
1a005292:	42aa      	cmp	r2, r5
1a005294:	d3e5      	bcc.n	1a005262 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a005296:	4620      	mov	r0, r4
1a005298:	e7e4      	b.n	1a005264 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00529a:	bc30      	pop	{r4, r5}
1a00529c:	4770      	bx	lr
1a00529e:	bf00      	nop
1a0052a0:	1a00e76c 	.word	0x1a00e76c

1a0052a4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0052a4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0052a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0052aa:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0052ac:	4a0d      	ldr	r2, [pc, #52]	; (1a0052e4 <Chip_Clock_EnableCrystal+0x40>)
1a0052ae:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0052b0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0052b4:	6992      	ldr	r2, [r2, #24]
1a0052b6:	428a      	cmp	r2, r1
1a0052b8:	d001      	beq.n	1a0052be <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0052ba:	4a0a      	ldr	r2, [pc, #40]	; (1a0052e4 <Chip_Clock_EnableCrystal+0x40>)
1a0052bc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0052be:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0052c2:	4a09      	ldr	r2, [pc, #36]	; (1a0052e8 <Chip_Clock_EnableCrystal+0x44>)
1a0052c4:	6811      	ldr	r1, [r2, #0]
1a0052c6:	4a09      	ldr	r2, [pc, #36]	; (1a0052ec <Chip_Clock_EnableCrystal+0x48>)
1a0052c8:	4291      	cmp	r1, r2
1a0052ca:	d901      	bls.n	1a0052d0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0052cc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0052d0:	4a04      	ldr	r2, [pc, #16]	; (1a0052e4 <Chip_Clock_EnableCrystal+0x40>)
1a0052d2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0052d4:	9b01      	ldr	r3, [sp, #4]
1a0052d6:	1e5a      	subs	r2, r3, #1
1a0052d8:	9201      	str	r2, [sp, #4]
1a0052da:	2b00      	cmp	r3, #0
1a0052dc:	d1fa      	bne.n	1a0052d4 <Chip_Clock_EnableCrystal+0x30>
}
1a0052de:	b002      	add	sp, #8
1a0052e0:	4770      	bx	lr
1a0052e2:	bf00      	nop
1a0052e4:	40050000 	.word	0x40050000
1a0052e8:	1a00e6d4 	.word	0x1a00e6d4
1a0052ec:	01312cff 	.word	0x01312cff

1a0052f0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0052f0:	3012      	adds	r0, #18
1a0052f2:	4b05      	ldr	r3, [pc, #20]	; (1a005308 <Chip_Clock_GetDividerSource+0x18>)
1a0052f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0052f8:	f010 0f01 	tst.w	r0, #1
1a0052fc:	d102      	bne.n	1a005304 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0052fe:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a005302:	4770      	bx	lr
		return CLKINPUT_PD;
1a005304:	2011      	movs	r0, #17
}
1a005306:	4770      	bx	lr
1a005308:	40050000 	.word	0x40050000

1a00530c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00530c:	f100 0212 	add.w	r2, r0, #18
1a005310:	4b03      	ldr	r3, [pc, #12]	; (1a005320 <Chip_Clock_GetDividerDivisor+0x14>)
1a005312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a005316:	4b03      	ldr	r3, [pc, #12]	; (1a005324 <Chip_Clock_GetDividerDivisor+0x18>)
1a005318:	5c18      	ldrb	r0, [r3, r0]
}
1a00531a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00531e:	4770      	bx	lr
1a005320:	40050000 	.word	0x40050000
1a005324:	1a00e764 	.word	0x1a00e764

1a005328 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a005328:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00532a:	2810      	cmp	r0, #16
1a00532c:	d80a      	bhi.n	1a005344 <Chip_Clock_GetClockInputHz+0x1c>
1a00532e:	e8df f000 	tbb	[pc, r0]
1a005332:	0b44      	.short	0x0b44
1a005334:	0921180d 	.word	0x0921180d
1a005338:	2d2a2724 	.word	0x2d2a2724
1a00533c:	34300909 	.word	0x34300909
1a005340:	3c38      	.short	0x3c38
1a005342:	40          	.byte	0x40
1a005343:	00          	.byte	0x00
	uint32_t rate = 0;
1a005344:	2000      	movs	r0, #0
1a005346:	e03a      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a005348:	481e      	ldr	r0, [pc, #120]	; (1a0053c4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00534a:	e038      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00534c:	4b1e      	ldr	r3, [pc, #120]	; (1a0053c8 <Chip_Clock_GetClockInputHz+0xa0>)
1a00534e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a005352:	f003 0307 	and.w	r3, r3, #7
1a005356:	2b04      	cmp	r3, #4
1a005358:	d001      	beq.n	1a00535e <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00535a:	481c      	ldr	r0, [pc, #112]	; (1a0053cc <Chip_Clock_GetClockInputHz+0xa4>)
1a00535c:	e02f      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00535e:	2000      	movs	r0, #0
1a005360:	e02d      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a005362:	4b19      	ldr	r3, [pc, #100]	; (1a0053c8 <Chip_Clock_GetClockInputHz+0xa0>)
1a005364:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a005368:	f003 0307 	and.w	r3, r3, #7
1a00536c:	2b04      	cmp	r3, #4
1a00536e:	d027      	beq.n	1a0053c0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a005370:	4816      	ldr	r0, [pc, #88]	; (1a0053cc <Chip_Clock_GetClockInputHz+0xa4>)
1a005372:	e024      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a005374:	4b16      	ldr	r3, [pc, #88]	; (1a0053d0 <Chip_Clock_GetClockInputHz+0xa8>)
1a005376:	6818      	ldr	r0, [r3, #0]
		break;
1a005378:	e021      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00537a:	4b16      	ldr	r3, [pc, #88]	; (1a0053d4 <Chip_Clock_GetClockInputHz+0xac>)
1a00537c:	6818      	ldr	r0, [r3, #0]
		break;
1a00537e:	e01e      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a005380:	4b15      	ldr	r3, [pc, #84]	; (1a0053d8 <Chip_Clock_GetClockInputHz+0xb0>)
1a005382:	6818      	ldr	r0, [r3, #0]
		break;
1a005384:	e01b      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a005386:	4b14      	ldr	r3, [pc, #80]	; (1a0053d8 <Chip_Clock_GetClockInputHz+0xb0>)
1a005388:	6858      	ldr	r0, [r3, #4]
		break;
1a00538a:	e018      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00538c:	f000 f868 	bl	1a005460 <Chip_Clock_GetMainPLLHz>
		break;
1a005390:	e015      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a005392:	2100      	movs	r1, #0
1a005394:	f000 f89a 	bl	1a0054cc <Chip_Clock_GetDivRate>
		break;
1a005398:	e011      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00539a:	2101      	movs	r1, #1
1a00539c:	f000 f896 	bl	1a0054cc <Chip_Clock_GetDivRate>
		break;
1a0053a0:	e00d      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0053a2:	2102      	movs	r1, #2
1a0053a4:	f000 f892 	bl	1a0054cc <Chip_Clock_GetDivRate>
		break;
1a0053a8:	e009      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0053aa:	2103      	movs	r1, #3
1a0053ac:	f000 f88e 	bl	1a0054cc <Chip_Clock_GetDivRate>
		break;
1a0053b0:	e005      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0053b2:	2104      	movs	r1, #4
1a0053b4:	f000 f88a 	bl	1a0054cc <Chip_Clock_GetDivRate>
		break;
1a0053b8:	e001      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0053ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0053be:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0053c0:	4806      	ldr	r0, [pc, #24]	; (1a0053dc <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0053c2:	e7fc      	b.n	1a0053be <Chip_Clock_GetClockInputHz+0x96>
1a0053c4:	00b71b00 	.word	0x00b71b00
1a0053c8:	40043000 	.word	0x40043000
1a0053cc:	017d7840 	.word	0x017d7840
1a0053d0:	1a00e6a8 	.word	0x1a00e6a8
1a0053d4:	1a00e6d4 	.word	0x1a00e6d4
1a0053d8:	10003244 	.word	0x10003244
1a0053dc:	02faf080 	.word	0x02faf080

1a0053e0 <Chip_Clock_CalcMainPLLValue>:
{
1a0053e0:	b538      	push	{r3, r4, r5, lr}
1a0053e2:	4605      	mov	r5, r0
1a0053e4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0053e6:	7908      	ldrb	r0, [r1, #4]
1a0053e8:	f7ff ff9e 	bl	1a005328 <Chip_Clock_GetClockInputHz>
1a0053ec:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0053ee:	4b19      	ldr	r3, [pc, #100]	; (1a005454 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0053f0:	442b      	add	r3, r5
1a0053f2:	4a19      	ldr	r2, [pc, #100]	; (1a005458 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0053f4:	4293      	cmp	r3, r2
1a0053f6:	d821      	bhi.n	1a00543c <Chip_Clock_CalcMainPLLValue+0x5c>
1a0053f8:	b318      	cbz	r0, 1a005442 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0053fa:	2380      	movs	r3, #128	; 0x80
1a0053fc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0053fe:	2300      	movs	r3, #0
1a005400:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a005402:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a005404:	fbb5 f3f0 	udiv	r3, r5, r0
1a005408:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00540a:	4a14      	ldr	r2, [pc, #80]	; (1a00545c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00540c:	4295      	cmp	r5, r2
1a00540e:	d903      	bls.n	1a005418 <Chip_Clock_CalcMainPLLValue+0x38>
1a005410:	fb03 f000 	mul.w	r0, r3, r0
1a005414:	42a8      	cmp	r0, r5
1a005416:	d007      	beq.n	1a005428 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a005418:	4621      	mov	r1, r4
1a00541a:	4628      	mov	r0, r5
1a00541c:	f7ff fe96 	bl	1a00514c <pll_get_frac>
		if (!ppll->nsel) {
1a005420:	68a3      	ldr	r3, [r4, #8]
1a005422:	b18b      	cbz	r3, 1a005448 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a005424:	3b01      	subs	r3, #1
1a005426:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a005428:	6923      	ldr	r3, [r4, #16]
1a00542a:	b183      	cbz	r3, 1a00544e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00542c:	68e2      	ldr	r2, [r4, #12]
1a00542e:	b10a      	cbz	r2, 1a005434 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a005430:	3a01      	subs	r2, #1
1a005432:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a005434:	3b01      	subs	r3, #1
1a005436:	6123      	str	r3, [r4, #16]
	return 0;
1a005438:	2000      	movs	r0, #0
}
1a00543a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00543c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005440:	e7fb      	b.n	1a00543a <Chip_Clock_CalcMainPLLValue+0x5a>
1a005442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005446:	e7f8      	b.n	1a00543a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a005448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00544c:	e7f5      	b.n	1a00543a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005452:	e7f2      	b.n	1a00543a <Chip_Clock_CalcMainPLLValue+0x5a>
1a005454:	ff6b3a10 	.word	0xff6b3a10
1a005458:	0b940510 	.word	0x0b940510
1a00545c:	094c5eff 	.word	0x094c5eff

1a005460 <Chip_Clock_GetMainPLLHz>:
{
1a005460:	b530      	push	{r4, r5, lr}
1a005462:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a005464:	4d17      	ldr	r5, [pc, #92]	; (1a0054c4 <Chip_Clock_GetMainPLLHz+0x64>)
1a005466:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a005468:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00546c:	f7ff ff5c 	bl	1a005328 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a005470:	4b15      	ldr	r3, [pc, #84]	; (1a0054c8 <Chip_Clock_GetMainPLLHz+0x68>)
1a005472:	681b      	ldr	r3, [r3, #0]
1a005474:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a005476:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a005478:	f013 0f01 	tst.w	r3, #1
1a00547c:	d020      	beq.n	1a0054c0 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00547e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a005482:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a005486:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00548a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00548e:	3301      	adds	r3, #1
	n = nsel + 1;
1a005490:	3201      	adds	r2, #1
	p = ptab[psel];
1a005492:	f10d 0c08 	add.w	ip, sp, #8
1a005496:	4461      	add	r1, ip
1a005498:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00549c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0054a0:	d108      	bne.n	1a0054b4 <Chip_Clock_GetMainPLLHz+0x54>
1a0054a2:	b93d      	cbnz	r5, 1a0054b4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0054a4:	0049      	lsls	r1, r1, #1
1a0054a6:	fbb3 f3f1 	udiv	r3, r3, r1
1a0054aa:	fbb0 f0f2 	udiv	r0, r0, r2
1a0054ae:	fb00 f003 	mul.w	r0, r0, r3
1a0054b2:	e003      	b.n	1a0054bc <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0054b4:	fbb0 f0f2 	udiv	r0, r0, r2
1a0054b8:	fb03 f000 	mul.w	r0, r3, r0
}
1a0054bc:	b003      	add	sp, #12
1a0054be:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0054c0:	2000      	movs	r0, #0
1a0054c2:	e7fb      	b.n	1a0054bc <Chip_Clock_GetMainPLLHz+0x5c>
1a0054c4:	40050000 	.word	0x40050000
1a0054c8:	1a00e760 	.word	0x1a00e760

1a0054cc <Chip_Clock_GetDivRate>:
{
1a0054cc:	b538      	push	{r3, r4, r5, lr}
1a0054ce:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0054d0:	4608      	mov	r0, r1
1a0054d2:	f7ff ff0d 	bl	1a0052f0 <Chip_Clock_GetDividerSource>
1a0054d6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0054d8:	4620      	mov	r0, r4
1a0054da:	f7ff ff17 	bl	1a00530c <Chip_Clock_GetDividerDivisor>
1a0054de:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0054e0:	4628      	mov	r0, r5
1a0054e2:	f7ff ff21 	bl	1a005328 <Chip_Clock_GetClockInputHz>
1a0054e6:	3401      	adds	r4, #1
}
1a0054e8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0054ec:	bd38      	pop	{r3, r4, r5, pc}
1a0054ee:	Address 0x000000001a0054ee is out of bounds.


1a0054f0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0054f0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0054f2:	f100 0416 	add.w	r4, r0, #22
1a0054f6:	00a4      	lsls	r4, r4, #2
1a0054f8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0054fc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a005500:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a005502:	281b      	cmp	r0, #27
1a005504:	d813      	bhi.n	1a00552e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a005506:	2911      	cmp	r1, #17
1a005508:	d01a      	beq.n	1a005540 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00550a:	4d0e      	ldr	r5, [pc, #56]	; (1a005544 <Chip_Clock_SetBaseClock+0x54>)
1a00550c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00550e:	b10a      	cbz	r2, 1a005514 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a005510:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a005514:	b10b      	cbz	r3, 1a00551a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a005516:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00551a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00551e:	3016      	adds	r0, #22
1a005520:	0080      	lsls	r0, r0, #2
1a005522:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a005526:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00552a:	6045      	str	r5, [r0, #4]
1a00552c:	e008      	b.n	1a005540 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00552e:	f044 0401 	orr.w	r4, r4, #1
1a005532:	3016      	adds	r0, #22
1a005534:	0080      	lsls	r0, r0, #2
1a005536:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00553a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00553e:	6044      	str	r4, [r0, #4]
	}
}
1a005540:	bc30      	pop	{r4, r5}
1a005542:	4770      	bx	lr
1a005544:	e0fff7fe 	.word	0xe0fff7fe

1a005548 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a005548:	281b      	cmp	r0, #27
1a00554a:	d80c      	bhi.n	1a005566 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00554c:	3016      	adds	r0, #22
1a00554e:	0080      	lsls	r0, r0, #2
1a005550:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a005554:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a005558:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00555a:	f010 0f01 	tst.w	r0, #1
1a00555e:	d104      	bne.n	1a00556a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a005560:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a005564:	4770      	bx	lr
		return CLKINPUT_PD;
1a005566:	2011      	movs	r0, #17
1a005568:	4770      	bx	lr
		return CLKINPUT_PD;
1a00556a:	2011      	movs	r0, #17
}
1a00556c:	4770      	bx	lr

1a00556e <Chip_Clock_GetBaseClocktHz>:
{
1a00556e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a005570:	f7ff ffea 	bl	1a005548 <Chip_Clock_GetBaseClock>
1a005574:	f7ff fed8 	bl	1a005328 <Chip_Clock_GetClockInputHz>
}
1a005578:	bd08      	pop	{r3, pc}
1a00557a:	Address 0x000000001a00557a is out of bounds.


1a00557c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00557c:	b971      	cbnz	r1, 1a00559c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00557e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a005580:	b10a      	cbz	r2, 1a005586 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a005582:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a005586:	2b02      	cmp	r3, #2
1a005588:	d00a      	beq.n	1a0055a0 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00558a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00558e:	d30a      	bcc.n	1a0055a6 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a005590:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a005594:	4b06      	ldr	r3, [pc, #24]	; (1a0055b0 <Chip_Clock_EnableOpts+0x34>)
1a005596:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00559a:	4770      	bx	lr
		reg |= (1 << 1);
1a00559c:	2103      	movs	r1, #3
1a00559e:	e7ef      	b.n	1a005580 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0055a0:	f041 0120 	orr.w	r1, r1, #32
1a0055a4:	e7f1      	b.n	1a00558a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0055a6:	3020      	adds	r0, #32
1a0055a8:	4b02      	ldr	r3, [pc, #8]	; (1a0055b4 <Chip_Clock_EnableOpts+0x38>)
1a0055aa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0055ae:	4770      	bx	lr
1a0055b0:	40052000 	.word	0x40052000
1a0055b4:	40051000 	.word	0x40051000

1a0055b8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0055b8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0055bc:	d309      	bcc.n	1a0055d2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0055be:	4a09      	ldr	r2, [pc, #36]	; (1a0055e4 <Chip_Clock_Enable+0x2c>)
1a0055c0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0055c4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0055c8:	f043 0301 	orr.w	r3, r3, #1
1a0055cc:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0055d0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0055d2:	4a05      	ldr	r2, [pc, #20]	; (1a0055e8 <Chip_Clock_Enable+0x30>)
1a0055d4:	3020      	adds	r0, #32
1a0055d6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0055da:	f043 0301 	orr.w	r3, r3, #1
1a0055de:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0055e2:	4770      	bx	lr
1a0055e4:	40052000 	.word	0x40052000
1a0055e8:	40051000 	.word	0x40051000

1a0055ec <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0055ec:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0055ee:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0055f2:	d309      	bcc.n	1a005608 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0055f4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0055f8:	4a0d      	ldr	r2, [pc, #52]	; (1a005630 <Chip_Clock_GetRate+0x44>)
1a0055fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0055fe:	f014 0f01 	tst.w	r4, #1
1a005602:	d107      	bne.n	1a005614 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a005604:	2000      	movs	r0, #0
	}

	return rate;
}
1a005606:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a005608:	f100 0320 	add.w	r3, r0, #32
1a00560c:	4a09      	ldr	r2, [pc, #36]	; (1a005634 <Chip_Clock_GetRate+0x48>)
1a00560e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a005612:	e7f4      	b.n	1a0055fe <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a005614:	f7ff fe20 	bl	1a005258 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a005618:	f7ff ffa9 	bl	1a00556e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00561c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a005620:	d103      	bne.n	1a00562a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a005622:	2301      	movs	r3, #1
		rate = rate / div;
1a005624:	fbb0 f0f3 	udiv	r0, r0, r3
1a005628:	e7ed      	b.n	1a005606 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00562a:	2302      	movs	r3, #2
1a00562c:	e7fa      	b.n	1a005624 <Chip_Clock_GetRate+0x38>
1a00562e:	bf00      	nop
1a005630:	40052000 	.word	0x40052000
1a005634:	40051000 	.word	0x40051000

1a005638 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a005638:	b570      	push	{r4, r5, r6, lr}
1a00563a:	b08a      	sub	sp, #40	; 0x28
1a00563c:	4605      	mov	r5, r0
1a00563e:	460e      	mov	r6, r1
1a005640:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a005642:	f24c 3350 	movw	r3, #50000	; 0xc350
1a005646:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a005648:	2806      	cmp	r0, #6
1a00564a:	d018      	beq.n	1a00567e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00564c:	2300      	movs	r3, #0
1a00564e:	2201      	movs	r2, #1
1a005650:	4629      	mov	r1, r5
1a005652:	2004      	movs	r0, #4
1a005654:	f7ff ff4c 	bl	1a0054f0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a005658:	4a4a      	ldr	r2, [pc, #296]	; (1a005784 <Chip_SetupCoreClock+0x14c>)
1a00565a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00565c:	f043 0301 	orr.w	r3, r3, #1
1a005660:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a005662:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a005666:	a901      	add	r1, sp, #4
1a005668:	4630      	mov	r0, r6
1a00566a:	f7ff feb9 	bl	1a0053e0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00566e:	4b46      	ldr	r3, [pc, #280]	; (1a005788 <Chip_SetupCoreClock+0x150>)
1a005670:	429e      	cmp	r6, r3
1a005672:	d916      	bls.n	1a0056a2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a005674:	9b01      	ldr	r3, [sp, #4]
1a005676:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00567a:	d003      	beq.n	1a005684 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00567c:	e7fe      	b.n	1a00567c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00567e:	f7ff fe11 	bl	1a0052a4 <Chip_Clock_EnableCrystal>
1a005682:	e7e3      	b.n	1a00564c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a005684:	f013 0f80 	tst.w	r3, #128	; 0x80
1a005688:	d005      	beq.n	1a005696 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00568a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00568e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a005690:	2500      	movs	r5, #0
			direct = 1;
1a005692:	2601      	movs	r6, #1
1a005694:	e007      	b.n	1a0056a6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a005696:	9b04      	ldr	r3, [sp, #16]
1a005698:	3301      	adds	r3, #1
1a00569a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00569c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00569e:	2600      	movs	r6, #0
1a0056a0:	e001      	b.n	1a0056a6 <Chip_SetupCoreClock+0x6e>
1a0056a2:	2500      	movs	r5, #0
1a0056a4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0056a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0056aa:	9b01      	ldr	r3, [sp, #4]
1a0056ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0056b0:	9a05      	ldr	r2, [sp, #20]
1a0056b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0056b6:	9a03      	ldr	r2, [sp, #12]
1a0056b8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0056bc:	9a04      	ldr	r2, [sp, #16]
1a0056be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0056c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0056c6:	4a2f      	ldr	r2, [pc, #188]	; (1a005784 <Chip_SetupCoreClock+0x14c>)
1a0056c8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0056ca:	4b2e      	ldr	r3, [pc, #184]	; (1a005784 <Chip_SetupCoreClock+0x14c>)
1a0056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0056ce:	f013 0f01 	tst.w	r3, #1
1a0056d2:	d0fa      	beq.n	1a0056ca <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0056d4:	2300      	movs	r3, #0
1a0056d6:	2201      	movs	r2, #1
1a0056d8:	2109      	movs	r1, #9
1a0056da:	2004      	movs	r0, #4
1a0056dc:	f7ff ff08 	bl	1a0054f0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0056e0:	b306      	cbz	r6, 1a005724 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0056e2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0056e6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0056e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0056ea:	1e5a      	subs	r2, r3, #1
1a0056ec:	9209      	str	r2, [sp, #36]	; 0x24
1a0056ee:	2b00      	cmp	r3, #0
1a0056f0:	d1fa      	bne.n	1a0056e8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0056f2:	9b01      	ldr	r3, [sp, #4]
1a0056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0056f8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0056fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0056fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a005702:	9a05      	ldr	r2, [sp, #20]
1a005704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a005708:	9a03      	ldr	r2, [sp, #12]
1a00570a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00570e:	9a04      	ldr	r2, [sp, #16]
1a005710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a005714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005718:	4a1a      	ldr	r2, [pc, #104]	; (1a005784 <Chip_SetupCoreClock+0x14c>)
1a00571a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00571c:	2c00      	cmp	r4, #0
1a00571e:	d12e      	bne.n	1a00577e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a005720:	b00a      	add	sp, #40	; 0x28
1a005722:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a005724:	2d00      	cmp	r5, #0
1a005726:	d0f9      	beq.n	1a00571c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a005728:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00572c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00572e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005730:	1e5a      	subs	r2, r3, #1
1a005732:	9209      	str	r2, [sp, #36]	; 0x24
1a005734:	2b00      	cmp	r3, #0
1a005736:	d1fa      	bne.n	1a00572e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a005738:	9b04      	ldr	r3, [sp, #16]
1a00573a:	1e5a      	subs	r2, r3, #1
1a00573c:	9204      	str	r2, [sp, #16]
1a00573e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a005742:	9b01      	ldr	r3, [sp, #4]
1a005744:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a005748:	9905      	ldr	r1, [sp, #20]
1a00574a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00574e:	9903      	ldr	r1, [sp, #12]
1a005750:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a005754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a005758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00575c:	4a09      	ldr	r2, [pc, #36]	; (1a005784 <Chip_SetupCoreClock+0x14c>)
1a00575e:	6453      	str	r3, [r2, #68]	; 0x44
1a005760:	e7dc      	b.n	1a00571c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a005762:	480a      	ldr	r0, [pc, #40]	; (1a00578c <Chip_SetupCoreClock+0x154>)
1a005764:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a005768:	78cb      	ldrb	r3, [r1, #3]
1a00576a:	788a      	ldrb	r2, [r1, #2]
1a00576c:	7849      	ldrb	r1, [r1, #1]
1a00576e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a005772:	f7ff febd 	bl	1a0054f0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a005776:	3401      	adds	r4, #1
1a005778:	2c11      	cmp	r4, #17
1a00577a:	d9f2      	bls.n	1a005762 <Chip_SetupCoreClock+0x12a>
1a00577c:	e7d0      	b.n	1a005720 <Chip_SetupCoreClock+0xe8>
1a00577e:	2400      	movs	r4, #0
1a005780:	e7fa      	b.n	1a005778 <Chip_SetupCoreClock+0x140>
1a005782:	bf00      	nop
1a005784:	40050000 	.word	0x40050000
1a005788:	068e7780 	.word	0x068e7780
1a00578c:	1a00e7d8 	.word	0x1a00e7d8

1a005790 <Chip_RTC_GetFullTime>:
	pRTC->CCR = ccr_val;
}

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a005790:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a005792:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a005794:	6a03      	ldr	r3, [r0, #32]
1a005796:	42a3      	cmp	r3, r4
1a005798:	d00d      	beq.n	1a0057b6 <Chip_RTC_GetFullTime+0x26>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a00579a:	6a04      	ldr	r4, [r0, #32]
1a00579c:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a00579e:	2301      	movs	r3, #1
1a0057a0:	2b07      	cmp	r3, #7
1a0057a2:	d8f7      	bhi.n	1a005794 <Chip_RTC_GetFullTime+0x4>
			pFullTime->time[i] = pRTC->TIME[i];
1a0057a4:	f103 0208 	add.w	r2, r3, #8
1a0057a8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a0057ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a0057b0:	3301      	adds	r3, #1
1a0057b2:	b2db      	uxtb	r3, r3
1a0057b4:	e7f4      	b.n	1a0057a0 <Chip_RTC_GetFullTime+0x10>
		}
	}
}
1a0057b6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0057ba:	4770      	bx	lr

1a0057bc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0057bc:	4770      	bx	lr
1a0057be:	Address 0x000000001a0057be is out of bounds.


1a0057c0 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0057c0:	2901      	cmp	r1, #1
1a0057c2:	d109      	bne.n	1a0057d8 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0057c4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0057c8:	0082      	lsls	r2, r0, #2
1a0057ca:	4b04      	ldr	r3, [pc, #16]	; (1a0057dc <Chip_I2C_EventHandler+0x1c>)
1a0057cc:	4413      	add	r3, r2
1a0057ce:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0057d0:	7d13      	ldrb	r3, [r2, #20]
1a0057d2:	b2db      	uxtb	r3, r3
1a0057d4:	2b04      	cmp	r3, #4
1a0057d6:	d0fb      	beq.n	1a0057d0 <Chip_I2C_EventHandler+0x10>
}
1a0057d8:	4770      	bx	lr
1a0057da:	bf00      	nop
1a0057dc:	10000018 	.word	0x10000018

1a0057e0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0057e0:	b570      	push	{r4, r5, r6, lr}
1a0057e2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0057e4:	4e06      	ldr	r6, [pc, #24]	; (1a005800 <Chip_I2C_Init+0x20>)
1a0057e6:	00c4      	lsls	r4, r0, #3
1a0057e8:	1a22      	subs	r2, r4, r0
1a0057ea:	0093      	lsls	r3, r2, #2
1a0057ec:	4433      	add	r3, r6
1a0057ee:	8898      	ldrh	r0, [r3, #4]
1a0057f0:	f7ff fee2 	bl	1a0055b8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0057f4:	1b64      	subs	r4, r4, r5
1a0057f6:	00a3      	lsls	r3, r4, #2
1a0057f8:	58f3      	ldr	r3, [r6, r3]
1a0057fa:	226c      	movs	r2, #108	; 0x6c
1a0057fc:	619a      	str	r2, [r3, #24]
}
1a0057fe:	bd70      	pop	{r4, r5, r6, pc}
1a005800:	10000018 	.word	0x10000018

1a005804 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005808:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00580a:	4e0b      	ldr	r6, [pc, #44]	; (1a005838 <Chip_I2C_SetClockRate+0x34>)
1a00580c:	00c5      	lsls	r5, r0, #3
1a00580e:	1a2b      	subs	r3, r5, r0
1a005810:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a005814:	eb06 0308 	add.w	r3, r6, r8
1a005818:	8898      	ldrh	r0, [r3, #4]
1a00581a:	f7ff fee7 	bl	1a0055ec <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00581e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a005822:	f856 3008 	ldr.w	r3, [r6, r8]
1a005826:	0842      	lsrs	r2, r0, #1
1a005828:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00582a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00582e:	691a      	ldr	r2, [r3, #16]
1a005830:	1a80      	subs	r0, r0, r2
1a005832:	6158      	str	r0, [r3, #20]
}
1a005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005838:	10000018 	.word	0x10000018

1a00583c <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a00583c:	680b      	ldr	r3, [r1, #0]
1a00583e:	b133      	cbz	r3, 1a00584e <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a005840:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a005842:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a005844:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a005846:	684b      	ldr	r3, [r1, #4]
1a005848:	3302      	adds	r3, #2
1a00584a:	604b      	str	r3, [r1, #4]
}
1a00584c:	4770      	bx	lr
1a00584e:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a005852:	6083      	str	r3, [r0, #8]
1a005854:	e7f7      	b.n	1a005846 <SSP_Write2BFifo+0xa>

1a005856 <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a005856:	680b      	ldr	r3, [r1, #0]
1a005858:	b133      	cbz	r3, 1a005868 <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a00585a:	684a      	ldr	r2, [r1, #4]
1a00585c:	5c9b      	ldrb	r3, [r3, r2]
1a00585e:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a005860:	684b      	ldr	r3, [r1, #4]
1a005862:	3301      	adds	r3, #1
1a005864:	604b      	str	r3, [r1, #4]
}
1a005866:	4770      	bx	lr
1a005868:	23ff      	movs	r3, #255	; 0xff
1a00586a:	6083      	str	r3, [r0, #8]
1a00586c:	e7f8      	b.n	1a005860 <SSP_Write1BFifo+0xa>

1a00586e <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a00586e:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a005870:	f013 0f04 	tst.w	r3, #4
1a005874:	d01b      	beq.n	1a0058ae <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a005876:	68ca      	ldr	r2, [r1, #12]
1a005878:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00587a:	429a      	cmp	r2, r3
1a00587c:	d216      	bcs.n	1a0058ac <SSP_Read2BFifo+0x3e>
{
1a00587e:	b410      	push	{r4}
1a005880:	e00a      	b.n	1a005898 <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a005882:	68cb      	ldr	r3, [r1, #12]
1a005884:	3302      	adds	r3, #2
1a005886:	60cb      	str	r3, [r1, #12]
1a005888:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00588a:	f013 0f04 	tst.w	r3, #4
1a00588e:	d00a      	beq.n	1a0058a6 <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a005890:	68ca      	ldr	r2, [r1, #12]
1a005892:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a005894:	429a      	cmp	r2, r3
1a005896:	d206      	bcs.n	1a0058a6 <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a005898:	6883      	ldr	r3, [r0, #8]
1a00589a:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a00589c:	688c      	ldr	r4, [r1, #8]
1a00589e:	2c00      	cmp	r4, #0
1a0058a0:	d0ef      	beq.n	1a005882 <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0058a2:	52a3      	strh	r3, [r4, r2]
1a0058a4:	e7ed      	b.n	1a005882 <SSP_Read2BFifo+0x14>
	}
}
1a0058a6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0058aa:	4770      	bx	lr
1a0058ac:	4770      	bx	lr
1a0058ae:	4770      	bx	lr

1a0058b0 <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0058b0:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0058b2:	f013 0f04 	tst.w	r3, #4
1a0058b6:	d01a      	beq.n	1a0058ee <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0058b8:	68cb      	ldr	r3, [r1, #12]
1a0058ba:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0058bc:	4293      	cmp	r3, r2
1a0058be:	d215      	bcs.n	1a0058ec <SSP_Read1BFifo+0x3c>
{
1a0058c0:	b410      	push	{r4}
1a0058c2:	e00a      	b.n	1a0058da <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a0058c4:	68cb      	ldr	r3, [r1, #12]
1a0058c6:	3301      	adds	r3, #1
1a0058c8:	60cb      	str	r3, [r1, #12]
1a0058ca:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0058cc:	f013 0f04 	tst.w	r3, #4
1a0058d0:	d009      	beq.n	1a0058e6 <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0058d2:	68cb      	ldr	r3, [r1, #12]
1a0058d4:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0058d6:	4293      	cmp	r3, r2
1a0058d8:	d205      	bcs.n	1a0058e6 <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0058da:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a0058dc:	688a      	ldr	r2, [r1, #8]
1a0058de:	2a00      	cmp	r2, #0
1a0058e0:	d0f0      	beq.n	1a0058c4 <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0058e2:	54d4      	strb	r4, [r2, r3]
1a0058e4:	e7ee      	b.n	1a0058c4 <SSP_Read1BFifo+0x14>
	}
}
1a0058e6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0058ea:	4770      	bx	lr
1a0058ec:	4770      	bx	lr
1a0058ee:	4770      	bx	lr

1a0058f0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0058f0:	4b03      	ldr	r3, [pc, #12]	; (1a005900 <Chip_SSP_GetClockIndex+0x10>)
1a0058f2:	4298      	cmp	r0, r3
1a0058f4:	d001      	beq.n	1a0058fa <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0058f6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0058f8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0058fa:	20a5      	movs	r0, #165	; 0xa5
1a0058fc:	4770      	bx	lr
1a0058fe:	bf00      	nop
1a005900:	400c5000 	.word	0x400c5000

1a005904 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a005904:	4b04      	ldr	r3, [pc, #16]	; (1a005918 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a005906:	4298      	cmp	r0, r3
1a005908:	d002      	beq.n	1a005910 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00590a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00590e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a005910:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a005914:	4770      	bx	lr
1a005916:	bf00      	nop
1a005918:	400c5000 	.word	0x400c5000

1a00591c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00591c:	6803      	ldr	r3, [r0, #0]
1a00591e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a005922:	0209      	lsls	r1, r1, #8
1a005924:	b289      	uxth	r1, r1
1a005926:	4319      	orrs	r1, r3
1a005928:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00592a:	6102      	str	r2, [r0, #16]
}
1a00592c:	4770      	bx	lr

1a00592e <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a00592e:	b538      	push	{r3, r4, r5, lr}
1a005930:	4604      	mov	r4, r0
1a005932:	460d      	mov	r5, r1
	return (pSSP->SR & Stat) ? SET : RESET;
1a005934:	68e3      	ldr	r3, [r4, #12]
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a005936:	f013 0f04 	tst.w	r3, #4
1a00593a:	d001      	beq.n	1a005940 <Chip_SSP_RWFrames_Blocking+0x12>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00593c:	68a3      	ldr	r3, [r4, #8]
1a00593e:	e7f9      	b.n	1a005934 <Chip_SSP_RWFrames_Blocking+0x6>
	pSSP->ICR = IntClear;
1a005940:	2303      	movs	r3, #3
1a005942:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a005944:	6823      	ldr	r3, [r4, #0]
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a005946:	f013 0f08 	tst.w	r3, #8
1a00594a:	d108      	bne.n	1a00595e <Chip_SSP_RWFrames_Blocking+0x30>
1a00594c:	e022      	b.n	1a005994 <Chip_SSP_RWFrames_Blocking+0x66>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00594e:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a005950:	f013 0f01 	tst.w	r3, #1
1a005954:	d139      	bne.n	1a0059ca <Chip_SSP_RWFrames_Blocking+0x9c>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a005956:	4629      	mov	r1, r5
1a005958:	4620      	mov	r0, r4
1a00595a:	f7ff ff88 	bl	1a00586e <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a00595e:	68ea      	ldr	r2, [r5, #12]
1a005960:	692b      	ldr	r3, [r5, #16]
1a005962:	429a      	cmp	r2, r3
1a005964:	d302      	bcc.n	1a00596c <Chip_SSP_RWFrames_Blocking+0x3e>
1a005966:	686a      	ldr	r2, [r5, #4]
1a005968:	4293      	cmp	r3, r2
1a00596a:	d926      	bls.n	1a0059ba <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a00596c:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00596e:	f012 0f02 	tst.w	r2, #2
1a005972:	d0ec      	beq.n	1a00594e <Chip_SSP_RWFrames_Blocking+0x20>
1a005974:	686a      	ldr	r2, [r5, #4]
1a005976:	429a      	cmp	r2, r3
1a005978:	d2e9      	bcs.n	1a00594e <Chip_SSP_RWFrames_Blocking+0x20>
				SSP_Write2BFifo(pSSP, xf_setup);
1a00597a:	4629      	mov	r1, r5
1a00597c:	4620      	mov	r0, r4
1a00597e:	f7ff ff5d 	bl	1a00583c <SSP_Write2BFifo>
1a005982:	e7e4      	b.n	1a00594e <Chip_SSP_RWFrames_Blocking+0x20>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a005984:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a005986:	f013 0f01 	tst.w	r3, #1
1a00598a:	d120      	bne.n	1a0059ce <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a00598c:	4629      	mov	r1, r5
1a00598e:	4620      	mov	r0, r4
1a005990:	f7ff ff8e 	bl	1a0058b0 <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a005994:	68ea      	ldr	r2, [r5, #12]
1a005996:	692b      	ldr	r3, [r5, #16]
1a005998:	429a      	cmp	r2, r3
1a00599a:	d302      	bcc.n	1a0059a2 <Chip_SSP_RWFrames_Blocking+0x74>
1a00599c:	686a      	ldr	r2, [r5, #4]
1a00599e:	4293      	cmp	r3, r2
1a0059a0:	d90b      	bls.n	1a0059ba <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0059a2:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0059a4:	f012 0f02 	tst.w	r2, #2
1a0059a8:	d0ec      	beq.n	1a005984 <Chip_SSP_RWFrames_Blocking+0x56>
1a0059aa:	686a      	ldr	r2, [r5, #4]
1a0059ac:	429a      	cmp	r2, r3
1a0059ae:	d2e9      	bcs.n	1a005984 <Chip_SSP_RWFrames_Blocking+0x56>
				SSP_Write1BFifo(pSSP, xf_setup);
1a0059b0:	4629      	mov	r1, r5
1a0059b2:	4620      	mov	r0, r4
1a0059b4:	f7ff ff4f 	bl	1a005856 <SSP_Write1BFifo>
1a0059b8:	e7e4      	b.n	1a005984 <Chip_SSP_RWFrames_Blocking+0x56>
		}
	}
	if (xf_setup->tx_data) {
1a0059ba:	682b      	ldr	r3, [r5, #0]
1a0059bc:	b10b      	cbz	r3, 1a0059c2 <Chip_SSP_RWFrames_Blocking+0x94>
		return xf_setup->tx_cnt;
1a0059be:	6868      	ldr	r0, [r5, #4]
1a0059c0:	e004      	b.n	1a0059cc <Chip_SSP_RWFrames_Blocking+0x9e>
	}
	else if (xf_setup->rx_data) {
1a0059c2:	68ab      	ldr	r3, [r5, #8]
1a0059c4:	b12b      	cbz	r3, 1a0059d2 <Chip_SSP_RWFrames_Blocking+0xa4>
		return xf_setup->rx_cnt;
1a0059c6:	68e8      	ldr	r0, [r5, #12]
1a0059c8:	e000      	b.n	1a0059cc <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
1a0059ca:	2000      	movs	r0, #0
	}

	return 0;
}
1a0059cc:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a0059ce:	2000      	movs	r0, #0
1a0059d0:	e7fc      	b.n	1a0059cc <Chip_SSP_RWFrames_Blocking+0x9e>
	return 0;
1a0059d2:	2000      	movs	r0, #0
1a0059d4:	e7fa      	b.n	1a0059cc <Chip_SSP_RWFrames_Blocking+0x9e>

1a0059d6 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0059d6:	b570      	push	{r4, r5, r6, lr}
1a0059d8:	4606      	mov	r6, r0
1a0059da:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0059dc:	f7ff ff92 	bl	1a005904 <Chip_SSP_GetPeriphClockIndex>
1a0059e0:	f7ff fe04 	bl	1a0055ec <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0059e4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0059e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0059ea:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0059ec:	e000      	b.n	1a0059f0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0059ee:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0059f0:	42ab      	cmp	r3, r5
1a0059f2:	d90b      	bls.n	1a005a0c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0059f4:	1c4c      	adds	r4, r1, #1
1a0059f6:	fb02 f304 	mul.w	r3, r2, r4
1a0059fa:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0059fe:	429d      	cmp	r5, r3
1a005a00:	d2f6      	bcs.n	1a0059f0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a005a02:	2cff      	cmp	r4, #255	; 0xff
1a005a04:	d9f3      	bls.n	1a0059ee <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a005a06:	3202      	adds	r2, #2
				cr0_div = 0;
1a005a08:	2100      	movs	r1, #0
1a005a0a:	e7f1      	b.n	1a0059f0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a005a0c:	4630      	mov	r0, r6
1a005a0e:	f7ff ff85 	bl	1a00591c <Chip_SSP_SetClockRate>
}
1a005a12:	bd70      	pop	{r4, r5, r6, pc}

1a005a14 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a005a14:	b510      	push	{r4, lr}
1a005a16:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a005a18:	f7ff ff6a 	bl	1a0058f0 <Chip_SSP_GetClockIndex>
1a005a1c:	f7ff fdcc 	bl	1a0055b8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a005a20:	4620      	mov	r0, r4
1a005a22:	f7ff ff6f 	bl	1a005904 <Chip_SSP_GetPeriphClockIndex>
1a005a26:	f7ff fdc7 	bl	1a0055b8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005a2a:	6863      	ldr	r3, [r4, #4]
1a005a2c:	f023 0304 	bic.w	r3, r3, #4
1a005a30:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a005a32:	6823      	ldr	r3, [r4, #0]
1a005a34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005a38:	f043 0307 	orr.w	r3, r3, #7
1a005a3c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a005a3e:	4902      	ldr	r1, [pc, #8]	; (1a005a48 <Chip_SSP_Init+0x34>)
1a005a40:	4620      	mov	r0, r4
1a005a42:	f7ff ffc8 	bl	1a0059d6 <Chip_SSP_SetBitRate>
}
1a005a46:	bd10      	pop	{r4, pc}
1a005a48:	000186a0 	.word	0x000186a0

1a005a4c <getClkDiv>:
 * Private functions
 ****************************************************************************/

/* Get divider value */
STATIC Status getClkDiv(LPC_I2S_T *pI2S, I2S_AUDIO_FORMAT_T *format, uint16_t *pxDiv, uint16_t *pyDiv, uint32_t *pN)
{
1a005a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005a50:	b085      	sub	sp, #20
1a005a52:	460c      	mov	r4, r1
1a005a54:	4693      	mov	fp, r2
1a005a56:	469a      	mov	sl, r3
	uint16_t dif;
	uint16_t xDiv = 0, yDiv = 0;
	uint32_t N;
	uint16_t err, ErrorOptimal = 0xFFFF;

	pClk = Chip_Clock_GetRate(CLK_APB1_I2S);
1a005a58:	2023      	movs	r0, #35	; 0x23
1a005a5a:	f7ff fdc7 	bl	1a0055ec <Chip_Clock_GetRate>
1a005a5e:	4602      	mov	r2, r0
1a005a60:	9003      	str	r0, [sp, #12]

	/* divider is a fixed point number with 16 fractional bits */
	divider = (((uint64_t) (format->SampleRate) * 2 * (format->WordWidth) * 2) << 16) / pClk;
1a005a62:	6826      	ldr	r6, [r4, #0]
1a005a64:	2700      	movs	r7, #0
1a005a66:	f894 8005 	ldrb.w	r8, [r4, #5]
1a005a6a:	fba6 4508 	umull	r4, r5, r6, r8
1a005a6e:	00ab      	lsls	r3, r5, #2
1a005a70:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1a005a74:	e9cd 4500 	strd	r4, r5, [sp]
1a005a78:	00a4      	lsls	r4, r4, #2
1a005a7a:	0419      	lsls	r1, r3, #16
1a005a7c:	463b      	mov	r3, r7
1a005a7e:	9800      	ldr	r0, [sp, #0]
1a005a80:	0480      	lsls	r0, r0, #18
1a005a82:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
1a005a86:	f001 f82f 	bl	1a006ae8 <__aeabi_uldivmod>
1a005a8a:	4605      	mov	r5, r0
	/* find N that make x/y <= 1 -> divider <= 2^16 */
	for (N = 64; N > 0; N--) {
1a005a8c:	2440      	movs	r4, #64	; 0x40
1a005a8e:	b154      	cbz	r4, 1a005aa6 <getClkDiv+0x5a>
		if ((divider * N) < (1 << 16)) {
1a005a90:	fba4 2305 	umull	r2, r3, r4, r5
1a005a94:	fb04 3301 	mla	r3, r4, r1, r3
1a005a98:	2b00      	cmp	r3, #0
1a005a9a:	bf08      	it	eq
1a005a9c:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
1a005aa0:	d301      	bcc.n	1a005aa6 <getClkDiv+0x5a>
	for (N = 64; N > 0; N--) {
1a005aa2:	3c01      	subs	r4, #1
1a005aa4:	e7f3      	b.n	1a005a8e <getClkDiv+0x42>
			break;
		}
	}
	if (N == 0) {
1a005aa6:	2c00      	cmp	r4, #0
1a005aa8:	d042      	beq.n	1a005b30 <getClkDiv+0xe4>
		return ERROR;
	}
	divider *= N;
1a005aaa:	46a4      	mov	ip, r4
1a005aac:	fba4 0100 	umull	r0, r1, r4, r0
	uint16_t err, ErrorOptimal = 0xFFFF;
1a005ab0:	f64f 7eff 	movw	lr, #65535	; 0xffff
	uint16_t xDiv = 0, yDiv = 0;
1a005ab4:	2500      	movs	r5, #0
	for (y = 255; y > 0; y--) {
1a005ab6:	22ff      	movs	r2, #255	; 0xff
1a005ab8:	e01b      	b.n	1a005af2 <getClkDiv+0xa6>
		}
		else {
			err = dif;
		}
		if (err == 0) {
			yDiv = y;
1a005aba:	b295      	uxth	r5, r2
		else if (err < ErrorOptimal) {
			ErrorOptimal = err;
			yDiv = y;
		}
	}
	xDiv = ((uint64_t) yDiv * (format->SampleRate) * 2 * (format->WordWidth) * N * 2) / pClk;
1a005abc:	fba6 0105 	umull	r0, r1, r6, r5
1a005ac0:	fba8 2300 	umull	r2, r3, r8, r0
1a005ac4:	fb08 3301 	mla	r3, r8, r1, r3
1a005ac8:	fbac 8902 	umull	r8, r9, ip, r2
1a005acc:	fb0c 9903 	mla	r9, ip, r3, r9
1a005ad0:	ea4f 0189 	mov.w	r1, r9, lsl #2
1a005ad4:	9a03      	ldr	r2, [sp, #12]
1a005ad6:	463b      	mov	r3, r7
1a005ad8:	ea4f 0088 	mov.w	r0, r8, lsl #2
1a005adc:	ea41 7198 	orr.w	r1, r1, r8, lsr #30
1a005ae0:	f001 f802 	bl	1a006ae8 <__aeabi_uldivmod>
1a005ae4:	b280      	uxth	r0, r0
	if (xDiv >= 256) {
1a005ae6:	28ff      	cmp	r0, #255	; 0xff
1a005ae8:	d817      	bhi.n	1a005b1a <getClkDiv+0xce>
		xDiv = 0xFF;
	}
	if (xDiv == 0) {
1a005aea:	b9b8      	cbnz	r0, 1a005b1c <getClkDiv+0xd0>
		xDiv = 1;
1a005aec:	2001      	movs	r0, #1
1a005aee:	e015      	b.n	1a005b1c <getClkDiv+0xd0>
	for (y = 255; y > 0; y--) {
1a005af0:	3a01      	subs	r2, #1
1a005af2:	2a00      	cmp	r2, #0
1a005af4:	d0e2      	beq.n	1a005abc <getClkDiv+0x70>
		x = y * divider;
1a005af6:	fb00 f302 	mul.w	r3, r0, r2
		if (x & (0xFF000000)) {
1a005afa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a005afe:	d1f7      	bne.n	1a005af0 <getClkDiv+0xa4>
		dif = x & 0xFFFF;
1a005b00:	b29b      	uxth	r3, r3
		if (dif > 0x8000) {
1a005b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
1a005b06:	d901      	bls.n	1a005b0c <getClkDiv+0xc0>
			err = 0x10000 - dif;
1a005b08:	425b      	negs	r3, r3
1a005b0a:	b29b      	uxth	r3, r3
		if (err == 0) {
1a005b0c:	2b00      	cmp	r3, #0
1a005b0e:	d0d4      	beq.n	1a005aba <getClkDiv+0x6e>
		else if (err < ErrorOptimal) {
1a005b10:	4573      	cmp	r3, lr
1a005b12:	d2ed      	bcs.n	1a005af0 <getClkDiv+0xa4>
			yDiv = y;
1a005b14:	b295      	uxth	r5, r2
			ErrorOptimal = err;
1a005b16:	469e      	mov	lr, r3
1a005b18:	e7ea      	b.n	1a005af0 <getClkDiv+0xa4>
		xDiv = 0xFF;
1a005b1a:	20ff      	movs	r0, #255	; 0xff
	}

	*pxDiv = xDiv;
1a005b1c:	f8ab 0000 	strh.w	r0, [fp]
	*pyDiv = yDiv;
1a005b20:	f8aa 5000 	strh.w	r5, [sl]
	*pN = N;
1a005b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005b26:	601c      	str	r4, [r3, #0]
	return SUCCESS;
1a005b28:	2001      	movs	r0, #1
}
1a005b2a:	b005      	add	sp, #20
1a005b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERROR;
1a005b30:	2000      	movs	r0, #0
1a005b32:	e7fa      	b.n	1a005b2a <getClkDiv+0xde>

1a005b34 <Chip_I2S_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the I2S interface */
void Chip_I2S_Init(LPC_I2S_T *pI2S)
{
1a005b34:	b508      	push	{r3, lr}
	Chip_Clock_Enable(CLK_APB1_I2S);
1a005b36:	2023      	movs	r0, #35	; 0x23
1a005b38:	f7ff fd3e 	bl	1a0055b8 <Chip_Clock_Enable>
}
1a005b3c:	bd08      	pop	{r3, pc}

1a005b3e <Chip_I2S_TxConfig>:
	Chip_Clock_Disable(CLK_APB1_I2S);
}

/* Configure I2S for Audio Format input */
Status Chip_I2S_TxConfig(LPC_I2S_T *pI2S, I2S_AUDIO_FORMAT_T *format)
{
1a005b3e:	b530      	push	{r4, r5, lr}
1a005b40:	b085      	sub	sp, #20
1a005b42:	4604      	mov	r4, r0
1a005b44:	460d      	mov	r5, r1
	uint32_t temp;
	uint16_t xDiv, yDiv;
	uint32_t N;

	if (getClkDiv(pI2S, format, &xDiv, &yDiv, &N) == ERROR) {
1a005b46:	ab02      	add	r3, sp, #8
1a005b48:	9300      	str	r3, [sp, #0]
1a005b4a:	ab03      	add	r3, sp, #12
1a005b4c:	f10d 020e 	add.w	r2, sp, #14
1a005b50:	f7ff ff7c 	bl	1a005a4c <getClkDiv>
1a005b54:	4603      	mov	r3, r0
1a005b56:	b320      	cbz	r0, 1a005ba2 <Chip_I2S_TxConfig+0x64>
		return ERROR;
	}

	temp = pI2S->DAO & (~(I2S_DAO_WORDWIDTH_MASK | I2S_DAO_MONO | I2S_DAO_SLAVE | I2S_DAO_WS_HALFPERIOD_MASK));
1a005b58:	6823      	ldr	r3, [r4, #0]
1a005b5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
1a005b5e:	f023 0367 	bic.w	r3, r3, #103	; 0x67
	if (format->WordWidth <= 8) {
1a005b62:	796a      	ldrb	r2, [r5, #5]
1a005b64:	2a08      	cmp	r2, #8
1a005b66:	d903      	bls.n	1a005b70 <Chip_I2S_TxConfig+0x32>
		temp |= I2S_WORDWIDTH_8;
	}
	else if (format->WordWidth <= 16) {
1a005b68:	2a10      	cmp	r2, #16
1a005b6a:	d81d      	bhi.n	1a005ba8 <Chip_I2S_TxConfig+0x6a>
		temp |= I2S_WORDWIDTH_16;
1a005b6c:	f043 0301 	orr.w	r3, r3, #1
	}
	else {
		temp |= I2S_WORDWIDTH_32;
	}

	temp |= (format->ChannelNumber) == 1 ? I2S_MONO : I2S_STEREO;
1a005b70:	7929      	ldrb	r1, [r5, #4]
1a005b72:	2901      	cmp	r1, #1
1a005b74:	d01b      	beq.n	1a005bae <Chip_I2S_TxConfig+0x70>
1a005b76:	2100      	movs	r1, #0
1a005b78:	430b      	orrs	r3, r1
	temp |= I2S_MASTER_MODE;
	temp |= I2S_DAO_WS_HALFPERIOD(format->WordWidth - 1);
1a005b7a:	1e51      	subs	r1, r2, #1
1a005b7c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
1a005b80:	ea02 1281 	and.w	r2, r2, r1, lsl #6
1a005b84:	4313      	orrs	r3, r2
	pI2S->DAO = temp;
1a005b86:	6023      	str	r3, [r4, #0]
	pI2S->TXMODE = I2S_TXMODE_CLKSEL(0);
1a005b88:	2300      	movs	r3, #0
1a005b8a:	6323      	str	r3, [r4, #48]	; 0x30
	pI2S->TXBITRATE = N - 1;
1a005b8c:	9b02      	ldr	r3, [sp, #8]
1a005b8e:	3b01      	subs	r3, #1
1a005b90:	62a3      	str	r3, [r4, #40]	; 0x28
	pI2S->TXRATE = yDiv | (xDiv << 8);
1a005b92:	f8bd 200e 	ldrh.w	r2, [sp, #14]
1a005b96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a005b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a005b9e:	6223      	str	r3, [r4, #32]
	return SUCCESS;
1a005ba0:	2301      	movs	r3, #1
}
1a005ba2:	4618      	mov	r0, r3
1a005ba4:	b005      	add	sp, #20
1a005ba6:	bd30      	pop	{r4, r5, pc}
		temp |= I2S_WORDWIDTH_32;
1a005ba8:	f043 0303 	orr.w	r3, r3, #3
1a005bac:	e7e0      	b.n	1a005b70 <Chip_I2S_TxConfig+0x32>
	temp |= (format->ChannelNumber) == 1 ? I2S_MONO : I2S_STEREO;
1a005bae:	2104      	movs	r1, #4
1a005bb0:	e7e2      	b.n	1a005b78 <Chip_I2S_TxConfig+0x3a>

1a005bb2 <Chip_I2S_Int_TxCmd>:

/* Enable/Disable Interrupt with a specific FIFO depth */
void Chip_I2S_Int_TxCmd(LPC_I2S_T *pI2S, FunctionalState newState, uint8_t depth)
{
	uint32_t temp;
	depth &= 0x0F;
1a005bb2:	f002 020f 	and.w	r2, r2, #15
	if (newState == ENABLE) {
1a005bb6:	2901      	cmp	r1, #1
1a005bb8:	d004      	beq.n	1a005bc4 <Chip_I2S_Int_TxCmd+0x12>
	    temp = pI2S->IRQ & (~I2S_IRQ_TX_DEPTH_MASK);
	    pI2S->IRQ = temp | (I2S_IRQ_TX_DEPTH(depth));
		pI2S->IRQ |= 0x02;
	}
	else {
		pI2S->IRQ &= (~0x02);
1a005bba:	69c3      	ldr	r3, [r0, #28]
1a005bbc:	f023 0302 	bic.w	r3, r3, #2
1a005bc0:	61c3      	str	r3, [r0, #28]
	}
}
1a005bc2:	4770      	bx	lr
	    temp = pI2S->IRQ & (~I2S_IRQ_TX_DEPTH_MASK);
1a005bc4:	69c3      	ldr	r3, [r0, #28]
1a005bc6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
	    pI2S->IRQ = temp | (I2S_IRQ_TX_DEPTH(depth));
1a005bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a005bce:	61c3      	str	r3, [r0, #28]
		pI2S->IRQ |= 0x02;
1a005bd0:	69c3      	ldr	r3, [r0, #28]
1a005bd2:	f043 0302 	orr.w	r3, r3, #2
1a005bd6:	61c3      	str	r3, [r0, #28]
1a005bd8:	4770      	bx	lr
1a005bda:	Address 0x000000001a005bda is out of bounds.


1a005bdc <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a005bdc:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a005bde:	4a0b      	ldr	r2, [pc, #44]	; (1a005c0c <SystemInit+0x30>)
1a005be0:	4b0b      	ldr	r3, [pc, #44]	; (1a005c10 <SystemInit+0x34>)
1a005be2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a005be4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a005be8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a005bea:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a005bee:	2b20      	cmp	r3, #32
1a005bf0:	d004      	beq.n	1a005bfc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a005bf2:	f7ff f939 	bl	1a004e68 <Board_SystemInit>
   Board_Init();
1a005bf6:	f7ff f8bf 	bl	1a004d78 <Board_Init>
#endif
}
1a005bfa:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a005bfc:	4a04      	ldr	r2, [pc, #16]	; (1a005c10 <SystemInit+0x34>)
1a005bfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a005c02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a005c06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a005c0a:	e7f2      	b.n	1a005bf2 <SystemInit+0x16>
1a005c0c:	1a000000 	.word	0x1a000000
1a005c10:	e000ed00 	.word	0xe000ed00

1a005c14 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a005c14:	4b04      	ldr	r3, [pc, #16]	; (1a005c28 <cyclesCounterInit+0x14>)
1a005c16:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a005c18:	4a04      	ldr	r2, [pc, #16]	; (1a005c2c <cyclesCounterInit+0x18>)
1a005c1a:	6813      	ldr	r3, [r2, #0]
1a005c1c:	f043 0301 	orr.w	r3, r3, #1
1a005c20:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a005c22:	2001      	movs	r0, #1
1a005c24:	4770      	bx	lr
1a005c26:	bf00      	nop
1a005c28:	10000050 	.word	0x10000050
1a005c2c:	e0001000 	.word	0xe0001000

1a005c30 <uartProcessIRQ>:
{
1a005c30:	b570      	push	{r4, r5, r6, lr}
1a005c32:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a005c34:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a005c38:	0093      	lsls	r3, r2, #2
1a005c3a:	4a22      	ldr	r2, [pc, #136]	; (1a005cc4 <uartProcessIRQ+0x94>)
1a005c3c:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a005c3e:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a005c40:	b2ed      	uxtb	r5, r5
1a005c42:	f015 0f01 	tst.w	r5, #1
1a005c46:	d00a      	beq.n	1a005c5e <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a005c48:	b928      	cbnz	r0, 1a005c56 <uartProcessIRQ+0x26>
1a005c4a:	4b1f      	ldr	r3, [pc, #124]	; (1a005cc8 <uartProcessIRQ+0x98>)
1a005c4c:	681b      	ldr	r3, [r3, #0]
1a005c4e:	b113      	cbz	r3, 1a005c56 <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a005c50:	4a1e      	ldr	r2, [pc, #120]	; (1a005ccc <uartProcessIRQ+0x9c>)
1a005c52:	6810      	ldr	r0, [r2, #0]
1a005c54:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a005c56:	2c03      	cmp	r4, #3
1a005c58:	d014      	beq.n	1a005c84 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a005c5a:	2c05      	cmp	r4, #5
1a005c5c:	d01a      	beq.n	1a005c94 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a005c5e:	f015 0f20 	tst.w	r5, #32
1a005c62:	d00e      	beq.n	1a005c82 <uartProcessIRQ+0x52>
	return pUART->IER;
1a005c64:	6873      	ldr	r3, [r6, #4]
1a005c66:	f013 0f02 	tst.w	r3, #2
1a005c6a:	d00a      	beq.n	1a005c82 <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a005c6c:	b92c      	cbnz	r4, 1a005c7a <uartProcessIRQ+0x4a>
1a005c6e:	4b18      	ldr	r3, [pc, #96]	; (1a005cd0 <uartProcessIRQ+0xa0>)
1a005c70:	681b      	ldr	r3, [r3, #0]
1a005c72:	b113      	cbz	r3, 1a005c7a <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a005c74:	4a17      	ldr	r2, [pc, #92]	; (1a005cd4 <uartProcessIRQ+0xa4>)
1a005c76:	6810      	ldr	r0, [r2, #0]
1a005c78:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a005c7a:	2c03      	cmp	r4, #3
1a005c7c:	d012      	beq.n	1a005ca4 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a005c7e:	2c05      	cmp	r4, #5
1a005c80:	d018      	beq.n	1a005cb4 <uartProcessIRQ+0x84>
}
1a005c82:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a005c84:	4b14      	ldr	r3, [pc, #80]	; (1a005cd8 <uartProcessIRQ+0xa8>)
1a005c86:	681b      	ldr	r3, [r3, #0]
1a005c88:	2b00      	cmp	r3, #0
1a005c8a:	d0e6      	beq.n	1a005c5a <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a005c8c:	4a13      	ldr	r2, [pc, #76]	; (1a005cdc <uartProcessIRQ+0xac>)
1a005c8e:	6810      	ldr	r0, [r2, #0]
1a005c90:	4798      	blx	r3
1a005c92:	e7e2      	b.n	1a005c5a <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a005c94:	4b12      	ldr	r3, [pc, #72]	; (1a005ce0 <uartProcessIRQ+0xb0>)
1a005c96:	681b      	ldr	r3, [r3, #0]
1a005c98:	2b00      	cmp	r3, #0
1a005c9a:	d0e0      	beq.n	1a005c5e <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a005c9c:	4a11      	ldr	r2, [pc, #68]	; (1a005ce4 <uartProcessIRQ+0xb4>)
1a005c9e:	6810      	ldr	r0, [r2, #0]
1a005ca0:	4798      	blx	r3
1a005ca2:	e7dc      	b.n	1a005c5e <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a005ca4:	4b10      	ldr	r3, [pc, #64]	; (1a005ce8 <uartProcessIRQ+0xb8>)
1a005ca6:	681b      	ldr	r3, [r3, #0]
1a005ca8:	2b00      	cmp	r3, #0
1a005caa:	d0e8      	beq.n	1a005c7e <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a005cac:	4a0f      	ldr	r2, [pc, #60]	; (1a005cec <uartProcessIRQ+0xbc>)
1a005cae:	6810      	ldr	r0, [r2, #0]
1a005cb0:	4798      	blx	r3
1a005cb2:	e7e4      	b.n	1a005c7e <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a005cb4:	4b0e      	ldr	r3, [pc, #56]	; (1a005cf0 <uartProcessIRQ+0xc0>)
1a005cb6:	681b      	ldr	r3, [r3, #0]
1a005cb8:	2b00      	cmp	r3, #0
1a005cba:	d0e2      	beq.n	1a005c82 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a005cbc:	4a0d      	ldr	r2, [pc, #52]	; (1a005cf4 <uartProcessIRQ+0xc4>)
1a005cbe:	6810      	ldr	r0, [r2, #0]
1a005cc0:	4798      	blx	r3
}
1a005cc2:	e7de      	b.n	1a005c82 <uartProcessIRQ+0x52>
1a005cc4:	1a00e820 	.word	0x1a00e820
1a005cc8:	1000324c 	.word	0x1000324c
1a005ccc:	10003250 	.word	0x10003250
1a005cd0:	10003264 	.word	0x10003264
1a005cd4:	10003268 	.word	0x10003268
1a005cd8:	10003254 	.word	0x10003254
1a005cdc:	10003258 	.word	0x10003258
1a005ce0:	1000325c 	.word	0x1000325c
1a005ce4:	10003260 	.word	0x10003260
1a005ce8:	1000326c 	.word	0x1000326c
1a005cec:	10003270 	.word	0x10003270
1a005cf0:	10003274 	.word	0x10003274
1a005cf4:	10003278 	.word	0x10003278

1a005cf8 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a005cf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a005cfc:	0083      	lsls	r3, r0, #2
1a005cfe:	4a03      	ldr	r2, [pc, #12]	; (1a005d0c <uartTxReady+0x14>)
1a005d00:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a005d02:	6958      	ldr	r0, [r3, #20]
}
1a005d04:	f000 0020 	and.w	r0, r0, #32
1a005d08:	4770      	bx	lr
1a005d0a:	bf00      	nop
1a005d0c:	1a00e820 	.word	0x1a00e820

1a005d10 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a005d10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a005d14:	0083      	lsls	r3, r0, #2
1a005d16:	4a02      	ldr	r2, [pc, #8]	; (1a005d20 <uartTxWrite+0x10>)
1a005d18:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a005d1a:	6019      	str	r1, [r3, #0]
}
1a005d1c:	4770      	bx	lr
1a005d1e:	bf00      	nop
1a005d20:	1a00e820 	.word	0x1a00e820

1a005d24 <uartWriteByte>:
{
1a005d24:	b538      	push	{r3, r4, r5, lr}
1a005d26:	4604      	mov	r4, r0
1a005d28:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a005d2a:	4620      	mov	r0, r4
1a005d2c:	f7ff ffe4 	bl	1a005cf8 <uartTxReady>
1a005d30:	2800      	cmp	r0, #0
1a005d32:	d0fa      	beq.n	1a005d2a <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a005d34:	4629      	mov	r1, r5
1a005d36:	4620      	mov	r0, r4
1a005d38:	f7ff ffea 	bl	1a005d10 <uartTxWrite>
}
1a005d3c:	bd38      	pop	{r3, r4, r5, pc}

1a005d3e <uartWriteString>:
{
1a005d3e:	b538      	push	{r3, r4, r5, lr}
1a005d40:	4605      	mov	r5, r0
1a005d42:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a005d44:	7821      	ldrb	r1, [r4, #0]
1a005d46:	b121      	cbz	r1, 1a005d52 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a005d48:	4628      	mov	r0, r5
1a005d4a:	f7ff ffeb 	bl	1a005d24 <uartWriteByte>
      str++;
1a005d4e:	3401      	adds	r4, #1
1a005d50:	e7f8      	b.n	1a005d44 <uartWriteString+0x6>
}
1a005d52:	bd38      	pop	{r3, r4, r5, pc}

1a005d54 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a005d54:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a005d56:	2003      	movs	r0, #3
1a005d58:	f7ff ff6a 	bl	1a005c30 <uartProcessIRQ>
}
1a005d5c:	bd08      	pop	{r3, pc}

1a005d5e <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a005d5e:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a005d60:	2005      	movs	r0, #5
1a005d62:	f7ff ff65 	bl	1a005c30 <uartProcessIRQ>
}
1a005d66:	bd08      	pop	{r3, pc}

1a005d68 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a005d68:	b108      	cbz	r0, 1a005d6e <spiInit+0x6>
      #else
         #error BOARD compile variable must be defined
      #endif

   } else {
      retVal = FALSE;
1a005d6a:	2000      	movs	r0, #0
   }

   return retVal;
}
1a005d6c:	4770      	bx	lr
{
1a005d6e:	b570      	push	{r4, r5, r6, lr}
	LPC_SCU->SFSP[port][pin] = modefunc;
1a005d70:	4c0e      	ldr	r4, [pc, #56]	; (1a005dac <spiInit+0x44>)
1a005d72:	2600      	movs	r6, #0
1a005d74:	f8c4 6790 	str.w	r6, [r4, #1936]	; 0x790
1a005d78:	23c5      	movs	r3, #197	; 0xc5
1a005d7a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a005d7e:	2305      	movs	r3, #5
1a005d80:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
         Chip_SSP_Init( LPC_SSP1 );
1a005d84:	4d0a      	ldr	r5, [pc, #40]	; (1a005db0 <spiInit+0x48>)
1a005d86:	4628      	mov	r0, r5
1a005d88:	f7ff fe44 	bl	1a005a14 <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a005d8c:	686b      	ldr	r3, [r5, #4]
1a005d8e:	f043 0302 	orr.w	r3, r3, #2
1a005d92:	606b      	str	r3, [r5, #4]
1a005d94:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a005d98:	4906      	ldr	r1, [pc, #24]	; (1a005db4 <spiInit+0x4c>)
1a005d9a:	f242 020c 	movw	r2, #8204	; 0x200c
1a005d9e:	588b      	ldr	r3, [r1, r2]
1a005da0:	f043 0301 	orr.w	r3, r3, #1
1a005da4:	508b      	str	r3, [r1, r2]
   bool_t retVal = TRUE;
1a005da6:	2001      	movs	r0, #1
}
1a005da8:	bd70      	pop	{r4, r5, r6, pc}
1a005daa:	bf00      	nop
1a005dac:	40086000 	.word	0x40086000
1a005db0:	400c5000 	.word	0x400c5000
1a005db4:	400f4000 	.word	0x400f4000

1a005db8 <tickInit>:
void tickerCallback( void );


// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a005db8:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickInit() in a program with freeRTOS has no effect\r\n" );
1a005dba:	4903      	ldr	r1, [pc, #12]	; (1a005dc8 <tickInit+0x10>)
1a005dbc:	2003      	movs	r0, #3
1a005dbe:	f7ff ffbe 	bl	1a005d3e <uartWriteString>
            ret_val = 0;
         }
      }
      return ret_val;
   #endif
}
1a005dc2:	2000      	movs	r0, #0
1a005dc4:	bd08      	pop	{r3, pc}
1a005dc6:	bf00      	nop
1a005dc8:	1a00e8ac 	.word	0x1a00e8ac

1a005dcc <tickCallbackSet>:
   #endif
}

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
1a005dcc:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
1a005dce:	4903      	ldr	r1, [pc, #12]	; (1a005ddc <tickCallbackSet+0x10>)
1a005dd0:	2003      	movs	r0, #3
1a005dd2:	f7ff ffb4 	bl	1a005d3e <uartWriteString>
      } else {
         retVal &= FALSE;
      }
      return retVal;
   #endif
}
1a005dd6:	2000      	movs	r0, #0
1a005dd8:	bd08      	pop	{r3, pc}
1a005dda:	bf00      	nop
1a005ddc:	1a00e868 	.word	0x1a00e868

1a005de0 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a005de0:	e7fe      	b.n	1a005de0 <errorOcurred>

1a005de2 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a005de2:	4770      	bx	lr

1a005de4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a005de4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005de6:	2400      	movs	r4, #0
1a005de8:	e001      	b.n	1a005dee <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005dea:	3401      	adds	r4, #1
1a005dec:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005dee:	2c03      	cmp	r4, #3
1a005df0:	d812      	bhi.n	1a005e18 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a005df2:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005df4:	4b09      	ldr	r3, [pc, #36]	; (1a005e1c <TIMER0_IRQHandler+0x38>)
1a005df6:	681a      	ldr	r2, [r3, #0]
1a005df8:	f004 010f 	and.w	r1, r4, #15
1a005dfc:	2301      	movs	r3, #1
1a005dfe:	408b      	lsls	r3, r1
1a005e00:	421a      	tst	r2, r3
1a005e02:	d0f2      	beq.n	1a005dea <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005e04:	4b06      	ldr	r3, [pc, #24]	; (1a005e20 <TIMER0_IRQHandler+0x3c>)
1a005e06:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a005e0a:	2000      	movs	r0, #0
1a005e0c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005e0e:	2301      	movs	r3, #1
1a005e10:	40ab      	lsls	r3, r5
1a005e12:	4a02      	ldr	r2, [pc, #8]	; (1a005e1c <TIMER0_IRQHandler+0x38>)
1a005e14:	6013      	str	r3, [r2, #0]
1a005e16:	e7e8      	b.n	1a005dea <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a005e18:	bd38      	pop	{r3, r4, r5, pc}
1a005e1a:	bf00      	nop
1a005e1c:	40084000 	.word	0x40084000
1a005e20:	10000054 	.word	0x10000054

1a005e24 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a005e24:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005e26:	2400      	movs	r4, #0
1a005e28:	e001      	b.n	1a005e2e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005e2a:	3401      	adds	r4, #1
1a005e2c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005e2e:	2c03      	cmp	r4, #3
1a005e30:	d813      	bhi.n	1a005e5a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a005e32:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005e34:	4b09      	ldr	r3, [pc, #36]	; (1a005e5c <TIMER1_IRQHandler+0x38>)
1a005e36:	681a      	ldr	r2, [r3, #0]
1a005e38:	f004 010f 	and.w	r1, r4, #15
1a005e3c:	2301      	movs	r3, #1
1a005e3e:	408b      	lsls	r3, r1
1a005e40:	421a      	tst	r2, r3
1a005e42:	d0f2      	beq.n	1a005e2a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005e44:	1d23      	adds	r3, r4, #4
1a005e46:	4a06      	ldr	r2, [pc, #24]	; (1a005e60 <TIMER1_IRQHandler+0x3c>)
1a005e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a005e4c:	2000      	movs	r0, #0
1a005e4e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005e50:	2301      	movs	r3, #1
1a005e52:	40ab      	lsls	r3, r5
1a005e54:	4a01      	ldr	r2, [pc, #4]	; (1a005e5c <TIMER1_IRQHandler+0x38>)
1a005e56:	6013      	str	r3, [r2, #0]
1a005e58:	e7e7      	b.n	1a005e2a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a005e5a:	bd38      	pop	{r3, r4, r5, pc}
1a005e5c:	40085000 	.word	0x40085000
1a005e60:	10000054 	.word	0x10000054

1a005e64 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a005e64:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005e66:	2400      	movs	r4, #0
1a005e68:	e001      	b.n	1a005e6e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005e6a:	3401      	adds	r4, #1
1a005e6c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005e6e:	2c03      	cmp	r4, #3
1a005e70:	d814      	bhi.n	1a005e9c <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a005e72:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005e74:	4b0a      	ldr	r3, [pc, #40]	; (1a005ea0 <TIMER2_IRQHandler+0x3c>)
1a005e76:	681a      	ldr	r2, [r3, #0]
1a005e78:	f004 010f 	and.w	r1, r4, #15
1a005e7c:	2301      	movs	r3, #1
1a005e7e:	408b      	lsls	r3, r1
1a005e80:	421a      	tst	r2, r3
1a005e82:	d0f2      	beq.n	1a005e6a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005e84:	f104 0308 	add.w	r3, r4, #8
1a005e88:	4a06      	ldr	r2, [pc, #24]	; (1a005ea4 <TIMER2_IRQHandler+0x40>)
1a005e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a005e8e:	2000      	movs	r0, #0
1a005e90:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005e92:	2301      	movs	r3, #1
1a005e94:	40ab      	lsls	r3, r5
1a005e96:	4a02      	ldr	r2, [pc, #8]	; (1a005ea0 <TIMER2_IRQHandler+0x3c>)
1a005e98:	6013      	str	r3, [r2, #0]
1a005e9a:	e7e6      	b.n	1a005e6a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a005e9c:	bd38      	pop	{r3, r4, r5, pc}
1a005e9e:	bf00      	nop
1a005ea0:	400c3000 	.word	0x400c3000
1a005ea4:	10000054 	.word	0x10000054

1a005ea8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a005ea8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005eaa:	2400      	movs	r4, #0
1a005eac:	e001      	b.n	1a005eb2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005eae:	3401      	adds	r4, #1
1a005eb0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005eb2:	2c03      	cmp	r4, #3
1a005eb4:	d814      	bhi.n	1a005ee0 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a005eb6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005eb8:	4b0a      	ldr	r3, [pc, #40]	; (1a005ee4 <TIMER3_IRQHandler+0x3c>)
1a005eba:	681a      	ldr	r2, [r3, #0]
1a005ebc:	f004 010f 	and.w	r1, r4, #15
1a005ec0:	2301      	movs	r3, #1
1a005ec2:	408b      	lsls	r3, r1
1a005ec4:	421a      	tst	r2, r3
1a005ec6:	d0f2      	beq.n	1a005eae <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005ec8:	f104 030c 	add.w	r3, r4, #12
1a005ecc:	4a06      	ldr	r2, [pc, #24]	; (1a005ee8 <TIMER3_IRQHandler+0x40>)
1a005ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a005ed2:	2000      	movs	r0, #0
1a005ed4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005ed6:	2301      	movs	r3, #1
1a005ed8:	40ab      	lsls	r3, r5
1a005eda:	4a02      	ldr	r2, [pc, #8]	; (1a005ee4 <TIMER3_IRQHandler+0x3c>)
1a005edc:	6013      	str	r3, [r2, #0]
1a005ede:	e7e6      	b.n	1a005eae <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a005ee0:	bd38      	pop	{r3, r4, r5, pc}
1a005ee2:	bf00      	nop
1a005ee4:	400c4000 	.word	0x400c4000
1a005ee8:	10000054 	.word	0x10000054

1a005eec <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a005eec:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a005eee:	4d0b      	ldr	r5, [pc, #44]	; (1a005f1c <gpioObtainPinInit+0x30>)
1a005ef0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a005ef4:	182c      	adds	r4, r5, r0
1a005ef6:	5628      	ldrsb	r0, [r5, r0]
1a005ef8:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a005efa:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a005efe:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a005f00:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a005f04:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a005f06:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a005f0a:	9b02      	ldr	r3, [sp, #8]
1a005f0c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a005f0e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a005f12:	9b03      	ldr	r3, [sp, #12]
1a005f14:	701a      	strb	r2, [r3, #0]
}
1a005f16:	bc30      	pop	{r4, r5}
1a005f18:	4770      	bx	lr
1a005f1a:	bf00      	nop
1a005f1c:	1a00e8ec 	.word	0x1a00e8ec

1a005f20 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a005f20:	f110 0f02 	cmn.w	r0, #2
1a005f24:	f000 80c7 	beq.w	1a0060b6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a005f28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005f2c:	f000 80c5 	beq.w	1a0060ba <gpioInit+0x19a>
{
1a005f30:	b570      	push	{r4, r5, r6, lr}
1a005f32:	b084      	sub	sp, #16
1a005f34:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a005f36:	2300      	movs	r3, #0
1a005f38:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a005f3c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a005f40:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a005f44:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a005f48:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a005f4c:	f10d 030b 	add.w	r3, sp, #11
1a005f50:	9301      	str	r3, [sp, #4]
1a005f52:	ab03      	add	r3, sp, #12
1a005f54:	9300      	str	r3, [sp, #0]
1a005f56:	f10d 030d 	add.w	r3, sp, #13
1a005f5a:	f10d 020e 	add.w	r2, sp, #14
1a005f5e:	f10d 010f 	add.w	r1, sp, #15
1a005f62:	f7ff ffc3 	bl	1a005eec <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a005f66:	2c05      	cmp	r4, #5
1a005f68:	f200 80a9 	bhi.w	1a0060be <gpioInit+0x19e>
1a005f6c:	e8df f004 	tbb	[pc, r4]
1a005f70:	45278109 	.word	0x45278109
1a005f74:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a005f76:	4853      	ldr	r0, [pc, #332]	; (1a0060c4 <gpioInit+0x1a4>)
1a005f78:	f7ff fc20 	bl	1a0057bc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a005f7c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a005f7e:	b004      	add	sp, #16
1a005f80:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a005f82:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005f86:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a005f8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005f8e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a005f92:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a005f96:	494c      	ldr	r1, [pc, #304]	; (1a0060c8 <gpioInit+0x1a8>)
1a005f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a005f9c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005fa0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a005fa4:	2001      	movs	r0, #1
1a005fa6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a005faa:	4c46      	ldr	r4, [pc, #280]	; (1a0060c4 <gpioInit+0x1a4>)
1a005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a005fb0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a005fb4:	ea22 0201 	bic.w	r2, r2, r1
1a005fb8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a005fbc:	e7df      	b.n	1a005f7e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a005fbe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005fc2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a005fc6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005fca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a005fce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a005fd2:	493d      	ldr	r1, [pc, #244]	; (1a0060c8 <gpioInit+0x1a8>)
1a005fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a005fd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005fdc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a005fe0:	2001      	movs	r0, #1
1a005fe2:	fa00 f102 	lsl.w	r1, r0, r2
1a005fe6:	4c37      	ldr	r4, [pc, #220]	; (1a0060c4 <gpioInit+0x1a4>)
1a005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a005fec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a005ff0:	ea22 0201 	bic.w	r2, r2, r1
1a005ff4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a005ff8:	e7c1      	b.n	1a005f7e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a005ffa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005ffe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006002:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006006:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00600a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00600e:	492e      	ldr	r1, [pc, #184]	; (1a0060c8 <gpioInit+0x1a8>)
1a006010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006014:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006018:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00601c:	2001      	movs	r0, #1
1a00601e:	fa00 f102 	lsl.w	r1, r0, r2
1a006022:	4c28      	ldr	r4, [pc, #160]	; (1a0060c4 <gpioInit+0x1a4>)
1a006024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006028:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00602c:	ea22 0201 	bic.w	r2, r2, r1
1a006030:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006034:	e7a3      	b.n	1a005f7e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a006036:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00603a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00603e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006042:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a006046:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00604a:	491f      	ldr	r1, [pc, #124]	; (1a0060c8 <gpioInit+0x1a8>)
1a00604c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006050:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006054:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006058:	2001      	movs	r0, #1
1a00605a:	fa00 f102 	lsl.w	r1, r0, r2
1a00605e:	4c19      	ldr	r4, [pc, #100]	; (1a0060c4 <gpioInit+0x1a4>)
1a006060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006064:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006068:	ea22 0201 	bic.w	r2, r2, r1
1a00606c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006070:	e785      	b.n	1a005f7e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a006072:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006076:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00607a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00607e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006082:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006086:	4910      	ldr	r1, [pc, #64]	; (1a0060c8 <gpioInit+0x1a8>)
1a006088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00608c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a006090:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006094:	2001      	movs	r0, #1
1a006096:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00609a:	4b0a      	ldr	r3, [pc, #40]	; (1a0060c4 <gpioInit+0x1a4>)
1a00609c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0060a0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0060a4:	4331      	orrs	r1, r6
1a0060a6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0060aa:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0060ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0060b0:	2100      	movs	r1, #0
1a0060b2:	5499      	strb	r1, [r3, r2]
1a0060b4:	e763      	b.n	1a005f7e <gpioInit+0x5e>
	  return FALSE;
1a0060b6:	2000      	movs	r0, #0
1a0060b8:	4770      	bx	lr
	  return FALSE;
1a0060ba:	2000      	movs	r0, #0
}
1a0060bc:	4770      	bx	lr
      ret_val = 0;
1a0060be:	2000      	movs	r0, #0
1a0060c0:	e75d      	b.n	1a005f7e <gpioInit+0x5e>
1a0060c2:	bf00      	nop
1a0060c4:	400f4000 	.word	0x400f4000
1a0060c8:	40086000 	.word	0x40086000

1a0060cc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0060cc:	f110 0f02 	cmn.w	r0, #2
1a0060d0:	d02d      	beq.n	1a00612e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0060d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0060d6:	d02c      	beq.n	1a006132 <gpioWrite+0x66>
{
1a0060d8:	b510      	push	{r4, lr}
1a0060da:	b084      	sub	sp, #16
1a0060dc:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0060de:	2300      	movs	r3, #0
1a0060e0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0060e4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0060e8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0060ec:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0060f0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0060f4:	f10d 030b 	add.w	r3, sp, #11
1a0060f8:	9301      	str	r3, [sp, #4]
1a0060fa:	ab03      	add	r3, sp, #12
1a0060fc:	9300      	str	r3, [sp, #0]
1a0060fe:	f10d 030d 	add.w	r3, sp, #13
1a006102:	f10d 020e 	add.w	r2, sp, #14
1a006106:	f10d 010f 	add.w	r1, sp, #15
1a00610a:	f7ff feef 	bl	1a005eec <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00610e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006112:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a006116:	1c21      	adds	r1, r4, #0
1a006118:	bf18      	it	ne
1a00611a:	2101      	movne	r1, #1
1a00611c:	015b      	lsls	r3, r3, #5
1a00611e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a006122:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a006126:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a006128:	2001      	movs	r0, #1
}
1a00612a:	b004      	add	sp, #16
1a00612c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00612e:	2000      	movs	r0, #0
1a006130:	4770      	bx	lr
	  return FALSE;
1a006132:	2000      	movs	r0, #0
}
1a006134:	4770      	bx	lr
1a006136:	Address 0x000000001a006136 is out of bounds.


1a006138 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a006138:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00613a:	4b04      	ldr	r3, [pc, #16]	; (1a00614c <USB0_IRQHandler+0x14>)
1a00613c:	681b      	ldr	r3, [r3, #0]
1a00613e:	681b      	ldr	r3, [r3, #0]
1a006140:	68db      	ldr	r3, [r3, #12]
1a006142:	4a03      	ldr	r2, [pc, #12]	; (1a006150 <USB0_IRQHandler+0x18>)
1a006144:	6810      	ldr	r0, [r2, #0]
1a006146:	4798      	blx	r3
}
1a006148:	bd08      	pop	{r3, pc}
1a00614a:	bf00      	nop
1a00614c:	10003d3c 	.word	0x10003d3c
1a006150:	1000327c 	.word	0x1000327c

1a006154 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a006154:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a006156:	f7fe ff9f 	bl	1a005098 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00615a:	4b18      	ldr	r3, [pc, #96]	; (1a0061bc <boardInit+0x68>)
1a00615c:	6818      	ldr	r0, [r3, #0]
1a00615e:	f7ff fd59 	bl	1a005c14 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a006162:	2105      	movs	r1, #5
1a006164:	2000      	movs	r0, #0
1a006166:	f7ff fedb 	bl	1a005f20 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00616a:	2100      	movs	r1, #0
1a00616c:	2024      	movs	r0, #36	; 0x24
1a00616e:	f7ff fed7 	bl	1a005f20 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a006172:	2100      	movs	r1, #0
1a006174:	2025      	movs	r0, #37	; 0x25
1a006176:	f7ff fed3 	bl	1a005f20 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00617a:	2100      	movs	r1, #0
1a00617c:	2026      	movs	r0, #38	; 0x26
1a00617e:	f7ff fecf 	bl	1a005f20 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a006182:	2100      	movs	r1, #0
1a006184:	2027      	movs	r0, #39	; 0x27
1a006186:	f7ff fecb 	bl	1a005f20 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00618a:	2101      	movs	r1, #1
1a00618c:	2028      	movs	r0, #40	; 0x28
1a00618e:	f7ff fec7 	bl	1a005f20 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a006192:	2101      	movs	r1, #1
1a006194:	2029      	movs	r0, #41	; 0x29
1a006196:	f7ff fec3 	bl	1a005f20 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00619a:	2101      	movs	r1, #1
1a00619c:	202a      	movs	r0, #42	; 0x2a
1a00619e:	f7ff febf 	bl	1a005f20 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0061a2:	2101      	movs	r1, #1
1a0061a4:	202b      	movs	r0, #43	; 0x2b
1a0061a6:	f7ff febb 	bl	1a005f20 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0061aa:	2101      	movs	r1, #1
1a0061ac:	202c      	movs	r0, #44	; 0x2c
1a0061ae:	f7ff feb7 	bl	1a005f20 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0061b2:	2101      	movs	r1, #1
1a0061b4:	202d      	movs	r0, #45	; 0x2d
1a0061b6:	f7ff feb3 	bl	1a005f20 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0061ba:	bd08      	pop	{r3, pc}
1a0061bc:	10003d38 	.word	0x10003d38

1a0061c0 <__aeabi_drsub>:
1a0061c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0061c4:	e002      	b.n	1a0061cc <__adddf3>
1a0061c6:	bf00      	nop

1a0061c8 <__aeabi_dsub>:
1a0061c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0061cc <__adddf3>:
1a0061cc:	b530      	push	{r4, r5, lr}
1a0061ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a0061d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a0061d6:	ea94 0f05 	teq	r4, r5
1a0061da:	bf08      	it	eq
1a0061dc:	ea90 0f02 	teqeq	r0, r2
1a0061e0:	bf1f      	itttt	ne
1a0061e2:	ea54 0c00 	orrsne.w	ip, r4, r0
1a0061e6:	ea55 0c02 	orrsne.w	ip, r5, r2
1a0061ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a0061ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0061f2:	f000 80e2 	beq.w	1a0063ba <__adddf3+0x1ee>
1a0061f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a0061fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0061fe:	bfb8      	it	lt
1a006200:	426d      	neglt	r5, r5
1a006202:	dd0c      	ble.n	1a00621e <__adddf3+0x52>
1a006204:	442c      	add	r4, r5
1a006206:	ea80 0202 	eor.w	r2, r0, r2
1a00620a:	ea81 0303 	eor.w	r3, r1, r3
1a00620e:	ea82 0000 	eor.w	r0, r2, r0
1a006212:	ea83 0101 	eor.w	r1, r3, r1
1a006216:	ea80 0202 	eor.w	r2, r0, r2
1a00621a:	ea81 0303 	eor.w	r3, r1, r3
1a00621e:	2d36      	cmp	r5, #54	; 0x36
1a006220:	bf88      	it	hi
1a006222:	bd30      	pophi	{r4, r5, pc}
1a006224:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a006228:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a00622c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a006230:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a006234:	d002      	beq.n	1a00623c <__adddf3+0x70>
1a006236:	4240      	negs	r0, r0
1a006238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00623c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a006240:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a006244:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a006248:	d002      	beq.n	1a006250 <__adddf3+0x84>
1a00624a:	4252      	negs	r2, r2
1a00624c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a006250:	ea94 0f05 	teq	r4, r5
1a006254:	f000 80a7 	beq.w	1a0063a6 <__adddf3+0x1da>
1a006258:	f1a4 0401 	sub.w	r4, r4, #1
1a00625c:	f1d5 0e20 	rsbs	lr, r5, #32
1a006260:	db0d      	blt.n	1a00627e <__adddf3+0xb2>
1a006262:	fa02 fc0e 	lsl.w	ip, r2, lr
1a006266:	fa22 f205 	lsr.w	r2, r2, r5
1a00626a:	1880      	adds	r0, r0, r2
1a00626c:	f141 0100 	adc.w	r1, r1, #0
1a006270:	fa03 f20e 	lsl.w	r2, r3, lr
1a006274:	1880      	adds	r0, r0, r2
1a006276:	fa43 f305 	asr.w	r3, r3, r5
1a00627a:	4159      	adcs	r1, r3
1a00627c:	e00e      	b.n	1a00629c <__adddf3+0xd0>
1a00627e:	f1a5 0520 	sub.w	r5, r5, #32
1a006282:	f10e 0e20 	add.w	lr, lr, #32
1a006286:	2a01      	cmp	r2, #1
1a006288:	fa03 fc0e 	lsl.w	ip, r3, lr
1a00628c:	bf28      	it	cs
1a00628e:	f04c 0c02 	orrcs.w	ip, ip, #2
1a006292:	fa43 f305 	asr.w	r3, r3, r5
1a006296:	18c0      	adds	r0, r0, r3
1a006298:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a00629c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0062a0:	d507      	bpl.n	1a0062b2 <__adddf3+0xe6>
1a0062a2:	f04f 0e00 	mov.w	lr, #0
1a0062a6:	f1dc 0c00 	rsbs	ip, ip, #0
1a0062aa:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0062ae:	eb6e 0101 	sbc.w	r1, lr, r1
1a0062b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0062b6:	d31b      	bcc.n	1a0062f0 <__adddf3+0x124>
1a0062b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0062bc:	d30c      	bcc.n	1a0062d8 <__adddf3+0x10c>
1a0062be:	0849      	lsrs	r1, r1, #1
1a0062c0:	ea5f 0030 	movs.w	r0, r0, rrx
1a0062c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0062c8:	f104 0401 	add.w	r4, r4, #1
1a0062cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0062d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0062d4:	f080 809a 	bcs.w	1a00640c <__adddf3+0x240>
1a0062d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0062dc:	bf08      	it	eq
1a0062de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0062e2:	f150 0000 	adcs.w	r0, r0, #0
1a0062e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0062ea:	ea41 0105 	orr.w	r1, r1, r5
1a0062ee:	bd30      	pop	{r4, r5, pc}
1a0062f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0062f4:	4140      	adcs	r0, r0
1a0062f6:	eb41 0101 	adc.w	r1, r1, r1
1a0062fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0062fe:	f1a4 0401 	sub.w	r4, r4, #1
1a006302:	d1e9      	bne.n	1a0062d8 <__adddf3+0x10c>
1a006304:	f091 0f00 	teq	r1, #0
1a006308:	bf04      	itt	eq
1a00630a:	4601      	moveq	r1, r0
1a00630c:	2000      	moveq	r0, #0
1a00630e:	fab1 f381 	clz	r3, r1
1a006312:	bf08      	it	eq
1a006314:	3320      	addeq	r3, #32
1a006316:	f1a3 030b 	sub.w	r3, r3, #11
1a00631a:	f1b3 0220 	subs.w	r2, r3, #32
1a00631e:	da0c      	bge.n	1a00633a <__adddf3+0x16e>
1a006320:	320c      	adds	r2, #12
1a006322:	dd08      	ble.n	1a006336 <__adddf3+0x16a>
1a006324:	f102 0c14 	add.w	ip, r2, #20
1a006328:	f1c2 020c 	rsb	r2, r2, #12
1a00632c:	fa01 f00c 	lsl.w	r0, r1, ip
1a006330:	fa21 f102 	lsr.w	r1, r1, r2
1a006334:	e00c      	b.n	1a006350 <__adddf3+0x184>
1a006336:	f102 0214 	add.w	r2, r2, #20
1a00633a:	bfd8      	it	le
1a00633c:	f1c2 0c20 	rsble	ip, r2, #32
1a006340:	fa01 f102 	lsl.w	r1, r1, r2
1a006344:	fa20 fc0c 	lsr.w	ip, r0, ip
1a006348:	bfdc      	itt	le
1a00634a:	ea41 010c 	orrle.w	r1, r1, ip
1a00634e:	4090      	lslle	r0, r2
1a006350:	1ae4      	subs	r4, r4, r3
1a006352:	bfa2      	ittt	ge
1a006354:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a006358:	4329      	orrge	r1, r5
1a00635a:	bd30      	popge	{r4, r5, pc}
1a00635c:	ea6f 0404 	mvn.w	r4, r4
1a006360:	3c1f      	subs	r4, #31
1a006362:	da1c      	bge.n	1a00639e <__adddf3+0x1d2>
1a006364:	340c      	adds	r4, #12
1a006366:	dc0e      	bgt.n	1a006386 <__adddf3+0x1ba>
1a006368:	f104 0414 	add.w	r4, r4, #20
1a00636c:	f1c4 0220 	rsb	r2, r4, #32
1a006370:	fa20 f004 	lsr.w	r0, r0, r4
1a006374:	fa01 f302 	lsl.w	r3, r1, r2
1a006378:	ea40 0003 	orr.w	r0, r0, r3
1a00637c:	fa21 f304 	lsr.w	r3, r1, r4
1a006380:	ea45 0103 	orr.w	r1, r5, r3
1a006384:	bd30      	pop	{r4, r5, pc}
1a006386:	f1c4 040c 	rsb	r4, r4, #12
1a00638a:	f1c4 0220 	rsb	r2, r4, #32
1a00638e:	fa20 f002 	lsr.w	r0, r0, r2
1a006392:	fa01 f304 	lsl.w	r3, r1, r4
1a006396:	ea40 0003 	orr.w	r0, r0, r3
1a00639a:	4629      	mov	r1, r5
1a00639c:	bd30      	pop	{r4, r5, pc}
1a00639e:	fa21 f004 	lsr.w	r0, r1, r4
1a0063a2:	4629      	mov	r1, r5
1a0063a4:	bd30      	pop	{r4, r5, pc}
1a0063a6:	f094 0f00 	teq	r4, #0
1a0063aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0063ae:	bf06      	itte	eq
1a0063b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0063b4:	3401      	addeq	r4, #1
1a0063b6:	3d01      	subne	r5, #1
1a0063b8:	e74e      	b.n	1a006258 <__adddf3+0x8c>
1a0063ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0063be:	bf18      	it	ne
1a0063c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0063c4:	d029      	beq.n	1a00641a <__adddf3+0x24e>
1a0063c6:	ea94 0f05 	teq	r4, r5
1a0063ca:	bf08      	it	eq
1a0063cc:	ea90 0f02 	teqeq	r0, r2
1a0063d0:	d005      	beq.n	1a0063de <__adddf3+0x212>
1a0063d2:	ea54 0c00 	orrs.w	ip, r4, r0
1a0063d6:	bf04      	itt	eq
1a0063d8:	4619      	moveq	r1, r3
1a0063da:	4610      	moveq	r0, r2
1a0063dc:	bd30      	pop	{r4, r5, pc}
1a0063de:	ea91 0f03 	teq	r1, r3
1a0063e2:	bf1e      	ittt	ne
1a0063e4:	2100      	movne	r1, #0
1a0063e6:	2000      	movne	r0, #0
1a0063e8:	bd30      	popne	{r4, r5, pc}
1a0063ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0063ee:	d105      	bne.n	1a0063fc <__adddf3+0x230>
1a0063f0:	0040      	lsls	r0, r0, #1
1a0063f2:	4149      	adcs	r1, r1
1a0063f4:	bf28      	it	cs
1a0063f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0063fa:	bd30      	pop	{r4, r5, pc}
1a0063fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a006400:	bf3c      	itt	cc
1a006402:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a006406:	bd30      	popcc	{r4, r5, pc}
1a006408:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00640c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a006410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a006414:	f04f 0000 	mov.w	r0, #0
1a006418:	bd30      	pop	{r4, r5, pc}
1a00641a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00641e:	bf1a      	itte	ne
1a006420:	4619      	movne	r1, r3
1a006422:	4610      	movne	r0, r2
1a006424:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a006428:	bf1c      	itt	ne
1a00642a:	460b      	movne	r3, r1
1a00642c:	4602      	movne	r2, r0
1a00642e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a006432:	bf06      	itte	eq
1a006434:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a006438:	ea91 0f03 	teqeq	r1, r3
1a00643c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a006440:	bd30      	pop	{r4, r5, pc}
1a006442:	bf00      	nop

1a006444 <__aeabi_ui2d>:
1a006444:	f090 0f00 	teq	r0, #0
1a006448:	bf04      	itt	eq
1a00644a:	2100      	moveq	r1, #0
1a00644c:	4770      	bxeq	lr
1a00644e:	b530      	push	{r4, r5, lr}
1a006450:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a006454:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a006458:	f04f 0500 	mov.w	r5, #0
1a00645c:	f04f 0100 	mov.w	r1, #0
1a006460:	e750      	b.n	1a006304 <__adddf3+0x138>
1a006462:	bf00      	nop

1a006464 <__aeabi_i2d>:
1a006464:	f090 0f00 	teq	r0, #0
1a006468:	bf04      	itt	eq
1a00646a:	2100      	moveq	r1, #0
1a00646c:	4770      	bxeq	lr
1a00646e:	b530      	push	{r4, r5, lr}
1a006470:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a006474:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a006478:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a00647c:	bf48      	it	mi
1a00647e:	4240      	negmi	r0, r0
1a006480:	f04f 0100 	mov.w	r1, #0
1a006484:	e73e      	b.n	1a006304 <__adddf3+0x138>
1a006486:	bf00      	nop

1a006488 <__aeabi_f2d>:
1a006488:	0042      	lsls	r2, r0, #1
1a00648a:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a00648e:	ea4f 0131 	mov.w	r1, r1, rrx
1a006492:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a006496:	bf1f      	itttt	ne
1a006498:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a00649c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0064a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0064a4:	4770      	bxne	lr
1a0064a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0064aa:	bf08      	it	eq
1a0064ac:	4770      	bxeq	lr
1a0064ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0064b2:	bf04      	itt	eq
1a0064b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0064b8:	4770      	bxeq	lr
1a0064ba:	b530      	push	{r4, r5, lr}
1a0064bc:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0064c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0064c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0064c8:	e71c      	b.n	1a006304 <__adddf3+0x138>
1a0064ca:	bf00      	nop

1a0064cc <__aeabi_ul2d>:
1a0064cc:	ea50 0201 	orrs.w	r2, r0, r1
1a0064d0:	bf08      	it	eq
1a0064d2:	4770      	bxeq	lr
1a0064d4:	b530      	push	{r4, r5, lr}
1a0064d6:	f04f 0500 	mov.w	r5, #0
1a0064da:	e00a      	b.n	1a0064f2 <__aeabi_l2d+0x16>

1a0064dc <__aeabi_l2d>:
1a0064dc:	ea50 0201 	orrs.w	r2, r0, r1
1a0064e0:	bf08      	it	eq
1a0064e2:	4770      	bxeq	lr
1a0064e4:	b530      	push	{r4, r5, lr}
1a0064e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0064ea:	d502      	bpl.n	1a0064f2 <__aeabi_l2d+0x16>
1a0064ec:	4240      	negs	r0, r0
1a0064ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0064f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0064f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0064fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0064fe:	f43f aed8 	beq.w	1a0062b2 <__adddf3+0xe6>
1a006502:	f04f 0203 	mov.w	r2, #3
1a006506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00650a:	bf18      	it	ne
1a00650c:	3203      	addne	r2, #3
1a00650e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a006512:	bf18      	it	ne
1a006514:	3203      	addne	r2, #3
1a006516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a00651a:	f1c2 0320 	rsb	r3, r2, #32
1a00651e:	fa00 fc03 	lsl.w	ip, r0, r3
1a006522:	fa20 f002 	lsr.w	r0, r0, r2
1a006526:	fa01 fe03 	lsl.w	lr, r1, r3
1a00652a:	ea40 000e 	orr.w	r0, r0, lr
1a00652e:	fa21 f102 	lsr.w	r1, r1, r2
1a006532:	4414      	add	r4, r2
1a006534:	e6bd      	b.n	1a0062b2 <__adddf3+0xe6>
1a006536:	bf00      	nop

1a006538 <__aeabi_dmul>:
1a006538:	b570      	push	{r4, r5, r6, lr}
1a00653a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00653e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a006542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a006546:	bf1d      	ittte	ne
1a006548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00654c:	ea94 0f0c 	teqne	r4, ip
1a006550:	ea95 0f0c 	teqne	r5, ip
1a006554:	f000 f8de 	bleq	1a006714 <__aeabi_dmul+0x1dc>
1a006558:	442c      	add	r4, r5
1a00655a:	ea81 0603 	eor.w	r6, r1, r3
1a00655e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a006562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a006566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a00656a:	bf18      	it	ne
1a00656c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a006570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a006574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a006578:	d038      	beq.n	1a0065ec <__aeabi_dmul+0xb4>
1a00657a:	fba0 ce02 	umull	ip, lr, r0, r2
1a00657e:	f04f 0500 	mov.w	r5, #0
1a006582:	fbe1 e502 	umlal	lr, r5, r1, r2
1a006586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a00658a:	fbe0 e503 	umlal	lr, r5, r0, r3
1a00658e:	f04f 0600 	mov.w	r6, #0
1a006592:	fbe1 5603 	umlal	r5, r6, r1, r3
1a006596:	f09c 0f00 	teq	ip, #0
1a00659a:	bf18      	it	ne
1a00659c:	f04e 0e01 	orrne.w	lr, lr, #1
1a0065a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0065a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0065a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0065ac:	d204      	bcs.n	1a0065b8 <__aeabi_dmul+0x80>
1a0065ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0065b2:	416d      	adcs	r5, r5
1a0065b4:	eb46 0606 	adc.w	r6, r6, r6
1a0065b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0065bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0065c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0065c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0065c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0065cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0065d0:	bf88      	it	hi
1a0065d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0065d6:	d81e      	bhi.n	1a006616 <__aeabi_dmul+0xde>
1a0065d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0065dc:	bf08      	it	eq
1a0065de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a0065e2:	f150 0000 	adcs.w	r0, r0, #0
1a0065e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0065ea:	bd70      	pop	{r4, r5, r6, pc}
1a0065ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a0065f0:	ea46 0101 	orr.w	r1, r6, r1
1a0065f4:	ea40 0002 	orr.w	r0, r0, r2
1a0065f8:	ea81 0103 	eor.w	r1, r1, r3
1a0065fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a006600:	bfc2      	ittt	gt
1a006602:	ebd4 050c 	rsbsgt	r5, r4, ip
1a006606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00660a:	bd70      	popgt	{r4, r5, r6, pc}
1a00660c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a006610:	f04f 0e00 	mov.w	lr, #0
1a006614:	3c01      	subs	r4, #1
1a006616:	f300 80ab 	bgt.w	1a006770 <__aeabi_dmul+0x238>
1a00661a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00661e:	bfde      	ittt	le
1a006620:	2000      	movle	r0, #0
1a006622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a006626:	bd70      	pople	{r4, r5, r6, pc}
1a006628:	f1c4 0400 	rsb	r4, r4, #0
1a00662c:	3c20      	subs	r4, #32
1a00662e:	da35      	bge.n	1a00669c <__aeabi_dmul+0x164>
1a006630:	340c      	adds	r4, #12
1a006632:	dc1b      	bgt.n	1a00666c <__aeabi_dmul+0x134>
1a006634:	f104 0414 	add.w	r4, r4, #20
1a006638:	f1c4 0520 	rsb	r5, r4, #32
1a00663c:	fa00 f305 	lsl.w	r3, r0, r5
1a006640:	fa20 f004 	lsr.w	r0, r0, r4
1a006644:	fa01 f205 	lsl.w	r2, r1, r5
1a006648:	ea40 0002 	orr.w	r0, r0, r2
1a00664c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a006650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a006654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a006658:	fa21 f604 	lsr.w	r6, r1, r4
1a00665c:	eb42 0106 	adc.w	r1, r2, r6
1a006660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a006664:	bf08      	it	eq
1a006666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00666a:	bd70      	pop	{r4, r5, r6, pc}
1a00666c:	f1c4 040c 	rsb	r4, r4, #12
1a006670:	f1c4 0520 	rsb	r5, r4, #32
1a006674:	fa00 f304 	lsl.w	r3, r0, r4
1a006678:	fa20 f005 	lsr.w	r0, r0, r5
1a00667c:	fa01 f204 	lsl.w	r2, r1, r4
1a006680:	ea40 0002 	orr.w	r0, r0, r2
1a006684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a006688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a00668c:	f141 0100 	adc.w	r1, r1, #0
1a006690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a006694:	bf08      	it	eq
1a006696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00669a:	bd70      	pop	{r4, r5, r6, pc}
1a00669c:	f1c4 0520 	rsb	r5, r4, #32
1a0066a0:	fa00 f205 	lsl.w	r2, r0, r5
1a0066a4:	ea4e 0e02 	orr.w	lr, lr, r2
1a0066a8:	fa20 f304 	lsr.w	r3, r0, r4
1a0066ac:	fa01 f205 	lsl.w	r2, r1, r5
1a0066b0:	ea43 0302 	orr.w	r3, r3, r2
1a0066b4:	fa21 f004 	lsr.w	r0, r1, r4
1a0066b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0066bc:	fa21 f204 	lsr.w	r2, r1, r4
1a0066c0:	ea20 0002 	bic.w	r0, r0, r2
1a0066c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0066c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0066cc:	bf08      	it	eq
1a0066ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0066d2:	bd70      	pop	{r4, r5, r6, pc}
1a0066d4:	f094 0f00 	teq	r4, #0
1a0066d8:	d10f      	bne.n	1a0066fa <__aeabi_dmul+0x1c2>
1a0066da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0066de:	0040      	lsls	r0, r0, #1
1a0066e0:	eb41 0101 	adc.w	r1, r1, r1
1a0066e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0066e8:	bf08      	it	eq
1a0066ea:	3c01      	subeq	r4, #1
1a0066ec:	d0f7      	beq.n	1a0066de <__aeabi_dmul+0x1a6>
1a0066ee:	ea41 0106 	orr.w	r1, r1, r6
1a0066f2:	f095 0f00 	teq	r5, #0
1a0066f6:	bf18      	it	ne
1a0066f8:	4770      	bxne	lr
1a0066fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0066fe:	0052      	lsls	r2, r2, #1
1a006700:	eb43 0303 	adc.w	r3, r3, r3
1a006704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a006708:	bf08      	it	eq
1a00670a:	3d01      	subeq	r5, #1
1a00670c:	d0f7      	beq.n	1a0066fe <__aeabi_dmul+0x1c6>
1a00670e:	ea43 0306 	orr.w	r3, r3, r6
1a006712:	4770      	bx	lr
1a006714:	ea94 0f0c 	teq	r4, ip
1a006718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00671c:	bf18      	it	ne
1a00671e:	ea95 0f0c 	teqne	r5, ip
1a006722:	d00c      	beq.n	1a00673e <__aeabi_dmul+0x206>
1a006724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a006728:	bf18      	it	ne
1a00672a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00672e:	d1d1      	bne.n	1a0066d4 <__aeabi_dmul+0x19c>
1a006730:	ea81 0103 	eor.w	r1, r1, r3
1a006734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a006738:	f04f 0000 	mov.w	r0, #0
1a00673c:	bd70      	pop	{r4, r5, r6, pc}
1a00673e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a006742:	bf06      	itte	eq
1a006744:	4610      	moveq	r0, r2
1a006746:	4619      	moveq	r1, r3
1a006748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00674c:	d019      	beq.n	1a006782 <__aeabi_dmul+0x24a>
1a00674e:	ea94 0f0c 	teq	r4, ip
1a006752:	d102      	bne.n	1a00675a <__aeabi_dmul+0x222>
1a006754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a006758:	d113      	bne.n	1a006782 <__aeabi_dmul+0x24a>
1a00675a:	ea95 0f0c 	teq	r5, ip
1a00675e:	d105      	bne.n	1a00676c <__aeabi_dmul+0x234>
1a006760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a006764:	bf1c      	itt	ne
1a006766:	4610      	movne	r0, r2
1a006768:	4619      	movne	r1, r3
1a00676a:	d10a      	bne.n	1a006782 <__aeabi_dmul+0x24a>
1a00676c:	ea81 0103 	eor.w	r1, r1, r3
1a006770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a006774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a006778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00677c:	f04f 0000 	mov.w	r0, #0
1a006780:	bd70      	pop	{r4, r5, r6, pc}
1a006782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a006786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a00678a:	bd70      	pop	{r4, r5, r6, pc}

1a00678c <__aeabi_ddiv>:
1a00678c:	b570      	push	{r4, r5, r6, lr}
1a00678e:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a006792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a006796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a00679a:	bf1d      	ittte	ne
1a00679c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0067a0:	ea94 0f0c 	teqne	r4, ip
1a0067a4:	ea95 0f0c 	teqne	r5, ip
1a0067a8:	f000 f8a7 	bleq	1a0068fa <__aeabi_ddiv+0x16e>
1a0067ac:	eba4 0405 	sub.w	r4, r4, r5
1a0067b0:	ea81 0e03 	eor.w	lr, r1, r3
1a0067b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0067b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0067bc:	f000 8088 	beq.w	1a0068d0 <__aeabi_ddiv+0x144>
1a0067c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0067c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0067c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0067cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0067d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0067d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0067d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0067dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0067e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0067e4:	429d      	cmp	r5, r3
1a0067e6:	bf08      	it	eq
1a0067e8:	4296      	cmpeq	r6, r2
1a0067ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0067ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0067f2:	d202      	bcs.n	1a0067fa <__aeabi_ddiv+0x6e>
1a0067f4:	085b      	lsrs	r3, r3, #1
1a0067f6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0067fa:	1ab6      	subs	r6, r6, r2
1a0067fc:	eb65 0503 	sbc.w	r5, r5, r3
1a006800:	085b      	lsrs	r3, r3, #1
1a006802:	ea4f 0232 	mov.w	r2, r2, rrx
1a006806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a00680a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00680e:	ebb6 0e02 	subs.w	lr, r6, r2
1a006812:	eb75 0e03 	sbcs.w	lr, r5, r3
1a006816:	bf22      	ittt	cs
1a006818:	1ab6      	subcs	r6, r6, r2
1a00681a:	4675      	movcs	r5, lr
1a00681c:	ea40 000c 	orrcs.w	r0, r0, ip
1a006820:	085b      	lsrs	r3, r3, #1
1a006822:	ea4f 0232 	mov.w	r2, r2, rrx
1a006826:	ebb6 0e02 	subs.w	lr, r6, r2
1a00682a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00682e:	bf22      	ittt	cs
1a006830:	1ab6      	subcs	r6, r6, r2
1a006832:	4675      	movcs	r5, lr
1a006834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a006838:	085b      	lsrs	r3, r3, #1
1a00683a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00683e:	ebb6 0e02 	subs.w	lr, r6, r2
1a006842:	eb75 0e03 	sbcs.w	lr, r5, r3
1a006846:	bf22      	ittt	cs
1a006848:	1ab6      	subcs	r6, r6, r2
1a00684a:	4675      	movcs	r5, lr
1a00684c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a006850:	085b      	lsrs	r3, r3, #1
1a006852:	ea4f 0232 	mov.w	r2, r2, rrx
1a006856:	ebb6 0e02 	subs.w	lr, r6, r2
1a00685a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00685e:	bf22      	ittt	cs
1a006860:	1ab6      	subcs	r6, r6, r2
1a006862:	4675      	movcs	r5, lr
1a006864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a006868:	ea55 0e06 	orrs.w	lr, r5, r6
1a00686c:	d018      	beq.n	1a0068a0 <__aeabi_ddiv+0x114>
1a00686e:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a006872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a006876:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a00687a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00687e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a006882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a006886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a00688a:	d1c0      	bne.n	1a00680e <__aeabi_ddiv+0x82>
1a00688c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a006890:	d10b      	bne.n	1a0068aa <__aeabi_ddiv+0x11e>
1a006892:	ea41 0100 	orr.w	r1, r1, r0
1a006896:	f04f 0000 	mov.w	r0, #0
1a00689a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a00689e:	e7b6      	b.n	1a00680e <__aeabi_ddiv+0x82>
1a0068a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0068a4:	bf04      	itt	eq
1a0068a6:	4301      	orreq	r1, r0
1a0068a8:	2000      	moveq	r0, #0
1a0068aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0068ae:	bf88      	it	hi
1a0068b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0068b4:	f63f aeaf 	bhi.w	1a006616 <__aeabi_dmul+0xde>
1a0068b8:	ebb5 0c03 	subs.w	ip, r5, r3
1a0068bc:	bf04      	itt	eq
1a0068be:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0068c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0068c6:	f150 0000 	adcs.w	r0, r0, #0
1a0068ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0068ce:	bd70      	pop	{r4, r5, r6, pc}
1a0068d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0068d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0068d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0068dc:	bfc2      	ittt	gt
1a0068de:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0068e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0068e6:	bd70      	popgt	{r4, r5, r6, pc}
1a0068e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0068ec:	f04f 0e00 	mov.w	lr, #0
1a0068f0:	3c01      	subs	r4, #1
1a0068f2:	e690      	b.n	1a006616 <__aeabi_dmul+0xde>
1a0068f4:	ea45 0e06 	orr.w	lr, r5, r6
1a0068f8:	e68d      	b.n	1a006616 <__aeabi_dmul+0xde>
1a0068fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0068fe:	ea94 0f0c 	teq	r4, ip
1a006902:	bf08      	it	eq
1a006904:	ea95 0f0c 	teqeq	r5, ip
1a006908:	f43f af3b 	beq.w	1a006782 <__aeabi_dmul+0x24a>
1a00690c:	ea94 0f0c 	teq	r4, ip
1a006910:	d10a      	bne.n	1a006928 <__aeabi_ddiv+0x19c>
1a006912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a006916:	f47f af34 	bne.w	1a006782 <__aeabi_dmul+0x24a>
1a00691a:	ea95 0f0c 	teq	r5, ip
1a00691e:	f47f af25 	bne.w	1a00676c <__aeabi_dmul+0x234>
1a006922:	4610      	mov	r0, r2
1a006924:	4619      	mov	r1, r3
1a006926:	e72c      	b.n	1a006782 <__aeabi_dmul+0x24a>
1a006928:	ea95 0f0c 	teq	r5, ip
1a00692c:	d106      	bne.n	1a00693c <__aeabi_ddiv+0x1b0>
1a00692e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a006932:	f43f aefd 	beq.w	1a006730 <__aeabi_dmul+0x1f8>
1a006936:	4610      	mov	r0, r2
1a006938:	4619      	mov	r1, r3
1a00693a:	e722      	b.n	1a006782 <__aeabi_dmul+0x24a>
1a00693c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a006940:	bf18      	it	ne
1a006942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a006946:	f47f aec5 	bne.w	1a0066d4 <__aeabi_dmul+0x19c>
1a00694a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00694e:	f47f af0d 	bne.w	1a00676c <__aeabi_dmul+0x234>
1a006952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a006956:	f47f aeeb 	bne.w	1a006730 <__aeabi_dmul+0x1f8>
1a00695a:	e712      	b.n	1a006782 <__aeabi_dmul+0x24a>

1a00695c <__gedf2>:
1a00695c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a006960:	e006      	b.n	1a006970 <__cmpdf2+0x4>
1a006962:	bf00      	nop

1a006964 <__ledf2>:
1a006964:	f04f 0c01 	mov.w	ip, #1
1a006968:	e002      	b.n	1a006970 <__cmpdf2+0x4>
1a00696a:	bf00      	nop

1a00696c <__cmpdf2>:
1a00696c:	f04f 0c01 	mov.w	ip, #1
1a006970:	f84d cd04 	str.w	ip, [sp, #-4]!
1a006974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a006978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00697c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a006980:	bf18      	it	ne
1a006982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a006986:	d01b      	beq.n	1a0069c0 <__cmpdf2+0x54>
1a006988:	b001      	add	sp, #4
1a00698a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a00698e:	bf0c      	ite	eq
1a006990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a006994:	ea91 0f03 	teqne	r1, r3
1a006998:	bf02      	ittt	eq
1a00699a:	ea90 0f02 	teqeq	r0, r2
1a00699e:	2000      	moveq	r0, #0
1a0069a0:	4770      	bxeq	lr
1a0069a2:	f110 0f00 	cmn.w	r0, #0
1a0069a6:	ea91 0f03 	teq	r1, r3
1a0069aa:	bf58      	it	pl
1a0069ac:	4299      	cmppl	r1, r3
1a0069ae:	bf08      	it	eq
1a0069b0:	4290      	cmpeq	r0, r2
1a0069b2:	bf2c      	ite	cs
1a0069b4:	17d8      	asrcs	r0, r3, #31
1a0069b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a0069ba:	f040 0001 	orr.w	r0, r0, #1
1a0069be:	4770      	bx	lr
1a0069c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0069c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0069c8:	d102      	bne.n	1a0069d0 <__cmpdf2+0x64>
1a0069ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a0069ce:	d107      	bne.n	1a0069e0 <__cmpdf2+0x74>
1a0069d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0069d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0069d8:	d1d6      	bne.n	1a006988 <__cmpdf2+0x1c>
1a0069da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0069de:	d0d3      	beq.n	1a006988 <__cmpdf2+0x1c>
1a0069e0:	f85d 0b04 	ldr.w	r0, [sp], #4
1a0069e4:	4770      	bx	lr
1a0069e6:	bf00      	nop

1a0069e8 <__aeabi_cdrcmple>:
1a0069e8:	4684      	mov	ip, r0
1a0069ea:	4610      	mov	r0, r2
1a0069ec:	4662      	mov	r2, ip
1a0069ee:	468c      	mov	ip, r1
1a0069f0:	4619      	mov	r1, r3
1a0069f2:	4663      	mov	r3, ip
1a0069f4:	e000      	b.n	1a0069f8 <__aeabi_cdcmpeq>
1a0069f6:	bf00      	nop

1a0069f8 <__aeabi_cdcmpeq>:
1a0069f8:	b501      	push	{r0, lr}
1a0069fa:	f7ff ffb7 	bl	1a00696c <__cmpdf2>
1a0069fe:	2800      	cmp	r0, #0
1a006a00:	bf48      	it	mi
1a006a02:	f110 0f00 	cmnmi.w	r0, #0
1a006a06:	bd01      	pop	{r0, pc}

1a006a08 <__aeabi_dcmpeq>:
1a006a08:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006a0c:	f7ff fff4 	bl	1a0069f8 <__aeabi_cdcmpeq>
1a006a10:	bf0c      	ite	eq
1a006a12:	2001      	moveq	r0, #1
1a006a14:	2000      	movne	r0, #0
1a006a16:	f85d fb08 	ldr.w	pc, [sp], #8
1a006a1a:	bf00      	nop

1a006a1c <__aeabi_dcmplt>:
1a006a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006a20:	f7ff ffea 	bl	1a0069f8 <__aeabi_cdcmpeq>
1a006a24:	bf34      	ite	cc
1a006a26:	2001      	movcc	r0, #1
1a006a28:	2000      	movcs	r0, #0
1a006a2a:	f85d fb08 	ldr.w	pc, [sp], #8
1a006a2e:	bf00      	nop

1a006a30 <__aeabi_dcmple>:
1a006a30:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006a34:	f7ff ffe0 	bl	1a0069f8 <__aeabi_cdcmpeq>
1a006a38:	bf94      	ite	ls
1a006a3a:	2001      	movls	r0, #1
1a006a3c:	2000      	movhi	r0, #0
1a006a3e:	f85d fb08 	ldr.w	pc, [sp], #8
1a006a42:	bf00      	nop

1a006a44 <__aeabi_dcmpge>:
1a006a44:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006a48:	f7ff ffce 	bl	1a0069e8 <__aeabi_cdrcmple>
1a006a4c:	bf94      	ite	ls
1a006a4e:	2001      	movls	r0, #1
1a006a50:	2000      	movhi	r0, #0
1a006a52:	f85d fb08 	ldr.w	pc, [sp], #8
1a006a56:	bf00      	nop

1a006a58 <__aeabi_dcmpgt>:
1a006a58:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006a5c:	f7ff ffc4 	bl	1a0069e8 <__aeabi_cdrcmple>
1a006a60:	bf34      	ite	cc
1a006a62:	2001      	movcc	r0, #1
1a006a64:	2000      	movcs	r0, #0
1a006a66:	f85d fb08 	ldr.w	pc, [sp], #8
1a006a6a:	bf00      	nop

1a006a6c <__aeabi_dcmpun>:
1a006a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a006a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a006a74:	d102      	bne.n	1a006a7c <__aeabi_dcmpun+0x10>
1a006a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a006a7a:	d10a      	bne.n	1a006a92 <__aeabi_dcmpun+0x26>
1a006a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a006a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a006a84:	d102      	bne.n	1a006a8c <__aeabi_dcmpun+0x20>
1a006a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a006a8a:	d102      	bne.n	1a006a92 <__aeabi_dcmpun+0x26>
1a006a8c:	f04f 0000 	mov.w	r0, #0
1a006a90:	4770      	bx	lr
1a006a92:	f04f 0001 	mov.w	r0, #1
1a006a96:	4770      	bx	lr

1a006a98 <__aeabi_d2iz>:
1a006a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a006a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a006aa0:	d215      	bcs.n	1a006ace <__aeabi_d2iz+0x36>
1a006aa2:	d511      	bpl.n	1a006ac8 <__aeabi_d2iz+0x30>
1a006aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a006aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a006aac:	d912      	bls.n	1a006ad4 <__aeabi_d2iz+0x3c>
1a006aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a006ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a006ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a006aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a006abe:	fa23 f002 	lsr.w	r0, r3, r2
1a006ac2:	bf18      	it	ne
1a006ac4:	4240      	negne	r0, r0
1a006ac6:	4770      	bx	lr
1a006ac8:	f04f 0000 	mov.w	r0, #0
1a006acc:	4770      	bx	lr
1a006ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a006ad2:	d105      	bne.n	1a006ae0 <__aeabi_d2iz+0x48>
1a006ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a006ad8:	bf08      	it	eq
1a006ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a006ade:	4770      	bx	lr
1a006ae0:	f04f 0000 	mov.w	r0, #0
1a006ae4:	4770      	bx	lr
1a006ae6:	bf00      	nop

1a006ae8 <__aeabi_uldivmod>:
1a006ae8:	b953      	cbnz	r3, 1a006b00 <__aeabi_uldivmod+0x18>
1a006aea:	b94a      	cbnz	r2, 1a006b00 <__aeabi_uldivmod+0x18>
1a006aec:	2900      	cmp	r1, #0
1a006aee:	bf08      	it	eq
1a006af0:	2800      	cmpeq	r0, #0
1a006af2:	bf1c      	itt	ne
1a006af4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a006af8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a006afc:	f000 b974 	b.w	1a006de8 <__aeabi_idiv0>
1a006b00:	f1ad 0c08 	sub.w	ip, sp, #8
1a006b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a006b08:	f000 f806 	bl	1a006b18 <__udivmoddi4>
1a006b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a006b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a006b14:	b004      	add	sp, #16
1a006b16:	4770      	bx	lr

1a006b18 <__udivmoddi4>:
1a006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a006b1c:	9e08      	ldr	r6, [sp, #32]
1a006b1e:	4604      	mov	r4, r0
1a006b20:	4688      	mov	r8, r1
1a006b22:	2b00      	cmp	r3, #0
1a006b24:	f040 8085 	bne.w	1a006c32 <__udivmoddi4+0x11a>
1a006b28:	428a      	cmp	r2, r1
1a006b2a:	4615      	mov	r5, r2
1a006b2c:	d948      	bls.n	1a006bc0 <__udivmoddi4+0xa8>
1a006b2e:	fab2 f282 	clz	r2, r2
1a006b32:	b14a      	cbz	r2, 1a006b48 <__udivmoddi4+0x30>
1a006b34:	f1c2 0720 	rsb	r7, r2, #32
1a006b38:	fa01 f302 	lsl.w	r3, r1, r2
1a006b3c:	fa20 f707 	lsr.w	r7, r0, r7
1a006b40:	4095      	lsls	r5, r2
1a006b42:	ea47 0803 	orr.w	r8, r7, r3
1a006b46:	4094      	lsls	r4, r2
1a006b48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006b4c:	0c23      	lsrs	r3, r4, #16
1a006b4e:	fbb8 f7fe 	udiv	r7, r8, lr
1a006b52:	fa1f fc85 	uxth.w	ip, r5
1a006b56:	fb0e 8817 	mls	r8, lr, r7, r8
1a006b5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a006b5e:	fb07 f10c 	mul.w	r1, r7, ip
1a006b62:	4299      	cmp	r1, r3
1a006b64:	d909      	bls.n	1a006b7a <__udivmoddi4+0x62>
1a006b66:	18eb      	adds	r3, r5, r3
1a006b68:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a006b6c:	f080 80e3 	bcs.w	1a006d36 <__udivmoddi4+0x21e>
1a006b70:	4299      	cmp	r1, r3
1a006b72:	f240 80e0 	bls.w	1a006d36 <__udivmoddi4+0x21e>
1a006b76:	3f02      	subs	r7, #2
1a006b78:	442b      	add	r3, r5
1a006b7a:	1a5b      	subs	r3, r3, r1
1a006b7c:	b2a4      	uxth	r4, r4
1a006b7e:	fbb3 f0fe 	udiv	r0, r3, lr
1a006b82:	fb0e 3310 	mls	r3, lr, r0, r3
1a006b86:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a006b8a:	fb00 fc0c 	mul.w	ip, r0, ip
1a006b8e:	45a4      	cmp	ip, r4
1a006b90:	d909      	bls.n	1a006ba6 <__udivmoddi4+0x8e>
1a006b92:	192c      	adds	r4, r5, r4
1a006b94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006b98:	f080 80cb 	bcs.w	1a006d32 <__udivmoddi4+0x21a>
1a006b9c:	45a4      	cmp	ip, r4
1a006b9e:	f240 80c8 	bls.w	1a006d32 <__udivmoddi4+0x21a>
1a006ba2:	3802      	subs	r0, #2
1a006ba4:	442c      	add	r4, r5
1a006ba6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a006baa:	eba4 040c 	sub.w	r4, r4, ip
1a006bae:	2700      	movs	r7, #0
1a006bb0:	b11e      	cbz	r6, 1a006bba <__udivmoddi4+0xa2>
1a006bb2:	40d4      	lsrs	r4, r2
1a006bb4:	2300      	movs	r3, #0
1a006bb6:	e9c6 4300 	strd	r4, r3, [r6]
1a006bba:	4639      	mov	r1, r7
1a006bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006bc0:	2a00      	cmp	r2, #0
1a006bc2:	d053      	beq.n	1a006c6c <__udivmoddi4+0x154>
1a006bc4:	fab2 f282 	clz	r2, r2
1a006bc8:	2a00      	cmp	r2, #0
1a006bca:	f040 80b6 	bne.w	1a006d3a <__udivmoddi4+0x222>
1a006bce:	1b49      	subs	r1, r1, r5
1a006bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006bd4:	fa1f f885 	uxth.w	r8, r5
1a006bd8:	2701      	movs	r7, #1
1a006bda:	fbb1 fcfe 	udiv	ip, r1, lr
1a006bde:	0c23      	lsrs	r3, r4, #16
1a006be0:	fb0e 111c 	mls	r1, lr, ip, r1
1a006be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006be8:	fb08 f10c 	mul.w	r1, r8, ip
1a006bec:	4299      	cmp	r1, r3
1a006bee:	d907      	bls.n	1a006c00 <__udivmoddi4+0xe8>
1a006bf0:	18eb      	adds	r3, r5, r3
1a006bf2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a006bf6:	d202      	bcs.n	1a006bfe <__udivmoddi4+0xe6>
1a006bf8:	4299      	cmp	r1, r3
1a006bfa:	f200 80ec 	bhi.w	1a006dd6 <__udivmoddi4+0x2be>
1a006bfe:	4684      	mov	ip, r0
1a006c00:	1a59      	subs	r1, r3, r1
1a006c02:	b2a3      	uxth	r3, r4
1a006c04:	fbb1 f0fe 	udiv	r0, r1, lr
1a006c08:	fb0e 1410 	mls	r4, lr, r0, r1
1a006c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a006c10:	fb08 f800 	mul.w	r8, r8, r0
1a006c14:	45a0      	cmp	r8, r4
1a006c16:	d907      	bls.n	1a006c28 <__udivmoddi4+0x110>
1a006c18:	192c      	adds	r4, r5, r4
1a006c1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006c1e:	d202      	bcs.n	1a006c26 <__udivmoddi4+0x10e>
1a006c20:	45a0      	cmp	r8, r4
1a006c22:	f200 80dc 	bhi.w	1a006dde <__udivmoddi4+0x2c6>
1a006c26:	4618      	mov	r0, r3
1a006c28:	eba4 0408 	sub.w	r4, r4, r8
1a006c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a006c30:	e7be      	b.n	1a006bb0 <__udivmoddi4+0x98>
1a006c32:	428b      	cmp	r3, r1
1a006c34:	d908      	bls.n	1a006c48 <__udivmoddi4+0x130>
1a006c36:	2e00      	cmp	r6, #0
1a006c38:	d078      	beq.n	1a006d2c <__udivmoddi4+0x214>
1a006c3a:	2700      	movs	r7, #0
1a006c3c:	e9c6 0100 	strd	r0, r1, [r6]
1a006c40:	4638      	mov	r0, r7
1a006c42:	4639      	mov	r1, r7
1a006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006c48:	fab3 f783 	clz	r7, r3
1a006c4c:	b97f      	cbnz	r7, 1a006c6e <__udivmoddi4+0x156>
1a006c4e:	428b      	cmp	r3, r1
1a006c50:	d302      	bcc.n	1a006c58 <__udivmoddi4+0x140>
1a006c52:	4282      	cmp	r2, r0
1a006c54:	f200 80bd 	bhi.w	1a006dd2 <__udivmoddi4+0x2ba>
1a006c58:	1a84      	subs	r4, r0, r2
1a006c5a:	eb61 0303 	sbc.w	r3, r1, r3
1a006c5e:	2001      	movs	r0, #1
1a006c60:	4698      	mov	r8, r3
1a006c62:	2e00      	cmp	r6, #0
1a006c64:	d0a9      	beq.n	1a006bba <__udivmoddi4+0xa2>
1a006c66:	e9c6 4800 	strd	r4, r8, [r6]
1a006c6a:	e7a6      	b.n	1a006bba <__udivmoddi4+0xa2>
1a006c6c:	deff      	udf	#255	; 0xff
1a006c6e:	f1c7 0520 	rsb	r5, r7, #32
1a006c72:	40bb      	lsls	r3, r7
1a006c74:	fa22 fc05 	lsr.w	ip, r2, r5
1a006c78:	ea4c 0c03 	orr.w	ip, ip, r3
1a006c7c:	fa01 f407 	lsl.w	r4, r1, r7
1a006c80:	fa20 f805 	lsr.w	r8, r0, r5
1a006c84:	fa21 f305 	lsr.w	r3, r1, r5
1a006c88:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a006c8c:	ea48 0404 	orr.w	r4, r8, r4
1a006c90:	fbb3 f9fe 	udiv	r9, r3, lr
1a006c94:	0c21      	lsrs	r1, r4, #16
1a006c96:	fb0e 3319 	mls	r3, lr, r9, r3
1a006c9a:	fa1f f88c 	uxth.w	r8, ip
1a006c9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a006ca2:	fb09 fa08 	mul.w	sl, r9, r8
1a006ca6:	459a      	cmp	sl, r3
1a006ca8:	fa02 f207 	lsl.w	r2, r2, r7
1a006cac:	fa00 f107 	lsl.w	r1, r0, r7
1a006cb0:	d90b      	bls.n	1a006cca <__udivmoddi4+0x1b2>
1a006cb2:	eb1c 0303 	adds.w	r3, ip, r3
1a006cb6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a006cba:	f080 8088 	bcs.w	1a006dce <__udivmoddi4+0x2b6>
1a006cbe:	459a      	cmp	sl, r3
1a006cc0:	f240 8085 	bls.w	1a006dce <__udivmoddi4+0x2b6>
1a006cc4:	f1a9 0902 	sub.w	r9, r9, #2
1a006cc8:	4463      	add	r3, ip
1a006cca:	eba3 030a 	sub.w	r3, r3, sl
1a006cce:	b2a4      	uxth	r4, r4
1a006cd0:	fbb3 f0fe 	udiv	r0, r3, lr
1a006cd4:	fb0e 3310 	mls	r3, lr, r0, r3
1a006cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a006cdc:	fb00 f808 	mul.w	r8, r0, r8
1a006ce0:	45a0      	cmp	r8, r4
1a006ce2:	d908      	bls.n	1a006cf6 <__udivmoddi4+0x1de>
1a006ce4:	eb1c 0404 	adds.w	r4, ip, r4
1a006ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006cec:	d26b      	bcs.n	1a006dc6 <__udivmoddi4+0x2ae>
1a006cee:	45a0      	cmp	r8, r4
1a006cf0:	d969      	bls.n	1a006dc6 <__udivmoddi4+0x2ae>
1a006cf2:	3802      	subs	r0, #2
1a006cf4:	4464      	add	r4, ip
1a006cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a006cfa:	eba4 0408 	sub.w	r4, r4, r8
1a006cfe:	fba0 8902 	umull	r8, r9, r0, r2
1a006d02:	454c      	cmp	r4, r9
1a006d04:	46c6      	mov	lr, r8
1a006d06:	464b      	mov	r3, r9
1a006d08:	d354      	bcc.n	1a006db4 <__udivmoddi4+0x29c>
1a006d0a:	d051      	beq.n	1a006db0 <__udivmoddi4+0x298>
1a006d0c:	2e00      	cmp	r6, #0
1a006d0e:	d069      	beq.n	1a006de4 <__udivmoddi4+0x2cc>
1a006d10:	ebb1 020e 	subs.w	r2, r1, lr
1a006d14:	eb64 0403 	sbc.w	r4, r4, r3
1a006d18:	fa04 f505 	lsl.w	r5, r4, r5
1a006d1c:	fa22 f307 	lsr.w	r3, r2, r7
1a006d20:	40fc      	lsrs	r4, r7
1a006d22:	431d      	orrs	r5, r3
1a006d24:	e9c6 5400 	strd	r5, r4, [r6]
1a006d28:	2700      	movs	r7, #0
1a006d2a:	e746      	b.n	1a006bba <__udivmoddi4+0xa2>
1a006d2c:	4637      	mov	r7, r6
1a006d2e:	4630      	mov	r0, r6
1a006d30:	e743      	b.n	1a006bba <__udivmoddi4+0xa2>
1a006d32:	4618      	mov	r0, r3
1a006d34:	e737      	b.n	1a006ba6 <__udivmoddi4+0x8e>
1a006d36:	4607      	mov	r7, r0
1a006d38:	e71f      	b.n	1a006b7a <__udivmoddi4+0x62>
1a006d3a:	f1c2 0320 	rsb	r3, r2, #32
1a006d3e:	fa20 f703 	lsr.w	r7, r0, r3
1a006d42:	4095      	lsls	r5, r2
1a006d44:	fa01 f002 	lsl.w	r0, r1, r2
1a006d48:	fa21 f303 	lsr.w	r3, r1, r3
1a006d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006d50:	4338      	orrs	r0, r7
1a006d52:	0c01      	lsrs	r1, r0, #16
1a006d54:	fbb3 f7fe 	udiv	r7, r3, lr
1a006d58:	fa1f f885 	uxth.w	r8, r5
1a006d5c:	fb0e 3317 	mls	r3, lr, r7, r3
1a006d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006d64:	fb07 f308 	mul.w	r3, r7, r8
1a006d68:	428b      	cmp	r3, r1
1a006d6a:	fa04 f402 	lsl.w	r4, r4, r2
1a006d6e:	d907      	bls.n	1a006d80 <__udivmoddi4+0x268>
1a006d70:	1869      	adds	r1, r5, r1
1a006d72:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a006d76:	d228      	bcs.n	1a006dca <__udivmoddi4+0x2b2>
1a006d78:	428b      	cmp	r3, r1
1a006d7a:	d926      	bls.n	1a006dca <__udivmoddi4+0x2b2>
1a006d7c:	3f02      	subs	r7, #2
1a006d7e:	4429      	add	r1, r5
1a006d80:	1acb      	subs	r3, r1, r3
1a006d82:	b281      	uxth	r1, r0
1a006d84:	fbb3 f0fe 	udiv	r0, r3, lr
1a006d88:	fb0e 3310 	mls	r3, lr, r0, r3
1a006d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006d90:	fb00 f308 	mul.w	r3, r0, r8
1a006d94:	428b      	cmp	r3, r1
1a006d96:	d907      	bls.n	1a006da8 <__udivmoddi4+0x290>
1a006d98:	1869      	adds	r1, r5, r1
1a006d9a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a006d9e:	d210      	bcs.n	1a006dc2 <__udivmoddi4+0x2aa>
1a006da0:	428b      	cmp	r3, r1
1a006da2:	d90e      	bls.n	1a006dc2 <__udivmoddi4+0x2aa>
1a006da4:	3802      	subs	r0, #2
1a006da6:	4429      	add	r1, r5
1a006da8:	1ac9      	subs	r1, r1, r3
1a006daa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a006dae:	e714      	b.n	1a006bda <__udivmoddi4+0xc2>
1a006db0:	4541      	cmp	r1, r8
1a006db2:	d2ab      	bcs.n	1a006d0c <__udivmoddi4+0x1f4>
1a006db4:	ebb8 0e02 	subs.w	lr, r8, r2
1a006db8:	eb69 020c 	sbc.w	r2, r9, ip
1a006dbc:	3801      	subs	r0, #1
1a006dbe:	4613      	mov	r3, r2
1a006dc0:	e7a4      	b.n	1a006d0c <__udivmoddi4+0x1f4>
1a006dc2:	4660      	mov	r0, ip
1a006dc4:	e7f0      	b.n	1a006da8 <__udivmoddi4+0x290>
1a006dc6:	4618      	mov	r0, r3
1a006dc8:	e795      	b.n	1a006cf6 <__udivmoddi4+0x1de>
1a006dca:	4667      	mov	r7, ip
1a006dcc:	e7d8      	b.n	1a006d80 <__udivmoddi4+0x268>
1a006dce:	4681      	mov	r9, r0
1a006dd0:	e77b      	b.n	1a006cca <__udivmoddi4+0x1b2>
1a006dd2:	4638      	mov	r0, r7
1a006dd4:	e745      	b.n	1a006c62 <__udivmoddi4+0x14a>
1a006dd6:	f1ac 0c02 	sub.w	ip, ip, #2
1a006dda:	442b      	add	r3, r5
1a006ddc:	e710      	b.n	1a006c00 <__udivmoddi4+0xe8>
1a006dde:	3802      	subs	r0, #2
1a006de0:	442c      	add	r4, r5
1a006de2:	e721      	b.n	1a006c28 <__udivmoddi4+0x110>
1a006de4:	4637      	mov	r7, r6
1a006de6:	e6e8      	b.n	1a006bba <__udivmoddi4+0xa2>

1a006de8 <__aeabi_idiv0>:
1a006de8:	4770      	bx	lr
1a006dea:	bf00      	nop

1a006dec <_fclose_r>:
1a006dec:	b570      	push	{r4, r5, r6, lr}
1a006dee:	2900      	cmp	r1, #0
1a006df0:	d04a      	beq.n	1a006e88 <_fclose_r+0x9c>
1a006df2:	4605      	mov	r5, r0
1a006df4:	460c      	mov	r4, r1
1a006df6:	b110      	cbz	r0, 1a006dfe <_fclose_r+0x12>
1a006df8:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a006dfa:	2b00      	cmp	r3, #0
1a006dfc:	d047      	beq.n	1a006e8e <_fclose_r+0xa2>
1a006dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a006e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006e04:	07d8      	lsls	r0, r3, #31
1a006e06:	d532      	bpl.n	1a006e6e <_fclose_r+0x82>
1a006e08:	2a00      	cmp	r2, #0
1a006e0a:	d03d      	beq.n	1a006e88 <_fclose_r+0x9c>
1a006e0c:	4621      	mov	r1, r4
1a006e0e:	4628      	mov	r0, r5
1a006e10:	f000 f854 	bl	1a006ebc <__sflush_r>
1a006e14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a006e16:	4606      	mov	r6, r0
1a006e18:	b133      	cbz	r3, 1a006e28 <_fclose_r+0x3c>
1a006e1a:	69e1      	ldr	r1, [r4, #28]
1a006e1c:	4628      	mov	r0, r5
1a006e1e:	4798      	blx	r3
1a006e20:	2800      	cmp	r0, #0
1a006e22:	bfb8      	it	lt
1a006e24:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a006e28:	89a3      	ldrh	r3, [r4, #12]
1a006e2a:	061a      	lsls	r2, r3, #24
1a006e2c:	d43c      	bmi.n	1a006ea8 <_fclose_r+0xbc>
1a006e2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a006e30:	b141      	cbz	r1, 1a006e44 <_fclose_r+0x58>
1a006e32:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a006e36:	4299      	cmp	r1, r3
1a006e38:	d002      	beq.n	1a006e40 <_fclose_r+0x54>
1a006e3a:	4628      	mov	r0, r5
1a006e3c:	f000 f9c6 	bl	1a0071cc <_free_r>
1a006e40:	2300      	movs	r3, #0
1a006e42:	6323      	str	r3, [r4, #48]	; 0x30
1a006e44:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a006e46:	b121      	cbz	r1, 1a006e52 <_fclose_r+0x66>
1a006e48:	4628      	mov	r0, r5
1a006e4a:	f000 f9bf 	bl	1a0071cc <_free_r>
1a006e4e:	2300      	movs	r3, #0
1a006e50:	6463      	str	r3, [r4, #68]	; 0x44
1a006e52:	f000 f95f 	bl	1a007114 <__sfp_lock_acquire>
1a006e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a006e58:	2200      	movs	r2, #0
1a006e5a:	07db      	lsls	r3, r3, #31
1a006e5c:	81a2      	strh	r2, [r4, #12]
1a006e5e:	d528      	bpl.n	1a006eb2 <_fclose_r+0xc6>
1a006e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006e62:	f000 faf9 	bl	1a007458 <__retarget_lock_close_recursive>
1a006e66:	f000 f95b 	bl	1a007120 <__sfp_lock_release>
1a006e6a:	4630      	mov	r0, r6
1a006e6c:	bd70      	pop	{r4, r5, r6, pc}
1a006e6e:	0591      	lsls	r1, r2, #22
1a006e70:	d4cc      	bmi.n	1a006e0c <_fclose_r+0x20>
1a006e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006e74:	f000 faf2 	bl	1a00745c <__retarget_lock_acquire_recursive>
1a006e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006e7c:	2b00      	cmp	r3, #0
1a006e7e:	d1c5      	bne.n	1a006e0c <_fclose_r+0x20>
1a006e80:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a006e82:	f016 0601 	ands.w	r6, r6, #1
1a006e86:	d00a      	beq.n	1a006e9e <_fclose_r+0xb2>
1a006e88:	2600      	movs	r6, #0
1a006e8a:	4630      	mov	r0, r6
1a006e8c:	bd70      	pop	{r4, r5, r6, pc}
1a006e8e:	f000 f917 	bl	1a0070c0 <__sinit>
1a006e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a006e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006e98:	07d8      	lsls	r0, r3, #31
1a006e9a:	d4b5      	bmi.n	1a006e08 <_fclose_r+0x1c>
1a006e9c:	e7e7      	b.n	1a006e6e <_fclose_r+0x82>
1a006e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006ea0:	f000 fade 	bl	1a007460 <__retarget_lock_release_recursive>
1a006ea4:	4630      	mov	r0, r6
1a006ea6:	bd70      	pop	{r4, r5, r6, pc}
1a006ea8:	6921      	ldr	r1, [r4, #16]
1a006eaa:	4628      	mov	r0, r5
1a006eac:	f000 f98e 	bl	1a0071cc <_free_r>
1a006eb0:	e7bd      	b.n	1a006e2e <_fclose_r+0x42>
1a006eb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006eb4:	f000 fad4 	bl	1a007460 <__retarget_lock_release_recursive>
1a006eb8:	e7d2      	b.n	1a006e60 <_fclose_r+0x74>
1a006eba:	bf00      	nop

1a006ebc <__sflush_r>:
1a006ebc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a006ec0:	b29a      	uxth	r2, r3
1a006ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006ec6:	460c      	mov	r4, r1
1a006ec8:	0711      	lsls	r1, r2, #28
1a006eca:	4680      	mov	r8, r0
1a006ecc:	d448      	bmi.n	1a006f60 <__sflush_r+0xa4>
1a006ece:	6862      	ldr	r2, [r4, #4]
1a006ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a006ed4:	2a00      	cmp	r2, #0
1a006ed6:	81a3      	strh	r3, [r4, #12]
1a006ed8:	dd5d      	ble.n	1a006f96 <__sflush_r+0xda>
1a006eda:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a006edc:	2d00      	cmp	r5, #0
1a006ede:	d057      	beq.n	1a006f90 <__sflush_r+0xd4>
1a006ee0:	2200      	movs	r2, #0
1a006ee2:	b29b      	uxth	r3, r3
1a006ee4:	f8d8 6000 	ldr.w	r6, [r8]
1a006ee8:	69e1      	ldr	r1, [r4, #28]
1a006eea:	f8c8 2000 	str.w	r2, [r8]
1a006eee:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a006ef2:	d154      	bne.n	1a006f9e <__sflush_r+0xe2>
1a006ef4:	2301      	movs	r3, #1
1a006ef6:	4640      	mov	r0, r8
1a006ef8:	47a8      	blx	r5
1a006efa:	1c43      	adds	r3, r0, #1
1a006efc:	4602      	mov	r2, r0
1a006efe:	d065      	beq.n	1a006fcc <__sflush_r+0x110>
1a006f00:	89a3      	ldrh	r3, [r4, #12]
1a006f02:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a006f04:	69e1      	ldr	r1, [r4, #28]
1a006f06:	075f      	lsls	r7, r3, #29
1a006f08:	d505      	bpl.n	1a006f16 <__sflush_r+0x5a>
1a006f0a:	6860      	ldr	r0, [r4, #4]
1a006f0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a006f0e:	1a12      	subs	r2, r2, r0
1a006f10:	b10b      	cbz	r3, 1a006f16 <__sflush_r+0x5a>
1a006f12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a006f14:	1ad2      	subs	r2, r2, r3
1a006f16:	2300      	movs	r3, #0
1a006f18:	4640      	mov	r0, r8
1a006f1a:	47a8      	blx	r5
1a006f1c:	1c45      	adds	r5, r0, #1
1a006f1e:	d148      	bne.n	1a006fb2 <__sflush_r+0xf6>
1a006f20:	f8d8 2000 	ldr.w	r2, [r8]
1a006f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006f28:	2a00      	cmp	r2, #0
1a006f2a:	d05c      	beq.n	1a006fe6 <__sflush_r+0x12a>
1a006f2c:	2a1d      	cmp	r2, #29
1a006f2e:	d001      	beq.n	1a006f34 <__sflush_r+0x78>
1a006f30:	2a16      	cmp	r2, #22
1a006f32:	d164      	bne.n	1a006ffe <__sflush_r+0x142>
1a006f34:	6922      	ldr	r2, [r4, #16]
1a006f36:	2100      	movs	r1, #0
1a006f38:	e9c4 2100 	strd	r2, r1, [r4]
1a006f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a006f40:	81a3      	strh	r3, [r4, #12]
1a006f42:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a006f44:	f8c8 6000 	str.w	r6, [r8]
1a006f48:	b311      	cbz	r1, 1a006f90 <__sflush_r+0xd4>
1a006f4a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a006f4e:	4299      	cmp	r1, r3
1a006f50:	d002      	beq.n	1a006f58 <__sflush_r+0x9c>
1a006f52:	4640      	mov	r0, r8
1a006f54:	f000 f93a 	bl	1a0071cc <_free_r>
1a006f58:	2000      	movs	r0, #0
1a006f5a:	6320      	str	r0, [r4, #48]	; 0x30
1a006f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006f60:	6926      	ldr	r6, [r4, #16]
1a006f62:	b1ae      	cbz	r6, 1a006f90 <__sflush_r+0xd4>
1a006f64:	6825      	ldr	r5, [r4, #0]
1a006f66:	6026      	str	r6, [r4, #0]
1a006f68:	0791      	lsls	r1, r2, #30
1a006f6a:	bf0c      	ite	eq
1a006f6c:	6963      	ldreq	r3, [r4, #20]
1a006f6e:	2300      	movne	r3, #0
1a006f70:	1bad      	subs	r5, r5, r6
1a006f72:	60a3      	str	r3, [r4, #8]
1a006f74:	e00a      	b.n	1a006f8c <__sflush_r+0xd0>
1a006f76:	462b      	mov	r3, r5
1a006f78:	4632      	mov	r2, r6
1a006f7a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a006f7c:	69e1      	ldr	r1, [r4, #28]
1a006f7e:	4640      	mov	r0, r8
1a006f80:	47b8      	blx	r7
1a006f82:	2800      	cmp	r0, #0
1a006f84:	eba5 0500 	sub.w	r5, r5, r0
1a006f88:	4406      	add	r6, r0
1a006f8a:	dd0a      	ble.n	1a006fa2 <__sflush_r+0xe6>
1a006f8c:	2d00      	cmp	r5, #0
1a006f8e:	dcf2      	bgt.n	1a006f76 <__sflush_r+0xba>
1a006f90:	2000      	movs	r0, #0
1a006f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006f96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a006f98:	2a00      	cmp	r2, #0
1a006f9a:	dc9e      	bgt.n	1a006eda <__sflush_r+0x1e>
1a006f9c:	e7f8      	b.n	1a006f90 <__sflush_r+0xd4>
1a006f9e:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a006fa0:	e7b1      	b.n	1a006f06 <__sflush_r+0x4a>
1a006fa2:	89a3      	ldrh	r3, [r4, #12]
1a006fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006fa8:	81a3      	strh	r3, [r4, #12]
1a006faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006fb6:	6922      	ldr	r2, [r4, #16]
1a006fb8:	6022      	str	r2, [r4, #0]
1a006fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a006fbe:	2200      	movs	r2, #0
1a006fc0:	6062      	str	r2, [r4, #4]
1a006fc2:	04da      	lsls	r2, r3, #19
1a006fc4:	81a3      	strh	r3, [r4, #12]
1a006fc6:	d5bc      	bpl.n	1a006f42 <__sflush_r+0x86>
1a006fc8:	6520      	str	r0, [r4, #80]	; 0x50
1a006fca:	e7ba      	b.n	1a006f42 <__sflush_r+0x86>
1a006fcc:	f8d8 3000 	ldr.w	r3, [r8]
1a006fd0:	2b00      	cmp	r3, #0
1a006fd2:	d095      	beq.n	1a006f00 <__sflush_r+0x44>
1a006fd4:	2b1d      	cmp	r3, #29
1a006fd6:	d00f      	beq.n	1a006ff8 <__sflush_r+0x13c>
1a006fd8:	2b16      	cmp	r3, #22
1a006fda:	d00d      	beq.n	1a006ff8 <__sflush_r+0x13c>
1a006fdc:	89a3      	ldrh	r3, [r4, #12]
1a006fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006fe2:	81a3      	strh	r3, [r4, #12]
1a006fe4:	e7d5      	b.n	1a006f92 <__sflush_r+0xd6>
1a006fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a006fea:	6921      	ldr	r1, [r4, #16]
1a006fec:	81a3      	strh	r3, [r4, #12]
1a006fee:	04db      	lsls	r3, r3, #19
1a006ff0:	e9c4 1200 	strd	r1, r2, [r4]
1a006ff4:	d5a5      	bpl.n	1a006f42 <__sflush_r+0x86>
1a006ff6:	e7e7      	b.n	1a006fc8 <__sflush_r+0x10c>
1a006ff8:	f8c8 6000 	str.w	r6, [r8]
1a006ffc:	e7c8      	b.n	1a006f90 <__sflush_r+0xd4>
1a006ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007002:	81a3      	strh	r3, [r4, #12]
1a007004:	e7c5      	b.n	1a006f92 <__sflush_r+0xd6>
1a007006:	bf00      	nop

1a007008 <_fflush_r>:
1a007008:	b538      	push	{r3, r4, r5, lr}
1a00700a:	460d      	mov	r5, r1
1a00700c:	4604      	mov	r4, r0
1a00700e:	b108      	cbz	r0, 1a007014 <_fflush_r+0xc>
1a007010:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007012:	b1a3      	cbz	r3, 1a00703e <_fflush_r+0x36>
1a007014:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a007018:	b1b8      	cbz	r0, 1a00704a <_fflush_r+0x42>
1a00701a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00701c:	07db      	lsls	r3, r3, #31
1a00701e:	d401      	bmi.n	1a007024 <_fflush_r+0x1c>
1a007020:	0581      	lsls	r1, r0, #22
1a007022:	d515      	bpl.n	1a007050 <_fflush_r+0x48>
1a007024:	4620      	mov	r0, r4
1a007026:	4629      	mov	r1, r5
1a007028:	f7ff ff48 	bl	1a006ebc <__sflush_r>
1a00702c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00702e:	07da      	lsls	r2, r3, #31
1a007030:	4604      	mov	r4, r0
1a007032:	d402      	bmi.n	1a00703a <_fflush_r+0x32>
1a007034:	89ab      	ldrh	r3, [r5, #12]
1a007036:	059b      	lsls	r3, r3, #22
1a007038:	d50e      	bpl.n	1a007058 <_fflush_r+0x50>
1a00703a:	4620      	mov	r0, r4
1a00703c:	bd38      	pop	{r3, r4, r5, pc}
1a00703e:	f000 f83f 	bl	1a0070c0 <__sinit>
1a007042:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a007046:	2800      	cmp	r0, #0
1a007048:	d1e7      	bne.n	1a00701a <_fflush_r+0x12>
1a00704a:	4604      	mov	r4, r0
1a00704c:	4620      	mov	r0, r4
1a00704e:	bd38      	pop	{r3, r4, r5, pc}
1a007050:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a007052:	f000 fa03 	bl	1a00745c <__retarget_lock_acquire_recursive>
1a007056:	e7e5      	b.n	1a007024 <_fflush_r+0x1c>
1a007058:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00705a:	f000 fa01 	bl	1a007460 <__retarget_lock_release_recursive>
1a00705e:	4620      	mov	r0, r4
1a007060:	bd38      	pop	{r3, r4, r5, pc}
1a007062:	bf00      	nop

1a007064 <std>:
1a007064:	b510      	push	{r4, lr}
1a007066:	2300      	movs	r3, #0
1a007068:	4604      	mov	r4, r0
1a00706a:	8181      	strh	r1, [r0, #12]
1a00706c:	81c2      	strh	r2, [r0, #14]
1a00706e:	e9c0 3300 	strd	r3, r3, [r0]
1a007072:	6083      	str	r3, [r0, #8]
1a007074:	6643      	str	r3, [r0, #100]	; 0x64
1a007076:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00707a:	6183      	str	r3, [r0, #24]
1a00707c:	4619      	mov	r1, r3
1a00707e:	2208      	movs	r2, #8
1a007080:	305c      	adds	r0, #92	; 0x5c
1a007082:	f000 fd41 	bl	1a007b08 <memset>
1a007086:	4807      	ldr	r0, [pc, #28]	; (1a0070a4 <std+0x40>)
1a007088:	4907      	ldr	r1, [pc, #28]	; (1a0070a8 <std+0x44>)
1a00708a:	4a08      	ldr	r2, [pc, #32]	; (1a0070ac <std+0x48>)
1a00708c:	4b08      	ldr	r3, [pc, #32]	; (1a0070b0 <std+0x4c>)
1a00708e:	62e3      	str	r3, [r4, #44]	; 0x2c
1a007090:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a007094:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a007098:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00709c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0070a0:	f000 b9d8 	b.w	1a007454 <__retarget_lock_init_recursive>
1a0070a4:	1a007cd9 	.word	0x1a007cd9
1a0070a8:	1a007cfd 	.word	0x1a007cfd
1a0070ac:	1a007d3d 	.word	0x1a007d3d
1a0070b0:	1a007d5d 	.word	0x1a007d5d

1a0070b4 <_cleanup_r>:
1a0070b4:	4901      	ldr	r1, [pc, #4]	; (1a0070bc <_cleanup_r+0x8>)
1a0070b6:	f000 b97f 	b.w	1a0073b8 <_fwalk_reent>
1a0070ba:	bf00      	nop
1a0070bc:	1a006ded 	.word	0x1a006ded

1a0070c0 <__sinit>:
1a0070c0:	b510      	push	{r4, lr}
1a0070c2:	4604      	mov	r4, r0
1a0070c4:	4811      	ldr	r0, [pc, #68]	; (1a00710c <__sinit+0x4c>)
1a0070c6:	f000 f9c9 	bl	1a00745c <__retarget_lock_acquire_recursive>
1a0070ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0070cc:	b9c2      	cbnz	r2, 1a007100 <__sinit+0x40>
1a0070ce:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a0070d2:	480f      	ldr	r0, [pc, #60]	; (1a007110 <__sinit+0x50>)
1a0070d4:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a0070d8:	2103      	movs	r1, #3
1a0070da:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a0070de:	63e0      	str	r0, [r4, #60]	; 0x3c
1a0070e0:	2104      	movs	r1, #4
1a0070e2:	6860      	ldr	r0, [r4, #4]
1a0070e4:	f7ff ffbe 	bl	1a007064 <std>
1a0070e8:	2201      	movs	r2, #1
1a0070ea:	2109      	movs	r1, #9
1a0070ec:	68a0      	ldr	r0, [r4, #8]
1a0070ee:	f7ff ffb9 	bl	1a007064 <std>
1a0070f2:	2202      	movs	r2, #2
1a0070f4:	2112      	movs	r1, #18
1a0070f6:	68e0      	ldr	r0, [r4, #12]
1a0070f8:	f7ff ffb4 	bl	1a007064 <std>
1a0070fc:	2301      	movs	r3, #1
1a0070fe:	63a3      	str	r3, [r4, #56]	; 0x38
1a007100:	4802      	ldr	r0, [pc, #8]	; (1a00710c <__sinit+0x4c>)
1a007102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a007106:	f000 b9ab 	b.w	1a007460 <__retarget_lock_release_recursive>
1a00710a:	bf00      	nop
1a00710c:	10003d4c 	.word	0x10003d4c
1a007110:	1a0070b5 	.word	0x1a0070b5

1a007114 <__sfp_lock_acquire>:
1a007114:	4801      	ldr	r0, [pc, #4]	; (1a00711c <__sfp_lock_acquire+0x8>)
1a007116:	f000 b9a1 	b.w	1a00745c <__retarget_lock_acquire_recursive>
1a00711a:	bf00      	nop
1a00711c:	10003d60 	.word	0x10003d60

1a007120 <__sfp_lock_release>:
1a007120:	4801      	ldr	r0, [pc, #4]	; (1a007128 <__sfp_lock_release+0x8>)
1a007122:	f000 b99d 	b.w	1a007460 <__retarget_lock_release_recursive>
1a007126:	bf00      	nop
1a007128:	10003d60 	.word	0x10003d60

1a00712c <_malloc_trim_r>:
1a00712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00712e:	4f24      	ldr	r7, [pc, #144]	; (1a0071c0 <_malloc_trim_r+0x94>)
1a007130:	460c      	mov	r4, r1
1a007132:	4606      	mov	r6, r0
1a007134:	f000 fd38 	bl	1a007ba8 <__malloc_lock>
1a007138:	68bb      	ldr	r3, [r7, #8]
1a00713a:	685d      	ldr	r5, [r3, #4]
1a00713c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a007140:	310f      	adds	r1, #15
1a007142:	f025 0503 	bic.w	r5, r5, #3
1a007146:	4429      	add	r1, r5
1a007148:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00714c:	f021 010f 	bic.w	r1, r1, #15
1a007150:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a007154:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a007158:	db07      	blt.n	1a00716a <_malloc_trim_r+0x3e>
1a00715a:	2100      	movs	r1, #0
1a00715c:	4630      	mov	r0, r6
1a00715e:	f7f9 fe27 	bl	1a000db0 <_sbrk_r>
1a007162:	68bb      	ldr	r3, [r7, #8]
1a007164:	442b      	add	r3, r5
1a007166:	4298      	cmp	r0, r3
1a007168:	d004      	beq.n	1a007174 <_malloc_trim_r+0x48>
1a00716a:	4630      	mov	r0, r6
1a00716c:	f000 fd22 	bl	1a007bb4 <__malloc_unlock>
1a007170:	2000      	movs	r0, #0
1a007172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007174:	4261      	negs	r1, r4
1a007176:	4630      	mov	r0, r6
1a007178:	f7f9 fe1a 	bl	1a000db0 <_sbrk_r>
1a00717c:	3001      	adds	r0, #1
1a00717e:	d00d      	beq.n	1a00719c <_malloc_trim_r+0x70>
1a007180:	4b10      	ldr	r3, [pc, #64]	; (1a0071c4 <_malloc_trim_r+0x98>)
1a007182:	68ba      	ldr	r2, [r7, #8]
1a007184:	6819      	ldr	r1, [r3, #0]
1a007186:	1b2d      	subs	r5, r5, r4
1a007188:	f045 0501 	orr.w	r5, r5, #1
1a00718c:	4630      	mov	r0, r6
1a00718e:	1b09      	subs	r1, r1, r4
1a007190:	6055      	str	r5, [r2, #4]
1a007192:	6019      	str	r1, [r3, #0]
1a007194:	f000 fd0e 	bl	1a007bb4 <__malloc_unlock>
1a007198:	2001      	movs	r0, #1
1a00719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00719c:	2100      	movs	r1, #0
1a00719e:	4630      	mov	r0, r6
1a0071a0:	f7f9 fe06 	bl	1a000db0 <_sbrk_r>
1a0071a4:	68ba      	ldr	r2, [r7, #8]
1a0071a6:	1a83      	subs	r3, r0, r2
1a0071a8:	2b0f      	cmp	r3, #15
1a0071aa:	ddde      	ble.n	1a00716a <_malloc_trim_r+0x3e>
1a0071ac:	4c06      	ldr	r4, [pc, #24]	; (1a0071c8 <_malloc_trim_r+0x9c>)
1a0071ae:	4905      	ldr	r1, [pc, #20]	; (1a0071c4 <_malloc_trim_r+0x98>)
1a0071b0:	6824      	ldr	r4, [r4, #0]
1a0071b2:	f043 0301 	orr.w	r3, r3, #1
1a0071b6:	1b00      	subs	r0, r0, r4
1a0071b8:	6053      	str	r3, [r2, #4]
1a0071ba:	6008      	str	r0, [r1, #0]
1a0071bc:	e7d5      	b.n	1a00716a <_malloc_trim_r+0x3e>
1a0071be:	bf00      	nop
1a0071c0:	100004c0 	.word	0x100004c0
1a0071c4:	10003280 	.word	0x10003280
1a0071c8:	100008c8 	.word	0x100008c8

1a0071cc <_free_r>:
1a0071cc:	2900      	cmp	r1, #0
1a0071ce:	d05d      	beq.n	1a00728c <_free_r+0xc0>
1a0071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0071d2:	460f      	mov	r7, r1
1a0071d4:	4606      	mov	r6, r0
1a0071d6:	f000 fce7 	bl	1a007ba8 <__malloc_lock>
1a0071da:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a0071de:	4c73      	ldr	r4, [pc, #460]	; (1a0073ac <_free_r+0x1e0>)
1a0071e0:	f02c 0301 	bic.w	r3, ip, #1
1a0071e4:	f1a7 0008 	sub.w	r0, r7, #8
1a0071e8:	18c2      	adds	r2, r0, r3
1a0071ea:	68a1      	ldr	r1, [r4, #8]
1a0071ec:	6855      	ldr	r5, [r2, #4]
1a0071ee:	4291      	cmp	r1, r2
1a0071f0:	f025 0503 	bic.w	r5, r5, #3
1a0071f4:	d07f      	beq.n	1a0072f6 <_free_r+0x12a>
1a0071f6:	f01c 0f01 	tst.w	ip, #1
1a0071fa:	6055      	str	r5, [r2, #4]
1a0071fc:	eb02 0105 	add.w	r1, r2, r5
1a007200:	d133      	bne.n	1a00726a <_free_r+0x9e>
1a007202:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a007206:	6849      	ldr	r1, [r1, #4]
1a007208:	eba0 000e 	sub.w	r0, r0, lr
1a00720c:	f104 0c08 	add.w	ip, r4, #8
1a007210:	6887      	ldr	r7, [r0, #8]
1a007212:	4567      	cmp	r7, ip
1a007214:	4473      	add	r3, lr
1a007216:	f001 0101 	and.w	r1, r1, #1
1a00721a:	d060      	beq.n	1a0072de <_free_r+0x112>
1a00721c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a007220:	f8c7 e00c 	str.w	lr, [r7, #12]
1a007224:	f8ce 7008 	str.w	r7, [lr, #8]
1a007228:	2900      	cmp	r1, #0
1a00722a:	f000 8089 	beq.w	1a007340 <_free_r+0x174>
1a00722e:	f043 0101 	orr.w	r1, r3, #1
1a007232:	6041      	str	r1, [r0, #4]
1a007234:	6013      	str	r3, [r2, #0]
1a007236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00723a:	d230      	bcs.n	1a00729e <_free_r+0xd2>
1a00723c:	08db      	lsrs	r3, r3, #3
1a00723e:	1c59      	adds	r1, r3, #1
1a007240:	6865      	ldr	r5, [r4, #4]
1a007242:	109a      	asrs	r2, r3, #2
1a007244:	2301      	movs	r3, #1
1a007246:	4093      	lsls	r3, r2
1a007248:	432b      	orrs	r3, r5
1a00724a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a00724e:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a007252:	6063      	str	r3, [r4, #4]
1a007254:	3a08      	subs	r2, #8
1a007256:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a00725a:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a00725e:	60e8      	str	r0, [r5, #12]
1a007260:	4630      	mov	r0, r6
1a007262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a007266:	f000 bca5 	b.w	1a007bb4 <__malloc_unlock>
1a00726a:	6849      	ldr	r1, [r1, #4]
1a00726c:	07c9      	lsls	r1, r1, #31
1a00726e:	d40e      	bmi.n	1a00728e <_free_r+0xc2>
1a007270:	442b      	add	r3, r5
1a007272:	f104 0c08 	add.w	ip, r4, #8
1a007276:	6891      	ldr	r1, [r2, #8]
1a007278:	4561      	cmp	r1, ip
1a00727a:	f043 0501 	orr.w	r5, r3, #1
1a00727e:	d067      	beq.n	1a007350 <_free_r+0x184>
1a007280:	68d2      	ldr	r2, [r2, #12]
1a007282:	60ca      	str	r2, [r1, #12]
1a007284:	6091      	str	r1, [r2, #8]
1a007286:	6045      	str	r5, [r0, #4]
1a007288:	50c3      	str	r3, [r0, r3]
1a00728a:	e7d4      	b.n	1a007236 <_free_r+0x6a>
1a00728c:	4770      	bx	lr
1a00728e:	f043 0101 	orr.w	r1, r3, #1
1a007292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a007296:	f847 1c04 	str.w	r1, [r7, #-4]
1a00729a:	6013      	str	r3, [r2, #0]
1a00729c:	d3ce      	bcc.n	1a00723c <_free_r+0x70>
1a00729e:	0a5a      	lsrs	r2, r3, #9
1a0072a0:	2a04      	cmp	r2, #4
1a0072a2:	d842      	bhi.n	1a00732a <_free_r+0x15e>
1a0072a4:	099a      	lsrs	r2, r3, #6
1a0072a6:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a0072aa:	00ff      	lsls	r7, r7, #3
1a0072ac:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a0072b0:	19e5      	adds	r5, r4, r7
1a0072b2:	59e2      	ldr	r2, [r4, r7]
1a0072b4:	3d08      	subs	r5, #8
1a0072b6:	4295      	cmp	r5, r2
1a0072b8:	d051      	beq.n	1a00735e <_free_r+0x192>
1a0072ba:	6851      	ldr	r1, [r2, #4]
1a0072bc:	f021 0103 	bic.w	r1, r1, #3
1a0072c0:	4299      	cmp	r1, r3
1a0072c2:	d902      	bls.n	1a0072ca <_free_r+0xfe>
1a0072c4:	6892      	ldr	r2, [r2, #8]
1a0072c6:	4295      	cmp	r5, r2
1a0072c8:	d1f7      	bne.n	1a0072ba <_free_r+0xee>
1a0072ca:	68d5      	ldr	r5, [r2, #12]
1a0072cc:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a0072d0:	60a8      	str	r0, [r5, #8]
1a0072d2:	60d0      	str	r0, [r2, #12]
1a0072d4:	4630      	mov	r0, r6
1a0072d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0072da:	f000 bc6b 	b.w	1a007bb4 <__malloc_unlock>
1a0072de:	2900      	cmp	r1, #0
1a0072e0:	d15e      	bne.n	1a0073a0 <_free_r+0x1d4>
1a0072e2:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a0072e6:	442b      	add	r3, r5
1a0072e8:	f043 0401 	orr.w	r4, r3, #1
1a0072ec:	60ca      	str	r2, [r1, #12]
1a0072ee:	6091      	str	r1, [r2, #8]
1a0072f0:	6044      	str	r4, [r0, #4]
1a0072f2:	50c3      	str	r3, [r0, r3]
1a0072f4:	e7b4      	b.n	1a007260 <_free_r+0x94>
1a0072f6:	f01c 0f01 	tst.w	ip, #1
1a0072fa:	442b      	add	r3, r5
1a0072fc:	d107      	bne.n	1a00730e <_free_r+0x142>
1a0072fe:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a007302:	1a80      	subs	r0, r0, r2
1a007304:	4413      	add	r3, r2
1a007306:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a00730a:	60ca      	str	r2, [r1, #12]
1a00730c:	6091      	str	r1, [r2, #8]
1a00730e:	4a28      	ldr	r2, [pc, #160]	; (1a0073b0 <_free_r+0x1e4>)
1a007310:	6812      	ldr	r2, [r2, #0]
1a007312:	f043 0101 	orr.w	r1, r3, #1
1a007316:	429a      	cmp	r2, r3
1a007318:	6041      	str	r1, [r0, #4]
1a00731a:	60a0      	str	r0, [r4, #8]
1a00731c:	d8a0      	bhi.n	1a007260 <_free_r+0x94>
1a00731e:	4b25      	ldr	r3, [pc, #148]	; (1a0073b4 <_free_r+0x1e8>)
1a007320:	4630      	mov	r0, r6
1a007322:	6819      	ldr	r1, [r3, #0]
1a007324:	f7ff ff02 	bl	1a00712c <_malloc_trim_r>
1a007328:	e79a      	b.n	1a007260 <_free_r+0x94>
1a00732a:	2a14      	cmp	r2, #20
1a00732c:	d90a      	bls.n	1a007344 <_free_r+0x178>
1a00732e:	2a54      	cmp	r2, #84	; 0x54
1a007330:	d81d      	bhi.n	1a00736e <_free_r+0x1a2>
1a007332:	0b1a      	lsrs	r2, r3, #12
1a007334:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a007338:	00ff      	lsls	r7, r7, #3
1a00733a:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a00733e:	e7b7      	b.n	1a0072b0 <_free_r+0xe4>
1a007340:	442b      	add	r3, r5
1a007342:	e798      	b.n	1a007276 <_free_r+0xaa>
1a007344:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a007348:	00ff      	lsls	r7, r7, #3
1a00734a:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a00734e:	e7af      	b.n	1a0072b0 <_free_r+0xe4>
1a007350:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a007354:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a007358:	6045      	str	r5, [r0, #4]
1a00735a:	50c3      	str	r3, [r0, r3]
1a00735c:	e780      	b.n	1a007260 <_free_r+0x94>
1a00735e:	6863      	ldr	r3, [r4, #4]
1a007360:	1089      	asrs	r1, r1, #2
1a007362:	2701      	movs	r7, #1
1a007364:	fa07 f101 	lsl.w	r1, r7, r1
1a007368:	4319      	orrs	r1, r3
1a00736a:	6061      	str	r1, [r4, #4]
1a00736c:	e7ae      	b.n	1a0072cc <_free_r+0x100>
1a00736e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a007372:	d806      	bhi.n	1a007382 <_free_r+0x1b6>
1a007374:	0bda      	lsrs	r2, r3, #15
1a007376:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a00737a:	00ff      	lsls	r7, r7, #3
1a00737c:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a007380:	e796      	b.n	1a0072b0 <_free_r+0xe4>
1a007382:	f240 5154 	movw	r1, #1364	; 0x554
1a007386:	428a      	cmp	r2, r1
1a007388:	d806      	bhi.n	1a007398 <_free_r+0x1cc>
1a00738a:	0c9a      	lsrs	r2, r3, #18
1a00738c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a007390:	00ff      	lsls	r7, r7, #3
1a007392:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a007396:	e78b      	b.n	1a0072b0 <_free_r+0xe4>
1a007398:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a00739c:	217e      	movs	r1, #126	; 0x7e
1a00739e:	e787      	b.n	1a0072b0 <_free_r+0xe4>
1a0073a0:	f043 0101 	orr.w	r1, r3, #1
1a0073a4:	6041      	str	r1, [r0, #4]
1a0073a6:	6013      	str	r3, [r2, #0]
1a0073a8:	e75a      	b.n	1a007260 <_free_r+0x94>
1a0073aa:	bf00      	nop
1a0073ac:	100004c0 	.word	0x100004c0
1a0073b0:	100008cc 	.word	0x100008cc
1a0073b4:	100032b0 	.word	0x100032b0

1a0073b8 <_fwalk_reent>:
1a0073b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0073bc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a0073c0:	d01f      	beq.n	1a007402 <_fwalk_reent+0x4a>
1a0073c2:	4688      	mov	r8, r1
1a0073c4:	4606      	mov	r6, r0
1a0073c6:	f04f 0900 	mov.w	r9, #0
1a0073ca:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a0073ce:	3d01      	subs	r5, #1
1a0073d0:	d411      	bmi.n	1a0073f6 <_fwalk_reent+0x3e>
1a0073d2:	89a3      	ldrh	r3, [r4, #12]
1a0073d4:	2b01      	cmp	r3, #1
1a0073d6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a0073da:	d908      	bls.n	1a0073ee <_fwalk_reent+0x36>
1a0073dc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a0073e0:	3301      	adds	r3, #1
1a0073e2:	4621      	mov	r1, r4
1a0073e4:	4630      	mov	r0, r6
1a0073e6:	d002      	beq.n	1a0073ee <_fwalk_reent+0x36>
1a0073e8:	47c0      	blx	r8
1a0073ea:	ea49 0900 	orr.w	r9, r9, r0
1a0073ee:	1c6b      	adds	r3, r5, #1
1a0073f0:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0073f4:	d1ed      	bne.n	1a0073d2 <_fwalk_reent+0x1a>
1a0073f6:	683f      	ldr	r7, [r7, #0]
1a0073f8:	2f00      	cmp	r7, #0
1a0073fa:	d1e6      	bne.n	1a0073ca <_fwalk_reent+0x12>
1a0073fc:	4648      	mov	r0, r9
1a0073fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007402:	46b9      	mov	r9, r7
1a007404:	4648      	mov	r0, r9
1a007406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00740a:	bf00      	nop

1a00740c <__libc_init_array>:
1a00740c:	b570      	push	{r4, r5, r6, lr}
1a00740e:	4e0d      	ldr	r6, [pc, #52]	; (1a007444 <__libc_init_array+0x38>)
1a007410:	4d0d      	ldr	r5, [pc, #52]	; (1a007448 <__libc_init_array+0x3c>)
1a007412:	1b76      	subs	r6, r6, r5
1a007414:	10b6      	asrs	r6, r6, #2
1a007416:	d006      	beq.n	1a007426 <__libc_init_array+0x1a>
1a007418:	2400      	movs	r4, #0
1a00741a:	3401      	adds	r4, #1
1a00741c:	f855 3b04 	ldr.w	r3, [r5], #4
1a007420:	4798      	blx	r3
1a007422:	42a6      	cmp	r6, r4
1a007424:	d1f9      	bne.n	1a00741a <__libc_init_array+0xe>
1a007426:	4e09      	ldr	r6, [pc, #36]	; (1a00744c <__libc_init_array+0x40>)
1a007428:	4d09      	ldr	r5, [pc, #36]	; (1a007450 <__libc_init_array+0x44>)
1a00742a:	1b76      	subs	r6, r6, r5
1a00742c:	f7f9 fc6b 	bl	1a000d06 <_init>
1a007430:	10b6      	asrs	r6, r6, #2
1a007432:	d006      	beq.n	1a007442 <__libc_init_array+0x36>
1a007434:	2400      	movs	r4, #0
1a007436:	3401      	adds	r4, #1
1a007438:	f855 3b04 	ldr.w	r3, [r5], #4
1a00743c:	4798      	blx	r3
1a00743e:	42a6      	cmp	r6, r4
1a007440:	d1f9      	bne.n	1a007436 <__libc_init_array+0x2a>
1a007442:	bd70      	pop	{r4, r5, r6, pc}
1a007444:	1a00ec7c 	.word	0x1a00ec7c
1a007448:	1a00ec7c 	.word	0x1a00ec7c
1a00744c:	1a00ec80 	.word	0x1a00ec80
1a007450:	1a00ec7c 	.word	0x1a00ec7c

1a007454 <__retarget_lock_init_recursive>:
1a007454:	4770      	bx	lr
1a007456:	bf00      	nop

1a007458 <__retarget_lock_close_recursive>:
1a007458:	4770      	bx	lr
1a00745a:	bf00      	nop

1a00745c <__retarget_lock_acquire_recursive>:
1a00745c:	4770      	bx	lr
1a00745e:	bf00      	nop

1a007460 <__retarget_lock_release_recursive>:
1a007460:	4770      	bx	lr
1a007462:	bf00      	nop

1a007464 <_malloc_r>:
1a007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007468:	f101 050b 	add.w	r5, r1, #11
1a00746c:	2d16      	cmp	r5, #22
1a00746e:	b083      	sub	sp, #12
1a007470:	4606      	mov	r6, r0
1a007472:	d823      	bhi.n	1a0074bc <_malloc_r+0x58>
1a007474:	2910      	cmp	r1, #16
1a007476:	f200 80b9 	bhi.w	1a0075ec <_malloc_r+0x188>
1a00747a:	f000 fb95 	bl	1a007ba8 <__malloc_lock>
1a00747e:	2510      	movs	r5, #16
1a007480:	2318      	movs	r3, #24
1a007482:	2002      	movs	r0, #2
1a007484:	4fba      	ldr	r7, [pc, #744]	; (1a007770 <_malloc_r+0x30c>)
1a007486:	443b      	add	r3, r7
1a007488:	f1a3 0208 	sub.w	r2, r3, #8
1a00748c:	685c      	ldr	r4, [r3, #4]
1a00748e:	4294      	cmp	r4, r2
1a007490:	f000 80b9 	beq.w	1a007606 <_malloc_r+0x1a2>
1a007494:	6863      	ldr	r3, [r4, #4]
1a007496:	f023 0303 	bic.w	r3, r3, #3
1a00749a:	4423      	add	r3, r4
1a00749c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a0074a0:	685a      	ldr	r2, [r3, #4]
1a0074a2:	60e9      	str	r1, [r5, #12]
1a0074a4:	f042 0201 	orr.w	r2, r2, #1
1a0074a8:	4630      	mov	r0, r6
1a0074aa:	608d      	str	r5, [r1, #8]
1a0074ac:	605a      	str	r2, [r3, #4]
1a0074ae:	f000 fb81 	bl	1a007bb4 <__malloc_unlock>
1a0074b2:	3408      	adds	r4, #8
1a0074b4:	4620      	mov	r0, r4
1a0074b6:	b003      	add	sp, #12
1a0074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0074bc:	f035 0507 	bics.w	r5, r5, #7
1a0074c0:	f100 8094 	bmi.w	1a0075ec <_malloc_r+0x188>
1a0074c4:	42a9      	cmp	r1, r5
1a0074c6:	f200 8091 	bhi.w	1a0075ec <_malloc_r+0x188>
1a0074ca:	f000 fb6d 	bl	1a007ba8 <__malloc_lock>
1a0074ce:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0074d2:	f0c0 81a2 	bcc.w	1a00781a <_malloc_r+0x3b6>
1a0074d6:	0a6b      	lsrs	r3, r5, #9
1a0074d8:	f000 808f 	beq.w	1a0075fa <_malloc_r+0x196>
1a0074dc:	2b04      	cmp	r3, #4
1a0074de:	f200 8178 	bhi.w	1a0077d2 <_malloc_r+0x36e>
1a0074e2:	09ab      	lsrs	r3, r5, #6
1a0074e4:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a0074e8:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a0074ec:	00c3      	lsls	r3, r0, #3
1a0074ee:	4fa0      	ldr	r7, [pc, #640]	; (1a007770 <_malloc_r+0x30c>)
1a0074f0:	443b      	add	r3, r7
1a0074f2:	f1a3 0108 	sub.w	r1, r3, #8
1a0074f6:	685c      	ldr	r4, [r3, #4]
1a0074f8:	42a1      	cmp	r1, r4
1a0074fa:	d106      	bne.n	1a00750a <_malloc_r+0xa6>
1a0074fc:	e00c      	b.n	1a007518 <_malloc_r+0xb4>
1a0074fe:	2a00      	cmp	r2, #0
1a007500:	f280 8127 	bge.w	1a007752 <_malloc_r+0x2ee>
1a007504:	68e4      	ldr	r4, [r4, #12]
1a007506:	42a1      	cmp	r1, r4
1a007508:	d006      	beq.n	1a007518 <_malloc_r+0xb4>
1a00750a:	6863      	ldr	r3, [r4, #4]
1a00750c:	f023 0303 	bic.w	r3, r3, #3
1a007510:	1b5a      	subs	r2, r3, r5
1a007512:	2a0f      	cmp	r2, #15
1a007514:	ddf3      	ble.n	1a0074fe <_malloc_r+0x9a>
1a007516:	4660      	mov	r0, ip
1a007518:	693c      	ldr	r4, [r7, #16]
1a00751a:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a007784 <_malloc_r+0x320>
1a00751e:	4564      	cmp	r4, ip
1a007520:	d07c      	beq.n	1a00761c <_malloc_r+0x1b8>
1a007522:	6863      	ldr	r3, [r4, #4]
1a007524:	f023 0303 	bic.w	r3, r3, #3
1a007528:	1b5a      	subs	r2, r3, r5
1a00752a:	2a0f      	cmp	r2, #15
1a00752c:	f300 8183 	bgt.w	1a007836 <_malloc_r+0x3d2>
1a007530:	2a00      	cmp	r2, #0
1a007532:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a007536:	f280 8174 	bge.w	1a007822 <_malloc_r+0x3be>
1a00753a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00753e:	f080 8125 	bcs.w	1a00778c <_malloc_r+0x328>
1a007542:	08db      	lsrs	r3, r3, #3
1a007544:	1c59      	adds	r1, r3, #1
1a007546:	687a      	ldr	r2, [r7, #4]
1a007548:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a00754c:	f8c4 8008 	str.w	r8, [r4, #8]
1a007550:	f04f 0e01 	mov.w	lr, #1
1a007554:	109b      	asrs	r3, r3, #2
1a007556:	fa0e f303 	lsl.w	r3, lr, r3
1a00755a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00755e:	4313      	orrs	r3, r2
1a007560:	f1ae 0208 	sub.w	r2, lr, #8
1a007564:	60e2      	str	r2, [r4, #12]
1a007566:	607b      	str	r3, [r7, #4]
1a007568:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a00756c:	f8c8 400c 	str.w	r4, [r8, #12]
1a007570:	1082      	asrs	r2, r0, #2
1a007572:	2401      	movs	r4, #1
1a007574:	4094      	lsls	r4, r2
1a007576:	429c      	cmp	r4, r3
1a007578:	d856      	bhi.n	1a007628 <_malloc_r+0x1c4>
1a00757a:	421c      	tst	r4, r3
1a00757c:	d106      	bne.n	1a00758c <_malloc_r+0x128>
1a00757e:	f020 0003 	bic.w	r0, r0, #3
1a007582:	0064      	lsls	r4, r4, #1
1a007584:	421c      	tst	r4, r3
1a007586:	f100 0004 	add.w	r0, r0, #4
1a00758a:	d0fa      	beq.n	1a007582 <_malloc_r+0x11e>
1a00758c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a007590:	46ce      	mov	lr, r9
1a007592:	4680      	mov	r8, r0
1a007594:	f8de 300c 	ldr.w	r3, [lr, #12]
1a007598:	459e      	cmp	lr, r3
1a00759a:	d107      	bne.n	1a0075ac <_malloc_r+0x148>
1a00759c:	e125      	b.n	1a0077ea <_malloc_r+0x386>
1a00759e:	2a00      	cmp	r2, #0
1a0075a0:	f280 812c 	bge.w	1a0077fc <_malloc_r+0x398>
1a0075a4:	68db      	ldr	r3, [r3, #12]
1a0075a6:	459e      	cmp	lr, r3
1a0075a8:	f000 811f 	beq.w	1a0077ea <_malloc_r+0x386>
1a0075ac:	6859      	ldr	r1, [r3, #4]
1a0075ae:	f021 0103 	bic.w	r1, r1, #3
1a0075b2:	1b4a      	subs	r2, r1, r5
1a0075b4:	2a0f      	cmp	r2, #15
1a0075b6:	ddf2      	ble.n	1a00759e <_malloc_r+0x13a>
1a0075b8:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0075bc:	195c      	adds	r4, r3, r5
1a0075be:	f045 0501 	orr.w	r5, r5, #1
1a0075c2:	605d      	str	r5, [r3, #4]
1a0075c4:	f042 0501 	orr.w	r5, r2, #1
1a0075c8:	f8c8 e00c 	str.w	lr, [r8, #12]
1a0075cc:	4630      	mov	r0, r6
1a0075ce:	f8ce 8008 	str.w	r8, [lr, #8]
1a0075d2:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a0075d6:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a0075da:	6065      	str	r5, [r4, #4]
1a0075dc:	505a      	str	r2, [r3, r1]
1a0075de:	9300      	str	r3, [sp, #0]
1a0075e0:	f000 fae8 	bl	1a007bb4 <__malloc_unlock>
1a0075e4:	9b00      	ldr	r3, [sp, #0]
1a0075e6:	f103 0408 	add.w	r4, r3, #8
1a0075ea:	e002      	b.n	1a0075f2 <_malloc_r+0x18e>
1a0075ec:	230c      	movs	r3, #12
1a0075ee:	6033      	str	r3, [r6, #0]
1a0075f0:	2400      	movs	r4, #0
1a0075f2:	4620      	mov	r0, r4
1a0075f4:	b003      	add	sp, #12
1a0075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0075fa:	f44f 7300 	mov.w	r3, #512	; 0x200
1a0075fe:	2040      	movs	r0, #64	; 0x40
1a007600:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a007604:	e773      	b.n	1a0074ee <_malloc_r+0x8a>
1a007606:	68dc      	ldr	r4, [r3, #12]
1a007608:	42a3      	cmp	r3, r4
1a00760a:	bf08      	it	eq
1a00760c:	3002      	addeq	r0, #2
1a00760e:	f47f af41 	bne.w	1a007494 <_malloc_r+0x30>
1a007612:	693c      	ldr	r4, [r7, #16]
1a007614:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a007784 <_malloc_r+0x320>
1a007618:	4564      	cmp	r4, ip
1a00761a:	d182      	bne.n	1a007522 <_malloc_r+0xbe>
1a00761c:	687b      	ldr	r3, [r7, #4]
1a00761e:	1082      	asrs	r2, r0, #2
1a007620:	2401      	movs	r4, #1
1a007622:	4094      	lsls	r4, r2
1a007624:	429c      	cmp	r4, r3
1a007626:	d9a8      	bls.n	1a00757a <_malloc_r+0x116>
1a007628:	68bc      	ldr	r4, [r7, #8]
1a00762a:	6863      	ldr	r3, [r4, #4]
1a00762c:	f023 0803 	bic.w	r8, r3, #3
1a007630:	45a8      	cmp	r8, r5
1a007632:	d303      	bcc.n	1a00763c <_malloc_r+0x1d8>
1a007634:	eba8 0305 	sub.w	r3, r8, r5
1a007638:	2b0f      	cmp	r3, #15
1a00763a:	dc7a      	bgt.n	1a007732 <_malloc_r+0x2ce>
1a00763c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a007788 <_malloc_r+0x324>
1a007640:	4b4c      	ldr	r3, [pc, #304]	; (1a007774 <_malloc_r+0x310>)
1a007642:	f8d9 2000 	ldr.w	r2, [r9]
1a007646:	681b      	ldr	r3, [r3, #0]
1a007648:	3201      	adds	r2, #1
1a00764a:	442b      	add	r3, r5
1a00764c:	eb04 0a08 	add.w	sl, r4, r8
1a007650:	f000 813c 	beq.w	1a0078cc <_malloc_r+0x468>
1a007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a007658:	330f      	adds	r3, #15
1a00765a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a00765e:	f02b 0b0f 	bic.w	fp, fp, #15
1a007662:	4659      	mov	r1, fp
1a007664:	4630      	mov	r0, r6
1a007666:	f7f9 fba3 	bl	1a000db0 <_sbrk_r>
1a00766a:	1c41      	adds	r1, r0, #1
1a00766c:	4602      	mov	r2, r0
1a00766e:	f000 80fc 	beq.w	1a00786a <_malloc_r+0x406>
1a007672:	4582      	cmp	sl, r0
1a007674:	f200 80f7 	bhi.w	1a007866 <_malloc_r+0x402>
1a007678:	4b3f      	ldr	r3, [pc, #252]	; (1a007778 <_malloc_r+0x314>)
1a00767a:	6818      	ldr	r0, [r3, #0]
1a00767c:	4458      	add	r0, fp
1a00767e:	6018      	str	r0, [r3, #0]
1a007680:	4601      	mov	r1, r0
1a007682:	f000 8157 	beq.w	1a007934 <_malloc_r+0x4d0>
1a007686:	f8d9 0000 	ldr.w	r0, [r9]
1a00768a:	9301      	str	r3, [sp, #4]
1a00768c:	3001      	adds	r0, #1
1a00768e:	bf1b      	ittet	ne
1a007690:	eba2 0a0a 	subne.w	sl, r2, sl
1a007694:	4451      	addne	r1, sl
1a007696:	f8c9 2000 	streq.w	r2, [r9]
1a00769a:	6019      	strne	r1, [r3, #0]
1a00769c:	f012 0a07 	ands.w	sl, r2, #7
1a0076a0:	f000 8120 	beq.w	1a0078e4 <_malloc_r+0x480>
1a0076a4:	f1ca 0108 	rsb	r1, sl, #8
1a0076a8:	440a      	add	r2, r1
1a0076aa:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a0076ae:	4493      	add	fp, r2
1a0076b0:	3108      	adds	r1, #8
1a0076b2:	eba1 010b 	sub.w	r1, r1, fp
1a0076b6:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a0076ba:	4649      	mov	r1, r9
1a0076bc:	4630      	mov	r0, r6
1a0076be:	9200      	str	r2, [sp, #0]
1a0076c0:	f7f9 fb76 	bl	1a000db0 <_sbrk_r>
1a0076c4:	1c42      	adds	r2, r0, #1
1a0076c6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0076ca:	f000 8158 	beq.w	1a00797e <_malloc_r+0x51a>
1a0076ce:	1a80      	subs	r0, r0, r2
1a0076d0:	eb00 0b09 	add.w	fp, r0, r9
1a0076d4:	6818      	ldr	r0, [r3, #0]
1a0076d6:	60ba      	str	r2, [r7, #8]
1a0076d8:	f04b 0101 	orr.w	r1, fp, #1
1a0076dc:	4448      	add	r0, r9
1a0076de:	42bc      	cmp	r4, r7
1a0076e0:	6051      	str	r1, [r2, #4]
1a0076e2:	6018      	str	r0, [r3, #0]
1a0076e4:	f000 8132 	beq.w	1a00794c <_malloc_r+0x4e8>
1a0076e8:	f1b8 0f0f 	cmp.w	r8, #15
1a0076ec:	f240 8130 	bls.w	1a007950 <_malloc_r+0x4ec>
1a0076f0:	6861      	ldr	r1, [r4, #4]
1a0076f2:	f1a8 0c0c 	sub.w	ip, r8, #12
1a0076f6:	f02c 0c07 	bic.w	ip, ip, #7
1a0076fa:	f001 0101 	and.w	r1, r1, #1
1a0076fe:	eb04 0e0c 	add.w	lr, r4, ip
1a007702:	ea41 010c 	orr.w	r1, r1, ip
1a007706:	f04f 0805 	mov.w	r8, #5
1a00770a:	f1bc 0f0f 	cmp.w	ip, #15
1a00770e:	6061      	str	r1, [r4, #4]
1a007710:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a007714:	f200 813b 	bhi.w	1a00798e <_malloc_r+0x52a>
1a007718:	6851      	ldr	r1, [r2, #4]
1a00771a:	4614      	mov	r4, r2
1a00771c:	4b17      	ldr	r3, [pc, #92]	; (1a00777c <_malloc_r+0x318>)
1a00771e:	681a      	ldr	r2, [r3, #0]
1a007720:	4282      	cmp	r2, r0
1a007722:	bf38      	it	cc
1a007724:	6018      	strcc	r0, [r3, #0]
1a007726:	4b16      	ldr	r3, [pc, #88]	; (1a007780 <_malloc_r+0x31c>)
1a007728:	681a      	ldr	r2, [r3, #0]
1a00772a:	4282      	cmp	r2, r0
1a00772c:	bf38      	it	cc
1a00772e:	6018      	strcc	r0, [r3, #0]
1a007730:	e09d      	b.n	1a00786e <_malloc_r+0x40a>
1a007732:	1962      	adds	r2, r4, r5
1a007734:	f043 0301 	orr.w	r3, r3, #1
1a007738:	f045 0501 	orr.w	r5, r5, #1
1a00773c:	6065      	str	r5, [r4, #4]
1a00773e:	4630      	mov	r0, r6
1a007740:	60ba      	str	r2, [r7, #8]
1a007742:	6053      	str	r3, [r2, #4]
1a007744:	f000 fa36 	bl	1a007bb4 <__malloc_unlock>
1a007748:	3408      	adds	r4, #8
1a00774a:	4620      	mov	r0, r4
1a00774c:	b003      	add	sp, #12
1a00774e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007752:	4423      	add	r3, r4
1a007754:	68e1      	ldr	r1, [r4, #12]
1a007756:	685a      	ldr	r2, [r3, #4]
1a007758:	68a5      	ldr	r5, [r4, #8]
1a00775a:	f042 0201 	orr.w	r2, r2, #1
1a00775e:	60e9      	str	r1, [r5, #12]
1a007760:	4630      	mov	r0, r6
1a007762:	608d      	str	r5, [r1, #8]
1a007764:	605a      	str	r2, [r3, #4]
1a007766:	f000 fa25 	bl	1a007bb4 <__malloc_unlock>
1a00776a:	3408      	adds	r4, #8
1a00776c:	e741      	b.n	1a0075f2 <_malloc_r+0x18e>
1a00776e:	bf00      	nop
1a007770:	100004c0 	.word	0x100004c0
1a007774:	100032b0 	.word	0x100032b0
1a007778:	10003280 	.word	0x10003280
1a00777c:	100032a8 	.word	0x100032a8
1a007780:	100032ac 	.word	0x100032ac
1a007784:	100004c8 	.word	0x100004c8
1a007788:	100008c8 	.word	0x100008c8
1a00778c:	0a5a      	lsrs	r2, r3, #9
1a00778e:	2a04      	cmp	r2, #4
1a007790:	d963      	bls.n	1a00785a <_malloc_r+0x3f6>
1a007792:	2a14      	cmp	r2, #20
1a007794:	f200 80b7 	bhi.w	1a007906 <_malloc_r+0x4a2>
1a007798:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a00779c:	00c9      	lsls	r1, r1, #3
1a00779e:	325b      	adds	r2, #91	; 0x5b
1a0077a0:	eb07 0e01 	add.w	lr, r7, r1
1a0077a4:	5879      	ldr	r1, [r7, r1]
1a0077a6:	f1ae 0e08 	sub.w	lr, lr, #8
1a0077aa:	458e      	cmp	lr, r1
1a0077ac:	f000 8091 	beq.w	1a0078d2 <_malloc_r+0x46e>
1a0077b0:	684a      	ldr	r2, [r1, #4]
1a0077b2:	f022 0203 	bic.w	r2, r2, #3
1a0077b6:	429a      	cmp	r2, r3
1a0077b8:	d902      	bls.n	1a0077c0 <_malloc_r+0x35c>
1a0077ba:	6889      	ldr	r1, [r1, #8]
1a0077bc:	458e      	cmp	lr, r1
1a0077be:	d1f7      	bne.n	1a0077b0 <_malloc_r+0x34c>
1a0077c0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a0077c4:	687b      	ldr	r3, [r7, #4]
1a0077c6:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a0077ca:	f8ce 4008 	str.w	r4, [lr, #8]
1a0077ce:	60cc      	str	r4, [r1, #12]
1a0077d0:	e6ce      	b.n	1a007570 <_malloc_r+0x10c>
1a0077d2:	2b14      	cmp	r3, #20
1a0077d4:	d959      	bls.n	1a00788a <_malloc_r+0x426>
1a0077d6:	2b54      	cmp	r3, #84	; 0x54
1a0077d8:	f200 809d 	bhi.w	1a007916 <_malloc_r+0x4b2>
1a0077dc:	0b2b      	lsrs	r3, r5, #12
1a0077de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a0077e2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a0077e6:	00c3      	lsls	r3, r0, #3
1a0077e8:	e681      	b.n	1a0074ee <_malloc_r+0x8a>
1a0077ea:	f108 0801 	add.w	r8, r8, #1
1a0077ee:	f018 0f03 	tst.w	r8, #3
1a0077f2:	f10e 0e08 	add.w	lr, lr, #8
1a0077f6:	f47f aecd 	bne.w	1a007594 <_malloc_r+0x130>
1a0077fa:	e051      	b.n	1a0078a0 <_malloc_r+0x43c>
1a0077fc:	4419      	add	r1, r3
1a0077fe:	461c      	mov	r4, r3
1a007800:	684a      	ldr	r2, [r1, #4]
1a007802:	68db      	ldr	r3, [r3, #12]
1a007804:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a007808:	f042 0201 	orr.w	r2, r2, #1
1a00780c:	604a      	str	r2, [r1, #4]
1a00780e:	4630      	mov	r0, r6
1a007810:	60eb      	str	r3, [r5, #12]
1a007812:	609d      	str	r5, [r3, #8]
1a007814:	f000 f9ce 	bl	1a007bb4 <__malloc_unlock>
1a007818:	e6eb      	b.n	1a0075f2 <_malloc_r+0x18e>
1a00781a:	08e8      	lsrs	r0, r5, #3
1a00781c:	f105 0308 	add.w	r3, r5, #8
1a007820:	e630      	b.n	1a007484 <_malloc_r+0x20>
1a007822:	4423      	add	r3, r4
1a007824:	4630      	mov	r0, r6
1a007826:	685a      	ldr	r2, [r3, #4]
1a007828:	f042 0201 	orr.w	r2, r2, #1
1a00782c:	605a      	str	r2, [r3, #4]
1a00782e:	3408      	adds	r4, #8
1a007830:	f000 f9c0 	bl	1a007bb4 <__malloc_unlock>
1a007834:	e6dd      	b.n	1a0075f2 <_malloc_r+0x18e>
1a007836:	1961      	adds	r1, r4, r5
1a007838:	f045 0e01 	orr.w	lr, r5, #1
1a00783c:	f042 0501 	orr.w	r5, r2, #1
1a007840:	f8c4 e004 	str.w	lr, [r4, #4]
1a007844:	4630      	mov	r0, r6
1a007846:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a00784a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a00784e:	604d      	str	r5, [r1, #4]
1a007850:	50e2      	str	r2, [r4, r3]
1a007852:	f000 f9af 	bl	1a007bb4 <__malloc_unlock>
1a007856:	3408      	adds	r4, #8
1a007858:	e6cb      	b.n	1a0075f2 <_malloc_r+0x18e>
1a00785a:	099a      	lsrs	r2, r3, #6
1a00785c:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a007860:	00c9      	lsls	r1, r1, #3
1a007862:	3238      	adds	r2, #56	; 0x38
1a007864:	e79c      	b.n	1a0077a0 <_malloc_r+0x33c>
1a007866:	42bc      	cmp	r4, r7
1a007868:	d05f      	beq.n	1a00792a <_malloc_r+0x4c6>
1a00786a:	68bc      	ldr	r4, [r7, #8]
1a00786c:	6861      	ldr	r1, [r4, #4]
1a00786e:	f021 0b03 	bic.w	fp, r1, #3
1a007872:	45ab      	cmp	fp, r5
1a007874:	ebab 0305 	sub.w	r3, fp, r5
1a007878:	d302      	bcc.n	1a007880 <_malloc_r+0x41c>
1a00787a:	2b0f      	cmp	r3, #15
1a00787c:	f73f af59 	bgt.w	1a007732 <_malloc_r+0x2ce>
1a007880:	4630      	mov	r0, r6
1a007882:	f000 f997 	bl	1a007bb4 <__malloc_unlock>
1a007886:	2400      	movs	r4, #0
1a007888:	e6b3      	b.n	1a0075f2 <_malloc_r+0x18e>
1a00788a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a00788e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a007892:	00c3      	lsls	r3, r0, #3
1a007894:	e62b      	b.n	1a0074ee <_malloc_r+0x8a>
1a007896:	f859 3908 	ldr.w	r3, [r9], #-8
1a00789a:	454b      	cmp	r3, r9
1a00789c:	f040 8096 	bne.w	1a0079cc <_malloc_r+0x568>
1a0078a0:	f010 0f03 	tst.w	r0, #3
1a0078a4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0078a8:	d1f5      	bne.n	1a007896 <_malloc_r+0x432>
1a0078aa:	687b      	ldr	r3, [r7, #4]
1a0078ac:	ea23 0304 	bic.w	r3, r3, r4
1a0078b0:	607b      	str	r3, [r7, #4]
1a0078b2:	0064      	lsls	r4, r4, #1
1a0078b4:	429c      	cmp	r4, r3
1a0078b6:	f63f aeb7 	bhi.w	1a007628 <_malloc_r+0x1c4>
1a0078ba:	b91c      	cbnz	r4, 1a0078c4 <_malloc_r+0x460>
1a0078bc:	e6b4      	b.n	1a007628 <_malloc_r+0x1c4>
1a0078be:	0064      	lsls	r4, r4, #1
1a0078c0:	f108 0804 	add.w	r8, r8, #4
1a0078c4:	421c      	tst	r4, r3
1a0078c6:	d0fa      	beq.n	1a0078be <_malloc_r+0x45a>
1a0078c8:	4640      	mov	r0, r8
1a0078ca:	e65f      	b.n	1a00758c <_malloc_r+0x128>
1a0078cc:	f103 0b10 	add.w	fp, r3, #16
1a0078d0:	e6c7      	b.n	1a007662 <_malloc_r+0x1fe>
1a0078d2:	687b      	ldr	r3, [r7, #4]
1a0078d4:	1092      	asrs	r2, r2, #2
1a0078d6:	f04f 0801 	mov.w	r8, #1
1a0078da:	fa08 f202 	lsl.w	r2, r8, r2
1a0078de:	4313      	orrs	r3, r2
1a0078e0:	607b      	str	r3, [r7, #4]
1a0078e2:	e770      	b.n	1a0077c6 <_malloc_r+0x362>
1a0078e4:	eb02 000b 	add.w	r0, r2, fp
1a0078e8:	4240      	negs	r0, r0
1a0078ea:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a0078ee:	4649      	mov	r1, r9
1a0078f0:	4630      	mov	r0, r6
1a0078f2:	9200      	str	r2, [sp, #0]
1a0078f4:	f7f9 fa5c 	bl	1a000db0 <_sbrk_r>
1a0078f8:	1c43      	adds	r3, r0, #1
1a0078fa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0078fe:	f47f aee6 	bne.w	1a0076ce <_malloc_r+0x26a>
1a007902:	46d1      	mov	r9, sl
1a007904:	e6e6      	b.n	1a0076d4 <_malloc_r+0x270>
1a007906:	2a54      	cmp	r2, #84	; 0x54
1a007908:	d825      	bhi.n	1a007956 <_malloc_r+0x4f2>
1a00790a:	0b1a      	lsrs	r2, r3, #12
1a00790c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a007910:	00c9      	lsls	r1, r1, #3
1a007912:	326e      	adds	r2, #110	; 0x6e
1a007914:	e744      	b.n	1a0077a0 <_malloc_r+0x33c>
1a007916:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a00791a:	d825      	bhi.n	1a007968 <_malloc_r+0x504>
1a00791c:	0beb      	lsrs	r3, r5, #15
1a00791e:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a007922:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a007926:	00c3      	lsls	r3, r0, #3
1a007928:	e5e1      	b.n	1a0074ee <_malloc_r+0x8a>
1a00792a:	4b29      	ldr	r3, [pc, #164]	; (1a0079d0 <_malloc_r+0x56c>)
1a00792c:	6819      	ldr	r1, [r3, #0]
1a00792e:	4459      	add	r1, fp
1a007930:	6019      	str	r1, [r3, #0]
1a007932:	e6a8      	b.n	1a007686 <_malloc_r+0x222>
1a007934:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a007938:	f1bc 0f00 	cmp.w	ip, #0
1a00793c:	f47f aea3 	bne.w	1a007686 <_malloc_r+0x222>
1a007940:	44c3      	add	fp, r8
1a007942:	68bc      	ldr	r4, [r7, #8]
1a007944:	f04b 0101 	orr.w	r1, fp, #1
1a007948:	6061      	str	r1, [r4, #4]
1a00794a:	e6e7      	b.n	1a00771c <_malloc_r+0x2b8>
1a00794c:	4614      	mov	r4, r2
1a00794e:	e6e5      	b.n	1a00771c <_malloc_r+0x2b8>
1a007950:	2301      	movs	r3, #1
1a007952:	6053      	str	r3, [r2, #4]
1a007954:	e794      	b.n	1a007880 <_malloc_r+0x41c>
1a007956:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00795a:	d823      	bhi.n	1a0079a4 <_malloc_r+0x540>
1a00795c:	0bda      	lsrs	r2, r3, #15
1a00795e:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a007962:	00c9      	lsls	r1, r1, #3
1a007964:	3277      	adds	r2, #119	; 0x77
1a007966:	e71b      	b.n	1a0077a0 <_malloc_r+0x33c>
1a007968:	f240 5254 	movw	r2, #1364	; 0x554
1a00796c:	4293      	cmp	r3, r2
1a00796e:	d823      	bhi.n	1a0079b8 <_malloc_r+0x554>
1a007970:	0cab      	lsrs	r3, r5, #18
1a007972:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a007976:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a00797a:	00c3      	lsls	r3, r0, #3
1a00797c:	e5b7      	b.n	1a0074ee <_malloc_r+0x8a>
1a00797e:	f1aa 0a08 	sub.w	sl, sl, #8
1a007982:	44d3      	add	fp, sl
1a007984:	ebab 0b02 	sub.w	fp, fp, r2
1a007988:	f04f 0900 	mov.w	r9, #0
1a00798c:	e6a2      	b.n	1a0076d4 <_malloc_r+0x270>
1a00798e:	f104 0108 	add.w	r1, r4, #8
1a007992:	4630      	mov	r0, r6
1a007994:	9300      	str	r3, [sp, #0]
1a007996:	f7ff fc19 	bl	1a0071cc <_free_r>
1a00799a:	68bc      	ldr	r4, [r7, #8]
1a00799c:	9b00      	ldr	r3, [sp, #0]
1a00799e:	6861      	ldr	r1, [r4, #4]
1a0079a0:	6818      	ldr	r0, [r3, #0]
1a0079a2:	e6bb      	b.n	1a00771c <_malloc_r+0x2b8>
1a0079a4:	f240 5154 	movw	r1, #1364	; 0x554
1a0079a8:	428a      	cmp	r2, r1
1a0079aa:	d80b      	bhi.n	1a0079c4 <_malloc_r+0x560>
1a0079ac:	0c9a      	lsrs	r2, r3, #18
1a0079ae:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a0079b2:	00c9      	lsls	r1, r1, #3
1a0079b4:	327c      	adds	r2, #124	; 0x7c
1a0079b6:	e6f3      	b.n	1a0077a0 <_malloc_r+0x33c>
1a0079b8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a0079bc:	207f      	movs	r0, #127	; 0x7f
1a0079be:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a0079c2:	e594      	b.n	1a0074ee <_malloc_r+0x8a>
1a0079c4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a0079c8:	227e      	movs	r2, #126	; 0x7e
1a0079ca:	e6e9      	b.n	1a0077a0 <_malloc_r+0x33c>
1a0079cc:	687b      	ldr	r3, [r7, #4]
1a0079ce:	e770      	b.n	1a0078b2 <_malloc_r+0x44e>
1a0079d0:	10003280 	.word	0x10003280

1a0079d4 <memcpy>:
1a0079d4:	4684      	mov	ip, r0
1a0079d6:	ea41 0300 	orr.w	r3, r1, r0
1a0079da:	f013 0303 	ands.w	r3, r3, #3
1a0079de:	d16d      	bne.n	1a007abc <memcpy+0xe8>
1a0079e0:	3a40      	subs	r2, #64	; 0x40
1a0079e2:	d341      	bcc.n	1a007a68 <memcpy+0x94>
1a0079e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0079e8:	f840 3b04 	str.w	r3, [r0], #4
1a0079ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0079f0:	f840 3b04 	str.w	r3, [r0], #4
1a0079f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0079f8:	f840 3b04 	str.w	r3, [r0], #4
1a0079fc:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a00:	f840 3b04 	str.w	r3, [r0], #4
1a007a04:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a08:	f840 3b04 	str.w	r3, [r0], #4
1a007a0c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a10:	f840 3b04 	str.w	r3, [r0], #4
1a007a14:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a18:	f840 3b04 	str.w	r3, [r0], #4
1a007a1c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a20:	f840 3b04 	str.w	r3, [r0], #4
1a007a24:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a28:	f840 3b04 	str.w	r3, [r0], #4
1a007a2c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a30:	f840 3b04 	str.w	r3, [r0], #4
1a007a34:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a38:	f840 3b04 	str.w	r3, [r0], #4
1a007a3c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a40:	f840 3b04 	str.w	r3, [r0], #4
1a007a44:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a48:	f840 3b04 	str.w	r3, [r0], #4
1a007a4c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a50:	f840 3b04 	str.w	r3, [r0], #4
1a007a54:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a58:	f840 3b04 	str.w	r3, [r0], #4
1a007a5c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a60:	f840 3b04 	str.w	r3, [r0], #4
1a007a64:	3a40      	subs	r2, #64	; 0x40
1a007a66:	d2bd      	bcs.n	1a0079e4 <memcpy+0x10>
1a007a68:	3230      	adds	r2, #48	; 0x30
1a007a6a:	d311      	bcc.n	1a007a90 <memcpy+0xbc>
1a007a6c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a70:	f840 3b04 	str.w	r3, [r0], #4
1a007a74:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a78:	f840 3b04 	str.w	r3, [r0], #4
1a007a7c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a80:	f840 3b04 	str.w	r3, [r0], #4
1a007a84:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a88:	f840 3b04 	str.w	r3, [r0], #4
1a007a8c:	3a10      	subs	r2, #16
1a007a8e:	d2ed      	bcs.n	1a007a6c <memcpy+0x98>
1a007a90:	320c      	adds	r2, #12
1a007a92:	d305      	bcc.n	1a007aa0 <memcpy+0xcc>
1a007a94:	f851 3b04 	ldr.w	r3, [r1], #4
1a007a98:	f840 3b04 	str.w	r3, [r0], #4
1a007a9c:	3a04      	subs	r2, #4
1a007a9e:	d2f9      	bcs.n	1a007a94 <memcpy+0xc0>
1a007aa0:	3204      	adds	r2, #4
1a007aa2:	d008      	beq.n	1a007ab6 <memcpy+0xe2>
1a007aa4:	07d2      	lsls	r2, r2, #31
1a007aa6:	bf1c      	itt	ne
1a007aa8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a007aac:	f800 3b01 	strbne.w	r3, [r0], #1
1a007ab0:	d301      	bcc.n	1a007ab6 <memcpy+0xe2>
1a007ab2:	880b      	ldrh	r3, [r1, #0]
1a007ab4:	8003      	strh	r3, [r0, #0]
1a007ab6:	4660      	mov	r0, ip
1a007ab8:	4770      	bx	lr
1a007aba:	bf00      	nop
1a007abc:	2a08      	cmp	r2, #8
1a007abe:	d313      	bcc.n	1a007ae8 <memcpy+0x114>
1a007ac0:	078b      	lsls	r3, r1, #30
1a007ac2:	d08d      	beq.n	1a0079e0 <memcpy+0xc>
1a007ac4:	f010 0303 	ands.w	r3, r0, #3
1a007ac8:	d08a      	beq.n	1a0079e0 <memcpy+0xc>
1a007aca:	f1c3 0304 	rsb	r3, r3, #4
1a007ace:	1ad2      	subs	r2, r2, r3
1a007ad0:	07db      	lsls	r3, r3, #31
1a007ad2:	bf1c      	itt	ne
1a007ad4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a007ad8:	f800 3b01 	strbne.w	r3, [r0], #1
1a007adc:	d380      	bcc.n	1a0079e0 <memcpy+0xc>
1a007ade:	f831 3b02 	ldrh.w	r3, [r1], #2
1a007ae2:	f820 3b02 	strh.w	r3, [r0], #2
1a007ae6:	e77b      	b.n	1a0079e0 <memcpy+0xc>
1a007ae8:	3a04      	subs	r2, #4
1a007aea:	d3d9      	bcc.n	1a007aa0 <memcpy+0xcc>
1a007aec:	3a01      	subs	r2, #1
1a007aee:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007af2:	f800 3b01 	strb.w	r3, [r0], #1
1a007af6:	d2f9      	bcs.n	1a007aec <memcpy+0x118>
1a007af8:	780b      	ldrb	r3, [r1, #0]
1a007afa:	7003      	strb	r3, [r0, #0]
1a007afc:	784b      	ldrb	r3, [r1, #1]
1a007afe:	7043      	strb	r3, [r0, #1]
1a007b00:	788b      	ldrb	r3, [r1, #2]
1a007b02:	7083      	strb	r3, [r0, #2]
1a007b04:	4660      	mov	r0, ip
1a007b06:	4770      	bx	lr

1a007b08 <memset>:
1a007b08:	b4f0      	push	{r4, r5, r6, r7}
1a007b0a:	0786      	lsls	r6, r0, #30
1a007b0c:	d046      	beq.n	1a007b9c <memset+0x94>
1a007b0e:	1e54      	subs	r4, r2, #1
1a007b10:	2a00      	cmp	r2, #0
1a007b12:	d03c      	beq.n	1a007b8e <memset+0x86>
1a007b14:	b2ca      	uxtb	r2, r1
1a007b16:	4603      	mov	r3, r0
1a007b18:	e002      	b.n	1a007b20 <memset+0x18>
1a007b1a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a007b1e:	d336      	bcc.n	1a007b8e <memset+0x86>
1a007b20:	f803 2b01 	strb.w	r2, [r3], #1
1a007b24:	079d      	lsls	r5, r3, #30
1a007b26:	d1f8      	bne.n	1a007b1a <memset+0x12>
1a007b28:	2c03      	cmp	r4, #3
1a007b2a:	d929      	bls.n	1a007b80 <memset+0x78>
1a007b2c:	b2cd      	uxtb	r5, r1
1a007b2e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a007b32:	2c0f      	cmp	r4, #15
1a007b34:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a007b38:	d933      	bls.n	1a007ba2 <memset+0x9a>
1a007b3a:	f1a4 0610 	sub.w	r6, r4, #16
1a007b3e:	0936      	lsrs	r6, r6, #4
1a007b40:	f103 0720 	add.w	r7, r3, #32
1a007b44:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a007b48:	f103 0210 	add.w	r2, r3, #16
1a007b4c:	e942 5504 	strd	r5, r5, [r2, #-16]
1a007b50:	e942 5502 	strd	r5, r5, [r2, #-8]
1a007b54:	3210      	adds	r2, #16
1a007b56:	42ba      	cmp	r2, r7
1a007b58:	d1f8      	bne.n	1a007b4c <memset+0x44>
1a007b5a:	1c72      	adds	r2, r6, #1
1a007b5c:	f014 0f0c 	tst.w	r4, #12
1a007b60:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a007b64:	f004 060f 	and.w	r6, r4, #15
1a007b68:	d013      	beq.n	1a007b92 <memset+0x8a>
1a007b6a:	1f33      	subs	r3, r6, #4
1a007b6c:	f023 0303 	bic.w	r3, r3, #3
1a007b70:	3304      	adds	r3, #4
1a007b72:	4413      	add	r3, r2
1a007b74:	f842 5b04 	str.w	r5, [r2], #4
1a007b78:	4293      	cmp	r3, r2
1a007b7a:	d1fb      	bne.n	1a007b74 <memset+0x6c>
1a007b7c:	f006 0403 	and.w	r4, r6, #3
1a007b80:	b12c      	cbz	r4, 1a007b8e <memset+0x86>
1a007b82:	b2c9      	uxtb	r1, r1
1a007b84:	441c      	add	r4, r3
1a007b86:	f803 1b01 	strb.w	r1, [r3], #1
1a007b8a:	429c      	cmp	r4, r3
1a007b8c:	d1fb      	bne.n	1a007b86 <memset+0x7e>
1a007b8e:	bcf0      	pop	{r4, r5, r6, r7}
1a007b90:	4770      	bx	lr
1a007b92:	4634      	mov	r4, r6
1a007b94:	4613      	mov	r3, r2
1a007b96:	2c00      	cmp	r4, #0
1a007b98:	d1f3      	bne.n	1a007b82 <memset+0x7a>
1a007b9a:	e7f8      	b.n	1a007b8e <memset+0x86>
1a007b9c:	4614      	mov	r4, r2
1a007b9e:	4603      	mov	r3, r0
1a007ba0:	e7c2      	b.n	1a007b28 <memset+0x20>
1a007ba2:	461a      	mov	r2, r3
1a007ba4:	4626      	mov	r6, r4
1a007ba6:	e7e0      	b.n	1a007b6a <memset+0x62>

1a007ba8 <__malloc_lock>:
1a007ba8:	4801      	ldr	r0, [pc, #4]	; (1a007bb0 <__malloc_lock+0x8>)
1a007baa:	f7ff bc57 	b.w	1a00745c <__retarget_lock_acquire_recursive>
1a007bae:	bf00      	nop
1a007bb0:	10003d50 	.word	0x10003d50

1a007bb4 <__malloc_unlock>:
1a007bb4:	4801      	ldr	r0, [pc, #4]	; (1a007bbc <__malloc_unlock+0x8>)
1a007bb6:	f7ff bc53 	b.w	1a007460 <__retarget_lock_release_recursive>
1a007bba:	bf00      	nop
1a007bbc:	10003d50 	.word	0x10003d50

1a007bc0 <printf>:
1a007bc0:	b40f      	push	{r0, r1, r2, r3}
1a007bc2:	b500      	push	{lr}
1a007bc4:	4907      	ldr	r1, [pc, #28]	; (1a007be4 <printf+0x24>)
1a007bc6:	b083      	sub	sp, #12
1a007bc8:	ab04      	add	r3, sp, #16
1a007bca:	6808      	ldr	r0, [r1, #0]
1a007bcc:	f853 2b04 	ldr.w	r2, [r3], #4
1a007bd0:	6881      	ldr	r1, [r0, #8]
1a007bd2:	9301      	str	r3, [sp, #4]
1a007bd4:	f001 fe64 	bl	1a0098a0 <_vfprintf_r>
1a007bd8:	b003      	add	sp, #12
1a007bda:	f85d eb04 	ldr.w	lr, [sp], #4
1a007bde:	b004      	add	sp, #16
1a007be0:	4770      	bx	lr
1a007be2:	bf00      	nop
1a007be4:	10000094 	.word	0x10000094

1a007be8 <_puts_r>:
1a007be8:	b570      	push	{r4, r5, r6, lr}
1a007bea:	4605      	mov	r5, r0
1a007bec:	b088      	sub	sp, #32
1a007bee:	4608      	mov	r0, r1
1a007bf0:	460c      	mov	r4, r1
1a007bf2:	f000 f8c5 	bl	1a007d80 <strlen>
1a007bf6:	4a22      	ldr	r2, [pc, #136]	; (1a007c80 <_puts_r+0x98>)
1a007bf8:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a007bfa:	9404      	str	r4, [sp, #16]
1a007bfc:	2601      	movs	r6, #1
1a007bfe:	1c44      	adds	r4, r0, #1
1a007c00:	a904      	add	r1, sp, #16
1a007c02:	9206      	str	r2, [sp, #24]
1a007c04:	2202      	movs	r2, #2
1a007c06:	9403      	str	r4, [sp, #12]
1a007c08:	9005      	str	r0, [sp, #20]
1a007c0a:	68ac      	ldr	r4, [r5, #8]
1a007c0c:	9607      	str	r6, [sp, #28]
1a007c0e:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a007c12:	b31b      	cbz	r3, 1a007c5c <_puts_r+0x74>
1a007c14:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a007c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007c1a:	07ce      	lsls	r6, r1, #31
1a007c1c:	b29a      	uxth	r2, r3
1a007c1e:	d401      	bmi.n	1a007c24 <_puts_r+0x3c>
1a007c20:	0590      	lsls	r0, r2, #22
1a007c22:	d525      	bpl.n	1a007c70 <_puts_r+0x88>
1a007c24:	0491      	lsls	r1, r2, #18
1a007c26:	d406      	bmi.n	1a007c36 <_puts_r+0x4e>
1a007c28:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007c2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a007c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a007c32:	81a3      	strh	r3, [r4, #12]
1a007c34:	6662      	str	r2, [r4, #100]	; 0x64
1a007c36:	4628      	mov	r0, r5
1a007c38:	aa01      	add	r2, sp, #4
1a007c3a:	4621      	mov	r1, r4
1a007c3c:	f004 fc42 	bl	1a00c4c4 <__sfvwrite_r>
1a007c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007c42:	2800      	cmp	r0, #0
1a007c44:	bf14      	ite	ne
1a007c46:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a007c4a:	250a      	moveq	r5, #10
1a007c4c:	07da      	lsls	r2, r3, #31
1a007c4e:	d402      	bmi.n	1a007c56 <_puts_r+0x6e>
1a007c50:	89a3      	ldrh	r3, [r4, #12]
1a007c52:	059b      	lsls	r3, r3, #22
1a007c54:	d506      	bpl.n	1a007c64 <_puts_r+0x7c>
1a007c56:	4628      	mov	r0, r5
1a007c58:	b008      	add	sp, #32
1a007c5a:	bd70      	pop	{r4, r5, r6, pc}
1a007c5c:	4628      	mov	r0, r5
1a007c5e:	f7ff fa2f 	bl	1a0070c0 <__sinit>
1a007c62:	e7d7      	b.n	1a007c14 <_puts_r+0x2c>
1a007c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007c66:	f7ff fbfb 	bl	1a007460 <__retarget_lock_release_recursive>
1a007c6a:	4628      	mov	r0, r5
1a007c6c:	b008      	add	sp, #32
1a007c6e:	bd70      	pop	{r4, r5, r6, pc}
1a007c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007c72:	f7ff fbf3 	bl	1a00745c <__retarget_lock_acquire_recursive>
1a007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007c7a:	b29a      	uxth	r2, r3
1a007c7c:	e7d2      	b.n	1a007c24 <_puts_r+0x3c>
1a007c7e:	bf00      	nop
1a007c80:	1a00d8d0 	.word	0x1a00d8d0

1a007c84 <puts>:
1a007c84:	4b02      	ldr	r3, [pc, #8]	; (1a007c90 <puts+0xc>)
1a007c86:	4601      	mov	r1, r0
1a007c88:	6818      	ldr	r0, [r3, #0]
1a007c8a:	f7ff bfad 	b.w	1a007be8 <_puts_r>
1a007c8e:	bf00      	nop
1a007c90:	10000094 	.word	0x10000094

1a007c94 <sprintf>:
1a007c94:	b40e      	push	{r1, r2, r3}
1a007c96:	b530      	push	{r4, r5, lr}
1a007c98:	b09c      	sub	sp, #112	; 0x70
1a007c9a:	ab1f      	add	r3, sp, #124	; 0x7c
1a007c9c:	4c0c      	ldr	r4, [pc, #48]	; (1a007cd0 <sprintf+0x3c>)
1a007c9e:	4d0d      	ldr	r5, [pc, #52]	; (1a007cd4 <sprintf+0x40>)
1a007ca0:	f853 2b04 	ldr.w	r2, [r3], #4
1a007ca4:	9301      	str	r3, [sp, #4]
1a007ca6:	4601      	mov	r1, r0
1a007ca8:	9102      	str	r1, [sp, #8]
1a007caa:	9106      	str	r1, [sp, #24]
1a007cac:	6820      	ldr	r0, [r4, #0]
1a007cae:	a902      	add	r1, sp, #8
1a007cb0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
1a007cb4:	9407      	str	r4, [sp, #28]
1a007cb6:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a007cba:	f000 f8d1 	bl	1a007e60 <_svfprintf_r>
1a007cbe:	9b02      	ldr	r3, [sp, #8]
1a007cc0:	2200      	movs	r2, #0
1a007cc2:	701a      	strb	r2, [r3, #0]
1a007cc4:	b01c      	add	sp, #112	; 0x70
1a007cc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a007cca:	b003      	add	sp, #12
1a007ccc:	4770      	bx	lr
1a007cce:	bf00      	nop
1a007cd0:	10000094 	.word	0x10000094
1a007cd4:	ffff0208 	.word	0xffff0208

1a007cd8 <__sread>:
1a007cd8:	b510      	push	{r4, lr}
1a007cda:	460c      	mov	r4, r1
1a007cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007ce0:	f7f9 f82a 	bl	1a000d38 <_read_r>
1a007ce4:	2800      	cmp	r0, #0
1a007ce6:	db03      	blt.n	1a007cf0 <__sread+0x18>
1a007ce8:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a007cea:	4403      	add	r3, r0
1a007cec:	6523      	str	r3, [r4, #80]	; 0x50
1a007cee:	bd10      	pop	{r4, pc}
1a007cf0:	89a3      	ldrh	r3, [r4, #12]
1a007cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a007cf6:	81a3      	strh	r3, [r4, #12]
1a007cf8:	bd10      	pop	{r4, pc}
1a007cfa:	bf00      	nop

1a007cfc <__swrite>:
1a007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007d00:	4616      	mov	r6, r2
1a007d02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a007d06:	461f      	mov	r7, r3
1a007d08:	05d3      	lsls	r3, r2, #23
1a007d0a:	460c      	mov	r4, r1
1a007d0c:	4605      	mov	r5, r0
1a007d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007d12:	d409      	bmi.n	1a007d28 <__swrite+0x2c>
1a007d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a007d18:	81a2      	strh	r2, [r4, #12]
1a007d1a:	463b      	mov	r3, r7
1a007d1c:	4632      	mov	r2, r6
1a007d1e:	4628      	mov	r0, r5
1a007d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007d24:	f7f9 b82f 	b.w	1a000d86 <_write_r>
1a007d28:	2200      	movs	r2, #0
1a007d2a:	2302      	movs	r3, #2
1a007d2c:	f7f8 ffff 	bl	1a000d2e <_lseek_r>
1a007d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007d38:	e7ec      	b.n	1a007d14 <__swrite+0x18>
1a007d3a:	bf00      	nop

1a007d3c <__sseek>:
1a007d3c:	b510      	push	{r4, lr}
1a007d3e:	460c      	mov	r4, r1
1a007d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007d44:	f7f8 fff3 	bl	1a000d2e <_lseek_r>
1a007d48:	89a3      	ldrh	r3, [r4, #12]
1a007d4a:	1c42      	adds	r2, r0, #1
1a007d4c:	bf0e      	itee	eq
1a007d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a007d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a007d56:	6520      	strne	r0, [r4, #80]	; 0x50
1a007d58:	81a3      	strh	r3, [r4, #12]
1a007d5a:	bd10      	pop	{r4, pc}

1a007d5c <__sclose>:
1a007d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007d60:	f7f8 bfd2 	b.w	1a000d08 <_close_r>
1a007d64:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a007d68:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a007d6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a007d70:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a007d74:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a007d78:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a007d7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a007d80 <strlen>:
1a007d80:	f890 f000 	pld	[r0]
1a007d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a007d88:	f020 0107 	bic.w	r1, r0, #7
1a007d8c:	f06f 0c00 	mvn.w	ip, #0
1a007d90:	f010 0407 	ands.w	r4, r0, #7
1a007d94:	f891 f020 	pld	[r1, #32]
1a007d98:	f040 8049 	bne.w	1a007e2e <strlen+0xae>
1a007d9c:	f04f 0400 	mov.w	r4, #0
1a007da0:	f06f 0007 	mvn.w	r0, #7
1a007da4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a007da8:	f891 f040 	pld	[r1, #64]	; 0x40
1a007dac:	f100 0008 	add.w	r0, r0, #8
1a007db0:	fa82 f24c 	uadd8	r2, r2, ip
1a007db4:	faa4 f28c 	sel	r2, r4, ip
1a007db8:	fa83 f34c 	uadd8	r3, r3, ip
1a007dbc:	faa2 f38c 	sel	r3, r2, ip
1a007dc0:	bb4b      	cbnz	r3, 1a007e16 <strlen+0x96>
1a007dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a007dc6:	fa82 f24c 	uadd8	r2, r2, ip
1a007dca:	f100 0008 	add.w	r0, r0, #8
1a007dce:	faa4 f28c 	sel	r2, r4, ip
1a007dd2:	fa83 f34c 	uadd8	r3, r3, ip
1a007dd6:	faa2 f38c 	sel	r3, r2, ip
1a007dda:	b9e3      	cbnz	r3, 1a007e16 <strlen+0x96>
1a007ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a007de0:	fa82 f24c 	uadd8	r2, r2, ip
1a007de4:	f100 0008 	add.w	r0, r0, #8
1a007de8:	faa4 f28c 	sel	r2, r4, ip
1a007dec:	fa83 f34c 	uadd8	r3, r3, ip
1a007df0:	faa2 f38c 	sel	r3, r2, ip
1a007df4:	b97b      	cbnz	r3, 1a007e16 <strlen+0x96>
1a007df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a007dfa:	f101 0120 	add.w	r1, r1, #32
1a007dfe:	fa82 f24c 	uadd8	r2, r2, ip
1a007e02:	f100 0008 	add.w	r0, r0, #8
1a007e06:	faa4 f28c 	sel	r2, r4, ip
1a007e0a:	fa83 f34c 	uadd8	r3, r3, ip
1a007e0e:	faa2 f38c 	sel	r3, r2, ip
1a007e12:	2b00      	cmp	r3, #0
1a007e14:	d0c6      	beq.n	1a007da4 <strlen+0x24>
1a007e16:	2a00      	cmp	r2, #0
1a007e18:	bf04      	itt	eq
1a007e1a:	3004      	addeq	r0, #4
1a007e1c:	461a      	moveq	r2, r3
1a007e1e:	ba12      	rev	r2, r2
1a007e20:	fab2 f282 	clz	r2, r2
1a007e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a007e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a007e2c:	4770      	bx	lr
1a007e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a007e32:	f004 0503 	and.w	r5, r4, #3
1a007e36:	f1c4 0000 	rsb	r0, r4, #0
1a007e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a007e3e:	f014 0f04 	tst.w	r4, #4
1a007e42:	f891 f040 	pld	[r1, #64]	; 0x40
1a007e46:	fa0c f505 	lsl.w	r5, ip, r5
1a007e4a:	ea62 0205 	orn	r2, r2, r5
1a007e4e:	bf1c      	itt	ne
1a007e50:	ea63 0305 	ornne	r3, r3, r5
1a007e54:	4662      	movne	r2, ip
1a007e56:	f04f 0400 	mov.w	r4, #0
1a007e5a:	e7a9      	b.n	1a007db0 <strlen+0x30>
1a007e5c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a007e60 <_svfprintf_r>:
1a007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007e64:	b0d5      	sub	sp, #340	; 0x154
1a007e66:	460c      	mov	r4, r1
1a007e68:	9107      	str	r1, [sp, #28]
1a007e6a:	4693      	mov	fp, r2
1a007e6c:	9309      	str	r3, [sp, #36]	; 0x24
1a007e6e:	9006      	str	r0, [sp, #24]
1a007e70:	f004 fcac 	bl	1a00c7cc <_localeconv_r>
1a007e74:	6803      	ldr	r3, [r0, #0]
1a007e76:	9315      	str	r3, [sp, #84]	; 0x54
1a007e78:	4618      	mov	r0, r3
1a007e7a:	f7ff ff81 	bl	1a007d80 <strlen>
1a007e7e:	89a3      	ldrh	r3, [r4, #12]
1a007e80:	9013      	str	r0, [sp, #76]	; 0x4c
1a007e82:	061d      	lsls	r5, r3, #24
1a007e84:	d503      	bpl.n	1a007e8e <_svfprintf_r+0x2e>
1a007e86:	6923      	ldr	r3, [r4, #16]
1a007e88:	2b00      	cmp	r3, #0
1a007e8a:	f001 8018 	beq.w	1a008ebe <_svfprintf_r+0x105e>
1a007e8e:	2300      	movs	r3, #0
1a007e90:	465e      	mov	r6, fp
1a007e92:	ed9f 7b91 	vldr	d7, [pc, #580]	; 1a0080d8 <_svfprintf_r+0x278>
1a007e96:	9312      	str	r3, [sp, #72]	; 0x48
1a007e98:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a007e9c:	9314      	str	r3, [sp, #80]	; 0x50
1a007e9e:	9316      	str	r3, [sp, #88]	; 0x58
1a007ea0:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a007ea4:	9317      	str	r3, [sp, #92]	; 0x5c
1a007ea6:	9304      	str	r3, [sp, #16]
1a007ea8:	ab2b      	add	r3, sp, #172	; 0xac
1a007eaa:	9328      	str	r3, [sp, #160]	; 0xa0
1a007eac:	4699      	mov	r9, r3
1a007eae:	7833      	ldrb	r3, [r6, #0]
1a007eb0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a007eb4:	2b00      	cmp	r3, #0
1a007eb6:	f000 8177 	beq.w	1a0081a8 <_svfprintf_r+0x348>
1a007eba:	2b25      	cmp	r3, #37	; 0x25
1a007ebc:	f000 86c4 	beq.w	1a008c48 <_svfprintf_r+0xde8>
1a007ec0:	4635      	mov	r5, r6
1a007ec2:	e003      	b.n	1a007ecc <_svfprintf_r+0x6c>
1a007ec4:	2b25      	cmp	r3, #37	; 0x25
1a007ec6:	f000 8096 	beq.w	1a007ff6 <_svfprintf_r+0x196>
1a007eca:	4625      	mov	r5, r4
1a007ecc:	786b      	ldrb	r3, [r5, #1]
1a007ece:	1c6c      	adds	r4, r5, #1
1a007ed0:	2b00      	cmp	r3, #0
1a007ed2:	d1f7      	bne.n	1a007ec4 <_svfprintf_r+0x64>
1a007ed4:	1ba7      	subs	r7, r4, r6
1a007ed6:	f000 8167 	beq.w	1a0081a8 <_svfprintf_r+0x348>
1a007eda:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a007ede:	3301      	adds	r3, #1
1a007ee0:	443a      	add	r2, r7
1a007ee2:	2b07      	cmp	r3, #7
1a007ee4:	f8c9 6000 	str.w	r6, [r9]
1a007ee8:	f8c9 7004 	str.w	r7, [r9, #4]
1a007eec:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a007ef0:	f300 8084 	bgt.w	1a007ffc <_svfprintf_r+0x19c>
1a007ef4:	f109 0908 	add.w	r9, r9, #8
1a007ef8:	9a04      	ldr	r2, [sp, #16]
1a007efa:	786b      	ldrb	r3, [r5, #1]
1a007efc:	443a      	add	r2, r7
1a007efe:	9204      	str	r2, [sp, #16]
1a007f00:	2b00      	cmp	r3, #0
1a007f02:	f000 8151 	beq.w	1a0081a8 <_svfprintf_r+0x348>
1a007f06:	2300      	movs	r3, #0
1a007f08:	f894 8001 	ldrb.w	r8, [r4, #1]
1a007f0c:	9305      	str	r3, [sp, #20]
1a007f0e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a007f12:	9302      	str	r3, [sp, #8]
1a007f14:	f104 0b01 	add.w	fp, r4, #1
1a007f18:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
1a007f1c:	272b      	movs	r7, #43	; 0x2b
1a007f1e:	2120      	movs	r1, #32
1a007f20:	f10b 0b01 	add.w	fp, fp, #1
1a007f24:	f1a8 0320 	sub.w	r3, r8, #32
1a007f28:	2b5a      	cmp	r3, #90	; 0x5a
1a007f2a:	f200 836c 	bhi.w	1a008606 <_svfprintf_r+0x7a6>
1a007f2e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a007f32:	034b      	.short	0x034b
1a007f34:	036a036a 	.word	0x036a036a
1a007f38:	036a0344 	.word	0x036a0344
1a007f3c:	036a036a 	.word	0x036a036a
1a007f40:	036a0321 	.word	0x036a0321
1a007f44:	0215036a 	.word	0x0215036a
1a007f48:	036a0210 	.word	0x036a0210
1a007f4c:	01f600cb 	.word	0x01f600cb
1a007f50:	01ef036a 	.word	0x01ef036a
1a007f54:	00a800a8 	.word	0x00a800a8
1a007f58:	00a800a8 	.word	0x00a800a8
1a007f5c:	00a800a8 	.word	0x00a800a8
1a007f60:	00a800a8 	.word	0x00a800a8
1a007f64:	036a00a8 	.word	0x036a00a8
1a007f68:	036a036a 	.word	0x036a036a
1a007f6c:	036a036a 	.word	0x036a036a
1a007f70:	036a036a 	.word	0x036a036a
1a007f74:	036a02df 	.word	0x036a02df
1a007f78:	01960223 	.word	0x01960223
1a007f7c:	02df02df 	.word	0x02df02df
1a007f80:	036a02df 	.word	0x036a02df
1a007f84:	036a036a 	.word	0x036a036a
1a007f88:	018f036a 	.word	0x018f036a
1a007f8c:	036a036a 	.word	0x036a036a
1a007f90:	036a017e 	.word	0x036a017e
1a007f94:	036a036a 	.word	0x036a036a
1a007f98:	036a0152 	.word	0x036a0152
1a007f9c:	036a01ca 	.word	0x036a01ca
1a007fa0:	00b7036a 	.word	0x00b7036a
1a007fa4:	036a036a 	.word	0x036a036a
1a007fa8:	036a036a 	.word	0x036a036a
1a007fac:	036a036a 	.word	0x036a036a
1a007fb0:	036a036a 	.word	0x036a036a
1a007fb4:	036a02df 	.word	0x036a02df
1a007fb8:	01d90223 	.word	0x01d90223
1a007fbc:	02df02df 	.word	0x02df02df
1a007fc0:	01bf02df 	.word	0x01bf02df
1a007fc4:	005b01d9 	.word	0x005b01d9
1a007fc8:	0147036a 	.word	0x0147036a
1a007fcc:	011e036a 	.word	0x011e036a
1a007fd0:	00db010c 	.word	0x00db010c
1a007fd4:	036a005b 	.word	0x036a005b
1a007fd8:	005f0152 	.word	0x005f0152
1a007fdc:	036a0355 	.word	0x036a0355
1a007fe0:	0089036a 	.word	0x0089036a
1a007fe4:	005f036a 	.word	0x005f036a
1a007fe8:	9b02      	ldr	r3, [sp, #8]
1a007fea:	f043 0320 	orr.w	r3, r3, #32
1a007fee:	9302      	str	r3, [sp, #8]
1a007ff0:	f89b 8000 	ldrb.w	r8, [fp]
1a007ff4:	e794      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a007ff6:	1ba7      	subs	r7, r4, r6
1a007ff8:	d085      	beq.n	1a007f06 <_svfprintf_r+0xa6>
1a007ffa:	e76e      	b.n	1a007eda <_svfprintf_r+0x7a>
1a007ffc:	aa28      	add	r2, sp, #160	; 0xa0
1a007ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a008002:	f005 fa4d 	bl	1a00d4a0 <__ssprint_r>
1a008006:	b980      	cbnz	r0, 1a00802a <_svfprintf_r+0x1ca>
1a008008:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00800c:	e774      	b.n	1a007ef8 <_svfprintf_r+0x98>
1a00800e:	aa28      	add	r2, sp, #160	; 0xa0
1a008010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a008014:	f005 fa44 	bl	1a00d4a0 <__ssprint_r>
1a008018:	2800      	cmp	r0, #0
1a00801a:	f000 8221 	beq.w	1a008460 <_svfprintf_r+0x600>
1a00801e:	9b08      	ldr	r3, [sp, #32]
1a008020:	b11b      	cbz	r3, 1a00802a <_svfprintf_r+0x1ca>
1a008022:	9908      	ldr	r1, [sp, #32]
1a008024:	9806      	ldr	r0, [sp, #24]
1a008026:	f7ff f8d1 	bl	1a0071cc <_free_r>
1a00802a:	9b07      	ldr	r3, [sp, #28]
1a00802c:	899b      	ldrh	r3, [r3, #12]
1a00802e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a008032:	9b04      	ldr	r3, [sp, #16]
1a008034:	bf18      	it	ne
1a008036:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
1a00803a:	9304      	str	r3, [sp, #16]
1a00803c:	9804      	ldr	r0, [sp, #16]
1a00803e:	b055      	add	sp, #340	; 0x154
1a008040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008044:	4b26      	ldr	r3, [pc, #152]	; (1a0080e0 <_svfprintf_r+0x280>)
1a008046:	9314      	str	r3, [sp, #80]	; 0x50
1a008048:	9b02      	ldr	r3, [sp, #8]
1a00804a:	0699      	lsls	r1, r3, #26
1a00804c:	d52d      	bpl.n	1a0080aa <_svfprintf_r+0x24a>
1a00804e:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a008050:	3407      	adds	r4, #7
1a008052:	f024 0307 	bic.w	r3, r4, #7
1a008056:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00805a:	9309      	str	r3, [sp, #36]	; 0x24
1a00805c:	9a02      	ldr	r2, [sp, #8]
1a00805e:	07d6      	lsls	r6, r2, #31
1a008060:	d50a      	bpl.n	1a008078 <_svfprintf_r+0x218>
1a008062:	ea54 0305 	orrs.w	r3, r4, r5
1a008066:	d007      	beq.n	1a008078 <_svfprintf_r+0x218>
1a008068:	2330      	movs	r3, #48	; 0x30
1a00806a:	f042 0202 	orr.w	r2, r2, #2
1a00806e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a008072:	9202      	str	r2, [sp, #8]
1a008074:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a008078:	9b02      	ldr	r3, [sp, #8]
1a00807a:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
1a00807e:	2302      	movs	r3, #2
1a008080:	e044      	b.n	1a00810c <_svfprintf_r+0x2ac>
1a008082:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a008086:	2200      	movs	r2, #0
1a008088:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a00808c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a008090:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a008094:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a008098:	2b09      	cmp	r3, #9
1a00809a:	d9f5      	bls.n	1a008088 <_svfprintf_r+0x228>
1a00809c:	9205      	str	r2, [sp, #20]
1a00809e:	e741      	b.n	1a007f24 <_svfprintf_r+0xc4>
1a0080a0:	4b10      	ldr	r3, [pc, #64]	; (1a0080e4 <_svfprintf_r+0x284>)
1a0080a2:	9314      	str	r3, [sp, #80]	; 0x50
1a0080a4:	9b02      	ldr	r3, [sp, #8]
1a0080a6:	0699      	lsls	r1, r3, #26
1a0080a8:	d4d1      	bmi.n	1a00804e <_svfprintf_r+0x1ee>
1a0080aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0080ac:	f853 4b04 	ldr.w	r4, [r3], #4
1a0080b0:	9309      	str	r3, [sp, #36]	; 0x24
1a0080b2:	9b02      	ldr	r3, [sp, #8]
1a0080b4:	06da      	lsls	r2, r3, #27
1a0080b6:	f100 85ef 	bmi.w	1a008c98 <_svfprintf_r+0xe38>
1a0080ba:	9b02      	ldr	r3, [sp, #8]
1a0080bc:	065b      	lsls	r3, r3, #25
1a0080be:	f140 85e7 	bpl.w	1a008c90 <_svfprintf_r+0xe30>
1a0080c2:	b2a4      	uxth	r4, r4
1a0080c4:	2500      	movs	r5, #0
1a0080c6:	e7c9      	b.n	1a00805c <_svfprintf_r+0x1fc>
1a0080c8:	f89b 8000 	ldrb.w	r8, [fp]
1a0080cc:	9b02      	ldr	r3, [sp, #8]
1a0080ce:	f043 0304 	orr.w	r3, r3, #4
1a0080d2:	9302      	str	r3, [sp, #8]
1a0080d4:	e724      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a0080d6:	bf00      	nop
	...
1a0080e0:	1a00eae8 	.word	0x1a00eae8
1a0080e4:	1a00eafc 	.word	0x1a00eafc
1a0080e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0080ea:	f647 0230 	movw	r2, #30768	; 0x7830
1a0080ee:	f854 3b04 	ldr.w	r3, [r4], #4
1a0080f2:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0080f6:	9a02      	ldr	r2, [sp, #8]
1a0080f8:	9409      	str	r4, [sp, #36]	; 0x24
1a0080fa:	461c      	mov	r4, r3
1a0080fc:	4b9d      	ldr	r3, [pc, #628]	; (1a008374 <_svfprintf_r+0x514>)
1a0080fe:	9314      	str	r3, [sp, #80]	; 0x50
1a008100:	f042 0702 	orr.w	r7, r2, #2
1a008104:	2500      	movs	r5, #0
1a008106:	2302      	movs	r3, #2
1a008108:	f04f 0878 	mov.w	r8, #120	; 0x78
1a00810c:	2200      	movs	r2, #0
1a00810e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a008112:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a008116:	f000 829b 	beq.w	1a008650 <_svfprintf_r+0x7f0>
1a00811a:	f027 0280 	bic.w	r2, r7, #128	; 0x80
1a00811e:	9202      	str	r2, [sp, #8]
1a008120:	ea54 0205 	orrs.w	r2, r4, r5
1a008124:	f040 8293 	bne.w	1a00864e <_svfprintf_r+0x7ee>
1a008128:	f1ba 0f00 	cmp.w	sl, #0
1a00812c:	f040 8490 	bne.w	1a008a50 <_svfprintf_r+0xbf0>
1a008130:	2b00      	cmp	r3, #0
1a008132:	f040 80b8 	bne.w	1a0082a6 <_svfprintf_r+0x446>
1a008136:	f017 0701 	ands.w	r7, r7, #1
1a00813a:	f000 85a7 	beq.w	1a008c8c <_svfprintf_r+0xe2c>
1a00813e:	2330      	movs	r3, #48	; 0x30
1a008140:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a008144:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a008148:	e274      	b.n	1a008634 <_svfprintf_r+0x7d4>
1a00814a:	9f02      	ldr	r7, [sp, #8]
1a00814c:	06be      	lsls	r6, r7, #26
1a00814e:	d474      	bmi.n	1a00823a <_svfprintf_r+0x3da>
1a008150:	9b02      	ldr	r3, [sp, #8]
1a008152:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a008154:	06dd      	lsls	r5, r3, #27
1a008156:	f852 4b04 	ldr.w	r4, [r2], #4
1a00815a:	f101 8399 	bmi.w	1a009890 <_svfprintf_r+0x1a30>
1a00815e:	9f02      	ldr	r7, [sp, #8]
1a008160:	0678      	lsls	r0, r7, #25
1a008162:	f141 8070 	bpl.w	1a009246 <_svfprintf_r+0x13e6>
1a008166:	9209      	str	r2, [sp, #36]	; 0x24
1a008168:	b2a4      	uxth	r4, r4
1a00816a:	2500      	movs	r5, #0
1a00816c:	e06c      	b.n	1a008248 <_svfprintf_r+0x3e8>
1a00816e:	9902      	ldr	r1, [sp, #8]
1a008170:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a008172:	068c      	lsls	r4, r1, #26
1a008174:	f102 0304 	add.w	r3, r2, #4
1a008178:	f100 8591 	bmi.w	1a008c9e <_svfprintf_r+0xe3e>
1a00817c:	9a02      	ldr	r2, [sp, #8]
1a00817e:	06d0      	lsls	r0, r2, #27
1a008180:	f100 87ee 	bmi.w	1a009160 <_svfprintf_r+0x1300>
1a008184:	9a02      	ldr	r2, [sp, #8]
1a008186:	0651      	lsls	r1, r2, #25
1a008188:	f101 80a6 	bmi.w	1a0092d8 <_svfprintf_r+0x1478>
1a00818c:	9a02      	ldr	r2, [sp, #8]
1a00818e:	0592      	lsls	r2, r2, #22
1a008190:	f140 87e6 	bpl.w	1a009160 <_svfprintf_r+0x1300>
1a008194:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a008196:	9309      	str	r3, [sp, #36]	; 0x24
1a008198:	6812      	ldr	r2, [r2, #0]
1a00819a:	9b04      	ldr	r3, [sp, #16]
1a00819c:	7013      	strb	r3, [r2, #0]
1a00819e:	465e      	mov	r6, fp
1a0081a0:	7833      	ldrb	r3, [r6, #0]
1a0081a2:	2b00      	cmp	r3, #0
1a0081a4:	f47f ae89 	bne.w	1a007eba <_svfprintf_r+0x5a>
1a0081a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a0081aa:	2b00      	cmp	r3, #0
1a0081ac:	f43f af3d 	beq.w	1a00802a <_svfprintf_r+0x1ca>
1a0081b0:	9c07      	ldr	r4, [sp, #28]
1a0081b2:	9806      	ldr	r0, [sp, #24]
1a0081b4:	aa28      	add	r2, sp, #160	; 0xa0
1a0081b6:	4621      	mov	r1, r4
1a0081b8:	f005 f972 	bl	1a00d4a0 <__ssprint_r>
1a0081bc:	89a3      	ldrh	r3, [r4, #12]
1a0081be:	e736      	b.n	1a00802e <_svfprintf_r+0x1ce>
1a0081c0:	f89b 8000 	ldrb.w	r8, [fp]
1a0081c4:	9b02      	ldr	r3, [sp, #8]
1a0081c6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a0081ca:	f000 8663 	beq.w	1a008e94 <_svfprintf_r+0x1034>
1a0081ce:	f043 0310 	orr.w	r3, r3, #16
1a0081d2:	9302      	str	r3, [sp, #8]
1a0081d4:	e6a4      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a0081d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0081d8:	f854 6b04 	ldr.w	r6, [r4], #4
1a0081dc:	2500      	movs	r5, #0
1a0081de:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a0081e2:	2e00      	cmp	r6, #0
1a0081e4:	f000 867a 	beq.w	1a008edc <_svfprintf_r+0x107c>
1a0081e8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0081ec:	f000 87f9 	beq.w	1a0091e2 <_svfprintf_r+0x1382>
1a0081f0:	4652      	mov	r2, sl
1a0081f2:	4629      	mov	r1, r5
1a0081f4:	4630      	mov	r0, r6
1a0081f6:	f004 fb6b 	bl	1a00c8d0 <memchr>
1a0081fa:	9008      	str	r0, [sp, #32]
1a0081fc:	2800      	cmp	r0, #0
1a0081fe:	f001 8150 	beq.w	1a0094a2 <_svfprintf_r+0x1642>
1a008202:	9b08      	ldr	r3, [sp, #32]
1a008204:	46aa      	mov	sl, r5
1a008206:	1b9f      	subs	r7, r3, r6
1a008208:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
1a00820c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a008210:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a008214:	9409      	str	r4, [sp, #36]	; 0x24
1a008216:	9303      	str	r3, [sp, #12]
1a008218:	f8cd a020 	str.w	sl, [sp, #32]
1a00821c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
1a008220:	2a00      	cmp	r2, #0
1a008222:	f000 80bb 	beq.w	1a00839c <_svfprintf_r+0x53c>
1a008226:	9b03      	ldr	r3, [sp, #12]
1a008228:	3301      	adds	r3, #1
1a00822a:	9303      	str	r3, [sp, #12]
1a00822c:	e0b6      	b.n	1a00839c <_svfprintf_r+0x53c>
1a00822e:	9b02      	ldr	r3, [sp, #8]
1a008230:	f043 0710 	orr.w	r7, r3, #16
1a008234:	069b      	lsls	r3, r3, #26
1a008236:	f140 8617 	bpl.w	1a008e68 <_svfprintf_r+0x1008>
1a00823a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00823c:	3407      	adds	r4, #7
1a00823e:	f024 0307 	bic.w	r3, r4, #7
1a008242:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a008246:	9309      	str	r3, [sp, #36]	; 0x24
1a008248:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
1a00824c:	2300      	movs	r3, #0
1a00824e:	e75d      	b.n	1a00810c <_svfprintf_r+0x2ac>
1a008250:	9b02      	ldr	r3, [sp, #8]
1a008252:	f89b 8000 	ldrb.w	r8, [fp]
1a008256:	f043 0308 	orr.w	r3, r3, #8
1a00825a:	9302      	str	r3, [sp, #8]
1a00825c:	e660      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a00825e:	9b02      	ldr	r3, [sp, #8]
1a008260:	069c      	lsls	r4, r3, #26
1a008262:	f043 0710 	orr.w	r7, r3, #16
1a008266:	f140 85f1 	bpl.w	1a008e4c <_svfprintf_r+0xfec>
1a00826a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00826c:	3407      	adds	r4, #7
1a00826e:	f024 0307 	bic.w	r3, r4, #7
1a008272:	4619      	mov	r1, r3
1a008274:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a008278:	9109      	str	r1, [sp, #36]	; 0x24
1a00827a:	4614      	mov	r4, r2
1a00827c:	461d      	mov	r5, r3
1a00827e:	2a00      	cmp	r2, #0
1a008280:	f173 0300 	sbcs.w	r3, r3, #0
1a008284:	f2c0 84d7 	blt.w	1a008c36 <_svfprintf_r+0xdd6>
1a008288:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a00828c:	f000 81c7 	beq.w	1a00861e <_svfprintf_r+0x7be>
1a008290:	f027 0380 	bic.w	r3, r7, #128	; 0x80
1a008294:	9302      	str	r3, [sp, #8]
1a008296:	ea54 0305 	orrs.w	r3, r4, r5
1a00829a:	f040 81bf 	bne.w	1a00861c <_svfprintf_r+0x7bc>
1a00829e:	f1ba 0f00 	cmp.w	sl, #0
1a0082a2:	f041 803f 	bne.w	1a009324 <_svfprintf_r+0x14c4>
1a0082a6:	f04f 0a00 	mov.w	sl, #0
1a0082aa:	4657      	mov	r7, sl
1a0082ac:	ae54      	add	r6, sp, #336	; 0x150
1a0082ae:	e1c1      	b.n	1a008634 <_svfprintf_r+0x7d4>
1a0082b0:	f89b 8000 	ldrb.w	r8, [fp]
1a0082b4:	9b02      	ldr	r3, [sp, #8]
1a0082b6:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a0082ba:	f000 85e2 	beq.w	1a008e82 <_svfprintf_r+0x1022>
1a0082be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0082c2:	9302      	str	r3, [sp, #8]
1a0082c4:	e62c      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a0082c6:	9b02      	ldr	r3, [sp, #8]
1a0082c8:	069a      	lsls	r2, r3, #26
1a0082ca:	f043 0710 	orr.w	r7, r3, #16
1a0082ce:	f140 84f1 	bpl.w	1a008cb4 <_svfprintf_r+0xe54>
1a0082d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0082d4:	3407      	adds	r4, #7
1a0082d6:	f024 0307 	bic.w	r3, r4, #7
1a0082da:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0082de:	9309      	str	r3, [sp, #36]	; 0x24
1a0082e0:	2301      	movs	r3, #1
1a0082e2:	e713      	b.n	1a00810c <_svfprintf_r+0x2ac>
1a0082e4:	9f02      	ldr	r7, [sp, #8]
1a0082e6:	06b8      	lsls	r0, r7, #26
1a0082e8:	d4bf      	bmi.n	1a00826a <_svfprintf_r+0x40a>
1a0082ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0082ec:	1d1a      	adds	r2, r3, #4
1a0082ee:	9b02      	ldr	r3, [sp, #8]
1a0082f0:	06d9      	lsls	r1, r3, #27
1a0082f2:	f101 82d0 	bmi.w	1a009896 <_svfprintf_r+0x1a36>
1a0082f6:	9f02      	ldr	r7, [sp, #8]
1a0082f8:	463b      	mov	r3, r7
1a0082fa:	065b      	lsls	r3, r3, #25
1a0082fc:	f140 8796 	bpl.w	1a00922c <_svfprintf_r+0x13cc>
1a008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008302:	9209      	str	r2, [sp, #36]	; 0x24
1a008304:	f9b3 4000 	ldrsh.w	r4, [r3]
1a008308:	17e5      	asrs	r5, r4, #31
1a00830a:	4622      	mov	r2, r4
1a00830c:	462b      	mov	r3, r5
1a00830e:	e7b6      	b.n	1a00827e <_svfprintf_r+0x41e>
1a008310:	9b02      	ldr	r3, [sp, #8]
1a008312:	f89b 8000 	ldrb.w	r8, [fp]
1a008316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00831a:	9302      	str	r3, [sp, #8]
1a00831c:	e600      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a00831e:	465a      	mov	r2, fp
1a008320:	f812 8b01 	ldrb.w	r8, [r2], #1
1a008324:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a008328:	f001 828e 	beq.w	1a009848 <_svfprintf_r+0x19e8>
1a00832c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a008330:	2b09      	cmp	r3, #9
1a008332:	4693      	mov	fp, r2
1a008334:	f04f 0a00 	mov.w	sl, #0
1a008338:	f63f adf4 	bhi.w	1a007f24 <_svfprintf_r+0xc4>
1a00833c:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a008340:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
1a008344:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
1a008348:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a00834c:	2b09      	cmp	r3, #9
1a00834e:	d9f5      	bls.n	1a00833c <_svfprintf_r+0x4dc>
1a008350:	e5e8      	b.n	1a007f24 <_svfprintf_r+0xc4>
1a008352:	f88d 7083 	strb.w	r7, [sp, #131]	; 0x83
1a008356:	f89b 8000 	ldrb.w	r8, [fp]
1a00835a:	e5e1      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a00835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00835e:	f89b 8000 	ldrb.w	r8, [fp]
1a008362:	f853 2b04 	ldr.w	r2, [r3], #4
1a008366:	9205      	str	r2, [sp, #20]
1a008368:	2a00      	cmp	r2, #0
1a00836a:	f2c0 8585 	blt.w	1a008e78 <_svfprintf_r+0x1018>
1a00836e:	9309      	str	r3, [sp, #36]	; 0x24
1a008370:	e5d6      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a008372:	bf00      	nop
1a008374:	1a00eae8 	.word	0x1a00eae8
1a008378:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00837a:	2300      	movs	r3, #0
1a00837c:	f854 2b04 	ldr.w	r2, [r4], #4
1a008380:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a008384:	2701      	movs	r7, #1
1a008386:	461a      	mov	r2, r3
1a008388:	9703      	str	r7, [sp, #12]
1a00838a:	9409      	str	r4, [sp, #36]	; 0x24
1a00838c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a008390:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a008394:	9208      	str	r2, [sp, #32]
1a008396:	4692      	mov	sl, r2
1a008398:	920c      	str	r2, [sp, #48]	; 0x30
1a00839a:	ae3b      	add	r6, sp, #236	; 0xec
1a00839c:	9b02      	ldr	r3, [sp, #8]
1a00839e:	f013 0302 	ands.w	r3, r3, #2
1a0083a2:	930a      	str	r3, [sp, #40]	; 0x28
1a0083a4:	d002      	beq.n	1a0083ac <_svfprintf_r+0x54c>
1a0083a6:	9b03      	ldr	r3, [sp, #12]
1a0083a8:	3302      	adds	r3, #2
1a0083aa:	9303      	str	r3, [sp, #12]
1a0083ac:	9b02      	ldr	r3, [sp, #8]
1a0083ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0083b0:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a0083b4:	930b      	str	r3, [sp, #44]	; 0x2c
1a0083b6:	d104      	bne.n	1a0083c2 <_svfprintf_r+0x562>
1a0083b8:	9b05      	ldr	r3, [sp, #20]
1a0083ba:	9903      	ldr	r1, [sp, #12]
1a0083bc:	1a5d      	subs	r5, r3, r1
1a0083be:	2d00      	cmp	r5, #0
1a0083c0:	dc5a      	bgt.n	1a008478 <_svfprintf_r+0x618>
1a0083c2:	b172      	cbz	r2, 1a0083e2 <_svfprintf_r+0x582>
1a0083c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0083c6:	3201      	adds	r2, #1
1a0083c8:	3401      	adds	r4, #1
1a0083ca:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a0083ce:	2101      	movs	r1, #1
1a0083d0:	2a07      	cmp	r2, #7
1a0083d2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0083d6:	e9c9 0100 	strd	r0, r1, [r9]
1a0083da:	f300 82e9 	bgt.w	1a0089b0 <_svfprintf_r+0xb50>
1a0083de:	f109 0908 	add.w	r9, r9, #8
1a0083e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0083e4:	b16b      	cbz	r3, 1a008402 <_svfprintf_r+0x5a2>
1a0083e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0083e8:	3301      	adds	r3, #1
1a0083ea:	3402      	adds	r4, #2
1a0083ec:	a921      	add	r1, sp, #132	; 0x84
1a0083ee:	2202      	movs	r2, #2
1a0083f0:	2b07      	cmp	r3, #7
1a0083f2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0083f6:	e9c9 1200 	strd	r1, r2, [r9]
1a0083fa:	f300 82e5 	bgt.w	1a0089c8 <_svfprintf_r+0xb68>
1a0083fe:	f109 0908 	add.w	r9, r9, #8
1a008402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a008404:	2b80      	cmp	r3, #128	; 0x80
1a008406:	f000 81f8 	beq.w	1a0087fa <_svfprintf_r+0x99a>
1a00840a:	ebaa 0507 	sub.w	r5, sl, r7
1a00840e:	2d00      	cmp	r5, #0
1a008410:	f300 8236 	bgt.w	1a008880 <_svfprintf_r+0xa20>
1a008414:	9b02      	ldr	r3, [sp, #8]
1a008416:	05da      	lsls	r2, r3, #23
1a008418:	f100 8185 	bmi.w	1a008726 <_svfprintf_r+0x8c6>
1a00841c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00841e:	f8c9 6000 	str.w	r6, [r9]
1a008422:	3301      	adds	r3, #1
1a008424:	443c      	add	r4, r7
1a008426:	2b07      	cmp	r3, #7
1a008428:	942a      	str	r4, [sp, #168]	; 0xa8
1a00842a:	f8c9 7004 	str.w	r7, [r9, #4]
1a00842e:	9329      	str	r3, [sp, #164]	; 0xa4
1a008430:	f300 82b2 	bgt.w	1a008998 <_svfprintf_r+0xb38>
1a008434:	f109 0908 	add.w	r9, r9, #8
1a008438:	9b02      	ldr	r3, [sp, #8]
1a00843a:	0759      	lsls	r1, r3, #29
1a00843c:	d505      	bpl.n	1a00844a <_svfprintf_r+0x5ea>
1a00843e:	9b05      	ldr	r3, [sp, #20]
1a008440:	9a03      	ldr	r2, [sp, #12]
1a008442:	1a9d      	subs	r5, r3, r2
1a008444:	2d00      	cmp	r5, #0
1a008446:	f300 82cb 	bgt.w	1a0089e0 <_svfprintf_r+0xb80>
1a00844a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
1a00844e:	9903      	ldr	r1, [sp, #12]
1a008450:	428a      	cmp	r2, r1
1a008452:	bfac      	ite	ge
1a008454:	189b      	addge	r3, r3, r2
1a008456:	185b      	addlt	r3, r3, r1
1a008458:	9304      	str	r3, [sp, #16]
1a00845a:	2c00      	cmp	r4, #0
1a00845c:	f47f add7 	bne.w	1a00800e <_svfprintf_r+0x1ae>
1a008460:	2300      	movs	r3, #0
1a008462:	9329      	str	r3, [sp, #164]	; 0xa4
1a008464:	9b08      	ldr	r3, [sp, #32]
1a008466:	b11b      	cbz	r3, 1a008470 <_svfprintf_r+0x610>
1a008468:	9908      	ldr	r1, [sp, #32]
1a00846a:	9806      	ldr	r0, [sp, #24]
1a00846c:	f7fe feae 	bl	1a0071cc <_free_r>
1a008470:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a008474:	465e      	mov	r6, fp
1a008476:	e693      	b.n	1a0081a0 <_svfprintf_r+0x340>
1a008478:	2d10      	cmp	r5, #16
1a00847a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00847c:	dd29      	ble.n	1a0084d2 <_svfprintf_r+0x672>
1a00847e:	4620      	mov	r0, r4
1a008480:	4649      	mov	r1, r9
1a008482:	2310      	movs	r3, #16
1a008484:	46b1      	mov	r9, r6
1a008486:	971e      	str	r7, [sp, #120]	; 0x78
1a008488:	9c06      	ldr	r4, [sp, #24]
1a00848a:	9e07      	ldr	r6, [sp, #28]
1a00848c:	e004      	b.n	1a008498 <_svfprintf_r+0x638>
1a00848e:	3d10      	subs	r5, #16
1a008490:	2d10      	cmp	r5, #16
1a008492:	f101 0108 	add.w	r1, r1, #8
1a008496:	dd18      	ble.n	1a0084ca <_svfprintf_r+0x66a>
1a008498:	3201      	adds	r2, #1
1a00849a:	4fc4      	ldr	r7, [pc, #784]	; (1a0087ac <_svfprintf_r+0x94c>)
1a00849c:	3010      	adds	r0, #16
1a00849e:	2a07      	cmp	r2, #7
1a0084a0:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0084a4:	e9c1 7300 	strd	r7, r3, [r1]
1a0084a8:	ddf1      	ble.n	1a00848e <_svfprintf_r+0x62e>
1a0084aa:	aa28      	add	r2, sp, #160	; 0xa0
1a0084ac:	4631      	mov	r1, r6
1a0084ae:	4620      	mov	r0, r4
1a0084b0:	f004 fff6 	bl	1a00d4a0 <__ssprint_r>
1a0084b4:	2800      	cmp	r0, #0
1a0084b6:	f47f adb2 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0084ba:	3d10      	subs	r5, #16
1a0084bc:	2d10      	cmp	r5, #16
1a0084be:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0084c2:	a92b      	add	r1, sp, #172	; 0xac
1a0084c4:	f04f 0310 	mov.w	r3, #16
1a0084c8:	dce6      	bgt.n	1a008498 <_svfprintf_r+0x638>
1a0084ca:	9f1e      	ldr	r7, [sp, #120]	; 0x78
1a0084cc:	464e      	mov	r6, r9
1a0084ce:	4604      	mov	r4, r0
1a0084d0:	4689      	mov	r9, r1
1a0084d2:	3201      	adds	r2, #1
1a0084d4:	4bb5      	ldr	r3, [pc, #724]	; (1a0087ac <_svfprintf_r+0x94c>)
1a0084d6:	442c      	add	r4, r5
1a0084d8:	2a07      	cmp	r2, #7
1a0084da:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0084de:	e9c9 3500 	strd	r3, r5, [r9]
1a0084e2:	f300 85c9 	bgt.w	1a009078 <_svfprintf_r+0x1218>
1a0084e6:	f109 0908 	add.w	r9, r9, #8
1a0084ea:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0084ee:	e768      	b.n	1a0083c2 <_svfprintf_r+0x562>
1a0084f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0084f2:	3407      	adds	r4, #7
1a0084f4:	f024 0307 	bic.w	r3, r4, #7
1a0084f8:	ecb3 7b02 	vldmia	r3!, {d7}
1a0084fc:	ec55 4b17 	vmov	r4, r5, d7
1a008500:	9309      	str	r3, [sp, #36]	; 0x24
1a008502:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a008506:	931b      	str	r3, [sp, #108]	; 0x6c
1a008508:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a00850c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a008510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a008514:	4ba6      	ldr	r3, [pc, #664]	; (1a0087b0 <_svfprintf_r+0x950>)
1a008516:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00851a:	f7fe faa7 	bl	1a006a6c <__aeabi_dcmpun>
1a00851e:	2800      	cmp	r0, #0
1a008520:	f040 83d1 	bne.w	1a008cc6 <_svfprintf_r+0xe66>
1a008524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a008528:	4ba1      	ldr	r3, [pc, #644]	; (1a0087b0 <_svfprintf_r+0x950>)
1a00852a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00852e:	f7fe fa7f 	bl	1a006a30 <__aeabi_dcmple>
1a008532:	2800      	cmp	r0, #0
1a008534:	f040 83c7 	bne.w	1a008cc6 <_svfprintf_r+0xe66>
1a008538:	2200      	movs	r2, #0
1a00853a:	2300      	movs	r3, #0
1a00853c:	4620      	mov	r0, r4
1a00853e:	4629      	mov	r1, r5
1a008540:	f7fe fa6c 	bl	1a006a1c <__aeabi_dcmplt>
1a008544:	2800      	cmp	r0, #0
1a008546:	f040 86a0 	bne.w	1a00928a <_svfprintf_r+0x142a>
1a00854a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00854e:	4e99      	ldr	r6, [pc, #612]	; (1a0087b4 <_svfprintf_r+0x954>)
1a008550:	4b99      	ldr	r3, [pc, #612]	; (1a0087b8 <_svfprintf_r+0x958>)
1a008552:	9802      	ldr	r0, [sp, #8]
1a008554:	2100      	movs	r1, #0
1a008556:	2703      	movs	r7, #3
1a008558:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a00855c:	9703      	str	r7, [sp, #12]
1a00855e:	9108      	str	r1, [sp, #32]
1a008560:	9002      	str	r0, [sp, #8]
1a008562:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a008566:	bfc8      	it	gt
1a008568:	461e      	movgt	r6, r3
1a00856a:	468a      	mov	sl, r1
1a00856c:	910c      	str	r1, [sp, #48]	; 0x30
1a00856e:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a008572:	e655      	b.n	1a008220 <_svfprintf_r+0x3c0>
1a008574:	9d06      	ldr	r5, [sp, #24]
1a008576:	4628      	mov	r0, r5
1a008578:	f004 f928 	bl	1a00c7cc <_localeconv_r>
1a00857c:	6843      	ldr	r3, [r0, #4]
1a00857e:	9317      	str	r3, [sp, #92]	; 0x5c
1a008580:	4618      	mov	r0, r3
1a008582:	f7ff fbfd 	bl	1a007d80 <strlen>
1a008586:	9019      	str	r0, [sp, #100]	; 0x64
1a008588:	4604      	mov	r4, r0
1a00858a:	4628      	mov	r0, r5
1a00858c:	f004 f91e 	bl	1a00c7cc <_localeconv_r>
1a008590:	6883      	ldr	r3, [r0, #8]
1a008592:	9318      	str	r3, [sp, #96]	; 0x60
1a008594:	2120      	movs	r1, #32
1a008596:	2c00      	cmp	r4, #0
1a008598:	f43f ad2a 	beq.w	1a007ff0 <_svfprintf_r+0x190>
1a00859c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a00859e:	f89b 8000 	ldrb.w	r8, [fp]
1a0085a2:	2b00      	cmp	r3, #0
1a0085a4:	f43f acbc 	beq.w	1a007f20 <_svfprintf_r+0xc0>
1a0085a8:	781b      	ldrb	r3, [r3, #0]
1a0085aa:	2b00      	cmp	r3, #0
1a0085ac:	f43f acb8 	beq.w	1a007f20 <_svfprintf_r+0xc0>
1a0085b0:	9b02      	ldr	r3, [sp, #8]
1a0085b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0085b6:	9302      	str	r3, [sp, #8]
1a0085b8:	e4b2      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a0085ba:	9b02      	ldr	r3, [sp, #8]
1a0085bc:	f89b 8000 	ldrb.w	r8, [fp]
1a0085c0:	f043 0301 	orr.w	r3, r3, #1
1a0085c4:	9302      	str	r3, [sp, #8]
1a0085c6:	e4ab      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a0085c8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a0085cc:	f89b 8000 	ldrb.w	r8, [fp]
1a0085d0:	2b00      	cmp	r3, #0
1a0085d2:	f47f aca5 	bne.w	1a007f20 <_svfprintf_r+0xc0>
1a0085d6:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a0085da:	e4a1      	b.n	1a007f20 <_svfprintf_r+0xc0>
1a0085dc:	9f02      	ldr	r7, [sp, #8]
1a0085de:	463b      	mov	r3, r7
1a0085e0:	069b      	lsls	r3, r3, #26
1a0085e2:	f53f ae76 	bmi.w	1a0082d2 <_svfprintf_r+0x472>
1a0085e6:	9b02      	ldr	r3, [sp, #8]
1a0085e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0085ea:	06de      	lsls	r6, r3, #27
1a0085ec:	f852 4b04 	ldr.w	r4, [r2], #4
1a0085f0:	f101 814b 	bmi.w	1a00988a <_svfprintf_r+0x1a2a>
1a0085f4:	9f02      	ldr	r7, [sp, #8]
1a0085f6:	067d      	lsls	r5, r7, #25
1a0085f8:	f140 862f 	bpl.w	1a00925a <_svfprintf_r+0x13fa>
1a0085fc:	9209      	str	r2, [sp, #36]	; 0x24
1a0085fe:	b2a4      	uxth	r4, r4
1a008600:	2500      	movs	r5, #0
1a008602:	2301      	movs	r3, #1
1a008604:	e582      	b.n	1a00810c <_svfprintf_r+0x2ac>
1a008606:	f1b8 0f00 	cmp.w	r8, #0
1a00860a:	f43f adcd 	beq.w	1a0081a8 <_svfprintf_r+0x348>
1a00860e:	2300      	movs	r3, #0
1a008610:	2701      	movs	r7, #1
1a008612:	461a      	mov	r2, r3
1a008614:	9703      	str	r7, [sp, #12]
1a008616:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a00861a:	e6b7      	b.n	1a00838c <_svfprintf_r+0x52c>
1a00861c:	9f02      	ldr	r7, [sp, #8]
1a00861e:	2d00      	cmp	r5, #0
1a008620:	bf08      	it	eq
1a008622:	2c0a      	cmpeq	r4, #10
1a008624:	d239      	bcs.n	1a00869a <_svfprintf_r+0x83a>
1a008626:	3430      	adds	r4, #48	; 0x30
1a008628:	9702      	str	r7, [sp, #8]
1a00862a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00862e:	2701      	movs	r7, #1
1a008630:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a008634:	2300      	movs	r3, #0
1a008636:	4557      	cmp	r7, sl
1a008638:	9308      	str	r3, [sp, #32]
1a00863a:	930c      	str	r3, [sp, #48]	; 0x30
1a00863c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a008640:	463b      	mov	r3, r7
1a008642:	bfb8      	it	lt
1a008644:	4653      	movlt	r3, sl
1a008646:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00864a:	9303      	str	r3, [sp, #12]
1a00864c:	e5e8      	b.n	1a008220 <_svfprintf_r+0x3c0>
1a00864e:	9f02      	ldr	r7, [sp, #8]
1a008650:	2b01      	cmp	r3, #1
1a008652:	d0e4      	beq.n	1a00861e <_svfprintf_r+0x7be>
1a008654:	2b02      	cmp	r3, #2
1a008656:	f000 8202 	beq.w	1a008a5e <_svfprintf_r+0xbfe>
1a00865a:	a954      	add	r1, sp, #336	; 0x150
1a00865c:	e000      	b.n	1a008660 <_svfprintf_r+0x800>
1a00865e:	4631      	mov	r1, r6
1a008660:	08e2      	lsrs	r2, r4, #3
1a008662:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a008666:	08e8      	lsrs	r0, r5, #3
1a008668:	f004 0307 	and.w	r3, r4, #7
1a00866c:	4605      	mov	r5, r0
1a00866e:	4614      	mov	r4, r2
1a008670:	3330      	adds	r3, #48	; 0x30
1a008672:	ea54 0205 	orrs.w	r2, r4, r5
1a008676:	f801 3c01 	strb.w	r3, [r1, #-1]
1a00867a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a00867e:	d1ee      	bne.n	1a00865e <_svfprintf_r+0x7fe>
1a008680:	07f8      	lsls	r0, r7, #31
1a008682:	d54c      	bpl.n	1a00871e <_svfprintf_r+0x8be>
1a008684:	2b30      	cmp	r3, #48	; 0x30
1a008686:	d04a      	beq.n	1a00871e <_svfprintf_r+0x8be>
1a008688:	2330      	movs	r3, #48	; 0x30
1a00868a:	3902      	subs	r1, #2
1a00868c:	f806 3c01 	strb.w	r3, [r6, #-1]
1a008690:	ab54      	add	r3, sp, #336	; 0x150
1a008692:	9702      	str	r7, [sp, #8]
1a008694:	460e      	mov	r6, r1
1a008696:	1a5f      	subs	r7, r3, r1
1a008698:	e7cc      	b.n	1a008634 <_svfprintf_r+0x7d4>
1a00869a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
1a00869e:	2200      	movs	r2, #0
1a0086a0:	f8cd b008 	str.w	fp, [sp, #8]
1a0086a4:	f8cd 800c 	str.w	r8, [sp, #12]
1a0086a8:	f8cd 9020 	str.w	r9, [sp, #32]
1a0086ac:	ae54      	add	r6, sp, #336	; 0x150
1a0086ae:	46b9      	mov	r9, r7
1a0086b0:	4693      	mov	fp, r2
1a0086b2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a0086b6:	461f      	mov	r7, r3
1a0086b8:	e007      	b.n	1a0086ca <_svfprintf_r+0x86a>
1a0086ba:	f7fe fa15 	bl	1a006ae8 <__aeabi_uldivmod>
1a0086be:	2d00      	cmp	r5, #0
1a0086c0:	bf08      	it	eq
1a0086c2:	2c0a      	cmpeq	r4, #10
1a0086c4:	d320      	bcc.n	1a008708 <_svfprintf_r+0x8a8>
1a0086c6:	4604      	mov	r4, r0
1a0086c8:	460d      	mov	r5, r1
1a0086ca:	220a      	movs	r2, #10
1a0086cc:	2300      	movs	r3, #0
1a0086ce:	4620      	mov	r0, r4
1a0086d0:	4629      	mov	r1, r5
1a0086d2:	f7fe fa09 	bl	1a006ae8 <__aeabi_uldivmod>
1a0086d6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a0086da:	f806 cc01 	strb.w	ip, [r6, #-1]
1a0086de:	4620      	mov	r0, r4
1a0086e0:	4629      	mov	r1, r5
1a0086e2:	220a      	movs	r2, #10
1a0086e4:	2300      	movs	r3, #0
1a0086e6:	f10b 0b01 	add.w	fp, fp, #1
1a0086ea:	3e01      	subs	r6, #1
1a0086ec:	2f00      	cmp	r7, #0
1a0086ee:	d0e4      	beq.n	1a0086ba <_svfprintf_r+0x85a>
1a0086f0:	f898 c000 	ldrb.w	ip, [r8]
1a0086f4:	45e3      	cmp	fp, ip
1a0086f6:	d1e0      	bne.n	1a0086ba <_svfprintf_r+0x85a>
1a0086f8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
1a0086fc:	d0dd      	beq.n	1a0086ba <_svfprintf_r+0x85a>
1a0086fe:	429d      	cmp	r5, r3
1a008700:	bf08      	it	eq
1a008702:	4294      	cmpeq	r4, r2
1a008704:	f080 8669 	bcs.w	1a0093da <_svfprintf_r+0x157a>
1a008708:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
1a00870c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a008710:	464f      	mov	r7, r9
1a008712:	f8dd b008 	ldr.w	fp, [sp, #8]
1a008716:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a00871a:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a00871e:	9702      	str	r7, [sp, #8]
1a008720:	ab54      	add	r3, sp, #336	; 0x150
1a008722:	1b9f      	subs	r7, r3, r6
1a008724:	e786      	b.n	1a008634 <_svfprintf_r+0x7d4>
1a008726:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a00872a:	f340 80e3 	ble.w	1a0088f4 <_svfprintf_r+0xa94>
1a00872e:	2200      	movs	r2, #0
1a008730:	2300      	movs	r3, #0
1a008732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008736:	f7fe f967 	bl	1a006a08 <__aeabi_dcmpeq>
1a00873a:	2800      	cmp	r0, #0
1a00873c:	f000 81a8 	beq.w	1a008a90 <_svfprintf_r+0xc30>
1a008740:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008742:	4a1e      	ldr	r2, [pc, #120]	; (1a0087bc <_svfprintf_r+0x95c>)
1a008744:	f8c9 2000 	str.w	r2, [r9]
1a008748:	3301      	adds	r3, #1
1a00874a:	3401      	adds	r4, #1
1a00874c:	2201      	movs	r2, #1
1a00874e:	2b07      	cmp	r3, #7
1a008750:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a008754:	f8c9 2004 	str.w	r2, [r9, #4]
1a008758:	f300 84d1 	bgt.w	1a0090fe <_svfprintf_r+0x129e>
1a00875c:	f109 0908 	add.w	r9, r9, #8
1a008760:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008762:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008764:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008766:	4293      	cmp	r3, r2
1a008768:	f280 828a 	bge.w	1a008c80 <_svfprintf_r+0xe20>
1a00876c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00876e:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a008770:	f8c9 2000 	str.w	r2, [r9]
1a008774:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a008776:	f8c9 2004 	str.w	r2, [r9, #4]
1a00877a:	3301      	adds	r3, #1
1a00877c:	4414      	add	r4, r2
1a00877e:	2b07      	cmp	r3, #7
1a008780:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a008784:	f300 838f 	bgt.w	1a008ea6 <_svfprintf_r+0x1046>
1a008788:	f109 0908 	add.w	r9, r9, #8
1a00878c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00878e:	1e5d      	subs	r5, r3, #1
1a008790:	2d00      	cmp	r5, #0
1a008792:	f77f ae51 	ble.w	1a008438 <_svfprintf_r+0x5d8>
1a008796:	2d10      	cmp	r5, #16
1a008798:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00879a:	4b09      	ldr	r3, [pc, #36]	; (1a0087c0 <_svfprintf_r+0x960>)
1a00879c:	f340 84bc 	ble.w	1a009118 <_svfprintf_r+0x12b8>
1a0087a0:	2610      	movs	r6, #16
1a0087a2:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a0087a6:	469a      	mov	sl, r3
1a0087a8:	e012      	b.n	1a0087d0 <_svfprintf_r+0x970>
1a0087aa:	bf00      	nop
1a0087ac:	1a00eb1c 	.word	0x1a00eb1c
1a0087b0:	7fefffff 	.word	0x7fefffff
1a0087b4:	1a00ead8 	.word	0x1a00ead8
1a0087b8:	1a00eadc 	.word	0x1a00eadc
1a0087bc:	1a00eb18 	.word	0x1a00eb18
1a0087c0:	1a00eb2c 	.word	0x1a00eb2c
1a0087c4:	f109 0908 	add.w	r9, r9, #8
1a0087c8:	3d10      	subs	r5, #16
1a0087ca:	2d10      	cmp	r5, #16
1a0087cc:	f340 84a3 	ble.w	1a009116 <_svfprintf_r+0x12b6>
1a0087d0:	3201      	adds	r2, #1
1a0087d2:	3410      	adds	r4, #16
1a0087d4:	2a07      	cmp	r2, #7
1a0087d6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0087da:	e9c9 a600 	strd	sl, r6, [r9]
1a0087de:	ddf1      	ble.n	1a0087c4 <_svfprintf_r+0x964>
1a0087e0:	aa28      	add	r2, sp, #160	; 0xa0
1a0087e2:	4641      	mov	r1, r8
1a0087e4:	4638      	mov	r0, r7
1a0087e6:	f004 fe5b 	bl	1a00d4a0 <__ssprint_r>
1a0087ea:	2800      	cmp	r0, #0
1a0087ec:	f47f ac17 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0087f0:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0087f4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0087f8:	e7e6      	b.n	1a0087c8 <_svfprintf_r+0x968>
1a0087fa:	9b05      	ldr	r3, [sp, #20]
1a0087fc:	9a03      	ldr	r2, [sp, #12]
1a0087fe:	1a9d      	subs	r5, r3, r2
1a008800:	2d00      	cmp	r5, #0
1a008802:	f77f ae02 	ble.w	1a00840a <_svfprintf_r+0x5aa>
1a008806:	2d10      	cmp	r5, #16
1a008808:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00880a:	4b9f      	ldr	r3, [pc, #636]	; (1a008a88 <_svfprintf_r+0xc28>)
1a00880c:	dd28      	ble.n	1a008860 <_svfprintf_r+0xa00>
1a00880e:	4620      	mov	r0, r4
1a008810:	970a      	str	r7, [sp, #40]	; 0x28
1a008812:	4649      	mov	r1, r9
1a008814:	9c06      	ldr	r4, [sp, #24]
1a008816:	46b1      	mov	r9, r6
1a008818:	461f      	mov	r7, r3
1a00881a:	9e07      	ldr	r6, [sp, #28]
1a00881c:	e004      	b.n	1a008828 <_svfprintf_r+0x9c8>
1a00881e:	3d10      	subs	r5, #16
1a008820:	2d10      	cmp	r5, #16
1a008822:	f101 0108 	add.w	r1, r1, #8
1a008826:	dd16      	ble.n	1a008856 <_svfprintf_r+0x9f6>
1a008828:	3201      	adds	r2, #1
1a00882a:	3010      	adds	r0, #16
1a00882c:	2310      	movs	r3, #16
1a00882e:	2a07      	cmp	r2, #7
1a008830:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a008834:	600f      	str	r7, [r1, #0]
1a008836:	604b      	str	r3, [r1, #4]
1a008838:	ddf1      	ble.n	1a00881e <_svfprintf_r+0x9be>
1a00883a:	aa28      	add	r2, sp, #160	; 0xa0
1a00883c:	4631      	mov	r1, r6
1a00883e:	4620      	mov	r0, r4
1a008840:	f004 fe2e 	bl	1a00d4a0 <__ssprint_r>
1a008844:	2800      	cmp	r0, #0
1a008846:	f47f abea 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a00884a:	3d10      	subs	r5, #16
1a00884c:	2d10      	cmp	r5, #16
1a00884e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a008852:	a92b      	add	r1, sp, #172	; 0xac
1a008854:	dce8      	bgt.n	1a008828 <_svfprintf_r+0x9c8>
1a008856:	463b      	mov	r3, r7
1a008858:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a00885a:	464e      	mov	r6, r9
1a00885c:	4604      	mov	r4, r0
1a00885e:	4689      	mov	r9, r1
1a008860:	3201      	adds	r2, #1
1a008862:	442c      	add	r4, r5
1a008864:	2a07      	cmp	r2, #7
1a008866:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00886a:	e9c9 3500 	strd	r3, r5, [r9]
1a00886e:	f300 846a 	bgt.w	1a009146 <_svfprintf_r+0x12e6>
1a008872:	ebaa 0507 	sub.w	r5, sl, r7
1a008876:	2d00      	cmp	r5, #0
1a008878:	f109 0908 	add.w	r9, r9, #8
1a00887c:	f77f adca 	ble.w	1a008414 <_svfprintf_r+0x5b4>
1a008880:	2d10      	cmp	r5, #16
1a008882:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008884:	4b80      	ldr	r3, [pc, #512]	; (1a008a88 <_svfprintf_r+0xc28>)
1a008886:	dd29      	ble.n	1a0088dc <_svfprintf_r+0xa7c>
1a008888:	4620      	mov	r0, r4
1a00888a:	970a      	str	r7, [sp, #40]	; 0x28
1a00888c:	4649      	mov	r1, r9
1a00888e:	f04f 0a10 	mov.w	sl, #16
1a008892:	46b1      	mov	r9, r6
1a008894:	9c06      	ldr	r4, [sp, #24]
1a008896:	9e07      	ldr	r6, [sp, #28]
1a008898:	461f      	mov	r7, r3
1a00889a:	e004      	b.n	1a0088a6 <_svfprintf_r+0xa46>
1a00889c:	3d10      	subs	r5, #16
1a00889e:	2d10      	cmp	r5, #16
1a0088a0:	f101 0108 	add.w	r1, r1, #8
1a0088a4:	dd15      	ble.n	1a0088d2 <_svfprintf_r+0xa72>
1a0088a6:	3201      	adds	r2, #1
1a0088a8:	3010      	adds	r0, #16
1a0088aa:	2a07      	cmp	r2, #7
1a0088ac:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0088b0:	e9c1 7a00 	strd	r7, sl, [r1]
1a0088b4:	ddf2      	ble.n	1a00889c <_svfprintf_r+0xa3c>
1a0088b6:	aa28      	add	r2, sp, #160	; 0xa0
1a0088b8:	4631      	mov	r1, r6
1a0088ba:	4620      	mov	r0, r4
1a0088bc:	f004 fdf0 	bl	1a00d4a0 <__ssprint_r>
1a0088c0:	2800      	cmp	r0, #0
1a0088c2:	f47f abac 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0088c6:	3d10      	subs	r5, #16
1a0088c8:	2d10      	cmp	r5, #16
1a0088ca:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0088ce:	a92b      	add	r1, sp, #172	; 0xac
1a0088d0:	dce9      	bgt.n	1a0088a6 <_svfprintf_r+0xa46>
1a0088d2:	463b      	mov	r3, r7
1a0088d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0088d6:	464e      	mov	r6, r9
1a0088d8:	4604      	mov	r4, r0
1a0088da:	4689      	mov	r9, r1
1a0088dc:	3201      	adds	r2, #1
1a0088de:	442c      	add	r4, r5
1a0088e0:	2a07      	cmp	r2, #7
1a0088e2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0088e6:	e9c9 3500 	strd	r3, r5, [r9]
1a0088ea:	f300 8197 	bgt.w	1a008c1c <_svfprintf_r+0xdbc>
1a0088ee:	f109 0908 	add.w	r9, r9, #8
1a0088f2:	e58f      	b.n	1a008414 <_svfprintf_r+0x5b4>
1a0088f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0088f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0088f8:	2a01      	cmp	r2, #1
1a0088fa:	f104 0401 	add.w	r4, r4, #1
1a0088fe:	f103 0501 	add.w	r5, r3, #1
1a008902:	f109 0708 	add.w	r7, r9, #8
1a008906:	f340 8148 	ble.w	1a008b9a <_svfprintf_r+0xd3a>
1a00890a:	2301      	movs	r3, #1
1a00890c:	2d07      	cmp	r5, #7
1a00890e:	f8c9 6000 	str.w	r6, [r9]
1a008912:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a008916:	f8c9 3004 	str.w	r3, [r9, #4]
1a00891a:	f300 8198 	bgt.w	1a008c4e <_svfprintf_r+0xdee>
1a00891e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a008920:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a008922:	1c69      	adds	r1, r5, #1
1a008924:	441c      	add	r4, r3
1a008926:	2907      	cmp	r1, #7
1a008928:	910b      	str	r1, [sp, #44]	; 0x2c
1a00892a:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a00892e:	e9c7 2300 	strd	r2, r3, [r7]
1a008932:	f300 8198 	bgt.w	1a008c66 <_svfprintf_r+0xe06>
1a008936:	3708      	adds	r7, #8
1a008938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00893a:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a00893c:	f102 0a01 	add.w	sl, r2, #1
1a008940:	2300      	movs	r3, #0
1a008942:	2200      	movs	r2, #0
1a008944:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008948:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
1a00894c:	f107 0908 	add.w	r9, r7, #8
1a008950:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a008954:	f7fe f858 	bl	1a006a08 <__aeabi_dcmpeq>
1a008958:	2800      	cmp	r0, #0
1a00895a:	f040 8131 	bne.w	1a008bc0 <_svfprintf_r+0xd60>
1a00895e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008960:	f8c7 8004 	str.w	r8, [r7, #4]
1a008964:	3601      	adds	r6, #1
1a008966:	4444      	add	r4, r8
1a008968:	2b07      	cmp	r3, #7
1a00896a:	603e      	str	r6, [r7, #0]
1a00896c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00896e:	9329      	str	r3, [sp, #164]	; 0xa4
1a008970:	f300 8367 	bgt.w	1a009042 <_svfprintf_r+0x11e2>
1a008974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a008976:	f107 0310 	add.w	r3, r7, #16
1a00897a:	3202      	adds	r2, #2
1a00897c:	464f      	mov	r7, r9
1a00897e:	920a      	str	r2, [sp, #40]	; 0x28
1a008980:	4699      	mov	r9, r3
1a008982:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a008984:	607a      	str	r2, [r7, #4]
1a008986:	4414      	add	r4, r2
1a008988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00898a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00898c:	ab24      	add	r3, sp, #144	; 0x90
1a00898e:	2a07      	cmp	r2, #7
1a008990:	9229      	str	r2, [sp, #164]	; 0xa4
1a008992:	603b      	str	r3, [r7, #0]
1a008994:	f77f ad50 	ble.w	1a008438 <_svfprintf_r+0x5d8>
1a008998:	aa28      	add	r2, sp, #160	; 0xa0
1a00899a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00899e:	f004 fd7f 	bl	1a00d4a0 <__ssprint_r>
1a0089a2:	2800      	cmp	r0, #0
1a0089a4:	f47f ab3b 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0089a8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0089aa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0089ae:	e543      	b.n	1a008438 <_svfprintf_r+0x5d8>
1a0089b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0089b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0089b6:	f004 fd73 	bl	1a00d4a0 <__ssprint_r>
1a0089ba:	2800      	cmp	r0, #0
1a0089bc:	f47f ab2f 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0089c0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0089c2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0089c6:	e50c      	b.n	1a0083e2 <_svfprintf_r+0x582>
1a0089c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0089ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0089ce:	f004 fd67 	bl	1a00d4a0 <__ssprint_r>
1a0089d2:	2800      	cmp	r0, #0
1a0089d4:	f47f ab23 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0089d8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0089da:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0089de:	e510      	b.n	1a008402 <_svfprintf_r+0x5a2>
1a0089e0:	2d10      	cmp	r5, #16
1a0089e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0089e4:	dd20      	ble.n	1a008a28 <_svfprintf_r+0xbc8>
1a0089e6:	2610      	movs	r6, #16
1a0089e8:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a0089ec:	e004      	b.n	1a0089f8 <_svfprintf_r+0xb98>
1a0089ee:	3d10      	subs	r5, #16
1a0089f0:	2d10      	cmp	r5, #16
1a0089f2:	f109 0908 	add.w	r9, r9, #8
1a0089f6:	dd17      	ble.n	1a008a28 <_svfprintf_r+0xbc8>
1a0089f8:	3301      	adds	r3, #1
1a0089fa:	4a24      	ldr	r2, [pc, #144]	; (1a008a8c <_svfprintf_r+0xc2c>)
1a0089fc:	3410      	adds	r4, #16
1a0089fe:	2b07      	cmp	r3, #7
1a008a00:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a008a04:	e9c9 2600 	strd	r2, r6, [r9]
1a008a08:	ddf1      	ble.n	1a0089ee <_svfprintf_r+0xb8e>
1a008a0a:	aa28      	add	r2, sp, #160	; 0xa0
1a008a0c:	4641      	mov	r1, r8
1a008a0e:	4638      	mov	r0, r7
1a008a10:	f004 fd46 	bl	1a00d4a0 <__ssprint_r>
1a008a14:	2800      	cmp	r0, #0
1a008a16:	f47f ab02 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008a1a:	3d10      	subs	r5, #16
1a008a1c:	2d10      	cmp	r5, #16
1a008a1e:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a008a22:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a008a26:	dce7      	bgt.n	1a0089f8 <_svfprintf_r+0xb98>
1a008a28:	3301      	adds	r3, #1
1a008a2a:	4a18      	ldr	r2, [pc, #96]	; (1a008a8c <_svfprintf_r+0xc2c>)
1a008a2c:	442c      	add	r4, r5
1a008a2e:	2b07      	cmp	r3, #7
1a008a30:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a008a34:	e9c9 2500 	strd	r2, r5, [r9]
1a008a38:	f77f ad07 	ble.w	1a00844a <_svfprintf_r+0x5ea>
1a008a3c:	aa28      	add	r2, sp, #160	; 0xa0
1a008a3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a008a42:	f004 fd2d 	bl	1a00d4a0 <__ssprint_r>
1a008a46:	2800      	cmp	r0, #0
1a008a48:	f47f aae9 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008a4c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008a4e:	e4fc      	b.n	1a00844a <_svfprintf_r+0x5ea>
1a008a50:	2b01      	cmp	r3, #1
1a008a52:	f000 8467 	beq.w	1a009324 <_svfprintf_r+0x14c4>
1a008a56:	2b02      	cmp	r3, #2
1a008a58:	9f02      	ldr	r7, [sp, #8]
1a008a5a:	f47f adfe 	bne.w	1a00865a <_svfprintf_r+0x7fa>
1a008a5e:	9814      	ldr	r0, [sp, #80]	; 0x50
1a008a60:	ae54      	add	r6, sp, #336	; 0x150
1a008a62:	0923      	lsrs	r3, r4, #4
1a008a64:	f004 010f 	and.w	r1, r4, #15
1a008a68:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a008a6c:	092a      	lsrs	r2, r5, #4
1a008a6e:	461c      	mov	r4, r3
1a008a70:	4615      	mov	r5, r2
1a008a72:	5c43      	ldrb	r3, [r0, r1]
1a008a74:	f806 3d01 	strb.w	r3, [r6, #-1]!
1a008a78:	ea54 0305 	orrs.w	r3, r4, r5
1a008a7c:	d1f1      	bne.n	1a008a62 <_svfprintf_r+0xc02>
1a008a7e:	ab54      	add	r3, sp, #336	; 0x150
1a008a80:	9702      	str	r7, [sp, #8]
1a008a82:	1b9f      	subs	r7, r3, r6
1a008a84:	e5d6      	b.n	1a008634 <_svfprintf_r+0x7d4>
1a008a86:	bf00      	nop
1a008a88:	1a00eb2c 	.word	0x1a00eb2c
1a008a8c:	1a00eb1c 	.word	0x1a00eb1c
1a008a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008a92:	2b00      	cmp	r3, #0
1a008a94:	f340 82ff 	ble.w	1a009096 <_svfprintf_r+0x1236>
1a008a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008a9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008a9c:	4293      	cmp	r3, r2
1a008a9e:	bfa8      	it	ge
1a008aa0:	4613      	movge	r3, r2
1a008aa2:	2b00      	cmp	r3, #0
1a008aa4:	461d      	mov	r5, r3
1a008aa6:	dd0d      	ble.n	1a008ac4 <_svfprintf_r+0xc64>
1a008aa8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008aaa:	f8c9 6000 	str.w	r6, [r9]
1a008aae:	3301      	adds	r3, #1
1a008ab0:	442c      	add	r4, r5
1a008ab2:	2b07      	cmp	r3, #7
1a008ab4:	942a      	str	r4, [sp, #168]	; 0xa8
1a008ab6:	f8c9 5004 	str.w	r5, [r9, #4]
1a008aba:	9329      	str	r3, [sp, #164]	; 0xa4
1a008abc:	f300 8480 	bgt.w	1a0093c0 <_svfprintf_r+0x1560>
1a008ac0:	f109 0908 	add.w	r9, r9, #8
1a008ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008ac6:	2d00      	cmp	r5, #0
1a008ac8:	bfa8      	it	ge
1a008aca:	1b5b      	subge	r3, r3, r5
1a008acc:	2b00      	cmp	r3, #0
1a008ace:	461d      	mov	r5, r3
1a008ad0:	f300 8213 	bgt.w	1a008efa <_svfprintf_r+0x109a>
1a008ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008ad6:	4433      	add	r3, r6
1a008ad8:	469a      	mov	sl, r3
1a008ada:	9b02      	ldr	r3, [sp, #8]
1a008adc:	055f      	lsls	r7, r3, #21
1a008ade:	f100 8233 	bmi.w	1a008f48 <_svfprintf_r+0x10e8>
1a008ae2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008ae6:	4293      	cmp	r3, r2
1a008ae8:	db03      	blt.n	1a008af2 <_svfprintf_r+0xc92>
1a008aea:	9a02      	ldr	r2, [sp, #8]
1a008aec:	07d5      	lsls	r5, r2, #31
1a008aee:	f140 83de 	bpl.w	1a0092ae <_svfprintf_r+0x144e>
1a008af2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008af4:	9915      	ldr	r1, [sp, #84]	; 0x54
1a008af6:	f8c9 1000 	str.w	r1, [r9]
1a008afa:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a008afc:	f8c9 1004 	str.w	r1, [r9, #4]
1a008b00:	3201      	adds	r2, #1
1a008b02:	440c      	add	r4, r1
1a008b04:	2a07      	cmp	r2, #7
1a008b06:	942a      	str	r4, [sp, #168]	; 0xa8
1a008b08:	9229      	str	r2, [sp, #164]	; 0xa4
1a008b0a:	f300 847c 	bgt.w	1a009406 <_svfprintf_r+0x15a6>
1a008b0e:	f109 0908 	add.w	r9, r9, #8
1a008b12:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008b14:	18b5      	adds	r5, r6, r2
1a008b16:	eba5 050a 	sub.w	r5, r5, sl
1a008b1a:	1ad3      	subs	r3, r2, r3
1a008b1c:	429d      	cmp	r5, r3
1a008b1e:	bfa8      	it	ge
1a008b20:	461d      	movge	r5, r3
1a008b22:	2d00      	cmp	r5, #0
1a008b24:	dd0d      	ble.n	1a008b42 <_svfprintf_r+0xce2>
1a008b26:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008b28:	f8c9 a000 	str.w	sl, [r9]
1a008b2c:	3201      	adds	r2, #1
1a008b2e:	442c      	add	r4, r5
1a008b30:	2a07      	cmp	r2, #7
1a008b32:	942a      	str	r4, [sp, #168]	; 0xa8
1a008b34:	f8c9 5004 	str.w	r5, [r9, #4]
1a008b38:	9229      	str	r2, [sp, #164]	; 0xa4
1a008b3a:	f300 8579 	bgt.w	1a009630 <_svfprintf_r+0x17d0>
1a008b3e:	f109 0908 	add.w	r9, r9, #8
1a008b42:	2d00      	cmp	r5, #0
1a008b44:	bfac      	ite	ge
1a008b46:	1b5d      	subge	r5, r3, r5
1a008b48:	461d      	movlt	r5, r3
1a008b4a:	2d00      	cmp	r5, #0
1a008b4c:	f77f ac74 	ble.w	1a008438 <_svfprintf_r+0x5d8>
1a008b50:	2d10      	cmp	r5, #16
1a008b52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008b54:	4bc2      	ldr	r3, [pc, #776]	; (1a008e60 <_svfprintf_r+0x1000>)
1a008b56:	f340 82df 	ble.w	1a009118 <_svfprintf_r+0x12b8>
1a008b5a:	2610      	movs	r6, #16
1a008b5c:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a008b60:	469a      	mov	sl, r3
1a008b62:	e005      	b.n	1a008b70 <_svfprintf_r+0xd10>
1a008b64:	f109 0908 	add.w	r9, r9, #8
1a008b68:	3d10      	subs	r5, #16
1a008b6a:	2d10      	cmp	r5, #16
1a008b6c:	f340 82d3 	ble.w	1a009116 <_svfprintf_r+0x12b6>
1a008b70:	3201      	adds	r2, #1
1a008b72:	3410      	adds	r4, #16
1a008b74:	2a07      	cmp	r2, #7
1a008b76:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a008b7a:	e9c9 a600 	strd	sl, r6, [r9]
1a008b7e:	ddf1      	ble.n	1a008b64 <_svfprintf_r+0xd04>
1a008b80:	aa28      	add	r2, sp, #160	; 0xa0
1a008b82:	4641      	mov	r1, r8
1a008b84:	4638      	mov	r0, r7
1a008b86:	f004 fc8b 	bl	1a00d4a0 <__ssprint_r>
1a008b8a:	2800      	cmp	r0, #0
1a008b8c:	f47f aa47 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008b90:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a008b94:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a008b98:	e7e6      	b.n	1a008b68 <_svfprintf_r+0xd08>
1a008b9a:	9a02      	ldr	r2, [sp, #8]
1a008b9c:	07d0      	lsls	r0, r2, #31
1a008b9e:	f53f aeb4 	bmi.w	1a00890a <_svfprintf_r+0xaaa>
1a008ba2:	2201      	movs	r2, #1
1a008ba4:	2d07      	cmp	r5, #7
1a008ba6:	f8c9 6000 	str.w	r6, [r9]
1a008baa:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a008bae:	f8c9 2004 	str.w	r2, [r9, #4]
1a008bb2:	f300 8246 	bgt.w	1a009042 <_svfprintf_r+0x11e2>
1a008bb6:	3302      	adds	r3, #2
1a008bb8:	930a      	str	r3, [sp, #40]	; 0x28
1a008bba:	f109 0910 	add.w	r9, r9, #16
1a008bbe:	e6e0      	b.n	1a008982 <_svfprintf_r+0xb22>
1a008bc0:	f1b8 0f00 	cmp.w	r8, #0
1a008bc4:	f77f aedd 	ble.w	1a008982 <_svfprintf_r+0xb22>
1a008bc8:	f1b8 0f10 	cmp.w	r8, #16
1a008bcc:	4ba4      	ldr	r3, [pc, #656]	; (1a008e60 <_svfprintf_r+0x1000>)
1a008bce:	f340 8639 	ble.w	1a009844 <_svfprintf_r+0x19e4>
1a008bd2:	461a      	mov	r2, r3
1a008bd4:	4655      	mov	r5, sl
1a008bd6:	4623      	mov	r3, r4
1a008bd8:	2610      	movs	r6, #16
1a008bda:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a008bde:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a008be2:	4614      	mov	r4, r2
1a008be4:	e007      	b.n	1a008bf6 <_svfprintf_r+0xd96>
1a008be6:	3708      	adds	r7, #8
1a008be8:	f1a8 0810 	sub.w	r8, r8, #16
1a008bec:	f1b8 0f10 	cmp.w	r8, #16
1a008bf0:	f340 8304 	ble.w	1a0091fc <_svfprintf_r+0x139c>
1a008bf4:	3501      	adds	r5, #1
1a008bf6:	3310      	adds	r3, #16
1a008bf8:	2d07      	cmp	r5, #7
1a008bfa:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a008bfe:	e9c7 4600 	strd	r4, r6, [r7]
1a008c02:	ddf0      	ble.n	1a008be6 <_svfprintf_r+0xd86>
1a008c04:	aa28      	add	r2, sp, #160	; 0xa0
1a008c06:	4651      	mov	r1, sl
1a008c08:	4648      	mov	r0, r9
1a008c0a:	f004 fc49 	bl	1a00d4a0 <__ssprint_r>
1a008c0e:	2800      	cmp	r0, #0
1a008c10:	f47f aa05 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008c14:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a008c18:	af2b      	add	r7, sp, #172	; 0xac
1a008c1a:	e7e5      	b.n	1a008be8 <_svfprintf_r+0xd88>
1a008c1c:	aa28      	add	r2, sp, #160	; 0xa0
1a008c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a008c22:	f004 fc3d 	bl	1a00d4a0 <__ssprint_r>
1a008c26:	2800      	cmp	r0, #0
1a008c28:	f47f a9f9 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008c2c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008c2e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a008c32:	f7ff bbef 	b.w	1a008414 <_svfprintf_r+0x5b4>
1a008c36:	232d      	movs	r3, #45	; 0x2d
1a008c38:	4264      	negs	r4, r4
1a008c3a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a008c3e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a008c42:	2301      	movs	r3, #1
1a008c44:	f7ff ba65 	b.w	1a008112 <_svfprintf_r+0x2b2>
1a008c48:	4634      	mov	r4, r6
1a008c4a:	f7ff b95c 	b.w	1a007f06 <_svfprintf_r+0xa6>
1a008c4e:	aa28      	add	r2, sp, #160	; 0xa0
1a008c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a008c54:	f004 fc24 	bl	1a00d4a0 <__ssprint_r>
1a008c58:	2800      	cmp	r0, #0
1a008c5a:	f47f a9e0 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008c5e:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a008c62:	af2b      	add	r7, sp, #172	; 0xac
1a008c64:	e65b      	b.n	1a00891e <_svfprintf_r+0xabe>
1a008c66:	aa28      	add	r2, sp, #160	; 0xa0
1a008c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a008c6c:	f004 fc18 	bl	1a00d4a0 <__ssprint_r>
1a008c70:	2800      	cmp	r0, #0
1a008c72:	f47f a9d4 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008c76:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a008c7a:	af2b      	add	r7, sp, #172	; 0xac
1a008c7c:	930b      	str	r3, [sp, #44]	; 0x2c
1a008c7e:	e65b      	b.n	1a008938 <_svfprintf_r+0xad8>
1a008c80:	9b02      	ldr	r3, [sp, #8]
1a008c82:	07db      	lsls	r3, r3, #31
1a008c84:	f53f ad72 	bmi.w	1a00876c <_svfprintf_r+0x90c>
1a008c88:	f7ff bbd6 	b.w	1a008438 <_svfprintf_r+0x5d8>
1a008c8c:	ae54      	add	r6, sp, #336	; 0x150
1a008c8e:	e4d1      	b.n	1a008634 <_svfprintf_r+0x7d4>
1a008c90:	9b02      	ldr	r3, [sp, #8]
1a008c92:	059f      	lsls	r7, r3, #22
1a008c94:	f100 831c 	bmi.w	1a0092d0 <_svfprintf_r+0x1470>
1a008c98:	2500      	movs	r5, #0
1a008c9a:	f7ff b9df 	b.w	1a00805c <_svfprintf_r+0x1fc>
1a008c9e:	9904      	ldr	r1, [sp, #16]
1a008ca0:	6812      	ldr	r2, [r2, #0]
1a008ca2:	9309      	str	r3, [sp, #36]	; 0x24
1a008ca4:	17cd      	asrs	r5, r1, #31
1a008ca6:	4608      	mov	r0, r1
1a008ca8:	4629      	mov	r1, r5
1a008caa:	e9c2 0100 	strd	r0, r1, [r2]
1a008cae:	465e      	mov	r6, fp
1a008cb0:	f7ff ba76 	b.w	1a0081a0 <_svfprintf_r+0x340>
1a008cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008cb6:	1d1a      	adds	r2, r3, #4
1a008cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008cba:	9209      	str	r2, [sp, #36]	; 0x24
1a008cbc:	681c      	ldr	r4, [r3, #0]
1a008cbe:	2500      	movs	r5, #0
1a008cc0:	2301      	movs	r3, #1
1a008cc2:	f7ff ba23 	b.w	1a00810c <_svfprintf_r+0x2ac>
1a008cc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008cca:	4602      	mov	r2, r0
1a008ccc:	460b      	mov	r3, r1
1a008cce:	f7fd fecd 	bl	1a006a6c <__aeabi_dcmpun>
1a008cd2:	2800      	cmp	r0, #0
1a008cd4:	f040 8528 	bne.w	1a009728 <_svfprintf_r+0x18c8>
1a008cd8:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a008cdc:	f000 850d 	beq.w	1a0096fa <_svfprintf_r+0x189a>
1a008ce0:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a008ce4:	f000 83e9 	beq.w	1a0094ba <_svfprintf_r+0x165a>
1a008ce8:	f028 0320 	bic.w	r3, r8, #32
1a008cec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a008cf0:	9303      	str	r3, [sp, #12]
1a008cf2:	f000 8307 	beq.w	1a009304 <_svfprintf_r+0x14a4>
1a008cf6:	2b47      	cmp	r3, #71	; 0x47
1a008cf8:	d104      	bne.n	1a008d04 <_svfprintf_r+0xea4>
1a008cfa:	f1ba 0f00 	cmp.w	sl, #0
1a008cfe:	bf08      	it	eq
1a008d00:	f04f 0a01 	moveq.w	sl, #1
1a008d04:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a008d08:	9902      	ldr	r1, [sp, #8]
1a008d0a:	2d00      	cmp	r5, #0
1a008d0c:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a008d10:	f2c0 8476 	blt.w	1a009600 <_svfprintf_r+0x17a0>
1a008d14:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a008d18:	2300      	movs	r3, #0
1a008d1a:	931e      	str	r3, [sp, #120]	; 0x78
1a008d1c:	910a      	str	r1, [sp, #40]	; 0x28
1a008d1e:	9308      	str	r3, [sp, #32]
1a008d20:	9202      	str	r2, [sp, #8]
1a008d22:	9b03      	ldr	r3, [sp, #12]
1a008d24:	2b46      	cmp	r3, #70	; 0x46
1a008d26:	f000 837c 	beq.w	1a009422 <_svfprintf_r+0x15c2>
1a008d2a:	2b45      	cmp	r3, #69	; 0x45
1a008d2c:	f000 84d4 	beq.w	1a0096d8 <_svfprintf_r+0x1878>
1a008d30:	aa26      	add	r2, sp, #152	; 0x98
1a008d32:	ab23      	add	r3, sp, #140	; 0x8c
1a008d34:	e9cd 3200 	strd	r3, r2, [sp]
1a008d38:	2102      	movs	r1, #2
1a008d3a:	ab22      	add	r3, sp, #136	; 0x88
1a008d3c:	4652      	mov	r2, sl
1a008d3e:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008d42:	9806      	ldr	r0, [sp, #24]
1a008d44:	f002 fc94 	bl	1a00b670 <_dtoa_r>
1a008d48:	9b03      	ldr	r3, [sp, #12]
1a008d4a:	2b47      	cmp	r3, #71	; 0x47
1a008d4c:	4606      	mov	r6, r0
1a008d4e:	f040 858e 	bne.w	1a00986e <_svfprintf_r+0x1a0e>
1a008d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008d54:	07db      	lsls	r3, r3, #31
1a008d56:	f100 847b 	bmi.w	1a009650 <_svfprintf_r+0x17f0>
1a008d5a:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a008d5c:	1bbb      	subs	r3, r7, r6
1a008d5e:	9312      	str	r3, [sp, #72]	; 0x48
1a008d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008d62:	930e      	str	r3, [sp, #56]	; 0x38
1a008d64:	9b03      	ldr	r3, [sp, #12]
1a008d66:	2b47      	cmp	r3, #71	; 0x47
1a008d68:	f000 82ee 	beq.w	1a009348 <_svfprintf_r+0x14e8>
1a008d6c:	9b03      	ldr	r3, [sp, #12]
1a008d6e:	2b46      	cmp	r3, #70	; 0x46
1a008d70:	f000 8380 	beq.w	1a009474 <_svfprintf_r+0x1614>
1a008d74:	9903      	ldr	r1, [sp, #12]
1a008d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008d78:	2941      	cmp	r1, #65	; 0x41
1a008d7a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a008d7e:	fa5f f388 	uxtb.w	r3, r8
1a008d82:	bf03      	ittte	eq
1a008d84:	330f      	addeq	r3, #15
1a008d86:	b2db      	uxtbeq	r3, r3
1a008d88:	2101      	moveq	r1, #1
1a008d8a:	2100      	movne	r1, #0
1a008d8c:	2a00      	cmp	r2, #0
1a008d8e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a008d92:	bfb8      	it	lt
1a008d94:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a008d96:	9222      	str	r2, [sp, #136]	; 0x88
1a008d98:	bfb6      	itet	lt
1a008d9a:	f1c3 0201 	rsblt	r2, r3, #1
1a008d9e:	232b      	movge	r3, #43	; 0x2b
1a008da0:	232d      	movlt	r3, #45	; 0x2d
1a008da2:	2a09      	cmp	r2, #9
1a008da4:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a008da8:	f340 84ae 	ble.w	1a009708 <_svfprintf_r+0x18a8>
1a008dac:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a008db0:	4620      	mov	r0, r4
1a008db2:	4d2c      	ldr	r5, [pc, #176]	; (1a008e64 <_svfprintf_r+0x1004>)
1a008db4:	e001      	b.n	1a008dba <_svfprintf_r+0xf5a>
1a008db6:	4608      	mov	r0, r1
1a008db8:	461a      	mov	r2, r3
1a008dba:	fb85 3102 	smull	r3, r1, r5, r2
1a008dbe:	17d3      	asrs	r3, r2, #31
1a008dc0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a008dc4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a008dc8:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a008dcc:	3130      	adds	r1, #48	; 0x30
1a008dce:	2a63      	cmp	r2, #99	; 0x63
1a008dd0:	f800 1c01 	strb.w	r1, [r0, #-1]
1a008dd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a008dd8:	dced      	bgt.n	1a008db6 <_svfprintf_r+0xf56>
1a008dda:	3330      	adds	r3, #48	; 0x30
1a008ddc:	1e82      	subs	r2, r0, #2
1a008dde:	b2db      	uxtb	r3, r3
1a008de0:	4294      	cmp	r4, r2
1a008de2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a008de6:	f240 8545 	bls.w	1a009874 <_svfprintf_r+0x1a14>
1a008dea:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a008dee:	e001      	b.n	1a008df4 <_svfprintf_r+0xf94>
1a008df0:	f811 3b01 	ldrb.w	r3, [r1], #1
1a008df4:	f802 3b01 	strb.w	r3, [r2], #1
1a008df8:	428c      	cmp	r4, r1
1a008dfa:	d1f9      	bne.n	1a008df0 <_svfprintf_r+0xf90>
1a008dfc:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a008e00:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a008e04:	1a1b      	subs	r3, r3, r0
1a008e06:	4413      	add	r3, r2
1a008e08:	aa24      	add	r2, sp, #144	; 0x90
1a008e0a:	1a9b      	subs	r3, r3, r2
1a008e0c:	9316      	str	r3, [sp, #88]	; 0x58
1a008e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008e10:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a008e12:	2b01      	cmp	r3, #1
1a008e14:	eb03 0702 	add.w	r7, r3, r2
1a008e18:	f340 84ee 	ble.w	1a0097f8 <_svfprintf_r+0x1998>
1a008e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a008e1e:	441f      	add	r7, r3
1a008e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008e22:	2200      	movs	r2, #0
1a008e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a008e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a008e2c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a008e30:	9302      	str	r3, [sp, #8]
1a008e32:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a008e36:	920c      	str	r2, [sp, #48]	; 0x30
1a008e38:	9303      	str	r3, [sp, #12]
1a008e3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a008e3c:	2b00      	cmp	r3, #0
1a008e3e:	f040 82aa 	bne.w	1a009396 <_svfprintf_r+0x1536>
1a008e42:	469a      	mov	sl, r3
1a008e44:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a008e48:	f7ff b9ea 	b.w	1a008220 <_svfprintf_r+0x3c0>
1a008e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e4e:	1d1a      	adds	r2, r3, #4
1a008e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e52:	9209      	str	r2, [sp, #36]	; 0x24
1a008e54:	681c      	ldr	r4, [r3, #0]
1a008e56:	17e5      	asrs	r5, r4, #31
1a008e58:	4622      	mov	r2, r4
1a008e5a:	462b      	mov	r3, r5
1a008e5c:	f7ff ba0f 	b.w	1a00827e <_svfprintf_r+0x41e>
1a008e60:	1a00eb2c 	.word	0x1a00eb2c
1a008e64:	66666667 	.word	0x66666667
1a008e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e6a:	1d1a      	adds	r2, r3, #4
1a008e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008e6e:	9209      	str	r2, [sp, #36]	; 0x24
1a008e70:	681c      	ldr	r4, [r3, #0]
1a008e72:	2500      	movs	r5, #0
1a008e74:	f7ff b9e8 	b.w	1a008248 <_svfprintf_r+0x3e8>
1a008e78:	4252      	negs	r2, r2
1a008e7a:	9205      	str	r2, [sp, #20]
1a008e7c:	9309      	str	r3, [sp, #36]	; 0x24
1a008e7e:	f7ff b925 	b.w	1a0080cc <_svfprintf_r+0x26c>
1a008e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a008e86:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a008e8a:	9302      	str	r3, [sp, #8]
1a008e8c:	f10b 0b01 	add.w	fp, fp, #1
1a008e90:	f7ff b846 	b.w	1a007f20 <_svfprintf_r+0xc0>
1a008e94:	f043 0320 	orr.w	r3, r3, #32
1a008e98:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a008e9c:	9302      	str	r3, [sp, #8]
1a008e9e:	f10b 0b01 	add.w	fp, fp, #1
1a008ea2:	f7ff b83d 	b.w	1a007f20 <_svfprintf_r+0xc0>
1a008ea6:	aa28      	add	r2, sp, #160	; 0xa0
1a008ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a008eac:	f004 faf8 	bl	1a00d4a0 <__ssprint_r>
1a008eb0:	2800      	cmp	r0, #0
1a008eb2:	f47f a8b4 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008eb6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008eb8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a008ebc:	e466      	b.n	1a00878c <_svfprintf_r+0x92c>
1a008ebe:	2140      	movs	r1, #64	; 0x40
1a008ec0:	9806      	ldr	r0, [sp, #24]
1a008ec2:	f7fe facf 	bl	1a007464 <_malloc_r>
1a008ec6:	9b07      	ldr	r3, [sp, #28]
1a008ec8:	6018      	str	r0, [r3, #0]
1a008eca:	6118      	str	r0, [r3, #16]
1a008ecc:	2800      	cmp	r0, #0
1a008ece:	f000 84c6 	beq.w	1a00985e <_svfprintf_r+0x19fe>
1a008ed2:	9a07      	ldr	r2, [sp, #28]
1a008ed4:	2340      	movs	r3, #64	; 0x40
1a008ed6:	6153      	str	r3, [r2, #20]
1a008ed8:	f7fe bfd9 	b.w	1a007e8e <_svfprintf_r+0x2e>
1a008edc:	4657      	mov	r7, sl
1a008ede:	2f06      	cmp	r7, #6
1a008ee0:	bf28      	it	cs
1a008ee2:	2706      	movcs	r7, #6
1a008ee4:	46b2      	mov	sl, r6
1a008ee6:	960c      	str	r6, [sp, #48]	; 0x30
1a008ee8:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
1a008eec:	9608      	str	r6, [sp, #32]
1a008eee:	4632      	mov	r2, r6
1a008ef0:	9703      	str	r7, [sp, #12]
1a008ef2:	9409      	str	r4, [sp, #36]	; 0x24
1a008ef4:	4ebe      	ldr	r6, [pc, #760]	; (1a0091f0 <_svfprintf_r+0x1390>)
1a008ef6:	f7ff b993 	b.w	1a008220 <_svfprintf_r+0x3c0>
1a008efa:	2d10      	cmp	r5, #16
1a008efc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008efe:	4bbd      	ldr	r3, [pc, #756]	; (1a0091f4 <_svfprintf_r+0x1394>)
1a008f00:	f340 81b8 	ble.w	1a009274 <_svfprintf_r+0x1414>
1a008f04:	4619      	mov	r1, r3
1a008f06:	2710      	movs	r7, #16
1a008f08:	4623      	mov	r3, r4
1a008f0a:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a008f0e:	460c      	mov	r4, r1
1a008f10:	e005      	b.n	1a008f1e <_svfprintf_r+0x10be>
1a008f12:	f109 0908 	add.w	r9, r9, #8
1a008f16:	3d10      	subs	r5, #16
1a008f18:	2d10      	cmp	r5, #16
1a008f1a:	f340 81a8 	ble.w	1a00926e <_svfprintf_r+0x140e>
1a008f1e:	3201      	adds	r2, #1
1a008f20:	3310      	adds	r3, #16
1a008f22:	2a07      	cmp	r2, #7
1a008f24:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a008f28:	e9c9 4700 	strd	r4, r7, [r9]
1a008f2c:	ddf1      	ble.n	1a008f12 <_svfprintf_r+0x10b2>
1a008f2e:	aa28      	add	r2, sp, #160	; 0xa0
1a008f30:	4651      	mov	r1, sl
1a008f32:	4640      	mov	r0, r8
1a008f34:	f004 fab4 	bl	1a00d4a0 <__ssprint_r>
1a008f38:	2800      	cmp	r0, #0
1a008f3a:	f47f a870 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a008f3e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a008f42:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a008f46:	e7e6      	b.n	1a008f16 <_svfprintf_r+0x10b6>
1a008f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008f4a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a008f4e:	18f3      	adds	r3, r6, r3
1a008f50:	930a      	str	r3, [sp, #40]	; 0x28
1a008f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008f54:	960e      	str	r6, [sp, #56]	; 0x38
1a008f56:	464a      	mov	r2, r9
1a008f58:	4656      	mov	r6, sl
1a008f5a:	4fa6      	ldr	r7, [pc, #664]	; (1a0091f4 <_svfprintf_r+0x1394>)
1a008f5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a008f60:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
1a008f64:	4621      	mov	r1, r4
1a008f66:	e9dd b906 	ldrd	fp, r9, [sp, #24]
1a008f6a:	2b00      	cmp	r3, #0
1a008f6c:	d033      	beq.n	1a008fd6 <_svfprintf_r+0x1176>
1a008f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008f70:	2b00      	cmp	r3, #0
1a008f72:	d134      	bne.n	1a008fde <_svfprintf_r+0x117e>
1a008f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008f76:	3b01      	subs	r3, #1
1a008f78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a008f7c:	930f      	str	r3, [sp, #60]	; 0x3c
1a008f7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008f80:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a008f82:	6010      	str	r0, [r2, #0]
1a008f84:	3301      	adds	r3, #1
1a008f86:	4451      	add	r1, sl
1a008f88:	2b07      	cmp	r3, #7
1a008f8a:	912a      	str	r1, [sp, #168]	; 0xa8
1a008f8c:	f8c2 a004 	str.w	sl, [r2, #4]
1a008f90:	9329      	str	r3, [sp, #164]	; 0xa4
1a008f92:	dc66      	bgt.n	1a009062 <_svfprintf_r+0x1202>
1a008f94:	3208      	adds	r2, #8
1a008f96:	980a      	ldr	r0, [sp, #40]	; 0x28
1a008f98:	f898 3000 	ldrb.w	r3, [r8]
1a008f9c:	1b85      	subs	r5, r0, r6
1a008f9e:	429d      	cmp	r5, r3
1a008fa0:	bfa8      	it	ge
1a008fa2:	461d      	movge	r5, r3
1a008fa4:	2d00      	cmp	r5, #0
1a008fa6:	dd0c      	ble.n	1a008fc2 <_svfprintf_r+0x1162>
1a008fa8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008faa:	6016      	str	r6, [r2, #0]
1a008fac:	3301      	adds	r3, #1
1a008fae:	4429      	add	r1, r5
1a008fb0:	2b07      	cmp	r3, #7
1a008fb2:	912a      	str	r1, [sp, #168]	; 0xa8
1a008fb4:	6055      	str	r5, [r2, #4]
1a008fb6:	9329      	str	r3, [sp, #164]	; 0xa4
1a008fb8:	f300 80b8 	bgt.w	1a00912c <_svfprintf_r+0x12cc>
1a008fbc:	f898 3000 	ldrb.w	r3, [r8]
1a008fc0:	3208      	adds	r2, #8
1a008fc2:	2d00      	cmp	r5, #0
1a008fc4:	bfac      	ite	ge
1a008fc6:	1b5d      	subge	r5, r3, r5
1a008fc8:	461d      	movlt	r5, r3
1a008fca:	2d00      	cmp	r5, #0
1a008fcc:	dc0b      	bgt.n	1a008fe6 <_svfprintf_r+0x1186>
1a008fce:	441e      	add	r6, r3
1a008fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008fd2:	2b00      	cmp	r3, #0
1a008fd4:	d1cb      	bne.n	1a008f6e <_svfprintf_r+0x110e>
1a008fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008fd8:	2b00      	cmp	r3, #0
1a008fda:	f000 81a6 	beq.w	1a00932a <_svfprintf_r+0x14ca>
1a008fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008fe0:	3b01      	subs	r3, #1
1a008fe2:	930c      	str	r3, [sp, #48]	; 0x30
1a008fe4:	e7cb      	b.n	1a008f7e <_svfprintf_r+0x111e>
1a008fe6:	2d10      	cmp	r5, #16
1a008fe8:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a008fea:	dd1c      	ble.n	1a009026 <_svfprintf_r+0x11c6>
1a008fec:	2410      	movs	r4, #16
1a008fee:	e004      	b.n	1a008ffa <_svfprintf_r+0x119a>
1a008ff0:	3d10      	subs	r5, #16
1a008ff2:	2d10      	cmp	r5, #16
1a008ff4:	f102 0208 	add.w	r2, r2, #8
1a008ff8:	dd15      	ble.n	1a009026 <_svfprintf_r+0x11c6>
1a008ffa:	3001      	adds	r0, #1
1a008ffc:	3110      	adds	r1, #16
1a008ffe:	2807      	cmp	r0, #7
1a009000:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a009004:	e9c2 7400 	strd	r7, r4, [r2]
1a009008:	ddf2      	ble.n	1a008ff0 <_svfprintf_r+0x1190>
1a00900a:	aa28      	add	r2, sp, #160	; 0xa0
1a00900c:	4649      	mov	r1, r9
1a00900e:	4658      	mov	r0, fp
1a009010:	f004 fa46 	bl	1a00d4a0 <__ssprint_r>
1a009014:	2800      	cmp	r0, #0
1a009016:	f47f a802 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a00901a:	3d10      	subs	r5, #16
1a00901c:	2d10      	cmp	r5, #16
1a00901e:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a009022:	aa2b      	add	r2, sp, #172	; 0xac
1a009024:	dce9      	bgt.n	1a008ffa <_svfprintf_r+0x119a>
1a009026:	3001      	adds	r0, #1
1a009028:	4429      	add	r1, r5
1a00902a:	2807      	cmp	r0, #7
1a00902c:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a009030:	e9c2 7500 	strd	r7, r5, [r2]
1a009034:	f300 81b6 	bgt.w	1a0093a4 <_svfprintf_r+0x1544>
1a009038:	f898 3000 	ldrb.w	r3, [r8]
1a00903c:	3208      	adds	r2, #8
1a00903e:	441e      	add	r6, r3
1a009040:	e7c6      	b.n	1a008fd0 <_svfprintf_r+0x1170>
1a009042:	aa28      	add	r2, sp, #160	; 0xa0
1a009044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a009048:	f004 fa2a 	bl	1a00d4a0 <__ssprint_r>
1a00904c:	2800      	cmp	r0, #0
1a00904e:	f47e afe6 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a009052:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a009056:	3301      	adds	r3, #1
1a009058:	930a      	str	r3, [sp, #40]	; 0x28
1a00905a:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
1a00905e:	af2b      	add	r7, sp, #172	; 0xac
1a009060:	e48f      	b.n	1a008982 <_svfprintf_r+0xb22>
1a009062:	aa28      	add	r2, sp, #160	; 0xa0
1a009064:	4649      	mov	r1, r9
1a009066:	4658      	mov	r0, fp
1a009068:	f004 fa1a 	bl	1a00d4a0 <__ssprint_r>
1a00906c:	2800      	cmp	r0, #0
1a00906e:	f47e afd6 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a009072:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a009074:	aa2b      	add	r2, sp, #172	; 0xac
1a009076:	e78e      	b.n	1a008f96 <_svfprintf_r+0x1136>
1a009078:	aa28      	add	r2, sp, #160	; 0xa0
1a00907a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00907e:	f004 fa0f 	bl	1a00d4a0 <__ssprint_r>
1a009082:	2800      	cmp	r0, #0
1a009084:	f47e afcb 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a009088:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00908c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00908e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a009092:	f7ff b996 	b.w	1a0083c2 <_svfprintf_r+0x562>
1a009096:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a009098:	4957      	ldr	r1, [pc, #348]	; (1a0091f8 <_svfprintf_r+0x1398>)
1a00909a:	f8c9 1000 	str.w	r1, [r9]
1a00909e:	3201      	adds	r2, #1
1a0090a0:	3401      	adds	r4, #1
1a0090a2:	2101      	movs	r1, #1
1a0090a4:	2a07      	cmp	r2, #7
1a0090a6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0090aa:	f8c9 1004 	str.w	r1, [r9, #4]
1a0090ae:	f300 80f1 	bgt.w	1a009294 <_svfprintf_r+0x1434>
1a0090b2:	f109 0908 	add.w	r9, r9, #8
1a0090b6:	2b00      	cmp	r3, #0
1a0090b8:	d15a      	bne.n	1a009170 <_svfprintf_r+0x1310>
1a0090ba:	9b02      	ldr	r3, [sp, #8]
1a0090bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0090be:	f003 0301 	and.w	r3, r3, #1
1a0090c2:	4313      	orrs	r3, r2
1a0090c4:	f43f a9b8 	beq.w	1a008438 <_svfprintf_r+0x5d8>
1a0090c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0090ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0090cc:	f8c9 3000 	str.w	r3, [r9]
1a0090d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0090d2:	f8c9 3004 	str.w	r3, [r9, #4]
1a0090d6:	3201      	adds	r2, #1
1a0090d8:	441c      	add	r4, r3
1a0090da:	2a07      	cmp	r2, #7
1a0090dc:	942a      	str	r4, [sp, #168]	; 0xa8
1a0090de:	9229      	str	r2, [sp, #164]	; 0xa4
1a0090e0:	f300 8102 	bgt.w	1a0092e8 <_svfprintf_r+0x1488>
1a0090e4:	f109 0908 	add.w	r9, r9, #8
1a0090e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0090ea:	3201      	adds	r2, #1
1a0090ec:	441c      	add	r4, r3
1a0090ee:	2a07      	cmp	r2, #7
1a0090f0:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0090f4:	e9c9 6300 	strd	r6, r3, [r9]
1a0090f8:	f77f a99c 	ble.w	1a008434 <_svfprintf_r+0x5d4>
1a0090fc:	e44c      	b.n	1a008998 <_svfprintf_r+0xb38>
1a0090fe:	aa28      	add	r2, sp, #160	; 0xa0
1a009100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a009104:	f004 f9cc 	bl	1a00d4a0 <__ssprint_r>
1a009108:	2800      	cmp	r0, #0
1a00910a:	f47e af88 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a00910e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a009112:	f7ff bb25 	b.w	1a008760 <_svfprintf_r+0x900>
1a009116:	4653      	mov	r3, sl
1a009118:	3201      	adds	r2, #1
1a00911a:	442c      	add	r4, r5
1a00911c:	2a07      	cmp	r2, #7
1a00911e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a009122:	e9c9 3500 	strd	r3, r5, [r9]
1a009126:	f77f a985 	ble.w	1a008434 <_svfprintf_r+0x5d4>
1a00912a:	e435      	b.n	1a008998 <_svfprintf_r+0xb38>
1a00912c:	aa28      	add	r2, sp, #160	; 0xa0
1a00912e:	4649      	mov	r1, r9
1a009130:	4658      	mov	r0, fp
1a009132:	f004 f9b5 	bl	1a00d4a0 <__ssprint_r>
1a009136:	2800      	cmp	r0, #0
1a009138:	f47e af71 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a00913c:	f898 3000 	ldrb.w	r3, [r8]
1a009140:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a009142:	aa2b      	add	r2, sp, #172	; 0xac
1a009144:	e73d      	b.n	1a008fc2 <_svfprintf_r+0x1162>
1a009146:	aa28      	add	r2, sp, #160	; 0xa0
1a009148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00914c:	f004 f9a8 	bl	1a00d4a0 <__ssprint_r>
1a009150:	2800      	cmp	r0, #0
1a009152:	f47e af64 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a009156:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a009158:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00915c:	f7ff b955 	b.w	1a00840a <_svfprintf_r+0x5aa>
1a009160:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a009162:	6812      	ldr	r2, [r2, #0]
1a009164:	9309      	str	r3, [sp, #36]	; 0x24
1a009166:	9b04      	ldr	r3, [sp, #16]
1a009168:	6013      	str	r3, [r2, #0]
1a00916a:	465e      	mov	r6, fp
1a00916c:	f7ff b818 	b.w	1a0081a0 <_svfprintf_r+0x340>
1a009170:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a009172:	9915      	ldr	r1, [sp, #84]	; 0x54
1a009174:	f8c9 1000 	str.w	r1, [r9]
1a009178:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00917a:	f8c9 1004 	str.w	r1, [r9, #4]
1a00917e:	3201      	adds	r2, #1
1a009180:	440c      	add	r4, r1
1a009182:	2a07      	cmp	r2, #7
1a009184:	942a      	str	r4, [sp, #168]	; 0xa8
1a009186:	9229      	str	r2, [sp, #164]	; 0xa4
1a009188:	f300 80ae 	bgt.w	1a0092e8 <_svfprintf_r+0x1488>
1a00918c:	f109 0908 	add.w	r9, r9, #8
1a009190:	2b00      	cmp	r3, #0
1a009192:	daa9      	bge.n	1a0090e8 <_svfprintf_r+0x1288>
1a009194:	425d      	negs	r5, r3
1a009196:	3310      	adds	r3, #16
1a009198:	4b16      	ldr	r3, [pc, #88]	; (1a0091f4 <_svfprintf_r+0x1394>)
1a00919a:	f280 8287 	bge.w	1a0096ac <_svfprintf_r+0x184c>
1a00919e:	4619      	mov	r1, r3
1a0091a0:	2710      	movs	r7, #16
1a0091a2:	4623      	mov	r3, r4
1a0091a4:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a0091a8:	460c      	mov	r4, r1
1a0091aa:	e005      	b.n	1a0091b8 <_svfprintf_r+0x1358>
1a0091ac:	f109 0908 	add.w	r9, r9, #8
1a0091b0:	3d10      	subs	r5, #16
1a0091b2:	2d10      	cmp	r5, #16
1a0091b4:	f340 8277 	ble.w	1a0096a6 <_svfprintf_r+0x1846>
1a0091b8:	3201      	adds	r2, #1
1a0091ba:	3310      	adds	r3, #16
1a0091bc:	2a07      	cmp	r2, #7
1a0091be:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a0091c2:	e9c9 4700 	strd	r4, r7, [r9]
1a0091c6:	ddf1      	ble.n	1a0091ac <_svfprintf_r+0x134c>
1a0091c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0091ca:	4651      	mov	r1, sl
1a0091cc:	4640      	mov	r0, r8
1a0091ce:	f004 f967 	bl	1a00d4a0 <__ssprint_r>
1a0091d2:	2800      	cmp	r0, #0
1a0091d4:	f47e af23 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0091d8:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a0091dc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0091e0:	e7e6      	b.n	1a0091b0 <_svfprintf_r+0x1350>
1a0091e2:	4630      	mov	r0, r6
1a0091e4:	f7fe fdcc 	bl	1a007d80 <strlen>
1a0091e8:	46aa      	mov	sl, r5
1a0091ea:	4607      	mov	r7, r0
1a0091ec:	f7ff b80c 	b.w	1a008208 <_svfprintf_r+0x3a8>
1a0091f0:	1a00eb10 	.word	0x1a00eb10
1a0091f4:	1a00eb2c 	.word	0x1a00eb2c
1a0091f8:	1a00eb18 	.word	0x1a00eb18
1a0091fc:	4622      	mov	r2, r4
1a0091fe:	461c      	mov	r4, r3
1a009200:	4613      	mov	r3, r2
1a009202:	462a      	mov	r2, r5
1a009204:	3201      	adds	r2, #1
1a009206:	920a      	str	r2, [sp, #40]	; 0x28
1a009208:	f107 0208 	add.w	r2, r7, #8
1a00920c:	e9c7 3800 	strd	r3, r8, [r7]
1a009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009212:	9329      	str	r3, [sp, #164]	; 0xa4
1a009214:	4444      	add	r4, r8
1a009216:	2b07      	cmp	r3, #7
1a009218:	942a      	str	r4, [sp, #168]	; 0xa8
1a00921a:	f73f af12 	bgt.w	1a009042 <_svfprintf_r+0x11e2>
1a00921e:	3301      	adds	r3, #1
1a009220:	930a      	str	r3, [sp, #40]	; 0x28
1a009222:	f102 0908 	add.w	r9, r2, #8
1a009226:	4617      	mov	r7, r2
1a009228:	f7ff bbab 	b.w	1a008982 <_svfprintf_r+0xb22>
1a00922c:	9f02      	ldr	r7, [sp, #8]
1a00922e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009230:	f417 7f00 	tst.w	r7, #512	; 0x200
1a009234:	d044      	beq.n	1a0092c0 <_svfprintf_r+0x1460>
1a009236:	f993 4000 	ldrsb.w	r4, [r3]
1a00923a:	9209      	str	r2, [sp, #36]	; 0x24
1a00923c:	17e5      	asrs	r5, r4, #31
1a00923e:	4622      	mov	r2, r4
1a009240:	462b      	mov	r3, r5
1a009242:	f7ff b81c 	b.w	1a00827e <_svfprintf_r+0x41e>
1a009246:	9f02      	ldr	r7, [sp, #8]
1a009248:	05b9      	lsls	r1, r7, #22
1a00924a:	bf47      	ittee	mi
1a00924c:	9209      	strmi	r2, [sp, #36]	; 0x24
1a00924e:	b2e4      	uxtbmi	r4, r4
1a009250:	9f02      	ldrpl	r7, [sp, #8]
1a009252:	9209      	strpl	r2, [sp, #36]	; 0x24
1a009254:	2500      	movs	r5, #0
1a009256:	f7fe bff7 	b.w	1a008248 <_svfprintf_r+0x3e8>
1a00925a:	9f02      	ldr	r7, [sp, #8]
1a00925c:	9209      	str	r2, [sp, #36]	; 0x24
1a00925e:	05b8      	lsls	r0, r7, #22
1a009260:	bf4c      	ite	mi
1a009262:	b2e4      	uxtbmi	r4, r4
1a009264:	9f02      	ldrpl	r7, [sp, #8]
1a009266:	2500      	movs	r5, #0
1a009268:	2301      	movs	r3, #1
1a00926a:	f7fe bf4f 	b.w	1a00810c <_svfprintf_r+0x2ac>
1a00926e:	4621      	mov	r1, r4
1a009270:	461c      	mov	r4, r3
1a009272:	460b      	mov	r3, r1
1a009274:	3201      	adds	r2, #1
1a009276:	442c      	add	r4, r5
1a009278:	2a07      	cmp	r2, #7
1a00927a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00927e:	e9c9 3500 	strd	r3, r5, [r9]
1a009282:	dc42      	bgt.n	1a00930a <_svfprintf_r+0x14aa>
1a009284:	f109 0908 	add.w	r9, r9, #8
1a009288:	e424      	b.n	1a008ad4 <_svfprintf_r+0xc74>
1a00928a:	222d      	movs	r2, #45	; 0x2d
1a00928c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a009290:	f7ff b95d 	b.w	1a00854e <_svfprintf_r+0x6ee>
1a009294:	aa28      	add	r2, sp, #160	; 0xa0
1a009296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00929a:	f004 f901 	bl	1a00d4a0 <__ssprint_r>
1a00929e:	2800      	cmp	r0, #0
1a0092a0:	f47e aebd 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0092a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0092a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0092a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0092ac:	e703      	b.n	1a0090b6 <_svfprintf_r+0x1256>
1a0092ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0092b0:	18b5      	adds	r5, r6, r2
1a0092b2:	eba5 050a 	sub.w	r5, r5, sl
1a0092b6:	1ad3      	subs	r3, r2, r3
1a0092b8:	429d      	cmp	r5, r3
1a0092ba:	bfa8      	it	ge
1a0092bc:	461d      	movge	r5, r3
1a0092be:	e440      	b.n	1a008b42 <_svfprintf_r+0xce2>
1a0092c0:	681c      	ldr	r4, [r3, #0]
1a0092c2:	9209      	str	r2, [sp, #36]	; 0x24
1a0092c4:	17e5      	asrs	r5, r4, #31
1a0092c6:	9f02      	ldr	r7, [sp, #8]
1a0092c8:	4622      	mov	r2, r4
1a0092ca:	462b      	mov	r3, r5
1a0092cc:	f7fe bfd7 	b.w	1a00827e <_svfprintf_r+0x41e>
1a0092d0:	b2e4      	uxtb	r4, r4
1a0092d2:	2500      	movs	r5, #0
1a0092d4:	f7fe bec2 	b.w	1a00805c <_svfprintf_r+0x1fc>
1a0092d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0092da:	9309      	str	r3, [sp, #36]	; 0x24
1a0092dc:	6812      	ldr	r2, [r2, #0]
1a0092de:	9b04      	ldr	r3, [sp, #16]
1a0092e0:	8013      	strh	r3, [r2, #0]
1a0092e2:	465e      	mov	r6, fp
1a0092e4:	f7fe bf5c 	b.w	1a0081a0 <_svfprintf_r+0x340>
1a0092e8:	aa28      	add	r2, sp, #160	; 0xa0
1a0092ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0092ee:	f004 f8d7 	bl	1a00d4a0 <__ssprint_r>
1a0092f2:	2800      	cmp	r0, #0
1a0092f4:	f47e ae93 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0092f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0092fa:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0092fe:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a009302:	e745      	b.n	1a009190 <_svfprintf_r+0x1330>
1a009304:	f04f 0a06 	mov.w	sl, #6
1a009308:	e4fc      	b.n	1a008d04 <_svfprintf_r+0xea4>
1a00930a:	aa28      	add	r2, sp, #160	; 0xa0
1a00930c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a009310:	f004 f8c6 	bl	1a00d4a0 <__ssprint_r>
1a009314:	2800      	cmp	r0, #0
1a009316:	f47e ae82 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a00931a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00931c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a009320:	f7ff bbd8 	b.w	1a008ad4 <_svfprintf_r+0xc74>
1a009324:	9f02      	ldr	r7, [sp, #8]
1a009326:	f7ff b97e 	b.w	1a008626 <_svfprintf_r+0x7c6>
1a00932a:	46b2      	mov	sl, r6
1a00932c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00932e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a009330:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a009334:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a009338:	18f3      	adds	r3, r6, r3
1a00933a:	459a      	cmp	sl, r3
1a00933c:	460c      	mov	r4, r1
1a00933e:	4691      	mov	r9, r2
1a009340:	bf28      	it	cs
1a009342:	469a      	movcs	sl, r3
1a009344:	f7ff bbcd 	b.w	1a008ae2 <_svfprintf_r+0xc82>
1a009348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00934a:	1cda      	adds	r2, r3, #3
1a00934c:	db01      	blt.n	1a009352 <_svfprintf_r+0x14f2>
1a00934e:	459a      	cmp	sl, r3
1a009350:	da05      	bge.n	1a00935e <_svfprintf_r+0x14fe>
1a009352:	f1a8 0802 	sub.w	r8, r8, #2
1a009356:	f028 0320 	bic.w	r3, r8, #32
1a00935a:	9303      	str	r3, [sp, #12]
1a00935c:	e50a      	b.n	1a008d74 <_svfprintf_r+0xf14>
1a00935e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a009360:	4619      	mov	r1, r3
1a009362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a009364:	4299      	cmp	r1, r3
1a009366:	f300 8159 	bgt.w	1a00961c <_svfprintf_r+0x17bc>
1a00936a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00936c:	07d7      	lsls	r7, r2, #31
1a00936e:	f140 81c9 	bpl.w	1a009704 <_svfprintf_r+0x18a4>
1a009372:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a009374:	189f      	adds	r7, r3, r2
1a009376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009378:	055d      	lsls	r5, r3, #21
1a00937a:	d503      	bpl.n	1a009384 <_svfprintf_r+0x1524>
1a00937c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00937e:	2b00      	cmp	r3, #0
1a009380:	f300 81f6 	bgt.w	1a009770 <_svfprintf_r+0x1910>
1a009384:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a009388:	9303      	str	r3, [sp, #12]
1a00938a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00938e:	2300      	movs	r3, #0
1a009390:	930c      	str	r3, [sp, #48]	; 0x30
1a009392:	930f      	str	r3, [sp, #60]	; 0x3c
1a009394:	e551      	b.n	1a008e3a <_svfprintf_r+0xfda>
1a009396:	222d      	movs	r2, #45	; 0x2d
1a009398:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a00939c:	f04f 0a00 	mov.w	sl, #0
1a0093a0:	f7fe bf41 	b.w	1a008226 <_svfprintf_r+0x3c6>
1a0093a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0093a6:	4649      	mov	r1, r9
1a0093a8:	4658      	mov	r0, fp
1a0093aa:	f004 f879 	bl	1a00d4a0 <__ssprint_r>
1a0093ae:	2800      	cmp	r0, #0
1a0093b0:	f47e ae35 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0093b4:	f898 3000 	ldrb.w	r3, [r8]
1a0093b8:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0093ba:	aa2b      	add	r2, sp, #172	; 0xac
1a0093bc:	441e      	add	r6, r3
1a0093be:	e607      	b.n	1a008fd0 <_svfprintf_r+0x1170>
1a0093c0:	aa28      	add	r2, sp, #160	; 0xa0
1a0093c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0093c6:	f004 f86b 	bl	1a00d4a0 <__ssprint_r>
1a0093ca:	2800      	cmp	r0, #0
1a0093cc:	f47e ae27 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0093d0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0093d2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0093d6:	f7ff bb75 	b.w	1a008ac4 <_svfprintf_r+0xc64>
1a0093da:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0093dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0093de:	1af6      	subs	r6, r6, r3
1a0093e0:	461a      	mov	r2, r3
1a0093e2:	4630      	mov	r0, r6
1a0093e4:	f004 f822 	bl	1a00d42c <strncpy>
1a0093e8:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0093ec:	b10b      	cbz	r3, 1a0093f2 <_svfprintf_r+0x1592>
1a0093ee:	f108 0801 	add.w	r8, r8, #1
1a0093f2:	220a      	movs	r2, #10
1a0093f4:	2300      	movs	r3, #0
1a0093f6:	4620      	mov	r0, r4
1a0093f8:	4629      	mov	r1, r5
1a0093fa:	f04f 0b00 	mov.w	fp, #0
1a0093fe:	f7fd fb73 	bl	1a006ae8 <__aeabi_uldivmod>
1a009402:	f7ff b960 	b.w	1a0086c6 <_svfprintf_r+0x866>
1a009406:	aa28      	add	r2, sp, #160	; 0xa0
1a009408:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00940c:	f004 f848 	bl	1a00d4a0 <__ssprint_r>
1a009410:	2800      	cmp	r0, #0
1a009412:	f47e ae04 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a009416:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a009418:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00941a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00941e:	f7ff bb78 	b.w	1a008b12 <_svfprintf_r+0xcb2>
1a009422:	aa26      	add	r2, sp, #152	; 0x98
1a009424:	ab23      	add	r3, sp, #140	; 0x8c
1a009426:	e9cd 3200 	strd	r3, r2, [sp]
1a00942a:	2103      	movs	r1, #3
1a00942c:	ab22      	add	r3, sp, #136	; 0x88
1a00942e:	4652      	mov	r2, sl
1a009430:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a009434:	9806      	ldr	r0, [sp, #24]
1a009436:	f002 f91b 	bl	1a00b670 <_dtoa_r>
1a00943a:	7803      	ldrb	r3, [r0, #0]
1a00943c:	2b30      	cmp	r3, #48	; 0x30
1a00943e:	4606      	mov	r6, r0
1a009440:	f000 81cd 	beq.w	1a0097de <_svfprintf_r+0x197e>
1a009444:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a009446:	4453      	add	r3, sl
1a009448:	18f4      	adds	r4, r6, r3
1a00944a:	2200      	movs	r2, #0
1a00944c:	2300      	movs	r3, #0
1a00944e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a009452:	f7fd fad9 	bl	1a006a08 <__aeabi_dcmpeq>
1a009456:	b108      	cbz	r0, 1a00945c <_svfprintf_r+0x15fc>
1a009458:	4627      	mov	r7, r4
1a00945a:	e47f      	b.n	1a008d5c <_svfprintf_r+0xefc>
1a00945c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a00945e:	42a7      	cmp	r7, r4
1a009460:	f4bf ac7c 	bcs.w	1a008d5c <_svfprintf_r+0xefc>
1a009464:	2230      	movs	r2, #48	; 0x30
1a009466:	1c7b      	adds	r3, r7, #1
1a009468:	9326      	str	r3, [sp, #152]	; 0x98
1a00946a:	703a      	strb	r2, [r7, #0]
1a00946c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a00946e:	42bc      	cmp	r4, r7
1a009470:	d8f9      	bhi.n	1a009466 <_svfprintf_r+0x1606>
1a009472:	e473      	b.n	1a008d5c <_svfprintf_r+0xefc>
1a009474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a009478:	f003 0301 	and.w	r3, r3, #1
1a00947c:	2a00      	cmp	r2, #0
1a00947e:	ea43 030a 	orr.w	r3, r3, sl
1a009482:	f340 81bf 	ble.w	1a009804 <_svfprintf_r+0x19a4>
1a009486:	2b00      	cmp	r3, #0
1a009488:	f040 819a 	bne.w	1a0097c0 <_svfprintf_r+0x1960>
1a00948c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a00948e:	f04f 0866 	mov.w	r8, #102	; 0x66
1a009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009494:	055a      	lsls	r2, r3, #21
1a009496:	f100 816d 	bmi.w	1a009774 <_svfprintf_r+0x1914>
1a00949a:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a00949e:	9303      	str	r3, [sp, #12]
1a0094a0:	e775      	b.n	1a00938e <_svfprintf_r+0x152e>
1a0094a2:	4657      	mov	r7, sl
1a0094a4:	f8cd a00c 	str.w	sl, [sp, #12]
1a0094a8:	9409      	str	r4, [sp, #36]	; 0x24
1a0094aa:	4682      	mov	sl, r0
1a0094ac:	900c      	str	r0, [sp, #48]	; 0x30
1a0094ae:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a0094b2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0094b6:	f7fe beb3 	b.w	1a008220 <_svfprintf_r+0x3c0>
1a0094ba:	2330      	movs	r3, #48	; 0x30
1a0094bc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0094c0:	2358      	movs	r3, #88	; 0x58
1a0094c2:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a0094c6:	9b02      	ldr	r3, [sp, #8]
1a0094c8:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
1a0094cc:	f043 0302 	orr.w	r3, r3, #2
1a0094d0:	930a      	str	r3, [sp, #40]	; 0x28
1a0094d2:	f300 80dd 	bgt.w	1a009690 <_svfprintf_r+0x1830>
1a0094d6:	2300      	movs	r3, #0
1a0094d8:	9308      	str	r3, [sp, #32]
1a0094da:	ae3b      	add	r6, sp, #236	; 0xec
1a0094dc:	9a02      	ldr	r2, [sp, #8]
1a0094de:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0094e0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a0094e4:	9202      	str	r2, [sp, #8]
1a0094e6:	2b00      	cmp	r3, #0
1a0094e8:	f028 0220 	bic.w	r2, r8, #32
1a0094ec:	9203      	str	r2, [sp, #12]
1a0094ee:	f2c0 808c 	blt.w	1a00960a <_svfprintf_r+0x17aa>
1a0094f2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a0094f6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a0094fa:	2300      	movs	r3, #0
1a0094fc:	931e      	str	r3, [sp, #120]	; 0x78
1a0094fe:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a009502:	f000 811d 	beq.w	1a009740 <_svfprintf_r+0x18e0>
1a009506:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00950a:	f47f ac0a 	bne.w	1a008d22 <_svfprintf_r+0xec2>
1a00950e:	a822      	add	r0, sp, #136	; 0x88
1a009510:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a009514:	f003 ff54 	bl	1a00d3c0 <frexp>
1a009518:	2200      	movs	r2, #0
1a00951a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00951e:	ec51 0b10 	vmov	r0, r1, d0
1a009522:	f7fd f809 	bl	1a006538 <__aeabi_dmul>
1a009526:	2200      	movs	r2, #0
1a009528:	2300      	movs	r3, #0
1a00952a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00952e:	f7fd fa6b 	bl	1a006a08 <__aeabi_dcmpeq>
1a009532:	b108      	cbz	r0, 1a009538 <_svfprintf_r+0x16d8>
1a009534:	2301      	movs	r3, #1
1a009536:	9322      	str	r3, [sp, #136]	; 0x88
1a009538:	4bb6      	ldr	r3, [pc, #728]	; (1a009814 <_svfprintf_r+0x19b4>)
1a00953a:	930b      	str	r3, [sp, #44]	; 0x2c
1a00953c:	e9cd b80e 	strd	fp, r8, [sp, #56]	; 0x38
1a009540:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
1a009544:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a009548:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
1a00954c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a009550:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a009554:	46b2      	mov	sl, r6
1a009556:	960c      	str	r6, [sp, #48]	; 0x30
1a009558:	e003      	b.n	1a009562 <_svfprintf_r+0x1702>
1a00955a:	f7fd fa55 	bl	1a006a08 <__aeabi_dcmpeq>
1a00955e:	bb20      	cbnz	r0, 1a0095aa <_svfprintf_r+0x174a>
1a009560:	46ba      	mov	sl, r7
1a009562:	2200      	movs	r2, #0
1a009564:	4bac      	ldr	r3, [pc, #688]	; (1a009818 <_svfprintf_r+0x19b8>)
1a009566:	4640      	mov	r0, r8
1a009568:	4649      	mov	r1, r9
1a00956a:	f7fc ffe5 	bl	1a006538 <__aeabi_dmul>
1a00956e:	4689      	mov	r9, r1
1a009570:	4680      	mov	r8, r0
1a009572:	f7fd fa91 	bl	1a006a98 <__aeabi_d2iz>
1a009576:	4606      	mov	r6, r0
1a009578:	f7fc ff74 	bl	1a006464 <__aeabi_i2d>
1a00957c:	4602      	mov	r2, r0
1a00957e:	460b      	mov	r3, r1
1a009580:	4640      	mov	r0, r8
1a009582:	4649      	mov	r1, r9
1a009584:	f7fc fe20 	bl	1a0061c8 <__aeabi_dsub>
1a009588:	4657      	mov	r7, sl
1a00958a:	f81b 4006 	ldrb.w	r4, [fp, r6]
1a00958e:	f807 4b01 	strb.w	r4, [r7], #1
1a009592:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a009596:	462c      	mov	r4, r5
1a009598:	4680      	mov	r8, r0
1a00959a:	4689      	mov	r9, r1
1a00959c:	f04f 0200 	mov.w	r2, #0
1a0095a0:	f04f 0300 	mov.w	r3, #0
1a0095a4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a0095a8:	d1d7      	bne.n	1a00955a <_svfprintf_r+0x16fa>
1a0095aa:	4640      	mov	r0, r8
1a0095ac:	4649      	mov	r1, r9
1a0095ae:	2200      	movs	r2, #0
1a0095b0:	4b9a      	ldr	r3, [pc, #616]	; (1a00981c <_svfprintf_r+0x19bc>)
1a0095b2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1a0095b6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
1a0095ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a0095be:	4635      	mov	r5, r6
1a0095c0:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
1a0095c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a0095c6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a0095ca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0095ce:	f7fd fa43 	bl	1a006a58 <__aeabi_dcmpgt>
1a0095d2:	2800      	cmp	r0, #0
1a0095d4:	d13f      	bne.n	1a009656 <_svfprintf_r+0x17f6>
1a0095d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a0095da:	2200      	movs	r2, #0
1a0095dc:	4b8f      	ldr	r3, [pc, #572]	; (1a00981c <_svfprintf_r+0x19bc>)
1a0095de:	f7fd fa13 	bl	1a006a08 <__aeabi_dcmpeq>
1a0095e2:	b108      	cbz	r0, 1a0095e8 <_svfprintf_r+0x1788>
1a0095e4:	07e9      	lsls	r1, r5, #31
1a0095e6:	d436      	bmi.n	1a009656 <_svfprintf_r+0x17f6>
1a0095e8:	2c00      	cmp	r4, #0
1a0095ea:	f6ff abb7 	blt.w	1a008d5c <_svfprintf_r+0xefc>
1a0095ee:	1c63      	adds	r3, r4, #1
1a0095f0:	443b      	add	r3, r7
1a0095f2:	2230      	movs	r2, #48	; 0x30
1a0095f4:	f807 2b01 	strb.w	r2, [r7], #1
1a0095f8:	42bb      	cmp	r3, r7
1a0095fa:	d1fb      	bne.n	1a0095f4 <_svfprintf_r+0x1794>
1a0095fc:	f7ff bbae 	b.w	1a008d5c <_svfprintf_r+0xefc>
1a009600:	9b02      	ldr	r3, [sp, #8]
1a009602:	930a      	str	r3, [sp, #40]	; 0x28
1a009604:	2300      	movs	r3, #0
1a009606:	9308      	str	r3, [sp, #32]
1a009608:	9202      	str	r2, [sp, #8]
1a00960a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a00960e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a009612:	931d      	str	r3, [sp, #116]	; 0x74
1a009614:	232d      	movs	r3, #45	; 0x2d
1a009616:	911c      	str	r1, [sp, #112]	; 0x70
1a009618:	931e      	str	r3, [sp, #120]	; 0x78
1a00961a:	e770      	b.n	1a0094fe <_svfprintf_r+0x169e>
1a00961c:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a009620:	189f      	adds	r7, r3, r2
1a009622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a009624:	2b00      	cmp	r3, #0
1a009626:	f340 80d1 	ble.w	1a0097cc <_svfprintf_r+0x196c>
1a00962a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00962e:	e730      	b.n	1a009492 <_svfprintf_r+0x1632>
1a009630:	aa28      	add	r2, sp, #160	; 0xa0
1a009632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a009636:	f003 ff33 	bl	1a00d4a0 <__ssprint_r>
1a00963a:	2800      	cmp	r0, #0
1a00963c:	f47e acef 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a009640:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a009642:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a009644:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a009646:	1ad3      	subs	r3, r2, r3
1a009648:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00964c:	f7ff ba79 	b.w	1a008b42 <_svfprintf_r+0xce2>
1a009650:	eb06 040a 	add.w	r4, r6, sl
1a009654:	e6f9      	b.n	1a00944a <_svfprintf_r+0x15ea>
1a009656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a009658:	9326      	str	r3, [sp, #152]	; 0x98
1a00965a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00965c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
1a009660:	7bd9      	ldrb	r1, [r3, #15]
1a009662:	4291      	cmp	r1, r2
1a009664:	463b      	mov	r3, r7
1a009666:	d109      	bne.n	1a00967c <_svfprintf_r+0x181c>
1a009668:	2030      	movs	r0, #48	; 0x30
1a00966a:	f803 0c01 	strb.w	r0, [r3, #-1]
1a00966e:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a009670:	1e5a      	subs	r2, r3, #1
1a009672:	9226      	str	r2, [sp, #152]	; 0x98
1a009674:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a009678:	4291      	cmp	r1, r2
1a00967a:	d0f6      	beq.n	1a00966a <_svfprintf_r+0x180a>
1a00967c:	2a39      	cmp	r2, #57	; 0x39
1a00967e:	bf0b      	itete	eq
1a009680:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a009682:	3201      	addne	r2, #1
1a009684:	7a92      	ldrbeq	r2, [r2, #10]
1a009686:	b2d2      	uxtbne	r2, r2
1a009688:	f803 2c01 	strb.w	r2, [r3, #-1]
1a00968c:	f7ff bb66 	b.w	1a008d5c <_svfprintf_r+0xefc>
1a009690:	f10a 0101 	add.w	r1, sl, #1
1a009694:	9806      	ldr	r0, [sp, #24]
1a009696:	f7fd fee5 	bl	1a007464 <_malloc_r>
1a00969a:	4606      	mov	r6, r0
1a00969c:	2800      	cmp	r0, #0
1a00969e:	f000 80ed 	beq.w	1a00987c <_svfprintf_r+0x1a1c>
1a0096a2:	9008      	str	r0, [sp, #32]
1a0096a4:	e71a      	b.n	1a0094dc <_svfprintf_r+0x167c>
1a0096a6:	4621      	mov	r1, r4
1a0096a8:	461c      	mov	r4, r3
1a0096aa:	460b      	mov	r3, r1
1a0096ac:	3201      	adds	r2, #1
1a0096ae:	442c      	add	r4, r5
1a0096b0:	2a07      	cmp	r2, #7
1a0096b2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0096b6:	e9c9 3500 	strd	r3, r5, [r9]
1a0096ba:	f77f ad13 	ble.w	1a0090e4 <_svfprintf_r+0x1284>
1a0096be:	aa28      	add	r2, sp, #160	; 0xa0
1a0096c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0096c4:	f003 feec 	bl	1a00d4a0 <__ssprint_r>
1a0096c8:	2800      	cmp	r0, #0
1a0096ca:	f47e aca8 	bne.w	1a00801e <_svfprintf_r+0x1be>
1a0096ce:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0096d2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0096d6:	e507      	b.n	1a0090e8 <_svfprintf_r+0x1288>
1a0096d8:	f10a 0401 	add.w	r4, sl, #1
1a0096dc:	a926      	add	r1, sp, #152	; 0x98
1a0096de:	ab23      	add	r3, sp, #140	; 0x8c
1a0096e0:	e9cd 3100 	strd	r3, r1, [sp]
1a0096e4:	4622      	mov	r2, r4
1a0096e6:	ab22      	add	r3, sp, #136	; 0x88
1a0096e8:	2102      	movs	r1, #2
1a0096ea:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0096ee:	9806      	ldr	r0, [sp, #24]
1a0096f0:	f001 ffbe 	bl	1a00b670 <_dtoa_r>
1a0096f4:	4606      	mov	r6, r0
1a0096f6:	4434      	add	r4, r6
1a0096f8:	e6a7      	b.n	1a00944a <_svfprintf_r+0x15ea>
1a0096fa:	2330      	movs	r3, #48	; 0x30
1a0096fc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a009700:	2378      	movs	r3, #120	; 0x78
1a009702:	e6de      	b.n	1a0094c2 <_svfprintf_r+0x1662>
1a009704:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a009706:	e636      	b.n	1a009376 <_svfprintf_r+0x1516>
1a009708:	2900      	cmp	r1, #0
1a00970a:	f040 8098 	bne.w	1a00983e <_svfprintf_r+0x19de>
1a00970e:	2330      	movs	r3, #48	; 0x30
1a009710:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a009714:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a009718:	3230      	adds	r2, #48	; 0x30
1a00971a:	f803 2b01 	strb.w	r2, [r3], #1
1a00971e:	aa24      	add	r2, sp, #144	; 0x90
1a009720:	1a9b      	subs	r3, r3, r2
1a009722:	9316      	str	r3, [sp, #88]	; 0x58
1a009724:	f7ff bb73 	b.w	1a008e0e <_svfprintf_r+0xfae>
1a009728:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00972a:	4e3d      	ldr	r6, [pc, #244]	; (1a009820 <_svfprintf_r+0x19c0>)
1a00972c:	2b00      	cmp	r3, #0
1a00972e:	bfb6      	itet	lt
1a009730:	222d      	movlt	r2, #45	; 0x2d
1a009732:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a009736:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a00973a:	4b3a      	ldr	r3, [pc, #232]	; (1a009824 <_svfprintf_r+0x19c4>)
1a00973c:	f7fe bf09 	b.w	1a008552 <_svfprintf_r+0x6f2>
1a009740:	a822      	add	r0, sp, #136	; 0x88
1a009742:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a009746:	f003 fe3b 	bl	1a00d3c0 <frexp>
1a00974a:	2200      	movs	r2, #0
1a00974c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a009750:	ec51 0b10 	vmov	r0, r1, d0
1a009754:	f7fc fef0 	bl	1a006538 <__aeabi_dmul>
1a009758:	2200      	movs	r2, #0
1a00975a:	2300      	movs	r3, #0
1a00975c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a009760:	f7fd f952 	bl	1a006a08 <__aeabi_dcmpeq>
1a009764:	b108      	cbz	r0, 1a00976a <_svfprintf_r+0x190a>
1a009766:	2301      	movs	r3, #1
1a009768:	9322      	str	r3, [sp, #136]	; 0x88
1a00976a:	4b2f      	ldr	r3, [pc, #188]	; (1a009828 <_svfprintf_r+0x19c8>)
1a00976c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00976e:	e6e5      	b.n	1a00953c <_svfprintf_r+0x16dc>
1a009770:	f04f 0867 	mov.w	r8, #103	; 0x67
1a009774:	9818      	ldr	r0, [sp, #96]	; 0x60
1a009776:	2200      	movs	r2, #0
1a009778:	920c      	str	r2, [sp, #48]	; 0x30
1a00977a:	920f      	str	r2, [sp, #60]	; 0x3c
1a00977c:	7803      	ldrb	r3, [r0, #0]
1a00977e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a009780:	2bff      	cmp	r3, #255	; 0xff
1a009782:	d00c      	beq.n	1a00979e <_svfprintf_r+0x193e>
1a009784:	4293      	cmp	r3, r2
1a009786:	da0a      	bge.n	1a00979e <_svfprintf_r+0x193e>
1a009788:	7841      	ldrb	r1, [r0, #1]
1a00978a:	1ad2      	subs	r2, r2, r3
1a00978c:	b1a1      	cbz	r1, 1a0097b8 <_svfprintf_r+0x1958>
1a00978e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a009790:	3301      	adds	r3, #1
1a009792:	930f      	str	r3, [sp, #60]	; 0x3c
1a009794:	460b      	mov	r3, r1
1a009796:	2bff      	cmp	r3, #255	; 0xff
1a009798:	f100 0001 	add.w	r0, r0, #1
1a00979c:	d1f2      	bne.n	1a009784 <_svfprintf_r+0x1924>
1a00979e:	920e      	str	r2, [sp, #56]	; 0x38
1a0097a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0097a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0097a4:	9018      	str	r0, [sp, #96]	; 0x60
1a0097a6:	4413      	add	r3, r2
1a0097a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a0097aa:	fb02 7703 	mla	r7, r2, r3, r7
1a0097ae:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a0097b2:	9303      	str	r3, [sp, #12]
1a0097b4:	f7ff bb41 	b.w	1a008e3a <_svfprintf_r+0xfda>
1a0097b8:	990c      	ldr	r1, [sp, #48]	; 0x30
1a0097ba:	3101      	adds	r1, #1
1a0097bc:	910c      	str	r1, [sp, #48]	; 0x30
1a0097be:	e7df      	b.n	1a009780 <_svfprintf_r+0x1920>
1a0097c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0097c2:	18d7      	adds	r7, r2, r3
1a0097c4:	4457      	add	r7, sl
1a0097c6:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0097ca:	e662      	b.n	1a009492 <_svfprintf_r+0x1632>
1a0097cc:	f1c3 0301 	rsb	r3, r3, #1
1a0097d0:	441f      	add	r7, r3
1a0097d2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a0097d6:	9303      	str	r3, [sp, #12]
1a0097d8:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0097dc:	e5d7      	b.n	1a00938e <_svfprintf_r+0x152e>
1a0097de:	2200      	movs	r2, #0
1a0097e0:	2300      	movs	r3, #0
1a0097e2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a0097e6:	f7fd f90f 	bl	1a006a08 <__aeabi_dcmpeq>
1a0097ea:	2800      	cmp	r0, #0
1a0097ec:	f47f ae2a 	bne.w	1a009444 <_svfprintf_r+0x15e4>
1a0097f0:	f1ca 0301 	rsb	r3, sl, #1
1a0097f4:	9322      	str	r3, [sp, #136]	; 0x88
1a0097f6:	e626      	b.n	1a009446 <_svfprintf_r+0x15e6>
1a0097f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0097fa:	07db      	lsls	r3, r3, #31
1a0097fc:	f57f ab10 	bpl.w	1a008e20 <_svfprintf_r+0xfc0>
1a009800:	f7ff bb0c 	b.w	1a008e1c <_svfprintf_r+0xfbc>
1a009804:	b993      	cbnz	r3, 1a00982c <_svfprintf_r+0x19cc>
1a009806:	2301      	movs	r3, #1
1a009808:	9303      	str	r3, [sp, #12]
1a00980a:	461f      	mov	r7, r3
1a00980c:	f04f 0866 	mov.w	r8, #102	; 0x66
1a009810:	e5bd      	b.n	1a00938e <_svfprintf_r+0x152e>
1a009812:	bf00      	nop
1a009814:	1a00eafc 	.word	0x1a00eafc
1a009818:	40300000 	.word	0x40300000
1a00981c:	3fe00000 	.word	0x3fe00000
1a009820:	1a00eae0 	.word	0x1a00eae0
1a009824:	1a00eae4 	.word	0x1a00eae4
1a009828:	1a00eae8 	.word	0x1a00eae8
1a00982c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00982e:	1c5f      	adds	r7, r3, #1
1a009830:	4457      	add	r7, sl
1a009832:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a009836:	9303      	str	r3, [sp, #12]
1a009838:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00983c:	e5a7      	b.n	1a00938e <_svfprintf_r+0x152e>
1a00983e:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a009842:	e769      	b.n	1a009718 <_svfprintf_r+0x18b8>
1a009844:	464a      	mov	r2, r9
1a009846:	e4e1      	b.n	1a00920c <_svfprintf_r+0x13ac>
1a009848:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00984a:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a00984e:	f853 0b04 	ldr.w	r0, [r3], #4
1a009852:	9309      	str	r3, [sp, #36]	; 0x24
1a009854:	4693      	mov	fp, r2
1a009856:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
1a00985a:	f7fe bb61 	b.w	1a007f20 <_svfprintf_r+0xc0>
1a00985e:	9a06      	ldr	r2, [sp, #24]
1a009860:	230c      	movs	r3, #12
1a009862:	6013      	str	r3, [r2, #0]
1a009864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a009868:	9304      	str	r3, [sp, #16]
1a00986a:	f7fe bbe7 	b.w	1a00803c <_svfprintf_r+0x1dc>
1a00986e:	4654      	mov	r4, sl
1a009870:	4434      	add	r4, r6
1a009872:	e5ea      	b.n	1a00944a <_svfprintf_r+0x15ea>
1a009874:	2302      	movs	r3, #2
1a009876:	9316      	str	r3, [sp, #88]	; 0x58
1a009878:	f7ff bac9 	b.w	1a008e0e <_svfprintf_r+0xfae>
1a00987c:	9a07      	ldr	r2, [sp, #28]
1a00987e:	8993      	ldrh	r3, [r2, #12]
1a009880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009884:	8193      	strh	r3, [r2, #12]
1a009886:	f7fe bbd2 	b.w	1a00802e <_svfprintf_r+0x1ce>
1a00988a:	461f      	mov	r7, r3
1a00988c:	f7ff ba14 	b.w	1a008cb8 <_svfprintf_r+0xe58>
1a009890:	461f      	mov	r7, r3
1a009892:	f7ff baeb 	b.w	1a008e6c <_svfprintf_r+0x100c>
1a009896:	461f      	mov	r7, r3
1a009898:	f7ff bada 	b.w	1a008e50 <_svfprintf_r+0xff0>
1a00989c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0098a0 <_vfprintf_r>:
1a0098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0098a4:	b0d5      	sub	sp, #340	; 0x154
1a0098a6:	461c      	mov	r4, r3
1a0098a8:	4689      	mov	r9, r1
1a0098aa:	4617      	mov	r7, r2
1a0098ac:	4605      	mov	r5, r0
1a0098ae:	9005      	str	r0, [sp, #20]
1a0098b0:	f002 ff8c 	bl	1a00c7cc <_localeconv_r>
1a0098b4:	6803      	ldr	r3, [r0, #0]
1a0098b6:	9315      	str	r3, [sp, #84]	; 0x54
1a0098b8:	4618      	mov	r0, r3
1a0098ba:	f7fe fa61 	bl	1a007d80 <strlen>
1a0098be:	9408      	str	r4, [sp, #32]
1a0098c0:	9013      	str	r0, [sp, #76]	; 0x4c
1a0098c2:	b11d      	cbz	r5, 1a0098cc <_vfprintf_r+0x2c>
1a0098c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a0098c6:	2b00      	cmp	r3, #0
1a0098c8:	f000 8411 	beq.w	1a00a0ee <_vfprintf_r+0x84e>
1a0098cc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0098d0:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a0098d4:	07cd      	lsls	r5, r1, #31
1a0098d6:	b293      	uxth	r3, r2
1a0098d8:	d402      	bmi.n	1a0098e0 <_vfprintf_r+0x40>
1a0098da:	0598      	lsls	r0, r3, #22
1a0098dc:	f140 8754 	bpl.w	1a00a788 <_vfprintf_r+0xee8>
1a0098e0:	0499      	lsls	r1, r3, #18
1a0098e2:	d40a      	bmi.n	1a0098fa <_vfprintf_r+0x5a>
1a0098e4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a0098e8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a0098ec:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0098f0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0098f4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a0098f8:	b29b      	uxth	r3, r3
1a0098fa:	071a      	lsls	r2, r3, #28
1a0098fc:	f140 80bf 	bpl.w	1a009a7e <_vfprintf_r+0x1de>
1a009900:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a009904:	2a00      	cmp	r2, #0
1a009906:	f000 80ba 	beq.w	1a009a7e <_vfprintf_r+0x1de>
1a00990a:	f003 021a 	and.w	r2, r3, #26
1a00990e:	2a0a      	cmp	r2, #10
1a009910:	f000 80c3 	beq.w	1a009a9a <_vfprintf_r+0x1fa>
1a009914:	2300      	movs	r3, #0
1a009916:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a009b88 <_vfprintf_r+0x2e8>
1a00991a:	9312      	str	r3, [sp, #72]	; 0x48
1a00991c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a009920:	9314      	str	r3, [sp, #80]	; 0x50
1a009922:	9316      	str	r3, [sp, #88]	; 0x58
1a009924:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a009928:	9317      	str	r3, [sp, #92]	; 0x5c
1a00992a:	9304      	str	r3, [sp, #16]
1a00992c:	ab2b      	add	r3, sp, #172	; 0xac
1a00992e:	9328      	str	r3, [sp, #160]	; 0xa0
1a009930:	469b      	mov	fp, r3
1a009932:	783b      	ldrb	r3, [r7, #0]
1a009934:	f8cd 901c 	str.w	r9, [sp, #28]
1a009938:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00993c:	2b00      	cmp	r3, #0
1a00993e:	f000 8267 	beq.w	1a009e10 <_vfprintf_r+0x570>
1a009942:	2b25      	cmp	r3, #37	; 0x25
1a009944:	f001 80ab 	beq.w	1a00aa9e <_vfprintf_r+0x11fe>
1a009948:	463d      	mov	r5, r7
1a00994a:	e003      	b.n	1a009954 <_vfprintf_r+0xb4>
1a00994c:	2b25      	cmp	r3, #37	; 0x25
1a00994e:	f000 80bb 	beq.w	1a009ac8 <_vfprintf_r+0x228>
1a009952:	4625      	mov	r5, r4
1a009954:	786b      	ldrb	r3, [r5, #1]
1a009956:	1c6c      	adds	r4, r5, #1
1a009958:	2b00      	cmp	r3, #0
1a00995a:	d1f7      	bne.n	1a00994c <_vfprintf_r+0xac>
1a00995c:	1be6      	subs	r6, r4, r7
1a00995e:	f000 8257 	beq.w	1a009e10 <_vfprintf_r+0x570>
1a009962:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a009966:	3301      	adds	r3, #1
1a009968:	4432      	add	r2, r6
1a00996a:	2b07      	cmp	r3, #7
1a00996c:	f8cb 7000 	str.w	r7, [fp]
1a009970:	f8cb 6004 	str.w	r6, [fp, #4]
1a009974:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a009978:	f300 80aa 	bgt.w	1a009ad0 <_vfprintf_r+0x230>
1a00997c:	f10b 0b08 	add.w	fp, fp, #8
1a009980:	9a04      	ldr	r2, [sp, #16]
1a009982:	786b      	ldrb	r3, [r5, #1]
1a009984:	4432      	add	r2, r6
1a009986:	9204      	str	r2, [sp, #16]
1a009988:	2b00      	cmp	r3, #0
1a00998a:	f000 8241 	beq.w	1a009e10 <_vfprintf_r+0x570>
1a00998e:	2300      	movs	r3, #0
1a009990:	f894 8001 	ldrb.w	r8, [r4, #1]
1a009994:	9306      	str	r3, [sp, #24]
1a009996:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a00999a:	9302      	str	r3, [sp, #8]
1a00999c:	f104 0a01 	add.w	sl, r4, #1
1a0099a0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a0099a4:	262b      	movs	r6, #43	; 0x2b
1a0099a6:	2120      	movs	r1, #32
1a0099a8:	f10a 0a01 	add.w	sl, sl, #1
1a0099ac:	f1a8 0320 	sub.w	r3, r8, #32
1a0099b0:	2b5a      	cmp	r3, #90	; 0x5a
1a0099b2:	f200 83a1 	bhi.w	1a00a0f8 <_vfprintf_r+0x858>
1a0099b6:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0099ba:	0282      	.short	0x0282
1a0099bc:	039f039f 	.word	0x039f039f
1a0099c0:	039f027b 	.word	0x039f027b
1a0099c4:	039f039f 	.word	0x039f039f
1a0099c8:	039f0301 	.word	0x039f0301
1a0099cc:	02f6039f 	.word	0x02f6039f
1a0099d0:	039f00df 	.word	0x039f00df
1a0099d4:	032b00c4 	.word	0x032b00c4
1a0099d8:	0324039f 	.word	0x0324039f
1a0099dc:	00960096 	.word	0x00960096
1a0099e0:	00960096 	.word	0x00960096
1a0099e4:	00960096 	.word	0x00960096
1a0099e8:	00960096 	.word	0x00960096
1a0099ec:	039f0096 	.word	0x039f0096
1a0099f0:	039f039f 	.word	0x039f039f
1a0099f4:	039f039f 	.word	0x039f039f
1a0099f8:	039f039f 	.word	0x039f039f
1a0099fc:	039f0345 	.word	0x039f0345
1a009a00:	016201a8 	.word	0x016201a8
1a009a04:	03450345 	.word	0x03450345
1a009a08:	039f0345 	.word	0x039f0345
1a009a0c:	039f039f 	.word	0x039f039f
1a009a10:	015b039f 	.word	0x015b039f
1a009a14:	039f039f 	.word	0x039f039f
1a009a18:	039f014e 	.word	0x039f014e
1a009a1c:	039f039f 	.word	0x039f039f
1a009a20:	039f0123 	.word	0x039f0123
1a009a24:	039f0115 	.word	0x039f0115
1a009a28:	00cb039f 	.word	0x00cb039f
1a009a2c:	039f039f 	.word	0x039f039f
1a009a30:	039f039f 	.word	0x039f039f
1a009a34:	039f039f 	.word	0x039f039f
1a009a38:	039f039f 	.word	0x039f039f
1a009a3c:	039f0345 	.word	0x039f0345
1a009a40:	00ef01a8 	.word	0x00ef01a8
1a009a44:	03450345 	.word	0x03450345
1a009a48:	02700345 	.word	0x02700345
1a009a4c:	005b00ef 	.word	0x005b00ef
1a009a50:	02eb039f 	.word	0x02eb039f
1a009a54:	02d1039f 	.word	0x02d1039f
1a009a58:	028c02bd 	.word	0x028c02bd
1a009a5c:	039f005b 	.word	0x039f005b
1a009a60:	005f0123 	.word	0x005f0123
1a009a64:	039f0387 	.word	0x039f0387
1a009a68:	00a5039f 	.word	0x00a5039f
1a009a6c:	005f039f 	.word	0x005f039f
1a009a70:	9b02      	ldr	r3, [sp, #8]
1a009a72:	f043 0320 	orr.w	r3, r3, #32
1a009a76:	9302      	str	r3, [sp, #8]
1a009a78:	f89a 8000 	ldrb.w	r8, [sl]
1a009a7c:	e794      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009a7e:	4649      	mov	r1, r9
1a009a80:	9805      	ldr	r0, [sp, #20]
1a009a82:	f001 fcf9 	bl	1a00b478 <__swsetup_r>
1a009a86:	2800      	cmp	r0, #0
1a009a88:	f041 8381 	bne.w	1a00b18e <_vfprintf_r+0x18ee>
1a009a8c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a009a90:	f003 021a 	and.w	r2, r3, #26
1a009a94:	2a0a      	cmp	r2, #10
1a009a96:	f47f af3d 	bne.w	1a009914 <_vfprintf_r+0x74>
1a009a9a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a009a9e:	2a00      	cmp	r2, #0
1a009aa0:	f6ff af38 	blt.w	1a009914 <_vfprintf_r+0x74>
1a009aa4:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a009aa8:	07d6      	lsls	r6, r2, #31
1a009aaa:	d402      	bmi.n	1a009ab2 <_vfprintf_r+0x212>
1a009aac:	059d      	lsls	r5, r3, #22
1a009aae:	f141 8190 	bpl.w	1a00add2 <_vfprintf_r+0x1532>
1a009ab2:	4623      	mov	r3, r4
1a009ab4:	463a      	mov	r2, r7
1a009ab6:	4649      	mov	r1, r9
1a009ab8:	9805      	ldr	r0, [sp, #20]
1a009aba:	f001 fc9b 	bl	1a00b3f4 <__sbprintf>
1a009abe:	9004      	str	r0, [sp, #16]
1a009ac0:	9804      	ldr	r0, [sp, #16]
1a009ac2:	b055      	add	sp, #340	; 0x154
1a009ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009ac8:	1be6      	subs	r6, r4, r7
1a009aca:	f43f af60 	beq.w	1a00998e <_vfprintf_r+0xee>
1a009ace:	e748      	b.n	1a009962 <_vfprintf_r+0xc2>
1a009ad0:	aa28      	add	r2, sp, #160	; 0xa0
1a009ad2:	9907      	ldr	r1, [sp, #28]
1a009ad4:	9805      	ldr	r0, [sp, #20]
1a009ad6:	f003 fd9b 	bl	1a00d610 <__sprint_r>
1a009ada:	2800      	cmp	r0, #0
1a009adc:	f041 8427 	bne.w	1a00b32e <_vfprintf_r+0x1a8e>
1a009ae0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a009ae4:	e74c      	b.n	1a009980 <_vfprintf_r+0xe0>
1a009ae6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a009aea:	2200      	movs	r2, #0
1a009aec:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a009af0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a009af4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a009af8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a009afc:	2b09      	cmp	r3, #9
1a009afe:	d9f5      	bls.n	1a009aec <_vfprintf_r+0x24c>
1a009b00:	9206      	str	r2, [sp, #24]
1a009b02:	e753      	b.n	1a0099ac <_vfprintf_r+0x10c>
1a009b04:	4b22      	ldr	r3, [pc, #136]	; (1a009b90 <_vfprintf_r+0x2f0>)
1a009b06:	9314      	str	r3, [sp, #80]	; 0x50
1a009b08:	9b02      	ldr	r3, [sp, #8]
1a009b0a:	069f      	lsls	r7, r3, #26
1a009b0c:	d525      	bpl.n	1a009b5a <_vfprintf_r+0x2ba>
1a009b0e:	9c08      	ldr	r4, [sp, #32]
1a009b10:	3407      	adds	r4, #7
1a009b12:	f024 0307 	bic.w	r3, r4, #7
1a009b16:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a009b1a:	9308      	str	r3, [sp, #32]
1a009b1c:	9a02      	ldr	r2, [sp, #8]
1a009b1e:	07d1      	lsls	r1, r2, #31
1a009b20:	d50a      	bpl.n	1a009b38 <_vfprintf_r+0x298>
1a009b22:	ea54 0305 	orrs.w	r3, r4, r5
1a009b26:	d007      	beq.n	1a009b38 <_vfprintf_r+0x298>
1a009b28:	2330      	movs	r3, #48	; 0x30
1a009b2a:	f042 0202 	orr.w	r2, r2, #2
1a009b2e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a009b32:	9202      	str	r2, [sp, #8]
1a009b34:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a009b38:	9b02      	ldr	r3, [sp, #8]
1a009b3a:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a009b3e:	2302      	movs	r3, #2
1a009b40:	e1d9      	b.n	1a009ef6 <_vfprintf_r+0x656>
1a009b42:	f89a 8000 	ldrb.w	r8, [sl]
1a009b46:	9b02      	ldr	r3, [sp, #8]
1a009b48:	f043 0304 	orr.w	r3, r3, #4
1a009b4c:	9302      	str	r3, [sp, #8]
1a009b4e:	e72b      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009b50:	4b10      	ldr	r3, [pc, #64]	; (1a009b94 <_vfprintf_r+0x2f4>)
1a009b52:	9314      	str	r3, [sp, #80]	; 0x50
1a009b54:	9b02      	ldr	r3, [sp, #8]
1a009b56:	069f      	lsls	r7, r3, #26
1a009b58:	d4d9      	bmi.n	1a009b0e <_vfprintf_r+0x26e>
1a009b5a:	9b08      	ldr	r3, [sp, #32]
1a009b5c:	f853 4b04 	ldr.w	r4, [r3], #4
1a009b60:	9308      	str	r3, [sp, #32]
1a009b62:	9b02      	ldr	r3, [sp, #8]
1a009b64:	06de      	lsls	r6, r3, #27
1a009b66:	f100 864f 	bmi.w	1a00a808 <_vfprintf_r+0xf68>
1a009b6a:	9b02      	ldr	r3, [sp, #8]
1a009b6c:	065d      	lsls	r5, r3, #25
1a009b6e:	f140 8647 	bpl.w	1a00a800 <_vfprintf_r+0xf60>
1a009b72:	b2a4      	uxth	r4, r4
1a009b74:	2500      	movs	r5, #0
1a009b76:	e7d1      	b.n	1a009b1c <_vfprintf_r+0x27c>
1a009b78:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a009b7c:	f89a 8000 	ldrb.w	r8, [sl]
1a009b80:	e712      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009b82:	bf00      	nop
1a009b84:	f3af 8000 	nop.w
	...
1a009b90:	1a00eae8 	.word	0x1a00eae8
1a009b94:	1a00eafc 	.word	0x1a00eafc
1a009b98:	9e02      	ldr	r6, [sp, #8]
1a009b9a:	06b0      	lsls	r0, r6, #26
1a009b9c:	f140 870b 	bpl.w	1a00a9b6 <_vfprintf_r+0x1116>
1a009ba0:	9c08      	ldr	r4, [sp, #32]
1a009ba2:	3407      	adds	r4, #7
1a009ba4:	f024 0307 	bic.w	r3, r4, #7
1a009ba8:	4619      	mov	r1, r3
1a009baa:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a009bae:	9108      	str	r1, [sp, #32]
1a009bb0:	4614      	mov	r4, r2
1a009bb2:	461d      	mov	r5, r3
1a009bb4:	2a00      	cmp	r2, #0
1a009bb6:	f173 0300 	sbcs.w	r3, r3, #0
1a009bba:	db71      	blt.n	1a009ca0 <_vfprintf_r+0x400>
1a009bbc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a009bc0:	f000 82c5 	beq.w	1a00a14e <_vfprintf_r+0x8ae>
1a009bc4:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a009bc8:	9302      	str	r3, [sp, #8]
1a009bca:	ea54 0305 	orrs.w	r3, r4, r5
1a009bce:	f040 82bd 	bne.w	1a00a14c <_vfprintf_r+0x8ac>
1a009bd2:	f1b9 0f00 	cmp.w	r9, #0
1a009bd6:	f041 810e 	bne.w	1a00adf6 <_vfprintf_r+0x1556>
1a009bda:	f04f 0900 	mov.w	r9, #0
1a009bde:	464e      	mov	r6, r9
1a009be0:	af54      	add	r7, sp, #336	; 0x150
1a009be2:	e2bf      	b.n	1a00a164 <_vfprintf_r+0x8c4>
1a009be4:	9b02      	ldr	r3, [sp, #8]
1a009be6:	069d      	lsls	r5, r3, #26
1a009be8:	f043 0610 	orr.w	r6, r3, #16
1a009bec:	f100 828f 	bmi.w	1a00a10e <_vfprintf_r+0x86e>
1a009bf0:	9b08      	ldr	r3, [sp, #32]
1a009bf2:	1d1a      	adds	r2, r3, #4
1a009bf4:	9b08      	ldr	r3, [sp, #32]
1a009bf6:	9208      	str	r2, [sp, #32]
1a009bf8:	681c      	ldr	r4, [r3, #0]
1a009bfa:	2500      	movs	r5, #0
1a009bfc:	2301      	movs	r3, #1
1a009bfe:	e17a      	b.n	1a009ef6 <_vfprintf_r+0x656>
1a009c00:	9c08      	ldr	r4, [sp, #32]
1a009c02:	f854 7b04 	ldr.w	r7, [r4], #4
1a009c06:	2500      	movs	r5, #0
1a009c08:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a009c0c:	2f00      	cmp	r7, #0
1a009c0e:	f000 8737 	beq.w	1a00aa80 <_vfprintf_r+0x11e0>
1a009c12:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a009c16:	f000 87bc 	beq.w	1a00ab92 <_vfprintf_r+0x12f2>
1a009c1a:	464a      	mov	r2, r9
1a009c1c:	4629      	mov	r1, r5
1a009c1e:	4638      	mov	r0, r7
1a009c20:	f002 fe56 	bl	1a00c8d0 <memchr>
1a009c24:	9009      	str	r0, [sp, #36]	; 0x24
1a009c26:	2800      	cmp	r0, #0
1a009c28:	f001 824a 	beq.w	1a00b0c0 <_vfprintf_r+0x1820>
1a009c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009c2e:	46a9      	mov	r9, r5
1a009c30:	1bde      	subs	r6, r3, r7
1a009c32:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a009c36:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a009c3a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a009c3e:	9408      	str	r4, [sp, #32]
1a009c40:	9303      	str	r3, [sp, #12]
1a009c42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a009c46:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a009c4a:	2a00      	cmp	r2, #0
1a009c4c:	d06f      	beq.n	1a009d2e <_vfprintf_r+0x48e>
1a009c4e:	9b03      	ldr	r3, [sp, #12]
1a009c50:	3301      	adds	r3, #1
1a009c52:	9303      	str	r3, [sp, #12]
1a009c54:	e06b      	b.n	1a009d2e <_vfprintf_r+0x48e>
1a009c56:	9b02      	ldr	r3, [sp, #8]
1a009c58:	069c      	lsls	r4, r3, #26
1a009c5a:	f043 0610 	orr.w	r6, r3, #16
1a009c5e:	f100 825f 	bmi.w	1a00a120 <_vfprintf_r+0x880>
1a009c62:	9b08      	ldr	r3, [sp, #32]
1a009c64:	1d1a      	adds	r2, r3, #4
1a009c66:	9b08      	ldr	r3, [sp, #32]
1a009c68:	9208      	str	r2, [sp, #32]
1a009c6a:	681c      	ldr	r4, [r3, #0]
1a009c6c:	2500      	movs	r5, #0
1a009c6e:	e25e      	b.n	1a00a12e <_vfprintf_r+0x88e>
1a009c70:	9b02      	ldr	r3, [sp, #8]
1a009c72:	f89a 8000 	ldrb.w	r8, [sl]
1a009c76:	f043 0308 	orr.w	r3, r3, #8
1a009c7a:	9302      	str	r3, [sp, #8]
1a009c7c:	e694      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009c7e:	9b02      	ldr	r3, [sp, #8]
1a009c80:	069c      	lsls	r4, r3, #26
1a009c82:	f043 0610 	orr.w	r6, r3, #16
1a009c86:	d48b      	bmi.n	1a009ba0 <_vfprintf_r+0x300>
1a009c88:	9b08      	ldr	r3, [sp, #32]
1a009c8a:	1d1a      	adds	r2, r3, #4
1a009c8c:	9b08      	ldr	r3, [sp, #32]
1a009c8e:	9208      	str	r2, [sp, #32]
1a009c90:	681c      	ldr	r4, [r3, #0]
1a009c92:	17e5      	asrs	r5, r4, #31
1a009c94:	4622      	mov	r2, r4
1a009c96:	462b      	mov	r3, r5
1a009c98:	2a00      	cmp	r2, #0
1a009c9a:	f173 0300 	sbcs.w	r3, r3, #0
1a009c9e:	da8d      	bge.n	1a009bbc <_vfprintf_r+0x31c>
1a009ca0:	4264      	negs	r4, r4
1a009ca2:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a009ca6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a009caa:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a009cae:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a009cb2:	f04f 0301 	mov.w	r3, #1
1a009cb6:	f040 8125 	bne.w	1a009f04 <_vfprintf_r+0x664>
1a009cba:	2b01      	cmp	r3, #1
1a009cbc:	f000 8247 	beq.w	1a00a14e <_vfprintf_r+0x8ae>
1a009cc0:	2b02      	cmp	r3, #2
1a009cc2:	f000 8479 	beq.w	1a00a5b8 <_vfprintf_r+0xd18>
1a009cc6:	a954      	add	r1, sp, #336	; 0x150
1a009cc8:	e000      	b.n	1a009ccc <_vfprintf_r+0x42c>
1a009cca:	4639      	mov	r1, r7
1a009ccc:	08e2      	lsrs	r2, r4, #3
1a009cce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a009cd2:	08e8      	lsrs	r0, r5, #3
1a009cd4:	f004 0307 	and.w	r3, r4, #7
1a009cd8:	4605      	mov	r5, r0
1a009cda:	4614      	mov	r4, r2
1a009cdc:	3330      	adds	r3, #48	; 0x30
1a009cde:	ea54 0205 	orrs.w	r2, r4, r5
1a009ce2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a009ce6:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a009cea:	d1ee      	bne.n	1a009cca <_vfprintf_r+0x42a>
1a009cec:	07f2      	lsls	r2, r6, #31
1a009cee:	f140 8288 	bpl.w	1a00a202 <_vfprintf_r+0x962>
1a009cf2:	2b30      	cmp	r3, #48	; 0x30
1a009cf4:	f000 8285 	beq.w	1a00a202 <_vfprintf_r+0x962>
1a009cf8:	2330      	movs	r3, #48	; 0x30
1a009cfa:	3902      	subs	r1, #2
1a009cfc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a009d00:	ab54      	add	r3, sp, #336	; 0x150
1a009d02:	9602      	str	r6, [sp, #8]
1a009d04:	460f      	mov	r7, r1
1a009d06:	1a5e      	subs	r6, r3, r1
1a009d08:	e22c      	b.n	1a00a164 <_vfprintf_r+0x8c4>
1a009d0a:	9c08      	ldr	r4, [sp, #32]
1a009d0c:	2300      	movs	r3, #0
1a009d0e:	f854 2b04 	ldr.w	r2, [r4], #4
1a009d12:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a009d16:	2601      	movs	r6, #1
1a009d18:	461a      	mov	r2, r3
1a009d1a:	9603      	str	r6, [sp, #12]
1a009d1c:	9408      	str	r4, [sp, #32]
1a009d1e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a009d22:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a009d26:	9209      	str	r2, [sp, #36]	; 0x24
1a009d28:	4691      	mov	r9, r2
1a009d2a:	920c      	str	r2, [sp, #48]	; 0x30
1a009d2c:	af3b      	add	r7, sp, #236	; 0xec
1a009d2e:	9b02      	ldr	r3, [sp, #8]
1a009d30:	f013 0302 	ands.w	r3, r3, #2
1a009d34:	930a      	str	r3, [sp, #40]	; 0x28
1a009d36:	d002      	beq.n	1a009d3e <_vfprintf_r+0x49e>
1a009d38:	9b03      	ldr	r3, [sp, #12]
1a009d3a:	3302      	adds	r3, #2
1a009d3c:	9303      	str	r3, [sp, #12]
1a009d3e:	9b02      	ldr	r3, [sp, #8]
1a009d40:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a009d42:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a009d46:	930b      	str	r3, [sp, #44]	; 0x2c
1a009d48:	d104      	bne.n	1a009d54 <_vfprintf_r+0x4b4>
1a009d4a:	9b06      	ldr	r3, [sp, #24]
1a009d4c:	9903      	ldr	r1, [sp, #12]
1a009d4e:	1a5d      	subs	r5, r3, r1
1a009d50:	2d00      	cmp	r5, #0
1a009d52:	dc66      	bgt.n	1a009e22 <_vfprintf_r+0x582>
1a009d54:	b172      	cbz	r2, 1a009d74 <_vfprintf_r+0x4d4>
1a009d56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a009d58:	3201      	adds	r2, #1
1a009d5a:	3401      	adds	r4, #1
1a009d5c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a009d60:	2101      	movs	r1, #1
1a009d62:	2a07      	cmp	r2, #7
1a009d64:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a009d68:	e9cb 0100 	strd	r0, r1, [fp]
1a009d6c:	f300 83b1 	bgt.w	1a00a4d2 <_vfprintf_r+0xc32>
1a009d70:	f10b 0b08 	add.w	fp, fp, #8
1a009d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009d76:	b16b      	cbz	r3, 1a009d94 <_vfprintf_r+0x4f4>
1a009d78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a009d7a:	3301      	adds	r3, #1
1a009d7c:	3402      	adds	r4, #2
1a009d7e:	a921      	add	r1, sp, #132	; 0x84
1a009d80:	2202      	movs	r2, #2
1a009d82:	2b07      	cmp	r3, #7
1a009d84:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a009d88:	e9cb 1200 	strd	r1, r2, [fp]
1a009d8c:	f300 83ad 	bgt.w	1a00a4ea <_vfprintf_r+0xc4a>
1a009d90:	f10b 0b08 	add.w	fp, fp, #8
1a009d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a009d96:	2b80      	cmp	r3, #128	; 0x80
1a009d98:	f000 8295 	beq.w	1a00a2c6 <_vfprintf_r+0xa26>
1a009d9c:	eba9 0506 	sub.w	r5, r9, r6
1a009da0:	2d00      	cmp	r5, #0
1a009da2:	f300 82d3 	bgt.w	1a00a34c <_vfprintf_r+0xaac>
1a009da6:	9b02      	ldr	r3, [sp, #8]
1a009da8:	05db      	lsls	r3, r3, #23
1a009daa:	f100 822e 	bmi.w	1a00a20a <_vfprintf_r+0x96a>
1a009dae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a009db0:	f8cb 7000 	str.w	r7, [fp]
1a009db4:	3301      	adds	r3, #1
1a009db6:	4434      	add	r4, r6
1a009db8:	2b07      	cmp	r3, #7
1a009dba:	942a      	str	r4, [sp, #168]	; 0xa8
1a009dbc:	f8cb 6004 	str.w	r6, [fp, #4]
1a009dc0:	9329      	str	r3, [sp, #164]	; 0xa4
1a009dc2:	f300 8325 	bgt.w	1a00a410 <_vfprintf_r+0xb70>
1a009dc6:	f10b 0b08 	add.w	fp, fp, #8
1a009dca:	9b02      	ldr	r3, [sp, #8]
1a009dcc:	075d      	lsls	r5, r3, #29
1a009dce:	d505      	bpl.n	1a009ddc <_vfprintf_r+0x53c>
1a009dd0:	9b06      	ldr	r3, [sp, #24]
1a009dd2:	9a03      	ldr	r2, [sp, #12]
1a009dd4:	1a9d      	subs	r5, r3, r2
1a009dd6:	2d00      	cmp	r5, #0
1a009dd8:	f300 83ae 	bgt.w	1a00a538 <_vfprintf_r+0xc98>
1a009ddc:	9b04      	ldr	r3, [sp, #16]
1a009dde:	9a06      	ldr	r2, [sp, #24]
1a009de0:	9903      	ldr	r1, [sp, #12]
1a009de2:	428a      	cmp	r2, r1
1a009de4:	bfac      	ite	ge
1a009de6:	189b      	addge	r3, r3, r2
1a009de8:	185b      	addlt	r3, r3, r1
1a009dea:	9304      	str	r3, [sp, #16]
1a009dec:	2c00      	cmp	r4, #0
1a009dee:	f040 82e7 	bne.w	1a00a3c0 <_vfprintf_r+0xb20>
1a009df2:	2300      	movs	r3, #0
1a009df4:	9329      	str	r3, [sp, #164]	; 0xa4
1a009df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009df8:	b11b      	cbz	r3, 1a009e02 <_vfprintf_r+0x562>
1a009dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
1a009dfc:	9805      	ldr	r0, [sp, #20]
1a009dfe:	f7fd f9e5 	bl	1a0071cc <_free_r>
1a009e02:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a009e06:	4657      	mov	r7, sl
1a009e08:	783b      	ldrb	r3, [r7, #0]
1a009e0a:	2b00      	cmp	r3, #0
1a009e0c:	f47f ad99 	bne.w	1a009942 <_vfprintf_r+0xa2>
1a009e10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a009e12:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a009e16:	2b00      	cmp	r3, #0
1a009e18:	f040 86f5 	bne.w	1a00ac06 <_vfprintf_r+0x1366>
1a009e1c:	2300      	movs	r3, #0
1a009e1e:	9329      	str	r3, [sp, #164]	; 0xa4
1a009e20:	e375      	b.n	1a00a50e <_vfprintf_r+0xc6e>
1a009e22:	2d10      	cmp	r5, #16
1a009e24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a009e26:	dd29      	ble.n	1a009e7c <_vfprintf_r+0x5dc>
1a009e28:	4659      	mov	r1, fp
1a009e2a:	4620      	mov	r0, r4
1a009e2c:	961e      	str	r6, [sp, #120]	; 0x78
1a009e2e:	2310      	movs	r3, #16
1a009e30:	9c05      	ldr	r4, [sp, #20]
1a009e32:	9e07      	ldr	r6, [sp, #28]
1a009e34:	46bb      	mov	fp, r7
1a009e36:	e004      	b.n	1a009e42 <_vfprintf_r+0x5a2>
1a009e38:	3d10      	subs	r5, #16
1a009e3a:	2d10      	cmp	r5, #16
1a009e3c:	f101 0108 	add.w	r1, r1, #8
1a009e40:	dd18      	ble.n	1a009e74 <_vfprintf_r+0x5d4>
1a009e42:	3201      	adds	r2, #1
1a009e44:	4fbc      	ldr	r7, [pc, #752]	; (1a00a138 <_vfprintf_r+0x898>)
1a009e46:	3010      	adds	r0, #16
1a009e48:	2a07      	cmp	r2, #7
1a009e4a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a009e4e:	e9c1 7300 	strd	r7, r3, [r1]
1a009e52:	ddf1      	ble.n	1a009e38 <_vfprintf_r+0x598>
1a009e54:	aa28      	add	r2, sp, #160	; 0xa0
1a009e56:	4631      	mov	r1, r6
1a009e58:	4620      	mov	r0, r4
1a009e5a:	f003 fbd9 	bl	1a00d610 <__sprint_r>
1a009e5e:	2800      	cmp	r0, #0
1a009e60:	f040 834f 	bne.w	1a00a502 <_vfprintf_r+0xc62>
1a009e64:	3d10      	subs	r5, #16
1a009e66:	2d10      	cmp	r5, #16
1a009e68:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a009e6c:	a92b      	add	r1, sp, #172	; 0xac
1a009e6e:	f04f 0310 	mov.w	r3, #16
1a009e72:	dce6      	bgt.n	1a009e42 <_vfprintf_r+0x5a2>
1a009e74:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a009e76:	465f      	mov	r7, fp
1a009e78:	4604      	mov	r4, r0
1a009e7a:	468b      	mov	fp, r1
1a009e7c:	3201      	adds	r2, #1
1a009e7e:	4bae      	ldr	r3, [pc, #696]	; (1a00a138 <_vfprintf_r+0x898>)
1a009e80:	442c      	add	r4, r5
1a009e82:	2a07      	cmp	r2, #7
1a009e84:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a009e88:	e9cb 3500 	strd	r3, r5, [fp]
1a009e8c:	f300 862a 	bgt.w	1a00aae4 <_vfprintf_r+0x1244>
1a009e90:	f10b 0b08 	add.w	fp, fp, #8
1a009e94:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a009e98:	e75c      	b.n	1a009d54 <_vfprintf_r+0x4b4>
1a009e9a:	f89a 8000 	ldrb.w	r8, [sl]
1a009e9e:	9b02      	ldr	r3, [sp, #8]
1a009ea0:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a009ea4:	f000 85e3 	beq.w	1a00aa6e <_vfprintf_r+0x11ce>
1a009ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009eac:	9302      	str	r3, [sp, #8]
1a009eae:	e57b      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009eb0:	9b02      	ldr	r3, [sp, #8]
1a009eb2:	f89a 8000 	ldrb.w	r8, [sl]
1a009eb6:	f043 0301 	orr.w	r3, r3, #1
1a009eba:	9302      	str	r3, [sp, #8]
1a009ebc:	e574      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009ebe:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a009ec2:	f89a 8000 	ldrb.w	r8, [sl]
1a009ec6:	2b00      	cmp	r3, #0
1a009ec8:	f47f ad6e 	bne.w	1a0099a8 <_vfprintf_r+0x108>
1a009ecc:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a009ed0:	e56a      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009ed2:	9c08      	ldr	r4, [sp, #32]
1a009ed4:	f647 0230 	movw	r2, #30768	; 0x7830
1a009ed8:	f854 3b04 	ldr.w	r3, [r4], #4
1a009edc:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a009ee0:	9a02      	ldr	r2, [sp, #8]
1a009ee2:	9408      	str	r4, [sp, #32]
1a009ee4:	461c      	mov	r4, r3
1a009ee6:	4b95      	ldr	r3, [pc, #596]	; (1a00a13c <_vfprintf_r+0x89c>)
1a009ee8:	9314      	str	r3, [sp, #80]	; 0x50
1a009eea:	f042 0602 	orr.w	r6, r2, #2
1a009eee:	2500      	movs	r5, #0
1a009ef0:	2302      	movs	r3, #2
1a009ef2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a009ef6:	2200      	movs	r2, #0
1a009ef8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a009efc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a009f00:	f43f aedb 	beq.w	1a009cba <_vfprintf_r+0x41a>
1a009f04:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a009f08:	9202      	str	r2, [sp, #8]
1a009f0a:	ea54 0205 	orrs.w	r2, r4, r5
1a009f0e:	f040 82dd 	bne.w	1a00a4cc <_vfprintf_r+0xc2c>
1a009f12:	f1b9 0f00 	cmp.w	r9, #0
1a009f16:	f040 8348 	bne.w	1a00a5aa <_vfprintf_r+0xd0a>
1a009f1a:	2b00      	cmp	r3, #0
1a009f1c:	f47f ae5d 	bne.w	1a009bda <_vfprintf_r+0x33a>
1a009f20:	f016 0601 	ands.w	r6, r6, #1
1a009f24:	f000 846a 	beq.w	1a00a7fc <_vfprintf_r+0xf5c>
1a009f28:	2330      	movs	r3, #48	; 0x30
1a009f2a:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a009f2e:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a009f32:	e117      	b.n	1a00a164 <_vfprintf_r+0x8c4>
1a009f34:	9e02      	ldr	r6, [sp, #8]
1a009f36:	06b0      	lsls	r0, r6, #26
1a009f38:	f100 80f2 	bmi.w	1a00a120 <_vfprintf_r+0x880>
1a009f3c:	9b02      	ldr	r3, [sp, #8]
1a009f3e:	9a08      	ldr	r2, [sp, #32]
1a009f40:	06d9      	lsls	r1, r3, #27
1a009f42:	f852 4b04 	ldr.w	r4, [r2], #4
1a009f46:	f101 8243 	bmi.w	1a00b3d0 <_vfprintf_r+0x1b30>
1a009f4a:	9e02      	ldr	r6, [sp, #8]
1a009f4c:	4633      	mov	r3, r6
1a009f4e:	065b      	lsls	r3, r3, #25
1a009f50:	f140 8635 	bpl.w	1a00abbe <_vfprintf_r+0x131e>
1a009f54:	9208      	str	r2, [sp, #32]
1a009f56:	b2a4      	uxth	r4, r4
1a009f58:	2500      	movs	r5, #0
1a009f5a:	e0e8      	b.n	1a00a12e <_vfprintf_r+0x88e>
1a009f5c:	9902      	ldr	r1, [sp, #8]
1a009f5e:	9a08      	ldr	r2, [sp, #32]
1a009f60:	0689      	lsls	r1, r1, #26
1a009f62:	f102 0304 	add.w	r3, r2, #4
1a009f66:	f100 8452 	bmi.w	1a00a80e <_vfprintf_r+0xf6e>
1a009f6a:	9a02      	ldr	r2, [sp, #8]
1a009f6c:	06d7      	lsls	r7, r2, #27
1a009f6e:	f100 85e1 	bmi.w	1a00ab34 <_vfprintf_r+0x1294>
1a009f72:	9a02      	ldr	r2, [sp, #8]
1a009f74:	0656      	lsls	r6, r2, #25
1a009f76:	f100 8664 	bmi.w	1a00ac42 <_vfprintf_r+0x13a2>
1a009f7a:	9a02      	ldr	r2, [sp, #8]
1a009f7c:	0595      	lsls	r5, r2, #22
1a009f7e:	f140 85d9 	bpl.w	1a00ab34 <_vfprintf_r+0x1294>
1a009f82:	9a08      	ldr	r2, [sp, #32]
1a009f84:	9308      	str	r3, [sp, #32]
1a009f86:	6812      	ldr	r2, [r2, #0]
1a009f88:	9b04      	ldr	r3, [sp, #16]
1a009f8a:	7013      	strb	r3, [r2, #0]
1a009f8c:	4657      	mov	r7, sl
1a009f8e:	e73b      	b.n	1a009e08 <_vfprintf_r+0x568>
1a009f90:	f89a 8000 	ldrb.w	r8, [sl]
1a009f94:	9b02      	ldr	r3, [sp, #8]
1a009f96:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a009f9a:	f000 855f 	beq.w	1a00aa5c <_vfprintf_r+0x11bc>
1a009f9e:	f043 0310 	orr.w	r3, r3, #16
1a009fa2:	9302      	str	r3, [sp, #8]
1a009fa4:	e500      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009fa6:	9b08      	ldr	r3, [sp, #32]
1a009fa8:	f89a 8000 	ldrb.w	r8, [sl]
1a009fac:	f853 2b04 	ldr.w	r2, [r3], #4
1a009fb0:	9206      	str	r2, [sp, #24]
1a009fb2:	2a00      	cmp	r2, #0
1a009fb4:	f2c0 8513 	blt.w	1a00a9de <_vfprintf_r+0x113e>
1a009fb8:	9308      	str	r3, [sp, #32]
1a009fba:	e4f5      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a009fbc:	9d05      	ldr	r5, [sp, #20]
1a009fbe:	4628      	mov	r0, r5
1a009fc0:	f002 fc04 	bl	1a00c7cc <_localeconv_r>
1a009fc4:	6843      	ldr	r3, [r0, #4]
1a009fc6:	9317      	str	r3, [sp, #92]	; 0x5c
1a009fc8:	4618      	mov	r0, r3
1a009fca:	f7fd fed9 	bl	1a007d80 <strlen>
1a009fce:	9019      	str	r0, [sp, #100]	; 0x64
1a009fd0:	4604      	mov	r4, r0
1a009fd2:	4628      	mov	r0, r5
1a009fd4:	f002 fbfa 	bl	1a00c7cc <_localeconv_r>
1a009fd8:	6883      	ldr	r3, [r0, #8]
1a009fda:	9318      	str	r3, [sp, #96]	; 0x60
1a009fdc:	2120      	movs	r1, #32
1a009fde:	2c00      	cmp	r4, #0
1a009fe0:	f43f ad4a 	beq.w	1a009a78 <_vfprintf_r+0x1d8>
1a009fe4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a009fe6:	f89a 8000 	ldrb.w	r8, [sl]
1a009fea:	2b00      	cmp	r3, #0
1a009fec:	f43f acdc 	beq.w	1a0099a8 <_vfprintf_r+0x108>
1a009ff0:	781b      	ldrb	r3, [r3, #0]
1a009ff2:	2b00      	cmp	r3, #0
1a009ff4:	f43f acd8 	beq.w	1a0099a8 <_vfprintf_r+0x108>
1a009ff8:	9b02      	ldr	r3, [sp, #8]
1a009ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a009ffe:	9302      	str	r3, [sp, #8]
1a00a000:	e4d2      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a00a002:	9b02      	ldr	r3, [sp, #8]
1a00a004:	f89a 8000 	ldrb.w	r8, [sl]
1a00a008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00a00c:	9302      	str	r3, [sp, #8]
1a00a00e:	e4cb      	b.n	1a0099a8 <_vfprintf_r+0x108>
1a00a010:	4652      	mov	r2, sl
1a00a012:	f812 8b01 	ldrb.w	r8, [r2], #1
1a00a016:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a00a01a:	f001 81be 	beq.w	1a00b39a <_vfprintf_r+0x1afa>
1a00a01e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a00a022:	2b09      	cmp	r3, #9
1a00a024:	4692      	mov	sl, r2
1a00a026:	f04f 0900 	mov.w	r9, #0
1a00a02a:	f63f acbf 	bhi.w	1a0099ac <_vfprintf_r+0x10c>
1a00a02e:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a00a032:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a00a036:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a00a03a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a00a03e:	2b09      	cmp	r3, #9
1a00a040:	d9f5      	bls.n	1a00a02e <_vfprintf_r+0x78e>
1a00a042:	e4b3      	b.n	1a0099ac <_vfprintf_r+0x10c>
1a00a044:	9c08      	ldr	r4, [sp, #32]
1a00a046:	3407      	adds	r4, #7
1a00a048:	f024 0307 	bic.w	r3, r4, #7
1a00a04c:	ecb3 7b02 	vldmia	r3!, {d7}
1a00a050:	ec55 4b17 	vmov	r4, r5, d7
1a00a054:	9308      	str	r3, [sp, #32]
1a00a056:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a00a05a:	931b      	str	r3, [sp, #108]	; 0x6c
1a00a05c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a00a060:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00a064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00a068:	4b35      	ldr	r3, [pc, #212]	; (1a00a140 <_vfprintf_r+0x8a0>)
1a00a06a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00a06e:	f7fc fcfd 	bl	1a006a6c <__aeabi_dcmpun>
1a00a072:	2800      	cmp	r0, #0
1a00a074:	f040 83dc 	bne.w	1a00a830 <_vfprintf_r+0xf90>
1a00a078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00a07c:	4b30      	ldr	r3, [pc, #192]	; (1a00a140 <_vfprintf_r+0x8a0>)
1a00a07e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00a082:	f7fc fcd5 	bl	1a006a30 <__aeabi_dcmple>
1a00a086:	2800      	cmp	r0, #0
1a00a088:	f040 83d2 	bne.w	1a00a830 <_vfprintf_r+0xf90>
1a00a08c:	2200      	movs	r2, #0
1a00a08e:	2300      	movs	r3, #0
1a00a090:	4620      	mov	r0, r4
1a00a092:	4629      	mov	r1, r5
1a00a094:	f7fc fcc2 	bl	1a006a1c <__aeabi_dcmplt>
1a00a098:	2800      	cmp	r0, #0
1a00a09a:	f040 8780 	bne.w	1a00af9e <_vfprintf_r+0x16fe>
1a00a09e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00a0a2:	4f28      	ldr	r7, [pc, #160]	; (1a00a144 <_vfprintf_r+0x8a4>)
1a00a0a4:	4b28      	ldr	r3, [pc, #160]	; (1a00a148 <_vfprintf_r+0x8a8>)
1a00a0a6:	9802      	ldr	r0, [sp, #8]
1a00a0a8:	2100      	movs	r1, #0
1a00a0aa:	2603      	movs	r6, #3
1a00a0ac:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a00a0b0:	9603      	str	r6, [sp, #12]
1a00a0b2:	9109      	str	r1, [sp, #36]	; 0x24
1a00a0b4:	9002      	str	r0, [sp, #8]
1a00a0b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a00a0ba:	bfc8      	it	gt
1a00a0bc:	461f      	movgt	r7, r3
1a00a0be:	4689      	mov	r9, r1
1a00a0c0:	910c      	str	r1, [sp, #48]	; 0x30
1a00a0c2:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a00a0c6:	e5c0      	b.n	1a009c4a <_vfprintf_r+0x3aa>
1a00a0c8:	9e02      	ldr	r6, [sp, #8]
1a00a0ca:	06b4      	lsls	r4, r6, #26
1a00a0cc:	d41f      	bmi.n	1a00a10e <_vfprintf_r+0x86e>
1a00a0ce:	9b02      	ldr	r3, [sp, #8]
1a00a0d0:	9a08      	ldr	r2, [sp, #32]
1a00a0d2:	06d8      	lsls	r0, r3, #27
1a00a0d4:	f852 4b04 	ldr.w	r4, [r2], #4
1a00a0d8:	f101 8174 	bmi.w	1a00b3c4 <_vfprintf_r+0x1b24>
1a00a0dc:	9e02      	ldr	r6, [sp, #8]
1a00a0de:	0671      	lsls	r1, r6, #25
1a00a0e0:	f140 8577 	bpl.w	1a00abd2 <_vfprintf_r+0x1332>
1a00a0e4:	9208      	str	r2, [sp, #32]
1a00a0e6:	b2a4      	uxth	r4, r4
1a00a0e8:	2500      	movs	r5, #0
1a00a0ea:	2301      	movs	r3, #1
1a00a0ec:	e703      	b.n	1a009ef6 <_vfprintf_r+0x656>
1a00a0ee:	9805      	ldr	r0, [sp, #20]
1a00a0f0:	f7fc ffe6 	bl	1a0070c0 <__sinit>
1a00a0f4:	f7ff bbea 	b.w	1a0098cc <_vfprintf_r+0x2c>
1a00a0f8:	f1b8 0f00 	cmp.w	r8, #0
1a00a0fc:	f43f ae88 	beq.w	1a009e10 <_vfprintf_r+0x570>
1a00a100:	2300      	movs	r3, #0
1a00a102:	2601      	movs	r6, #1
1a00a104:	461a      	mov	r2, r3
1a00a106:	9603      	str	r6, [sp, #12]
1a00a108:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a00a10c:	e607      	b.n	1a009d1e <_vfprintf_r+0x47e>
1a00a10e:	9c08      	ldr	r4, [sp, #32]
1a00a110:	3407      	adds	r4, #7
1a00a112:	f024 0307 	bic.w	r3, r4, #7
1a00a116:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00a11a:	9308      	str	r3, [sp, #32]
1a00a11c:	2301      	movs	r3, #1
1a00a11e:	e6ea      	b.n	1a009ef6 <_vfprintf_r+0x656>
1a00a120:	9c08      	ldr	r4, [sp, #32]
1a00a122:	3407      	adds	r4, #7
1a00a124:	f024 0307 	bic.w	r3, r4, #7
1a00a128:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00a12c:	9308      	str	r3, [sp, #32]
1a00a12e:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a00a132:	2300      	movs	r3, #0
1a00a134:	e6df      	b.n	1a009ef6 <_vfprintf_r+0x656>
1a00a136:	bf00      	nop
1a00a138:	1a00eb3c 	.word	0x1a00eb3c
1a00a13c:	1a00eae8 	.word	0x1a00eae8
1a00a140:	7fefffff 	.word	0x7fefffff
1a00a144:	1a00ead8 	.word	0x1a00ead8
1a00a148:	1a00eadc 	.word	0x1a00eadc
1a00a14c:	9e02      	ldr	r6, [sp, #8]
1a00a14e:	2d00      	cmp	r5, #0
1a00a150:	bf08      	it	eq
1a00a152:	2c0a      	cmpeq	r4, #10
1a00a154:	d213      	bcs.n	1a00a17e <_vfprintf_r+0x8de>
1a00a156:	3430      	adds	r4, #48	; 0x30
1a00a158:	9602      	str	r6, [sp, #8]
1a00a15a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00a15e:	2601      	movs	r6, #1
1a00a160:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a00a164:	2300      	movs	r3, #0
1a00a166:	454e      	cmp	r6, r9
1a00a168:	9309      	str	r3, [sp, #36]	; 0x24
1a00a16a:	930c      	str	r3, [sp, #48]	; 0x30
1a00a16c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a00a170:	4633      	mov	r3, r6
1a00a172:	bfb8      	it	lt
1a00a174:	464b      	movlt	r3, r9
1a00a176:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00a17a:	9303      	str	r3, [sp, #12]
1a00a17c:	e565      	b.n	1a009c4a <_vfprintf_r+0x3aa>
1a00a17e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a00a182:	2200      	movs	r2, #0
1a00a184:	e9cd a802 	strd	sl, r8, [sp, #8]
1a00a188:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00a18c:	af54      	add	r7, sp, #336	; 0x150
1a00a18e:	46cb      	mov	fp, r9
1a00a190:	4692      	mov	sl, r2
1a00a192:	46b1      	mov	r9, r6
1a00a194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a00a198:	461e      	mov	r6, r3
1a00a19a:	e007      	b.n	1a00a1ac <_vfprintf_r+0x90c>
1a00a19c:	f7fc fca4 	bl	1a006ae8 <__aeabi_uldivmod>
1a00a1a0:	2d00      	cmp	r5, #0
1a00a1a2:	bf08      	it	eq
1a00a1a4:	2c0a      	cmpeq	r4, #10
1a00a1a6:	d320      	bcc.n	1a00a1ea <_vfprintf_r+0x94a>
1a00a1a8:	4604      	mov	r4, r0
1a00a1aa:	460d      	mov	r5, r1
1a00a1ac:	220a      	movs	r2, #10
1a00a1ae:	2300      	movs	r3, #0
1a00a1b0:	4620      	mov	r0, r4
1a00a1b2:	4629      	mov	r1, r5
1a00a1b4:	f7fc fc98 	bl	1a006ae8 <__aeabi_uldivmod>
1a00a1b8:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a00a1bc:	f807 cc01 	strb.w	ip, [r7, #-1]
1a00a1c0:	4620      	mov	r0, r4
1a00a1c2:	4629      	mov	r1, r5
1a00a1c4:	220a      	movs	r2, #10
1a00a1c6:	2300      	movs	r3, #0
1a00a1c8:	f10a 0a01 	add.w	sl, sl, #1
1a00a1cc:	3f01      	subs	r7, #1
1a00a1ce:	2e00      	cmp	r6, #0
1a00a1d0:	d0e4      	beq.n	1a00a19c <_vfprintf_r+0x8fc>
1a00a1d2:	f898 c000 	ldrb.w	ip, [r8]
1a00a1d6:	45e2      	cmp	sl, ip
1a00a1d8:	d1e0      	bne.n	1a00a19c <_vfprintf_r+0x8fc>
1a00a1da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a00a1de:	d0dd      	beq.n	1a00a19c <_vfprintf_r+0x8fc>
1a00a1e0:	429d      	cmp	r5, r3
1a00a1e2:	bf08      	it	eq
1a00a1e4:	4294      	cmpeq	r4, r2
1a00a1e6:	f080 871e 	bcs.w	1a00b026 <_vfprintf_r+0x1786>
1a00a1ea:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a00a1ee:	464e      	mov	r6, r9
1a00a1f0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a00a1f4:	46d9      	mov	r9, fp
1a00a1f6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00a1fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a00a1fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a00a202:	9602      	str	r6, [sp, #8]
1a00a204:	ab54      	add	r3, sp, #336	; 0x150
1a00a206:	1bde      	subs	r6, r3, r7
1a00a208:	e7ac      	b.n	1a00a164 <_vfprintf_r+0x8c4>
1a00a20a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a00a20e:	f340 810a 	ble.w	1a00a426 <_vfprintf_r+0xb86>
1a00a212:	2200      	movs	r2, #0
1a00a214:	2300      	movs	r3, #0
1a00a216:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00a21a:	f7fc fbf5 	bl	1a006a08 <__aeabi_dcmpeq>
1a00a21e:	2800      	cmp	r0, #0
1a00a220:	f000 81de 	beq.w	1a00a5e0 <_vfprintf_r+0xd40>
1a00a224:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00a226:	4ac2      	ldr	r2, [pc, #776]	; (1a00a530 <_vfprintf_r+0xc90>)
1a00a228:	f8cb 2000 	str.w	r2, [fp]
1a00a22c:	3301      	adds	r3, #1
1a00a22e:	3401      	adds	r4, #1
1a00a230:	2201      	movs	r2, #1
1a00a232:	2b07      	cmp	r3, #7
1a00a234:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00a238:	f8cb 2004 	str.w	r2, [fp, #4]
1a00a23c:	f300 8463 	bgt.w	1a00ab06 <_vfprintf_r+0x1266>
1a00a240:	f10b 0b08 	add.w	fp, fp, #8
1a00a244:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00a246:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00a248:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00a24a:	4293      	cmp	r3, r2
1a00a24c:	f280 82a5 	bge.w	1a00a79a <_vfprintf_r+0xefa>
1a00a250:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00a252:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a00a254:	f8cb 2000 	str.w	r2, [fp]
1a00a258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00a25a:	f8cb 2004 	str.w	r2, [fp, #4]
1a00a25e:	3301      	adds	r3, #1
1a00a260:	4414      	add	r4, r2
1a00a262:	2b07      	cmp	r3, #7
1a00a264:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00a268:	f300 83ec 	bgt.w	1a00aa44 <_vfprintf_r+0x11a4>
1a00a26c:	f10b 0b08 	add.w	fp, fp, #8
1a00a270:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00a272:	1e5d      	subs	r5, r3, #1
1a00a274:	2d00      	cmp	r5, #0
1a00a276:	f77f ada8 	ble.w	1a009dca <_vfprintf_r+0x52a>
1a00a27a:	2d10      	cmp	r5, #16
1a00a27c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a27e:	4bad      	ldr	r3, [pc, #692]	; (1a00a534 <_vfprintf_r+0xc94>)
1a00a280:	f340 844e 	ble.w	1a00ab20 <_vfprintf_r+0x1280>
1a00a284:	2610      	movs	r6, #16
1a00a286:	9f05      	ldr	r7, [sp, #20]
1a00a288:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00a28c:	4699      	mov	r9, r3
1a00a28e:	e005      	b.n	1a00a29c <_vfprintf_r+0x9fc>
1a00a290:	f10b 0b08 	add.w	fp, fp, #8
1a00a294:	3d10      	subs	r5, #16
1a00a296:	2d10      	cmp	r5, #16
1a00a298:	f340 8441 	ble.w	1a00ab1e <_vfprintf_r+0x127e>
1a00a29c:	3201      	adds	r2, #1
1a00a29e:	3410      	adds	r4, #16
1a00a2a0:	2a07      	cmp	r2, #7
1a00a2a2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00a2a6:	e9cb 9600 	strd	r9, r6, [fp]
1a00a2aa:	ddf1      	ble.n	1a00a290 <_vfprintf_r+0x9f0>
1a00a2ac:	aa28      	add	r2, sp, #160	; 0xa0
1a00a2ae:	4641      	mov	r1, r8
1a00a2b0:	4638      	mov	r0, r7
1a00a2b2:	f003 f9ad 	bl	1a00d610 <__sprint_r>
1a00a2b6:	2800      	cmp	r0, #0
1a00a2b8:	f040 8423 	bne.w	1a00ab02 <_vfprintf_r+0x1262>
1a00a2bc:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00a2c0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a2c4:	e7e6      	b.n	1a00a294 <_vfprintf_r+0x9f4>
1a00a2c6:	9b06      	ldr	r3, [sp, #24]
1a00a2c8:	9a03      	ldr	r2, [sp, #12]
1a00a2ca:	1a9d      	subs	r5, r3, r2
1a00a2cc:	2d00      	cmp	r5, #0
1a00a2ce:	f77f ad65 	ble.w	1a009d9c <_vfprintf_r+0x4fc>
1a00a2d2:	2d10      	cmp	r5, #16
1a00a2d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a2d6:	4b97      	ldr	r3, [pc, #604]	; (1a00a534 <_vfprintf_r+0xc94>)
1a00a2d8:	dd28      	ble.n	1a00a32c <_vfprintf_r+0xa8c>
1a00a2da:	960a      	str	r6, [sp, #40]	; 0x28
1a00a2dc:	4659      	mov	r1, fp
1a00a2de:	4620      	mov	r0, r4
1a00a2e0:	46bb      	mov	fp, r7
1a00a2e2:	9c05      	ldr	r4, [sp, #20]
1a00a2e4:	9e07      	ldr	r6, [sp, #28]
1a00a2e6:	461f      	mov	r7, r3
1a00a2e8:	e004      	b.n	1a00a2f4 <_vfprintf_r+0xa54>
1a00a2ea:	3d10      	subs	r5, #16
1a00a2ec:	2d10      	cmp	r5, #16
1a00a2ee:	f101 0108 	add.w	r1, r1, #8
1a00a2f2:	dd16      	ble.n	1a00a322 <_vfprintf_r+0xa82>
1a00a2f4:	3201      	adds	r2, #1
1a00a2f6:	3010      	adds	r0, #16
1a00a2f8:	2310      	movs	r3, #16
1a00a2fa:	2a07      	cmp	r2, #7
1a00a2fc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00a300:	600f      	str	r7, [r1, #0]
1a00a302:	604b      	str	r3, [r1, #4]
1a00a304:	ddf1      	ble.n	1a00a2ea <_vfprintf_r+0xa4a>
1a00a306:	aa28      	add	r2, sp, #160	; 0xa0
1a00a308:	4631      	mov	r1, r6
1a00a30a:	4620      	mov	r0, r4
1a00a30c:	f003 f980 	bl	1a00d610 <__sprint_r>
1a00a310:	2800      	cmp	r0, #0
1a00a312:	f040 80f6 	bne.w	1a00a502 <_vfprintf_r+0xc62>
1a00a316:	3d10      	subs	r5, #16
1a00a318:	2d10      	cmp	r5, #16
1a00a31a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00a31e:	a92b      	add	r1, sp, #172	; 0xac
1a00a320:	dce8      	bgt.n	1a00a2f4 <_vfprintf_r+0xa54>
1a00a322:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a00a324:	463b      	mov	r3, r7
1a00a326:	4604      	mov	r4, r0
1a00a328:	465f      	mov	r7, fp
1a00a32a:	468b      	mov	fp, r1
1a00a32c:	3201      	adds	r2, #1
1a00a32e:	442c      	add	r4, r5
1a00a330:	2a07      	cmp	r2, #7
1a00a332:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00a336:	e9cb 3500 	strd	r3, r5, [fp]
1a00a33a:	f300 8355 	bgt.w	1a00a9e8 <_vfprintf_r+0x1148>
1a00a33e:	eba9 0506 	sub.w	r5, r9, r6
1a00a342:	2d00      	cmp	r5, #0
1a00a344:	f10b 0b08 	add.w	fp, fp, #8
1a00a348:	f77f ad2d 	ble.w	1a009da6 <_vfprintf_r+0x506>
1a00a34c:	2d10      	cmp	r5, #16
1a00a34e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a350:	4b78      	ldr	r3, [pc, #480]	; (1a00a534 <_vfprintf_r+0xc94>)
1a00a352:	dd29      	ble.n	1a00a3a8 <_vfprintf_r+0xb08>
1a00a354:	960a      	str	r6, [sp, #40]	; 0x28
1a00a356:	4659      	mov	r1, fp
1a00a358:	4620      	mov	r0, r4
1a00a35a:	46bb      	mov	fp, r7
1a00a35c:	f04f 0910 	mov.w	r9, #16
1a00a360:	9c05      	ldr	r4, [sp, #20]
1a00a362:	9e07      	ldr	r6, [sp, #28]
1a00a364:	461f      	mov	r7, r3
1a00a366:	e004      	b.n	1a00a372 <_vfprintf_r+0xad2>
1a00a368:	3d10      	subs	r5, #16
1a00a36a:	2d10      	cmp	r5, #16
1a00a36c:	f101 0108 	add.w	r1, r1, #8
1a00a370:	dd15      	ble.n	1a00a39e <_vfprintf_r+0xafe>
1a00a372:	3201      	adds	r2, #1
1a00a374:	3010      	adds	r0, #16
1a00a376:	2a07      	cmp	r2, #7
1a00a378:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00a37c:	e9c1 7900 	strd	r7, r9, [r1]
1a00a380:	ddf2      	ble.n	1a00a368 <_vfprintf_r+0xac8>
1a00a382:	aa28      	add	r2, sp, #160	; 0xa0
1a00a384:	4631      	mov	r1, r6
1a00a386:	4620      	mov	r0, r4
1a00a388:	f003 f942 	bl	1a00d610 <__sprint_r>
1a00a38c:	2800      	cmp	r0, #0
1a00a38e:	f040 80b8 	bne.w	1a00a502 <_vfprintf_r+0xc62>
1a00a392:	3d10      	subs	r5, #16
1a00a394:	2d10      	cmp	r5, #16
1a00a396:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00a39a:	a92b      	add	r1, sp, #172	; 0xac
1a00a39c:	dce9      	bgt.n	1a00a372 <_vfprintf_r+0xad2>
1a00a39e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a00a3a0:	463b      	mov	r3, r7
1a00a3a2:	4604      	mov	r4, r0
1a00a3a4:	465f      	mov	r7, fp
1a00a3a6:	468b      	mov	fp, r1
1a00a3a8:	3201      	adds	r2, #1
1a00a3aa:	442c      	add	r4, r5
1a00a3ac:	2a07      	cmp	r2, #7
1a00a3ae:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00a3b2:	e9cb 3500 	strd	r3, r5, [fp]
1a00a3b6:	f300 81da 	bgt.w	1a00a76e <_vfprintf_r+0xece>
1a00a3ba:	f10b 0b08 	add.w	fp, fp, #8
1a00a3be:	e4f2      	b.n	1a009da6 <_vfprintf_r+0x506>
1a00a3c0:	aa28      	add	r2, sp, #160	; 0xa0
1a00a3c2:	9907      	ldr	r1, [sp, #28]
1a00a3c4:	9805      	ldr	r0, [sp, #20]
1a00a3c6:	f003 f923 	bl	1a00d610 <__sprint_r>
1a00a3ca:	2800      	cmp	r0, #0
1a00a3cc:	f43f ad11 	beq.w	1a009df2 <_vfprintf_r+0x552>
1a00a3d0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00a3d4:	e096      	b.n	1a00a504 <_vfprintf_r+0xc64>
1a00a3d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a3d8:	9915      	ldr	r1, [sp, #84]	; 0x54
1a00a3da:	f8cb 1000 	str.w	r1, [fp]
1a00a3de:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00a3e0:	f8cb 1004 	str.w	r1, [fp, #4]
1a00a3e4:	3201      	adds	r2, #1
1a00a3e6:	440c      	add	r4, r1
1a00a3e8:	2a07      	cmp	r2, #7
1a00a3ea:	942a      	str	r4, [sp, #168]	; 0xa8
1a00a3ec:	9229      	str	r2, [sp, #164]	; 0xa4
1a00a3ee:	f300 84e1 	bgt.w	1a00adb4 <_vfprintf_r+0x1514>
1a00a3f2:	f10b 0b08 	add.w	fp, fp, #8
1a00a3f6:	2b00      	cmp	r3, #0
1a00a3f8:	f2c0 86a2 	blt.w	1a00b140 <_vfprintf_r+0x18a0>
1a00a3fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00a3fe:	3201      	adds	r2, #1
1a00a400:	441c      	add	r4, r3
1a00a402:	2a07      	cmp	r2, #7
1a00a404:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00a408:	e9cb 7300 	strd	r7, r3, [fp]
1a00a40c:	f77f acdb 	ble.w	1a009dc6 <_vfprintf_r+0x526>
1a00a410:	aa28      	add	r2, sp, #160	; 0xa0
1a00a412:	9907      	ldr	r1, [sp, #28]
1a00a414:	9805      	ldr	r0, [sp, #20]
1a00a416:	f003 f8fb 	bl	1a00d610 <__sprint_r>
1a00a41a:	2800      	cmp	r0, #0
1a00a41c:	d1d8      	bne.n	1a00a3d0 <_vfprintf_r+0xb30>
1a00a41e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00a420:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a424:	e4d1      	b.n	1a009dca <_vfprintf_r+0x52a>
1a00a426:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00a428:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00a42a:	2a01      	cmp	r2, #1
1a00a42c:	f104 0401 	add.w	r4, r4, #1
1a00a430:	f103 0501 	add.w	r5, r3, #1
1a00a434:	f10b 0608 	add.w	r6, fp, #8
1a00a438:	f340 8158 	ble.w	1a00a6ec <_vfprintf_r+0xe4c>
1a00a43c:	2301      	movs	r3, #1
1a00a43e:	2d07      	cmp	r5, #7
1a00a440:	f8cb 7000 	str.w	r7, [fp]
1a00a444:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a00a448:	f8cb 3004 	str.w	r3, [fp, #4]
1a00a44c:	f300 832a 	bgt.w	1a00aaa4 <_vfprintf_r+0x1204>
1a00a450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00a452:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a00a454:	1c69      	adds	r1, r5, #1
1a00a456:	441c      	add	r4, r3
1a00a458:	2907      	cmp	r1, #7
1a00a45a:	910b      	str	r1, [sp, #44]	; 0x2c
1a00a45c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a00a460:	e9c6 2300 	strd	r2, r3, [r6]
1a00a464:	f300 832a 	bgt.w	1a00aabc <_vfprintf_r+0x121c>
1a00a468:	3608      	adds	r6, #8
1a00a46a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00a46c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a00a46e:	f102 0901 	add.w	r9, r2, #1
1a00a472:	2300      	movs	r3, #0
1a00a474:	2200      	movs	r2, #0
1a00a476:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00a47a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a00a47e:	f106 0b08 	add.w	fp, r6, #8
1a00a482:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a00a486:	f7fc fabf 	bl	1a006a08 <__aeabi_dcmpeq>
1a00a48a:	2800      	cmp	r0, #0
1a00a48c:	f040 8141 	bne.w	1a00a712 <_vfprintf_r+0xe72>
1a00a490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00a492:	f8c6 8004 	str.w	r8, [r6, #4]
1a00a496:	3701      	adds	r7, #1
1a00a498:	4444      	add	r4, r8
1a00a49a:	2b07      	cmp	r3, #7
1a00a49c:	6037      	str	r7, [r6, #0]
1a00a49e:	942a      	str	r4, [sp, #168]	; 0xa8
1a00a4a0:	9329      	str	r3, [sp, #164]	; 0xa4
1a00a4a2:	f300 82bf 	bgt.w	1a00aa24 <_vfprintf_r+0x1184>
1a00a4a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00a4a8:	f106 0310 	add.w	r3, r6, #16
1a00a4ac:	3202      	adds	r2, #2
1a00a4ae:	465e      	mov	r6, fp
1a00a4b0:	920a      	str	r2, [sp, #40]	; 0x28
1a00a4b2:	469b      	mov	fp, r3
1a00a4b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00a4b6:	6072      	str	r2, [r6, #4]
1a00a4b8:	4414      	add	r4, r2
1a00a4ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00a4bc:	942a      	str	r4, [sp, #168]	; 0xa8
1a00a4be:	ab24      	add	r3, sp, #144	; 0x90
1a00a4c0:	2a07      	cmp	r2, #7
1a00a4c2:	9229      	str	r2, [sp, #164]	; 0xa4
1a00a4c4:	6033      	str	r3, [r6, #0]
1a00a4c6:	f77f ac80 	ble.w	1a009dca <_vfprintf_r+0x52a>
1a00a4ca:	e7a1      	b.n	1a00a410 <_vfprintf_r+0xb70>
1a00a4cc:	9e02      	ldr	r6, [sp, #8]
1a00a4ce:	f7ff bbf4 	b.w	1a009cba <_vfprintf_r+0x41a>
1a00a4d2:	aa28      	add	r2, sp, #160	; 0xa0
1a00a4d4:	9907      	ldr	r1, [sp, #28]
1a00a4d6:	9805      	ldr	r0, [sp, #20]
1a00a4d8:	f003 f89a 	bl	1a00d610 <__sprint_r>
1a00a4dc:	2800      	cmp	r0, #0
1a00a4de:	f47f af77 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00a4e2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00a4e4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a4e8:	e444      	b.n	1a009d74 <_vfprintf_r+0x4d4>
1a00a4ea:	aa28      	add	r2, sp, #160	; 0xa0
1a00a4ec:	9907      	ldr	r1, [sp, #28]
1a00a4ee:	9805      	ldr	r0, [sp, #20]
1a00a4f0:	f003 f88e 	bl	1a00d610 <__sprint_r>
1a00a4f4:	2800      	cmp	r0, #0
1a00a4f6:	f47f af6b 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00a4fa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00a4fc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a500:	e448      	b.n	1a009d94 <_vfprintf_r+0x4f4>
1a00a502:	46b1      	mov	r9, r6
1a00a504:	9909      	ldr	r1, [sp, #36]	; 0x24
1a00a506:	b111      	cbz	r1, 1a00a50e <_vfprintf_r+0xc6e>
1a00a508:	9805      	ldr	r0, [sp, #20]
1a00a50a:	f7fc fe5f 	bl	1a0071cc <_free_r>
1a00a50e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a00a512:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00a516:	07d4      	lsls	r4, r2, #31
1a00a518:	d402      	bmi.n	1a00a520 <_vfprintf_r+0xc80>
1a00a51a:	0598      	lsls	r0, r3, #22
1a00a51c:	f140 82db 	bpl.w	1a00aad6 <_vfprintf_r+0x1236>
1a00a520:	0659      	lsls	r1, r3, #25
1a00a522:	f100 8640 	bmi.w	1a00b1a6 <_vfprintf_r+0x1906>
1a00a526:	9804      	ldr	r0, [sp, #16]
1a00a528:	b055      	add	sp, #340	; 0x154
1a00a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a52e:	bf00      	nop
1a00a530:	1a00eb18 	.word	0x1a00eb18
1a00a534:	1a00eb4c 	.word	0x1a00eb4c
1a00a538:	2d10      	cmp	r5, #16
1a00a53a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00a53c:	dd21      	ble.n	1a00a582 <_vfprintf_r+0xce2>
1a00a53e:	2610      	movs	r6, #16
1a00a540:	9f05      	ldr	r7, [sp, #20]
1a00a542:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00a546:	e004      	b.n	1a00a552 <_vfprintf_r+0xcb2>
1a00a548:	3d10      	subs	r5, #16
1a00a54a:	2d10      	cmp	r5, #16
1a00a54c:	f10b 0b08 	add.w	fp, fp, #8
1a00a550:	dd17      	ble.n	1a00a582 <_vfprintf_r+0xce2>
1a00a552:	3301      	adds	r3, #1
1a00a554:	4ab3      	ldr	r2, [pc, #716]	; (1a00a824 <_vfprintf_r+0xf84>)
1a00a556:	3410      	adds	r4, #16
1a00a558:	2b07      	cmp	r3, #7
1a00a55a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00a55e:	e9cb 2600 	strd	r2, r6, [fp]
1a00a562:	ddf1      	ble.n	1a00a548 <_vfprintf_r+0xca8>
1a00a564:	aa28      	add	r2, sp, #160	; 0xa0
1a00a566:	4641      	mov	r1, r8
1a00a568:	4638      	mov	r0, r7
1a00a56a:	f003 f851 	bl	1a00d610 <__sprint_r>
1a00a56e:	2800      	cmp	r0, #0
1a00a570:	f040 82c7 	bne.w	1a00ab02 <_vfprintf_r+0x1262>
1a00a574:	3d10      	subs	r5, #16
1a00a576:	2d10      	cmp	r5, #16
1a00a578:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00a57c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a580:	dce7      	bgt.n	1a00a552 <_vfprintf_r+0xcb2>
1a00a582:	3301      	adds	r3, #1
1a00a584:	4aa7      	ldr	r2, [pc, #668]	; (1a00a824 <_vfprintf_r+0xf84>)
1a00a586:	442c      	add	r4, r5
1a00a588:	2b07      	cmp	r3, #7
1a00a58a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00a58e:	e9cb 2500 	strd	r2, r5, [fp]
1a00a592:	f77f ac23 	ble.w	1a009ddc <_vfprintf_r+0x53c>
1a00a596:	aa28      	add	r2, sp, #160	; 0xa0
1a00a598:	9907      	ldr	r1, [sp, #28]
1a00a59a:	9805      	ldr	r0, [sp, #20]
1a00a59c:	f003 f838 	bl	1a00d610 <__sprint_r>
1a00a5a0:	2800      	cmp	r0, #0
1a00a5a2:	f47f af15 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00a5a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00a5a8:	e418      	b.n	1a009ddc <_vfprintf_r+0x53c>
1a00a5aa:	2b01      	cmp	r3, #1
1a00a5ac:	f000 8423 	beq.w	1a00adf6 <_vfprintf_r+0x1556>
1a00a5b0:	2b02      	cmp	r3, #2
1a00a5b2:	9e02      	ldr	r6, [sp, #8]
1a00a5b4:	f47f ab87 	bne.w	1a009cc6 <_vfprintf_r+0x426>
1a00a5b8:	9814      	ldr	r0, [sp, #80]	; 0x50
1a00a5ba:	af54      	add	r7, sp, #336	; 0x150
1a00a5bc:	0923      	lsrs	r3, r4, #4
1a00a5be:	f004 010f 	and.w	r1, r4, #15
1a00a5c2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a00a5c6:	092a      	lsrs	r2, r5, #4
1a00a5c8:	461c      	mov	r4, r3
1a00a5ca:	4615      	mov	r5, r2
1a00a5cc:	5c43      	ldrb	r3, [r0, r1]
1a00a5ce:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a00a5d2:	ea54 0305 	orrs.w	r3, r4, r5
1a00a5d6:	d1f1      	bne.n	1a00a5bc <_vfprintf_r+0xd1c>
1a00a5d8:	ab54      	add	r3, sp, #336	; 0x150
1a00a5da:	9602      	str	r6, [sp, #8]
1a00a5dc:	1bde      	subs	r6, r3, r7
1a00a5de:	e5c1      	b.n	1a00a164 <_vfprintf_r+0x8c4>
1a00a5e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00a5e2:	2b00      	cmp	r3, #0
1a00a5e4:	f340 80df 	ble.w	1a00a7a6 <_vfprintf_r+0xf06>
1a00a5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00a5ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00a5ec:	4293      	cmp	r3, r2
1a00a5ee:	bfa8      	it	ge
1a00a5f0:	4613      	movge	r3, r2
1a00a5f2:	2b00      	cmp	r3, #0
1a00a5f4:	461d      	mov	r5, r3
1a00a5f6:	dd0d      	ble.n	1a00a614 <_vfprintf_r+0xd74>
1a00a5f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00a5fa:	f8cb 7000 	str.w	r7, [fp]
1a00a5fe:	3301      	adds	r3, #1
1a00a600:	442c      	add	r4, r5
1a00a602:	2b07      	cmp	r3, #7
1a00a604:	942a      	str	r4, [sp, #168]	; 0xa8
1a00a606:	f8cb 5004 	str.w	r5, [fp, #4]
1a00a60a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00a60c:	f300 84fe 	bgt.w	1a00b00c <_vfprintf_r+0x176c>
1a00a610:	f10b 0b08 	add.w	fp, fp, #8
1a00a614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00a616:	2d00      	cmp	r5, #0
1a00a618:	bfa8      	it	ge
1a00a61a:	1b5b      	subge	r3, r3, r5
1a00a61c:	2b00      	cmp	r3, #0
1a00a61e:	461d      	mov	r5, r3
1a00a620:	f300 8290 	bgt.w	1a00ab44 <_vfprintf_r+0x12a4>
1a00a624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00a626:	443b      	add	r3, r7
1a00a628:	4699      	mov	r9, r3
1a00a62a:	9b02      	ldr	r3, [sp, #8]
1a00a62c:	0558      	lsls	r0, r3, #21
1a00a62e:	f100 8413 	bmi.w	1a00ae58 <_vfprintf_r+0x15b8>
1a00a632:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00a634:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00a636:	4293      	cmp	r3, r2
1a00a638:	db03      	blt.n	1a00a642 <_vfprintf_r+0xda2>
1a00a63a:	9a02      	ldr	r2, [sp, #8]
1a00a63c:	07d1      	lsls	r1, r2, #31
1a00a63e:	f140 82f7 	bpl.w	1a00ac30 <_vfprintf_r+0x1390>
1a00a642:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a644:	9915      	ldr	r1, [sp, #84]	; 0x54
1a00a646:	f8cb 1000 	str.w	r1, [fp]
1a00a64a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00a64c:	f8cb 1004 	str.w	r1, [fp, #4]
1a00a650:	3201      	adds	r2, #1
1a00a652:	440c      	add	r4, r1
1a00a654:	2a07      	cmp	r2, #7
1a00a656:	942a      	str	r4, [sp, #168]	; 0xa8
1a00a658:	9229      	str	r2, [sp, #164]	; 0xa4
1a00a65a:	f300 8523 	bgt.w	1a00b0a4 <_vfprintf_r+0x1804>
1a00a65e:	f10b 0b08 	add.w	fp, fp, #8
1a00a662:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00a664:	18bd      	adds	r5, r7, r2
1a00a666:	eba5 0509 	sub.w	r5, r5, r9
1a00a66a:	1ad3      	subs	r3, r2, r3
1a00a66c:	429d      	cmp	r5, r3
1a00a66e:	bfa8      	it	ge
1a00a670:	461d      	movge	r5, r3
1a00a672:	2d00      	cmp	r5, #0
1a00a674:	dd0d      	ble.n	1a00a692 <_vfprintf_r+0xdf2>
1a00a676:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a678:	f8cb 9000 	str.w	r9, [fp]
1a00a67c:	3201      	adds	r2, #1
1a00a67e:	442c      	add	r4, r5
1a00a680:	2a07      	cmp	r2, #7
1a00a682:	942a      	str	r4, [sp, #168]	; 0xa8
1a00a684:	f8cb 5004 	str.w	r5, [fp, #4]
1a00a688:	9229      	str	r2, [sp, #164]	; 0xa4
1a00a68a:	f300 8546 	bgt.w	1a00b11a <_vfprintf_r+0x187a>
1a00a68e:	f10b 0b08 	add.w	fp, fp, #8
1a00a692:	2d00      	cmp	r5, #0
1a00a694:	bfac      	ite	ge
1a00a696:	1b5d      	subge	r5, r3, r5
1a00a698:	461d      	movlt	r5, r3
1a00a69a:	2d00      	cmp	r5, #0
1a00a69c:	f77f ab95 	ble.w	1a009dca <_vfprintf_r+0x52a>
1a00a6a0:	2d10      	cmp	r5, #16
1a00a6a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a6a4:	4b60      	ldr	r3, [pc, #384]	; (1a00a828 <_vfprintf_r+0xf88>)
1a00a6a6:	f340 823b 	ble.w	1a00ab20 <_vfprintf_r+0x1280>
1a00a6aa:	2610      	movs	r6, #16
1a00a6ac:	9f05      	ldr	r7, [sp, #20]
1a00a6ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00a6b2:	4699      	mov	r9, r3
1a00a6b4:	e005      	b.n	1a00a6c2 <_vfprintf_r+0xe22>
1a00a6b6:	f10b 0b08 	add.w	fp, fp, #8
1a00a6ba:	3d10      	subs	r5, #16
1a00a6bc:	2d10      	cmp	r5, #16
1a00a6be:	f340 822e 	ble.w	1a00ab1e <_vfprintf_r+0x127e>
1a00a6c2:	3201      	adds	r2, #1
1a00a6c4:	3410      	adds	r4, #16
1a00a6c6:	2a07      	cmp	r2, #7
1a00a6c8:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00a6cc:	e9cb 9600 	strd	r9, r6, [fp]
1a00a6d0:	ddf1      	ble.n	1a00a6b6 <_vfprintf_r+0xe16>
1a00a6d2:	aa28      	add	r2, sp, #160	; 0xa0
1a00a6d4:	4641      	mov	r1, r8
1a00a6d6:	4638      	mov	r0, r7
1a00a6d8:	f002 ff9a 	bl	1a00d610 <__sprint_r>
1a00a6dc:	2800      	cmp	r0, #0
1a00a6de:	f040 8210 	bne.w	1a00ab02 <_vfprintf_r+0x1262>
1a00a6e2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00a6e6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a6ea:	e7e6      	b.n	1a00a6ba <_vfprintf_r+0xe1a>
1a00a6ec:	9a02      	ldr	r2, [sp, #8]
1a00a6ee:	07d2      	lsls	r2, r2, #31
1a00a6f0:	f53f aea4 	bmi.w	1a00a43c <_vfprintf_r+0xb9c>
1a00a6f4:	2201      	movs	r2, #1
1a00a6f6:	2d07      	cmp	r5, #7
1a00a6f8:	f8cb 7000 	str.w	r7, [fp]
1a00a6fc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a00a700:	f8cb 2004 	str.w	r2, [fp, #4]
1a00a704:	f300 818e 	bgt.w	1a00aa24 <_vfprintf_r+0x1184>
1a00a708:	3302      	adds	r3, #2
1a00a70a:	930a      	str	r3, [sp, #40]	; 0x28
1a00a70c:	f10b 0b10 	add.w	fp, fp, #16
1a00a710:	e6d0      	b.n	1a00a4b4 <_vfprintf_r+0xc14>
1a00a712:	f1b8 0f00 	cmp.w	r8, #0
1a00a716:	f77f aecd 	ble.w	1a00a4b4 <_vfprintf_r+0xc14>
1a00a71a:	f1b8 0f10 	cmp.w	r8, #16
1a00a71e:	4b42      	ldr	r3, [pc, #264]	; (1a00a828 <_vfprintf_r+0xf88>)
1a00a720:	f340 8635 	ble.w	1a00b38e <_vfprintf_r+0x1aee>
1a00a724:	461a      	mov	r2, r3
1a00a726:	464d      	mov	r5, r9
1a00a728:	4623      	mov	r3, r4
1a00a72a:	2710      	movs	r7, #16
1a00a72c:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a00a730:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a00a734:	4614      	mov	r4, r2
1a00a736:	e007      	b.n	1a00a748 <_vfprintf_r+0xea8>
1a00a738:	3608      	adds	r6, #8
1a00a73a:	f1a8 0810 	sub.w	r8, r8, #16
1a00a73e:	f1b8 0f10 	cmp.w	r8, #16
1a00a742:	f340 815e 	ble.w	1a00aa02 <_vfprintf_r+0x1162>
1a00a746:	3501      	adds	r5, #1
1a00a748:	3310      	adds	r3, #16
1a00a74a:	2d07      	cmp	r5, #7
1a00a74c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a00a750:	e9c6 4700 	strd	r4, r7, [r6]
1a00a754:	ddf0      	ble.n	1a00a738 <_vfprintf_r+0xe98>
1a00a756:	aa28      	add	r2, sp, #160	; 0xa0
1a00a758:	4659      	mov	r1, fp
1a00a75a:	4648      	mov	r0, r9
1a00a75c:	f002 ff58 	bl	1a00d610 <__sprint_r>
1a00a760:	2800      	cmp	r0, #0
1a00a762:	f040 821d 	bne.w	1a00aba0 <_vfprintf_r+0x1300>
1a00a766:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a00a76a:	ae2b      	add	r6, sp, #172	; 0xac
1a00a76c:	e7e5      	b.n	1a00a73a <_vfprintf_r+0xe9a>
1a00a76e:	aa28      	add	r2, sp, #160	; 0xa0
1a00a770:	9907      	ldr	r1, [sp, #28]
1a00a772:	9805      	ldr	r0, [sp, #20]
1a00a774:	f002 ff4c 	bl	1a00d610 <__sprint_r>
1a00a778:	2800      	cmp	r0, #0
1a00a77a:	f47f ae29 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00a77e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00a780:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a784:	f7ff bb0f 	b.w	1a009da6 <_vfprintf_r+0x506>
1a00a788:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00a78c:	f7fc fe66 	bl	1a00745c <__retarget_lock_acquire_recursive>
1a00a790:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a00a794:	b293      	uxth	r3, r2
1a00a796:	f7ff b8a3 	b.w	1a0098e0 <_vfprintf_r+0x40>
1a00a79a:	9b02      	ldr	r3, [sp, #8]
1a00a79c:	07dd      	lsls	r5, r3, #31
1a00a79e:	f53f ad57 	bmi.w	1a00a250 <_vfprintf_r+0x9b0>
1a00a7a2:	f7ff bb12 	b.w	1a009dca <_vfprintf_r+0x52a>
1a00a7a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a7a8:	4920      	ldr	r1, [pc, #128]	; (1a00a82c <_vfprintf_r+0xf8c>)
1a00a7aa:	f8cb 1000 	str.w	r1, [fp]
1a00a7ae:	3201      	adds	r2, #1
1a00a7b0:	3401      	adds	r4, #1
1a00a7b2:	2101      	movs	r1, #1
1a00a7b4:	2a07      	cmp	r2, #7
1a00a7b6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00a7ba:	f8cb 1004 	str.w	r1, [fp, #4]
1a00a7be:	f300 8409 	bgt.w	1a00afd4 <_vfprintf_r+0x1734>
1a00a7c2:	f10b 0b08 	add.w	fp, fp, #8
1a00a7c6:	2b00      	cmp	r3, #0
1a00a7c8:	f47f ae05 	bne.w	1a00a3d6 <_vfprintf_r+0xb36>
1a00a7cc:	9b02      	ldr	r3, [sp, #8]
1a00a7ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00a7d0:	f003 0301 	and.w	r3, r3, #1
1a00a7d4:	4313      	orrs	r3, r2
1a00a7d6:	f43f aaf8 	beq.w	1a009dca <_vfprintf_r+0x52a>
1a00a7da:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00a7dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00a7de:	f8cb 3000 	str.w	r3, [fp]
1a00a7e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00a7e4:	f8cb 3004 	str.w	r3, [fp, #4]
1a00a7e8:	3201      	adds	r2, #1
1a00a7ea:	441c      	add	r4, r3
1a00a7ec:	2a07      	cmp	r2, #7
1a00a7ee:	942a      	str	r4, [sp, #168]	; 0xa8
1a00a7f0:	9229      	str	r2, [sp, #164]	; 0xa4
1a00a7f2:	f300 82df 	bgt.w	1a00adb4 <_vfprintf_r+0x1514>
1a00a7f6:	f10b 0b08 	add.w	fp, fp, #8
1a00a7fa:	e5ff      	b.n	1a00a3fc <_vfprintf_r+0xb5c>
1a00a7fc:	af54      	add	r7, sp, #336	; 0x150
1a00a7fe:	e4b1      	b.n	1a00a164 <_vfprintf_r+0x8c4>
1a00a800:	9b02      	ldr	r3, [sp, #8]
1a00a802:	0598      	lsls	r0, r3, #22
1a00a804:	f100 822d 	bmi.w	1a00ac62 <_vfprintf_r+0x13c2>
1a00a808:	2500      	movs	r5, #0
1a00a80a:	f7ff b987 	b.w	1a009b1c <_vfprintf_r+0x27c>
1a00a80e:	9904      	ldr	r1, [sp, #16]
1a00a810:	6812      	ldr	r2, [r2, #0]
1a00a812:	9308      	str	r3, [sp, #32]
1a00a814:	17cd      	asrs	r5, r1, #31
1a00a816:	4608      	mov	r0, r1
1a00a818:	4629      	mov	r1, r5
1a00a81a:	e9c2 0100 	strd	r0, r1, [r2]
1a00a81e:	4657      	mov	r7, sl
1a00a820:	f7ff baf2 	b.w	1a009e08 <_vfprintf_r+0x568>
1a00a824:	1a00eb3c 	.word	0x1a00eb3c
1a00a828:	1a00eb4c 	.word	0x1a00eb4c
1a00a82c:	1a00eb18 	.word	0x1a00eb18
1a00a830:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00a834:	4602      	mov	r2, r0
1a00a836:	460b      	mov	r3, r1
1a00a838:	f7fc f918 	bl	1a006a6c <__aeabi_dcmpun>
1a00a83c:	2800      	cmp	r0, #0
1a00a83e:	f040 853a 	bne.w	1a00b2b6 <_vfprintf_r+0x1a16>
1a00a842:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a00a846:	f000 84d0 	beq.w	1a00b1ea <_vfprintf_r+0x194a>
1a00a84a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00a84e:	f000 820c 	beq.w	1a00ac6a <_vfprintf_r+0x13ca>
1a00a852:	f028 0320 	bic.w	r3, r8, #32
1a00a856:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00a85a:	9303      	str	r3, [sp, #12]
1a00a85c:	f000 8500 	beq.w	1a00b260 <_vfprintf_r+0x19c0>
1a00a860:	2b47      	cmp	r3, #71	; 0x47
1a00a862:	d104      	bne.n	1a00a86e <_vfprintf_r+0xfce>
1a00a864:	f1b9 0f00 	cmp.w	r9, #0
1a00a868:	bf08      	it	eq
1a00a86a:	f04f 0901 	moveq.w	r9, #1
1a00a86e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a00a872:	9902      	ldr	r1, [sp, #8]
1a00a874:	2d00      	cmp	r5, #0
1a00a876:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a00a87a:	f2c0 8395 	blt.w	1a00afa8 <_vfprintf_r+0x1708>
1a00a87e:	2300      	movs	r3, #0
1a00a880:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a00a884:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a00a888:	931e      	str	r3, [sp, #120]	; 0x78
1a00a88a:	9202      	str	r2, [sp, #8]
1a00a88c:	9b03      	ldr	r3, [sp, #12]
1a00a88e:	2b46      	cmp	r3, #70	; 0x46
1a00a890:	f000 83df 	beq.w	1a00b052 <_vfprintf_r+0x17b2>
1a00a894:	2b45      	cmp	r3, #69	; 0x45
1a00a896:	f000 84d2 	beq.w	1a00b23e <_vfprintf_r+0x199e>
1a00a89a:	aa26      	add	r2, sp, #152	; 0x98
1a00a89c:	ab23      	add	r3, sp, #140	; 0x8c
1a00a89e:	e9cd 3200 	strd	r3, r2, [sp]
1a00a8a2:	2102      	movs	r1, #2
1a00a8a4:	ab22      	add	r3, sp, #136	; 0x88
1a00a8a6:	464a      	mov	r2, r9
1a00a8a8:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00a8ac:	9805      	ldr	r0, [sp, #20]
1a00a8ae:	f000 fedf 	bl	1a00b670 <_dtoa_r>
1a00a8b2:	9b03      	ldr	r3, [sp, #12]
1a00a8b4:	2b47      	cmp	r3, #71	; 0x47
1a00a8b6:	4607      	mov	r7, r0
1a00a8b8:	f040 858d 	bne.w	1a00b3d6 <_vfprintf_r+0x1b36>
1a00a8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00a8be:	07db      	lsls	r3, r3, #31
1a00a8c0:	f100 843b 	bmi.w	1a00b13a <_vfprintf_r+0x189a>
1a00a8c4:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00a8c6:	1bf3      	subs	r3, r6, r7
1a00a8c8:	9312      	str	r3, [sp, #72]	; 0x48
1a00a8ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00a8cc:	930e      	str	r3, [sp, #56]	; 0x38
1a00a8ce:	9b03      	ldr	r3, [sp, #12]
1a00a8d0:	2b47      	cmp	r3, #71	; 0x47
1a00a8d2:	f000 8293 	beq.w	1a00adfc <_vfprintf_r+0x155c>
1a00a8d6:	9b03      	ldr	r3, [sp, #12]
1a00a8d8:	2b46      	cmp	r3, #70	; 0x46
1a00a8da:	f000 83fd 	beq.w	1a00b0d8 <_vfprintf_r+0x1838>
1a00a8de:	9903      	ldr	r1, [sp, #12]
1a00a8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00a8e2:	2941      	cmp	r1, #65	; 0x41
1a00a8e4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a00a8e8:	fa5f f388 	uxtb.w	r3, r8
1a00a8ec:	bf03      	ittte	eq
1a00a8ee:	330f      	addeq	r3, #15
1a00a8f0:	b2db      	uxtbeq	r3, r3
1a00a8f2:	2101      	moveq	r1, #1
1a00a8f4:	2100      	movne	r1, #0
1a00a8f6:	2a00      	cmp	r2, #0
1a00a8f8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a00a8fc:	bfb8      	it	lt
1a00a8fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a00a900:	9222      	str	r2, [sp, #136]	; 0x88
1a00a902:	bfb6      	itet	lt
1a00a904:	f1c3 0201 	rsblt	r2, r3, #1
1a00a908:	232b      	movge	r3, #43	; 0x2b
1a00a90a:	232d      	movlt	r3, #45	; 0x2d
1a00a90c:	2a09      	cmp	r2, #9
1a00a90e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a00a912:	f340 84c1 	ble.w	1a00b298 <_vfprintf_r+0x19f8>
1a00a916:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a00a91a:	4620      	mov	r0, r4
1a00a91c:	4dbe      	ldr	r5, [pc, #760]	; (1a00ac18 <_vfprintf_r+0x1378>)
1a00a91e:	e001      	b.n	1a00a924 <_vfprintf_r+0x1084>
1a00a920:	4608      	mov	r0, r1
1a00a922:	461a      	mov	r2, r3
1a00a924:	fb85 3102 	smull	r3, r1, r5, r2
1a00a928:	17d3      	asrs	r3, r2, #31
1a00a92a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a00a92e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00a932:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a00a936:	3130      	adds	r1, #48	; 0x30
1a00a938:	2a63      	cmp	r2, #99	; 0x63
1a00a93a:	f800 1c01 	strb.w	r1, [r0, #-1]
1a00a93e:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a00a942:	dced      	bgt.n	1a00a920 <_vfprintf_r+0x1080>
1a00a944:	3330      	adds	r3, #48	; 0x30
1a00a946:	1e82      	subs	r2, r0, #2
1a00a948:	b2db      	uxtb	r3, r3
1a00a94a:	4294      	cmp	r4, r2
1a00a94c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a00a950:	f240 8544 	bls.w	1a00b3dc <_vfprintf_r+0x1b3c>
1a00a954:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a00a958:	e001      	b.n	1a00a95e <_vfprintf_r+0x10be>
1a00a95a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00a95e:	f802 3b01 	strb.w	r3, [r2], #1
1a00a962:	42a1      	cmp	r1, r4
1a00a964:	d1f9      	bne.n	1a00a95a <_vfprintf_r+0x10ba>
1a00a966:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a00a96a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a00a96e:	1a1b      	subs	r3, r3, r0
1a00a970:	4413      	add	r3, r2
1a00a972:	aa24      	add	r2, sp, #144	; 0x90
1a00a974:	1a9b      	subs	r3, r3, r2
1a00a976:	9316      	str	r3, [sp, #88]	; 0x58
1a00a978:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00a97a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00a97c:	2b01      	cmp	r3, #1
1a00a97e:	eb03 0602 	add.w	r6, r3, r2
1a00a982:	f340 84ee 	ble.w	1a00b362 <_vfprintf_r+0x1ac2>
1a00a986:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00a988:	441e      	add	r6, r3
1a00a98a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00a98c:	2200      	movs	r2, #0
1a00a98e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a00a992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a00a996:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a00a99a:	9302      	str	r3, [sp, #8]
1a00a99c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00a9a0:	920c      	str	r2, [sp, #48]	; 0x30
1a00a9a2:	9303      	str	r3, [sp, #12]
1a00a9a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a00a9a6:	2b00      	cmp	r3, #0
1a00a9a8:	f040 824f 	bne.w	1a00ae4a <_vfprintf_r+0x15aa>
1a00a9ac:	4699      	mov	r9, r3
1a00a9ae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00a9b2:	f7ff b94a 	b.w	1a009c4a <_vfprintf_r+0x3aa>
1a00a9b6:	9b08      	ldr	r3, [sp, #32]
1a00a9b8:	1d1a      	adds	r2, r3, #4
1a00a9ba:	9b02      	ldr	r3, [sp, #8]
1a00a9bc:	06d9      	lsls	r1, r3, #27
1a00a9be:	f100 8504 	bmi.w	1a00b3ca <_vfprintf_r+0x1b2a>
1a00a9c2:	9e02      	ldr	r6, [sp, #8]
1a00a9c4:	4633      	mov	r3, r6
1a00a9c6:	065b      	lsls	r3, r3, #25
1a00a9c8:	f140 80ec 	bpl.w	1a00aba4 <_vfprintf_r+0x1304>
1a00a9cc:	9b08      	ldr	r3, [sp, #32]
1a00a9ce:	9208      	str	r2, [sp, #32]
1a00a9d0:	f9b3 4000 	ldrsh.w	r4, [r3]
1a00a9d4:	17e5      	asrs	r5, r4, #31
1a00a9d6:	4622      	mov	r2, r4
1a00a9d8:	462b      	mov	r3, r5
1a00a9da:	f7ff b8eb 	b.w	1a009bb4 <_vfprintf_r+0x314>
1a00a9de:	4252      	negs	r2, r2
1a00a9e0:	9206      	str	r2, [sp, #24]
1a00a9e2:	9308      	str	r3, [sp, #32]
1a00a9e4:	f7ff b8af 	b.w	1a009b46 <_vfprintf_r+0x2a6>
1a00a9e8:	aa28      	add	r2, sp, #160	; 0xa0
1a00a9ea:	9907      	ldr	r1, [sp, #28]
1a00a9ec:	9805      	ldr	r0, [sp, #20]
1a00a9ee:	f002 fe0f 	bl	1a00d610 <__sprint_r>
1a00a9f2:	2800      	cmp	r0, #0
1a00a9f4:	f47f acec 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00a9f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00a9fa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00a9fe:	f7ff b9cd 	b.w	1a009d9c <_vfprintf_r+0x4fc>
1a00aa02:	4622      	mov	r2, r4
1a00aa04:	461c      	mov	r4, r3
1a00aa06:	4613      	mov	r3, r2
1a00aa08:	462a      	mov	r2, r5
1a00aa0a:	3201      	adds	r2, #1
1a00aa0c:	920a      	str	r2, [sp, #40]	; 0x28
1a00aa0e:	f106 0208 	add.w	r2, r6, #8
1a00aa12:	e9c6 3800 	strd	r3, r8, [r6]
1a00aa16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00aa18:	9329      	str	r3, [sp, #164]	; 0xa4
1a00aa1a:	4444      	add	r4, r8
1a00aa1c:	2b07      	cmp	r3, #7
1a00aa1e:	942a      	str	r4, [sp, #168]	; 0xa8
1a00aa20:	f340 8100 	ble.w	1a00ac24 <_vfprintf_r+0x1384>
1a00aa24:	aa28      	add	r2, sp, #160	; 0xa0
1a00aa26:	9907      	ldr	r1, [sp, #28]
1a00aa28:	9805      	ldr	r0, [sp, #20]
1a00aa2a:	f002 fdf1 	bl	1a00d610 <__sprint_r>
1a00aa2e:	2800      	cmp	r0, #0
1a00aa30:	f47f acce 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00aa34:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00aa38:	3301      	adds	r3, #1
1a00aa3a:	930a      	str	r3, [sp, #40]	; 0x28
1a00aa3c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00aa40:	ae2b      	add	r6, sp, #172	; 0xac
1a00aa42:	e537      	b.n	1a00a4b4 <_vfprintf_r+0xc14>
1a00aa44:	aa28      	add	r2, sp, #160	; 0xa0
1a00aa46:	9907      	ldr	r1, [sp, #28]
1a00aa48:	9805      	ldr	r0, [sp, #20]
1a00aa4a:	f002 fde1 	bl	1a00d610 <__sprint_r>
1a00aa4e:	2800      	cmp	r0, #0
1a00aa50:	f47f acbe 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00aa54:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00aa56:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00aa5a:	e409      	b.n	1a00a270 <_vfprintf_r+0x9d0>
1a00aa5c:	f043 0320 	orr.w	r3, r3, #32
1a00aa60:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a00aa64:	9302      	str	r3, [sp, #8]
1a00aa66:	f10a 0a01 	add.w	sl, sl, #1
1a00aa6a:	f7fe bf9d 	b.w	1a0099a8 <_vfprintf_r+0x108>
1a00aa6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a00aa72:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a00aa76:	9302      	str	r3, [sp, #8]
1a00aa78:	f10a 0a01 	add.w	sl, sl, #1
1a00aa7c:	f7fe bf94 	b.w	1a0099a8 <_vfprintf_r+0x108>
1a00aa80:	464e      	mov	r6, r9
1a00aa82:	2e06      	cmp	r6, #6
1a00aa84:	bf28      	it	cs
1a00aa86:	2606      	movcs	r6, #6
1a00aa88:	46b9      	mov	r9, r7
1a00aa8a:	970c      	str	r7, [sp, #48]	; 0x30
1a00aa8c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a00aa90:	9709      	str	r7, [sp, #36]	; 0x24
1a00aa92:	463a      	mov	r2, r7
1a00aa94:	9603      	str	r6, [sp, #12]
1a00aa96:	9408      	str	r4, [sp, #32]
1a00aa98:	4f60      	ldr	r7, [pc, #384]	; (1a00ac1c <_vfprintf_r+0x137c>)
1a00aa9a:	f7ff b8d6 	b.w	1a009c4a <_vfprintf_r+0x3aa>
1a00aa9e:	463c      	mov	r4, r7
1a00aaa0:	f7fe bf75 	b.w	1a00998e <_vfprintf_r+0xee>
1a00aaa4:	aa28      	add	r2, sp, #160	; 0xa0
1a00aaa6:	9907      	ldr	r1, [sp, #28]
1a00aaa8:	9805      	ldr	r0, [sp, #20]
1a00aaaa:	f002 fdb1 	bl	1a00d610 <__sprint_r>
1a00aaae:	2800      	cmp	r0, #0
1a00aab0:	f47f ac8e 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00aab4:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a00aab8:	ae2b      	add	r6, sp, #172	; 0xac
1a00aaba:	e4c9      	b.n	1a00a450 <_vfprintf_r+0xbb0>
1a00aabc:	aa28      	add	r2, sp, #160	; 0xa0
1a00aabe:	9907      	ldr	r1, [sp, #28]
1a00aac0:	9805      	ldr	r0, [sp, #20]
1a00aac2:	f002 fda5 	bl	1a00d610 <__sprint_r>
1a00aac6:	2800      	cmp	r0, #0
1a00aac8:	f47f ac82 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00aacc:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00aad0:	ae2b      	add	r6, sp, #172	; 0xac
1a00aad2:	930b      	str	r3, [sp, #44]	; 0x2c
1a00aad4:	e4c9      	b.n	1a00a46a <_vfprintf_r+0xbca>
1a00aad6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00aada:	f7fc fcc1 	bl	1a007460 <__retarget_lock_release_recursive>
1a00aade:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00aae2:	e51d      	b.n	1a00a520 <_vfprintf_r+0xc80>
1a00aae4:	aa28      	add	r2, sp, #160	; 0xa0
1a00aae6:	9907      	ldr	r1, [sp, #28]
1a00aae8:	9805      	ldr	r0, [sp, #20]
1a00aaea:	f002 fd91 	bl	1a00d610 <__sprint_r>
1a00aaee:	2800      	cmp	r0, #0
1a00aaf0:	f47f ac6e 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00aaf4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00aaf8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00aafa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00aafe:	f7ff b929 	b.w	1a009d54 <_vfprintf_r+0x4b4>
1a00ab02:	46c1      	mov	r9, r8
1a00ab04:	e4fe      	b.n	1a00a504 <_vfprintf_r+0xc64>
1a00ab06:	aa28      	add	r2, sp, #160	; 0xa0
1a00ab08:	9907      	ldr	r1, [sp, #28]
1a00ab0a:	9805      	ldr	r0, [sp, #20]
1a00ab0c:	f002 fd80 	bl	1a00d610 <__sprint_r>
1a00ab10:	2800      	cmp	r0, #0
1a00ab12:	f47f ac5d 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00ab16:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00ab1a:	f7ff bb93 	b.w	1a00a244 <_vfprintf_r+0x9a4>
1a00ab1e:	464b      	mov	r3, r9
1a00ab20:	3201      	adds	r2, #1
1a00ab22:	442c      	add	r4, r5
1a00ab24:	2a07      	cmp	r2, #7
1a00ab26:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00ab2a:	e9cb 3500 	strd	r3, r5, [fp]
1a00ab2e:	f77f a94a 	ble.w	1a009dc6 <_vfprintf_r+0x526>
1a00ab32:	e46d      	b.n	1a00a410 <_vfprintf_r+0xb70>
1a00ab34:	9a08      	ldr	r2, [sp, #32]
1a00ab36:	6812      	ldr	r2, [r2, #0]
1a00ab38:	9308      	str	r3, [sp, #32]
1a00ab3a:	9b04      	ldr	r3, [sp, #16]
1a00ab3c:	6013      	str	r3, [r2, #0]
1a00ab3e:	4657      	mov	r7, sl
1a00ab40:	f7ff b962 	b.w	1a009e08 <_vfprintf_r+0x568>
1a00ab44:	2d10      	cmp	r5, #16
1a00ab46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00ab48:	4b35      	ldr	r3, [pc, #212]	; (1a00ac20 <_vfprintf_r+0x1380>)
1a00ab4a:	dd50      	ble.n	1a00abee <_vfprintf_r+0x134e>
1a00ab4c:	4619      	mov	r1, r3
1a00ab4e:	2610      	movs	r6, #16
1a00ab50:	4623      	mov	r3, r4
1a00ab52:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a00ab56:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00ab5a:	460c      	mov	r4, r1
1a00ab5c:	e004      	b.n	1a00ab68 <_vfprintf_r+0x12c8>
1a00ab5e:	f10b 0b08 	add.w	fp, fp, #8
1a00ab62:	3d10      	subs	r5, #16
1a00ab64:	2d10      	cmp	r5, #16
1a00ab66:	dd3f      	ble.n	1a00abe8 <_vfprintf_r+0x1348>
1a00ab68:	3201      	adds	r2, #1
1a00ab6a:	3310      	adds	r3, #16
1a00ab6c:	2a07      	cmp	r2, #7
1a00ab6e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00ab72:	e9cb 4600 	strd	r4, r6, [fp]
1a00ab76:	ddf2      	ble.n	1a00ab5e <_vfprintf_r+0x12be>
1a00ab78:	aa28      	add	r2, sp, #160	; 0xa0
1a00ab7a:	4649      	mov	r1, r9
1a00ab7c:	4640      	mov	r0, r8
1a00ab7e:	f002 fd47 	bl	1a00d610 <__sprint_r>
1a00ab82:	2800      	cmp	r0, #0
1a00ab84:	f47f acbe 	bne.w	1a00a504 <_vfprintf_r+0xc64>
1a00ab88:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00ab8c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00ab90:	e7e7      	b.n	1a00ab62 <_vfprintf_r+0x12c2>
1a00ab92:	4638      	mov	r0, r7
1a00ab94:	f7fd f8f4 	bl	1a007d80 <strlen>
1a00ab98:	46a9      	mov	r9, r5
1a00ab9a:	4606      	mov	r6, r0
1a00ab9c:	f7ff b849 	b.w	1a009c32 <_vfprintf_r+0x392>
1a00aba0:	46d9      	mov	r9, fp
1a00aba2:	e4af      	b.n	1a00a504 <_vfprintf_r+0xc64>
1a00aba4:	9e02      	ldr	r6, [sp, #8]
1a00aba6:	9b08      	ldr	r3, [sp, #32]
1a00aba8:	f416 7f00 	tst.w	r6, #512	; 0x200
1a00abac:	d051      	beq.n	1a00ac52 <_vfprintf_r+0x13b2>
1a00abae:	f993 4000 	ldrsb.w	r4, [r3]
1a00abb2:	9208      	str	r2, [sp, #32]
1a00abb4:	17e5      	asrs	r5, r4, #31
1a00abb6:	4622      	mov	r2, r4
1a00abb8:	462b      	mov	r3, r5
1a00abba:	f7fe bffb 	b.w	1a009bb4 <_vfprintf_r+0x314>
1a00abbe:	9e02      	ldr	r6, [sp, #8]
1a00abc0:	05b7      	lsls	r7, r6, #22
1a00abc2:	bf47      	ittee	mi
1a00abc4:	9208      	strmi	r2, [sp, #32]
1a00abc6:	b2e4      	uxtbmi	r4, r4
1a00abc8:	9e02      	ldrpl	r6, [sp, #8]
1a00abca:	9208      	strpl	r2, [sp, #32]
1a00abcc:	2500      	movs	r5, #0
1a00abce:	f7ff baae 	b.w	1a00a12e <_vfprintf_r+0x88e>
1a00abd2:	9e02      	ldr	r6, [sp, #8]
1a00abd4:	9208      	str	r2, [sp, #32]
1a00abd6:	4633      	mov	r3, r6
1a00abd8:	059b      	lsls	r3, r3, #22
1a00abda:	bf4c      	ite	mi
1a00abdc:	b2e4      	uxtbmi	r4, r4
1a00abde:	9e02      	ldrpl	r6, [sp, #8]
1a00abe0:	2500      	movs	r5, #0
1a00abe2:	2301      	movs	r3, #1
1a00abe4:	f7ff b987 	b.w	1a009ef6 <_vfprintf_r+0x656>
1a00abe8:	4621      	mov	r1, r4
1a00abea:	461c      	mov	r4, r3
1a00abec:	460b      	mov	r3, r1
1a00abee:	3201      	adds	r2, #1
1a00abf0:	442c      	add	r4, r5
1a00abf2:	2a07      	cmp	r2, #7
1a00abf4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00abf8:	e9cb 3500 	strd	r3, r5, [fp]
1a00abfc:	f300 80ef 	bgt.w	1a00adde <_vfprintf_r+0x153e>
1a00ac00:	f10b 0b08 	add.w	fp, fp, #8
1a00ac04:	e50e      	b.n	1a00a624 <_vfprintf_r+0xd84>
1a00ac06:	9805      	ldr	r0, [sp, #20]
1a00ac08:	aa28      	add	r2, sp, #160	; 0xa0
1a00ac0a:	4649      	mov	r1, r9
1a00ac0c:	f002 fd00 	bl	1a00d610 <__sprint_r>
1a00ac10:	2800      	cmp	r0, #0
1a00ac12:	f43f a903 	beq.w	1a009e1c <_vfprintf_r+0x57c>
1a00ac16:	e47a      	b.n	1a00a50e <_vfprintf_r+0xc6e>
1a00ac18:	66666667 	.word	0x66666667
1a00ac1c:	1a00eb10 	.word	0x1a00eb10
1a00ac20:	1a00eb4c 	.word	0x1a00eb4c
1a00ac24:	3301      	adds	r3, #1
1a00ac26:	930a      	str	r3, [sp, #40]	; 0x28
1a00ac28:	f102 0b08 	add.w	fp, r2, #8
1a00ac2c:	4616      	mov	r6, r2
1a00ac2e:	e441      	b.n	1a00a4b4 <_vfprintf_r+0xc14>
1a00ac30:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00ac32:	18bd      	adds	r5, r7, r2
1a00ac34:	eba5 0509 	sub.w	r5, r5, r9
1a00ac38:	1ad3      	subs	r3, r2, r3
1a00ac3a:	429d      	cmp	r5, r3
1a00ac3c:	bfa8      	it	ge
1a00ac3e:	461d      	movge	r5, r3
1a00ac40:	e527      	b.n	1a00a692 <_vfprintf_r+0xdf2>
1a00ac42:	9a08      	ldr	r2, [sp, #32]
1a00ac44:	9308      	str	r3, [sp, #32]
1a00ac46:	6812      	ldr	r2, [r2, #0]
1a00ac48:	9b04      	ldr	r3, [sp, #16]
1a00ac4a:	8013      	strh	r3, [r2, #0]
1a00ac4c:	4657      	mov	r7, sl
1a00ac4e:	f7ff b8db 	b.w	1a009e08 <_vfprintf_r+0x568>
1a00ac52:	681c      	ldr	r4, [r3, #0]
1a00ac54:	9208      	str	r2, [sp, #32]
1a00ac56:	17e5      	asrs	r5, r4, #31
1a00ac58:	9e02      	ldr	r6, [sp, #8]
1a00ac5a:	4622      	mov	r2, r4
1a00ac5c:	462b      	mov	r3, r5
1a00ac5e:	f7fe bfa9 	b.w	1a009bb4 <_vfprintf_r+0x314>
1a00ac62:	b2e4      	uxtb	r4, r4
1a00ac64:	2500      	movs	r5, #0
1a00ac66:	f7fe bf59 	b.w	1a009b1c <_vfprintf_r+0x27c>
1a00ac6a:	2330      	movs	r3, #48	; 0x30
1a00ac6c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a00ac70:	2358      	movs	r3, #88	; 0x58
1a00ac72:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a00ac76:	9b02      	ldr	r3, [sp, #8]
1a00ac78:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00ac7c:	f043 0302 	orr.w	r3, r3, #2
1a00ac80:	930a      	str	r3, [sp, #40]	; 0x28
1a00ac82:	f300 82b7 	bgt.w	1a00b1f4 <_vfprintf_r+0x1954>
1a00ac86:	2300      	movs	r3, #0
1a00ac88:	9309      	str	r3, [sp, #36]	; 0x24
1a00ac8a:	af3b      	add	r7, sp, #236	; 0xec
1a00ac8c:	9a02      	ldr	r2, [sp, #8]
1a00ac8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00ac90:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a00ac94:	9202      	str	r2, [sp, #8]
1a00ac96:	2b00      	cmp	r3, #0
1a00ac98:	f028 0220 	bic.w	r2, r8, #32
1a00ac9c:	9203      	str	r2, [sp, #12]
1a00ac9e:	f2c0 8188 	blt.w	1a00afb2 <_vfprintf_r+0x1712>
1a00aca2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a00aca6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a00acaa:	2300      	movs	r3, #0
1a00acac:	931e      	str	r3, [sp, #120]	; 0x78
1a00acae:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a00acb2:	f000 82d9 	beq.w	1a00b268 <_vfprintf_r+0x19c8>
1a00acb6:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00acba:	f47f ade7 	bne.w	1a00a88c <_vfprintf_r+0xfec>
1a00acbe:	a822      	add	r0, sp, #136	; 0x88
1a00acc0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00acc4:	f002 fb7c 	bl	1a00d3c0 <frexp>
1a00acc8:	2200      	movs	r2, #0
1a00acca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00acce:	ec51 0b10 	vmov	r0, r1, d0
1a00acd2:	f7fb fc31 	bl	1a006538 <__aeabi_dmul>
1a00acd6:	2200      	movs	r2, #0
1a00acd8:	2300      	movs	r3, #0
1a00acda:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00acde:	f7fb fe93 	bl	1a006a08 <__aeabi_dcmpeq>
1a00ace2:	b108      	cbz	r0, 1a00ace8 <_vfprintf_r+0x1448>
1a00ace4:	2301      	movs	r3, #1
1a00ace6:	9322      	str	r3, [sp, #136]	; 0x88
1a00ace8:	4bb6      	ldr	r3, [pc, #728]	; (1a00afc4 <_vfprintf_r+0x1724>)
1a00acea:	930b      	str	r3, [sp, #44]	; 0x2c
1a00acec:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a00acf0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a00acf4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a00acf8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a00acfc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a00ad00:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a00ad04:	970c      	str	r7, [sp, #48]	; 0x30
1a00ad06:	46ba      	mov	sl, r7
1a00ad08:	e003      	b.n	1a00ad12 <_vfprintf_r+0x1472>
1a00ad0a:	f7fb fe7d 	bl	1a006a08 <__aeabi_dcmpeq>
1a00ad0e:	bb20      	cbnz	r0, 1a00ad5a <_vfprintf_r+0x14ba>
1a00ad10:	46b2      	mov	sl, r6
1a00ad12:	2200      	movs	r2, #0
1a00ad14:	4bac      	ldr	r3, [pc, #688]	; (1a00afc8 <_vfprintf_r+0x1728>)
1a00ad16:	4640      	mov	r0, r8
1a00ad18:	4649      	mov	r1, r9
1a00ad1a:	f7fb fc0d 	bl	1a006538 <__aeabi_dmul>
1a00ad1e:	4689      	mov	r9, r1
1a00ad20:	4680      	mov	r8, r0
1a00ad22:	f7fb feb9 	bl	1a006a98 <__aeabi_d2iz>
1a00ad26:	4607      	mov	r7, r0
1a00ad28:	f7fb fb9c 	bl	1a006464 <__aeabi_i2d>
1a00ad2c:	4602      	mov	r2, r0
1a00ad2e:	460b      	mov	r3, r1
1a00ad30:	4640      	mov	r0, r8
1a00ad32:	4649      	mov	r1, r9
1a00ad34:	f7fb fa48 	bl	1a0061c8 <__aeabi_dsub>
1a00ad38:	4656      	mov	r6, sl
1a00ad3a:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a00ad3e:	f806 4b01 	strb.w	r4, [r6], #1
1a00ad42:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00ad46:	462c      	mov	r4, r5
1a00ad48:	4680      	mov	r8, r0
1a00ad4a:	4689      	mov	r9, r1
1a00ad4c:	f04f 0200 	mov.w	r2, #0
1a00ad50:	f04f 0300 	mov.w	r3, #0
1a00ad54:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a00ad58:	d1d7      	bne.n	1a00ad0a <_vfprintf_r+0x146a>
1a00ad5a:	4640      	mov	r0, r8
1a00ad5c:	4649      	mov	r1, r9
1a00ad5e:	2200      	movs	r2, #0
1a00ad60:	4b9a      	ldr	r3, [pc, #616]	; (1a00afcc <_vfprintf_r+0x172c>)
1a00ad62:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00ad66:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a00ad6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a00ad6e:	463d      	mov	r5, r7
1a00ad70:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a00ad74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a00ad76:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00ad7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00ad7e:	f7fb fe6b 	bl	1a006a58 <__aeabi_dcmpgt>
1a00ad82:	2800      	cmp	r0, #0
1a00ad84:	f040 8214 	bne.w	1a00b1b0 <_vfprintf_r+0x1910>
1a00ad88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00ad8c:	2200      	movs	r2, #0
1a00ad8e:	4b8f      	ldr	r3, [pc, #572]	; (1a00afcc <_vfprintf_r+0x172c>)
1a00ad90:	f7fb fe3a 	bl	1a006a08 <__aeabi_dcmpeq>
1a00ad94:	b118      	cbz	r0, 1a00ad9e <_vfprintf_r+0x14fe>
1a00ad96:	462b      	mov	r3, r5
1a00ad98:	07db      	lsls	r3, r3, #31
1a00ad9a:	f100 8209 	bmi.w	1a00b1b0 <_vfprintf_r+0x1910>
1a00ad9e:	2c00      	cmp	r4, #0
1a00ada0:	f6ff ad91 	blt.w	1a00a8c6 <_vfprintf_r+0x1026>
1a00ada4:	1c63      	adds	r3, r4, #1
1a00ada6:	4433      	add	r3, r6
1a00ada8:	2230      	movs	r2, #48	; 0x30
1a00adaa:	f806 2b01 	strb.w	r2, [r6], #1
1a00adae:	429e      	cmp	r6, r3
1a00adb0:	d1fb      	bne.n	1a00adaa <_vfprintf_r+0x150a>
1a00adb2:	e588      	b.n	1a00a8c6 <_vfprintf_r+0x1026>
1a00adb4:	aa28      	add	r2, sp, #160	; 0xa0
1a00adb6:	9907      	ldr	r1, [sp, #28]
1a00adb8:	9805      	ldr	r0, [sp, #20]
1a00adba:	f002 fc29 	bl	1a00d610 <__sprint_r>
1a00adbe:	2800      	cmp	r0, #0
1a00adc0:	f47f ab06 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00adc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00adc6:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00adca:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00adce:	f7ff bb12 	b.w	1a00a3f6 <_vfprintf_r+0xb56>
1a00add2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00add6:	f7fc fb43 	bl	1a007460 <__retarget_lock_release_recursive>
1a00adda:	f7fe be6a 	b.w	1a009ab2 <_vfprintf_r+0x212>
1a00adde:	aa28      	add	r2, sp, #160	; 0xa0
1a00ade0:	9907      	ldr	r1, [sp, #28]
1a00ade2:	9805      	ldr	r0, [sp, #20]
1a00ade4:	f002 fc14 	bl	1a00d610 <__sprint_r>
1a00ade8:	2800      	cmp	r0, #0
1a00adea:	f47f aaf1 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00adee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00adf0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00adf4:	e416      	b.n	1a00a624 <_vfprintf_r+0xd84>
1a00adf6:	9e02      	ldr	r6, [sp, #8]
1a00adf8:	f7ff b9ad 	b.w	1a00a156 <_vfprintf_r+0x8b6>
1a00adfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00adfe:	1cde      	adds	r6, r3, #3
1a00ae00:	db01      	blt.n	1a00ae06 <_vfprintf_r+0x1566>
1a00ae02:	4599      	cmp	r9, r3
1a00ae04:	da05      	bge.n	1a00ae12 <_vfprintf_r+0x1572>
1a00ae06:	f1a8 0802 	sub.w	r8, r8, #2
1a00ae0a:	f028 0320 	bic.w	r3, r8, #32
1a00ae0e:	9303      	str	r3, [sp, #12]
1a00ae10:	e565      	b.n	1a00a8de <_vfprintf_r+0x103e>
1a00ae12:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00ae14:	4619      	mov	r1, r3
1a00ae16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00ae18:	4299      	cmp	r1, r3
1a00ae1a:	f300 8174 	bgt.w	1a00b106 <_vfprintf_r+0x1866>
1a00ae1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00ae20:	07d4      	lsls	r4, r2, #31
1a00ae22:	f140 8254 	bpl.w	1a00b2ce <_vfprintf_r+0x1a2e>
1a00ae26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00ae28:	189e      	adds	r6, r3, r2
1a00ae2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00ae2c:	0558      	lsls	r0, r3, #21
1a00ae2e:	d503      	bpl.n	1a00ae38 <_vfprintf_r+0x1598>
1a00ae30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00ae32:	2b00      	cmp	r3, #0
1a00ae34:	f300 824d 	bgt.w	1a00b2d2 <_vfprintf_r+0x1a32>
1a00ae38:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00ae3c:	9303      	str	r3, [sp, #12]
1a00ae3e:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00ae42:	2300      	movs	r3, #0
1a00ae44:	930c      	str	r3, [sp, #48]	; 0x30
1a00ae46:	930f      	str	r3, [sp, #60]	; 0x3c
1a00ae48:	e5ac      	b.n	1a00a9a4 <_vfprintf_r+0x1104>
1a00ae4a:	222d      	movs	r2, #45	; 0x2d
1a00ae4c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a00ae50:	f04f 0900 	mov.w	r9, #0
1a00ae54:	f7fe befb 	b.w	1a009c4e <_vfprintf_r+0x3ae>
1a00ae58:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00ae5a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00ae5e:	18fb      	adds	r3, r7, r3
1a00ae60:	930a      	str	r3, [sp, #40]	; 0x28
1a00ae62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00ae64:	970e      	str	r7, [sp, #56]	; 0x38
1a00ae66:	465a      	mov	r2, fp
1a00ae68:	464f      	mov	r7, r9
1a00ae6a:	4e59      	ldr	r6, [pc, #356]	; (1a00afd0 <_vfprintf_r+0x1730>)
1a00ae6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a00ae70:	f8dd a014 	ldr.w	sl, [sp, #20]
1a00ae74:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a00ae78:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a00ae7c:	4621      	mov	r1, r4
1a00ae7e:	2b00      	cmp	r3, #0
1a00ae80:	d032      	beq.n	1a00aee8 <_vfprintf_r+0x1648>
1a00ae82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00ae84:	2b00      	cmp	r3, #0
1a00ae86:	d16e      	bne.n	1a00af66 <_vfprintf_r+0x16c6>
1a00ae88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00ae8a:	3b01      	subs	r3, #1
1a00ae8c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a00ae90:	930f      	str	r3, [sp, #60]	; 0x3c
1a00ae92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00ae94:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a00ae96:	6010      	str	r0, [r2, #0]
1a00ae98:	3301      	adds	r3, #1
1a00ae9a:	4449      	add	r1, r9
1a00ae9c:	2b07      	cmp	r3, #7
1a00ae9e:	912a      	str	r1, [sp, #168]	; 0xa8
1a00aea0:	f8c2 9004 	str.w	r9, [r2, #4]
1a00aea4:	9329      	str	r3, [sp, #164]	; 0xa4
1a00aea6:	dc62      	bgt.n	1a00af6e <_vfprintf_r+0x16ce>
1a00aea8:	3208      	adds	r2, #8
1a00aeaa:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00aeac:	f898 3000 	ldrb.w	r3, [r8]
1a00aeb0:	1bc5      	subs	r5, r0, r7
1a00aeb2:	429d      	cmp	r5, r3
1a00aeb4:	bfa8      	it	ge
1a00aeb6:	461d      	movge	r5, r3
1a00aeb8:	2d00      	cmp	r5, #0
1a00aeba:	dd0b      	ble.n	1a00aed4 <_vfprintf_r+0x1634>
1a00aebc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00aebe:	6017      	str	r7, [r2, #0]
1a00aec0:	3301      	adds	r3, #1
1a00aec2:	4429      	add	r1, r5
1a00aec4:	2b07      	cmp	r3, #7
1a00aec6:	912a      	str	r1, [sp, #168]	; 0xa8
1a00aec8:	6055      	str	r5, [r2, #4]
1a00aeca:	9329      	str	r3, [sp, #164]	; 0xa4
1a00aecc:	dc5a      	bgt.n	1a00af84 <_vfprintf_r+0x16e4>
1a00aece:	f898 3000 	ldrb.w	r3, [r8]
1a00aed2:	3208      	adds	r2, #8
1a00aed4:	2d00      	cmp	r5, #0
1a00aed6:	bfac      	ite	ge
1a00aed8:	1b5d      	subge	r5, r3, r5
1a00aeda:	461d      	movlt	r5, r3
1a00aedc:	2d00      	cmp	r5, #0
1a00aede:	dc15      	bgt.n	1a00af0c <_vfprintf_r+0x166c>
1a00aee0:	441f      	add	r7, r3
1a00aee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00aee4:	2b00      	cmp	r3, #0
1a00aee6:	d1cc      	bne.n	1a00ae82 <_vfprintf_r+0x15e2>
1a00aee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00aeea:	2b00      	cmp	r3, #0
1a00aeec:	d13b      	bne.n	1a00af66 <_vfprintf_r+0x16c6>
1a00aeee:	46b9      	mov	r9, r7
1a00aef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00aef2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a00aef4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a00aef8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a00aefc:	18fb      	adds	r3, r7, r3
1a00aefe:	4599      	cmp	r9, r3
1a00af00:	4693      	mov	fp, r2
1a00af02:	460c      	mov	r4, r1
1a00af04:	bf28      	it	cs
1a00af06:	4699      	movcs	r9, r3
1a00af08:	f7ff bb93 	b.w	1a00a632 <_vfprintf_r+0xd92>
1a00af0c:	2d10      	cmp	r5, #16
1a00af0e:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a00af10:	dd1c      	ble.n	1a00af4c <_vfprintf_r+0x16ac>
1a00af12:	2410      	movs	r4, #16
1a00af14:	e004      	b.n	1a00af20 <_vfprintf_r+0x1680>
1a00af16:	3d10      	subs	r5, #16
1a00af18:	2d10      	cmp	r5, #16
1a00af1a:	f102 0208 	add.w	r2, r2, #8
1a00af1e:	dd15      	ble.n	1a00af4c <_vfprintf_r+0x16ac>
1a00af20:	3001      	adds	r0, #1
1a00af22:	3110      	adds	r1, #16
1a00af24:	2807      	cmp	r0, #7
1a00af26:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a00af2a:	e9c2 6400 	strd	r6, r4, [r2]
1a00af2e:	ddf2      	ble.n	1a00af16 <_vfprintf_r+0x1676>
1a00af30:	aa28      	add	r2, sp, #160	; 0xa0
1a00af32:	4659      	mov	r1, fp
1a00af34:	4650      	mov	r0, sl
1a00af36:	f002 fb6b 	bl	1a00d610 <__sprint_r>
1a00af3a:	2800      	cmp	r0, #0
1a00af3c:	f47f ae30 	bne.w	1a00aba0 <_vfprintf_r+0x1300>
1a00af40:	3d10      	subs	r5, #16
1a00af42:	2d10      	cmp	r5, #16
1a00af44:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a00af48:	aa2b      	add	r2, sp, #172	; 0xac
1a00af4a:	dce9      	bgt.n	1a00af20 <_vfprintf_r+0x1680>
1a00af4c:	3001      	adds	r0, #1
1a00af4e:	4429      	add	r1, r5
1a00af50:	2807      	cmp	r0, #7
1a00af52:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a00af56:	e9c2 6500 	strd	r6, r5, [r2]
1a00af5a:	dc49      	bgt.n	1a00aff0 <_vfprintf_r+0x1750>
1a00af5c:	f898 3000 	ldrb.w	r3, [r8]
1a00af60:	3208      	adds	r2, #8
1a00af62:	441f      	add	r7, r3
1a00af64:	e7bd      	b.n	1a00aee2 <_vfprintf_r+0x1642>
1a00af66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00af68:	3b01      	subs	r3, #1
1a00af6a:	930c      	str	r3, [sp, #48]	; 0x30
1a00af6c:	e791      	b.n	1a00ae92 <_vfprintf_r+0x15f2>
1a00af6e:	aa28      	add	r2, sp, #160	; 0xa0
1a00af70:	4659      	mov	r1, fp
1a00af72:	4650      	mov	r0, sl
1a00af74:	f002 fb4c 	bl	1a00d610 <__sprint_r>
1a00af78:	2800      	cmp	r0, #0
1a00af7a:	f47f ae11 	bne.w	1a00aba0 <_vfprintf_r+0x1300>
1a00af7e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00af80:	aa2b      	add	r2, sp, #172	; 0xac
1a00af82:	e792      	b.n	1a00aeaa <_vfprintf_r+0x160a>
1a00af84:	aa28      	add	r2, sp, #160	; 0xa0
1a00af86:	4659      	mov	r1, fp
1a00af88:	4650      	mov	r0, sl
1a00af8a:	f002 fb41 	bl	1a00d610 <__sprint_r>
1a00af8e:	2800      	cmp	r0, #0
1a00af90:	f47f ae06 	bne.w	1a00aba0 <_vfprintf_r+0x1300>
1a00af94:	f898 3000 	ldrb.w	r3, [r8]
1a00af98:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00af9a:	aa2b      	add	r2, sp, #172	; 0xac
1a00af9c:	e79a      	b.n	1a00aed4 <_vfprintf_r+0x1634>
1a00af9e:	222d      	movs	r2, #45	; 0x2d
1a00afa0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a00afa4:	f7ff b87d 	b.w	1a00a0a2 <_vfprintf_r+0x802>
1a00afa8:	9b02      	ldr	r3, [sp, #8]
1a00afaa:	930a      	str	r3, [sp, #40]	; 0x28
1a00afac:	2300      	movs	r3, #0
1a00afae:	9309      	str	r3, [sp, #36]	; 0x24
1a00afb0:	9202      	str	r2, [sp, #8]
1a00afb2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a00afb6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a00afba:	931d      	str	r3, [sp, #116]	; 0x74
1a00afbc:	232d      	movs	r3, #45	; 0x2d
1a00afbe:	911c      	str	r1, [sp, #112]	; 0x70
1a00afc0:	931e      	str	r3, [sp, #120]	; 0x78
1a00afc2:	e674      	b.n	1a00acae <_vfprintf_r+0x140e>
1a00afc4:	1a00eafc 	.word	0x1a00eafc
1a00afc8:	40300000 	.word	0x40300000
1a00afcc:	3fe00000 	.word	0x3fe00000
1a00afd0:	1a00eb4c 	.word	0x1a00eb4c
1a00afd4:	aa28      	add	r2, sp, #160	; 0xa0
1a00afd6:	9907      	ldr	r1, [sp, #28]
1a00afd8:	9805      	ldr	r0, [sp, #20]
1a00afda:	f002 fb19 	bl	1a00d610 <__sprint_r>
1a00afde:	2800      	cmp	r0, #0
1a00afe0:	f47f a9f6 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00afe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00afe6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00afe8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00afec:	f7ff bbeb 	b.w	1a00a7c6 <_vfprintf_r+0xf26>
1a00aff0:	aa28      	add	r2, sp, #160	; 0xa0
1a00aff2:	4659      	mov	r1, fp
1a00aff4:	4650      	mov	r0, sl
1a00aff6:	f002 fb0b 	bl	1a00d610 <__sprint_r>
1a00affa:	2800      	cmp	r0, #0
1a00affc:	f47f add0 	bne.w	1a00aba0 <_vfprintf_r+0x1300>
1a00b000:	f898 3000 	ldrb.w	r3, [r8]
1a00b004:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00b006:	aa2b      	add	r2, sp, #172	; 0xac
1a00b008:	441f      	add	r7, r3
1a00b00a:	e76a      	b.n	1a00aee2 <_vfprintf_r+0x1642>
1a00b00c:	aa28      	add	r2, sp, #160	; 0xa0
1a00b00e:	9907      	ldr	r1, [sp, #28]
1a00b010:	9805      	ldr	r0, [sp, #20]
1a00b012:	f002 fafd 	bl	1a00d610 <__sprint_r>
1a00b016:	2800      	cmp	r0, #0
1a00b018:	f47f a9da 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00b01c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00b01e:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00b022:	f7ff baf7 	b.w	1a00a614 <_vfprintf_r+0xd74>
1a00b026:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a00b028:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a00b02a:	1aff      	subs	r7, r7, r3
1a00b02c:	461a      	mov	r2, r3
1a00b02e:	4638      	mov	r0, r7
1a00b030:	f002 f9fc 	bl	1a00d42c <strncpy>
1a00b034:	f898 3001 	ldrb.w	r3, [r8, #1]
1a00b038:	b10b      	cbz	r3, 1a00b03e <_vfprintf_r+0x179e>
1a00b03a:	f108 0801 	add.w	r8, r8, #1
1a00b03e:	220a      	movs	r2, #10
1a00b040:	2300      	movs	r3, #0
1a00b042:	4620      	mov	r0, r4
1a00b044:	4629      	mov	r1, r5
1a00b046:	f04f 0a00 	mov.w	sl, #0
1a00b04a:	f7fb fd4d 	bl	1a006ae8 <__aeabi_uldivmod>
1a00b04e:	f7ff b8ab 	b.w	1a00a1a8 <_vfprintf_r+0x908>
1a00b052:	aa26      	add	r2, sp, #152	; 0x98
1a00b054:	ab23      	add	r3, sp, #140	; 0x8c
1a00b056:	e9cd 3200 	strd	r3, r2, [sp]
1a00b05a:	2103      	movs	r1, #3
1a00b05c:	ab22      	add	r3, sp, #136	; 0x88
1a00b05e:	464a      	mov	r2, r9
1a00b060:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00b064:	9805      	ldr	r0, [sp, #20]
1a00b066:	f000 fb03 	bl	1a00b670 <_dtoa_r>
1a00b06a:	7803      	ldrb	r3, [r0, #0]
1a00b06c:	2b30      	cmp	r3, #48	; 0x30
1a00b06e:	4607      	mov	r7, r0
1a00b070:	f000 8161 	beq.w	1a00b336 <_vfprintf_r+0x1a96>
1a00b074:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00b076:	444b      	add	r3, r9
1a00b078:	18fc      	adds	r4, r7, r3
1a00b07a:	2200      	movs	r2, #0
1a00b07c:	2300      	movs	r3, #0
1a00b07e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00b082:	f7fb fcc1 	bl	1a006a08 <__aeabi_dcmpeq>
1a00b086:	b108      	cbz	r0, 1a00b08c <_vfprintf_r+0x17ec>
1a00b088:	4626      	mov	r6, r4
1a00b08a:	e41c      	b.n	1a00a8c6 <_vfprintf_r+0x1026>
1a00b08c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00b08e:	42a6      	cmp	r6, r4
1a00b090:	f4bf ac19 	bcs.w	1a00a8c6 <_vfprintf_r+0x1026>
1a00b094:	2230      	movs	r2, #48	; 0x30
1a00b096:	1c73      	adds	r3, r6, #1
1a00b098:	9326      	str	r3, [sp, #152]	; 0x98
1a00b09a:	7032      	strb	r2, [r6, #0]
1a00b09c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00b09e:	42b4      	cmp	r4, r6
1a00b0a0:	d8f9      	bhi.n	1a00b096 <_vfprintf_r+0x17f6>
1a00b0a2:	e410      	b.n	1a00a8c6 <_vfprintf_r+0x1026>
1a00b0a4:	aa28      	add	r2, sp, #160	; 0xa0
1a00b0a6:	9907      	ldr	r1, [sp, #28]
1a00b0a8:	9805      	ldr	r0, [sp, #20]
1a00b0aa:	f002 fab1 	bl	1a00d610 <__sprint_r>
1a00b0ae:	2800      	cmp	r0, #0
1a00b0b0:	f47f a98e 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00b0b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00b0b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00b0b8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00b0bc:	f7ff bad1 	b.w	1a00a662 <_vfprintf_r+0xdc2>
1a00b0c0:	464e      	mov	r6, r9
1a00b0c2:	f8cd 900c 	str.w	r9, [sp, #12]
1a00b0c6:	9408      	str	r4, [sp, #32]
1a00b0c8:	4681      	mov	r9, r0
1a00b0ca:	900c      	str	r0, [sp, #48]	; 0x30
1a00b0cc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a00b0d0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00b0d4:	f7fe bdb9 	b.w	1a009c4a <_vfprintf_r+0x3aa>
1a00b0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00b0da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00b0dc:	f003 0301 	and.w	r3, r3, #1
1a00b0e0:	2a00      	cmp	r2, #0
1a00b0e2:	ea43 0309 	orr.w	r3, r3, r9
1a00b0e6:	f340 8142 	ble.w	1a00b36e <_vfprintf_r+0x1ace>
1a00b0ea:	2b00      	cmp	r3, #0
1a00b0ec:	f040 8119 	bne.w	1a00b322 <_vfprintf_r+0x1a82>
1a00b0f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a00b0f2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00b0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00b0f8:	055a      	lsls	r2, r3, #21
1a00b0fa:	f100 80ec 	bmi.w	1a00b2d6 <_vfprintf_r+0x1a36>
1a00b0fe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00b102:	9303      	str	r3, [sp, #12]
1a00b104:	e69d      	b.n	1a00ae42 <_vfprintf_r+0x15a2>
1a00b106:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a00b10a:	189e      	adds	r6, r3, r2
1a00b10c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00b10e:	2b00      	cmp	r3, #0
1a00b110:	f340 811e 	ble.w	1a00b350 <_vfprintf_r+0x1ab0>
1a00b114:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00b118:	e7ed      	b.n	1a00b0f6 <_vfprintf_r+0x1856>
1a00b11a:	aa28      	add	r2, sp, #160	; 0xa0
1a00b11c:	9907      	ldr	r1, [sp, #28]
1a00b11e:	9805      	ldr	r0, [sp, #20]
1a00b120:	f002 fa76 	bl	1a00d610 <__sprint_r>
1a00b124:	2800      	cmp	r0, #0
1a00b126:	f47f a953 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00b12a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00b12c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00b12e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00b130:	1ad3      	subs	r3, r2, r3
1a00b132:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00b136:	f7ff baac 	b.w	1a00a692 <_vfprintf_r+0xdf2>
1a00b13a:	eb07 0409 	add.w	r4, r7, r9
1a00b13e:	e79c      	b.n	1a00b07a <_vfprintf_r+0x17da>
1a00b140:	425d      	negs	r5, r3
1a00b142:	3310      	adds	r3, #16
1a00b144:	4ba7      	ldr	r3, [pc, #668]	; (1a00b3e4 <_vfprintf_r+0x1b44>)
1a00b146:	da63      	bge.n	1a00b210 <_vfprintf_r+0x1970>
1a00b148:	4619      	mov	r1, r3
1a00b14a:	2610      	movs	r6, #16
1a00b14c:	4623      	mov	r3, r4
1a00b14e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a00b152:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00b156:	460c      	mov	r4, r1
1a00b158:	e004      	b.n	1a00b164 <_vfprintf_r+0x18c4>
1a00b15a:	f10b 0b08 	add.w	fp, fp, #8
1a00b15e:	3d10      	subs	r5, #16
1a00b160:	2d10      	cmp	r5, #16
1a00b162:	dd52      	ble.n	1a00b20a <_vfprintf_r+0x196a>
1a00b164:	3201      	adds	r2, #1
1a00b166:	3310      	adds	r3, #16
1a00b168:	2a07      	cmp	r2, #7
1a00b16a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00b16e:	e9cb 4600 	strd	r4, r6, [fp]
1a00b172:	ddf2      	ble.n	1a00b15a <_vfprintf_r+0x18ba>
1a00b174:	aa28      	add	r2, sp, #160	; 0xa0
1a00b176:	4649      	mov	r1, r9
1a00b178:	4640      	mov	r0, r8
1a00b17a:	f002 fa49 	bl	1a00d610 <__sprint_r>
1a00b17e:	2800      	cmp	r0, #0
1a00b180:	f47f a9c0 	bne.w	1a00a504 <_vfprintf_r+0xc64>
1a00b184:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00b188:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00b18c:	e7e7      	b.n	1a00b15e <_vfprintf_r+0x18be>
1a00b18e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a00b192:	07db      	lsls	r3, r3, #31
1a00b194:	d407      	bmi.n	1a00b1a6 <_vfprintf_r+0x1906>
1a00b196:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00b19a:	059f      	lsls	r7, r3, #22
1a00b19c:	d403      	bmi.n	1a00b1a6 <_vfprintf_r+0x1906>
1a00b19e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00b1a2:	f7fc f95d 	bl	1a007460 <__retarget_lock_release_recursive>
1a00b1a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00b1aa:	9304      	str	r3, [sp, #16]
1a00b1ac:	f7ff b9bb 	b.w	1a00a526 <_vfprintf_r+0xc86>
1a00b1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00b1b2:	9326      	str	r3, [sp, #152]	; 0x98
1a00b1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00b1b6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a00b1ba:	7bd9      	ldrb	r1, [r3, #15]
1a00b1bc:	428a      	cmp	r2, r1
1a00b1be:	4633      	mov	r3, r6
1a00b1c0:	d109      	bne.n	1a00b1d6 <_vfprintf_r+0x1936>
1a00b1c2:	2030      	movs	r0, #48	; 0x30
1a00b1c4:	f803 0c01 	strb.w	r0, [r3, #-1]
1a00b1c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a00b1ca:	1e5a      	subs	r2, r3, #1
1a00b1cc:	9226      	str	r2, [sp, #152]	; 0x98
1a00b1ce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a00b1d2:	4291      	cmp	r1, r2
1a00b1d4:	d0f6      	beq.n	1a00b1c4 <_vfprintf_r+0x1924>
1a00b1d6:	2a39      	cmp	r2, #57	; 0x39
1a00b1d8:	bf0b      	itete	eq
1a00b1da:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a00b1dc:	3201      	addne	r2, #1
1a00b1de:	7a92      	ldrbeq	r2, [r2, #10]
1a00b1e0:	b2d2      	uxtbne	r2, r2
1a00b1e2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a00b1e6:	f7ff bb6e 	b.w	1a00a8c6 <_vfprintf_r+0x1026>
1a00b1ea:	2330      	movs	r3, #48	; 0x30
1a00b1ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a00b1f0:	2378      	movs	r3, #120	; 0x78
1a00b1f2:	e53e      	b.n	1a00ac72 <_vfprintf_r+0x13d2>
1a00b1f4:	f109 0101 	add.w	r1, r9, #1
1a00b1f8:	9805      	ldr	r0, [sp, #20]
1a00b1fa:	f7fc f933 	bl	1a007464 <_malloc_r>
1a00b1fe:	4607      	mov	r7, r0
1a00b200:	2800      	cmp	r0, #0
1a00b202:	f000 80d5 	beq.w	1a00b3b0 <_vfprintf_r+0x1b10>
1a00b206:	9009      	str	r0, [sp, #36]	; 0x24
1a00b208:	e540      	b.n	1a00ac8c <_vfprintf_r+0x13ec>
1a00b20a:	4621      	mov	r1, r4
1a00b20c:	461c      	mov	r4, r3
1a00b20e:	460b      	mov	r3, r1
1a00b210:	3201      	adds	r2, #1
1a00b212:	442c      	add	r4, r5
1a00b214:	2a07      	cmp	r2, #7
1a00b216:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00b21a:	e9cb 3500 	strd	r3, r5, [fp]
1a00b21e:	f77f aaea 	ble.w	1a00a7f6 <_vfprintf_r+0xf56>
1a00b222:	aa28      	add	r2, sp, #160	; 0xa0
1a00b224:	9907      	ldr	r1, [sp, #28]
1a00b226:	9805      	ldr	r0, [sp, #20]
1a00b228:	f002 f9f2 	bl	1a00d610 <__sprint_r>
1a00b22c:	2800      	cmp	r0, #0
1a00b22e:	f47f a8cf 	bne.w	1a00a3d0 <_vfprintf_r+0xb30>
1a00b232:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00b236:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00b23a:	f7ff b8df 	b.w	1a00a3fc <_vfprintf_r+0xb5c>
1a00b23e:	f109 0401 	add.w	r4, r9, #1
1a00b242:	a926      	add	r1, sp, #152	; 0x98
1a00b244:	ab23      	add	r3, sp, #140	; 0x8c
1a00b246:	e9cd 3100 	strd	r3, r1, [sp]
1a00b24a:	4622      	mov	r2, r4
1a00b24c:	ab22      	add	r3, sp, #136	; 0x88
1a00b24e:	2102      	movs	r1, #2
1a00b250:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00b254:	9805      	ldr	r0, [sp, #20]
1a00b256:	f000 fa0b 	bl	1a00b670 <_dtoa_r>
1a00b25a:	4607      	mov	r7, r0
1a00b25c:	443c      	add	r4, r7
1a00b25e:	e70c      	b.n	1a00b07a <_vfprintf_r+0x17da>
1a00b260:	f04f 0906 	mov.w	r9, #6
1a00b264:	f7ff bb03 	b.w	1a00a86e <_vfprintf_r+0xfce>
1a00b268:	a822      	add	r0, sp, #136	; 0x88
1a00b26a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00b26e:	f002 f8a7 	bl	1a00d3c0 <frexp>
1a00b272:	2200      	movs	r2, #0
1a00b274:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00b278:	ec51 0b10 	vmov	r0, r1, d0
1a00b27c:	f7fb f95c 	bl	1a006538 <__aeabi_dmul>
1a00b280:	2200      	movs	r2, #0
1a00b282:	2300      	movs	r3, #0
1a00b284:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00b288:	f7fb fbbe 	bl	1a006a08 <__aeabi_dcmpeq>
1a00b28c:	b108      	cbz	r0, 1a00b292 <_vfprintf_r+0x19f2>
1a00b28e:	2301      	movs	r3, #1
1a00b290:	9322      	str	r3, [sp, #136]	; 0x88
1a00b292:	4b55      	ldr	r3, [pc, #340]	; (1a00b3e8 <_vfprintf_r+0x1b48>)
1a00b294:	930b      	str	r3, [sp, #44]	; 0x2c
1a00b296:	e529      	b.n	1a00acec <_vfprintf_r+0x144c>
1a00b298:	2900      	cmp	r1, #0
1a00b29a:	d17b      	bne.n	1a00b394 <_vfprintf_r+0x1af4>
1a00b29c:	2330      	movs	r3, #48	; 0x30
1a00b29e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a00b2a2:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a00b2a6:	3230      	adds	r2, #48	; 0x30
1a00b2a8:	f803 2b01 	strb.w	r2, [r3], #1
1a00b2ac:	aa24      	add	r2, sp, #144	; 0x90
1a00b2ae:	1a9b      	subs	r3, r3, r2
1a00b2b0:	9316      	str	r3, [sp, #88]	; 0x58
1a00b2b2:	f7ff bb61 	b.w	1a00a978 <_vfprintf_r+0x10d8>
1a00b2b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00b2b8:	4f4c      	ldr	r7, [pc, #304]	; (1a00b3ec <_vfprintf_r+0x1b4c>)
1a00b2ba:	2b00      	cmp	r3, #0
1a00b2bc:	bfb6      	itet	lt
1a00b2be:	222d      	movlt	r2, #45	; 0x2d
1a00b2c0:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a00b2c4:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a00b2c8:	4b49      	ldr	r3, [pc, #292]	; (1a00b3f0 <_vfprintf_r+0x1b50>)
1a00b2ca:	f7fe beec 	b.w	1a00a0a6 <_vfprintf_r+0x806>
1a00b2ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a00b2d0:	e5ab      	b.n	1a00ae2a <_vfprintf_r+0x158a>
1a00b2d2:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00b2d6:	9818      	ldr	r0, [sp, #96]	; 0x60
1a00b2d8:	2200      	movs	r2, #0
1a00b2da:	920c      	str	r2, [sp, #48]	; 0x30
1a00b2dc:	920f      	str	r2, [sp, #60]	; 0x3c
1a00b2de:	7803      	ldrb	r3, [r0, #0]
1a00b2e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00b2e2:	2bff      	cmp	r3, #255	; 0xff
1a00b2e4:	d00c      	beq.n	1a00b300 <_vfprintf_r+0x1a60>
1a00b2e6:	4293      	cmp	r3, r2
1a00b2e8:	da0a      	bge.n	1a00b300 <_vfprintf_r+0x1a60>
1a00b2ea:	7841      	ldrb	r1, [r0, #1]
1a00b2ec:	1ad2      	subs	r2, r2, r3
1a00b2ee:	b1a1      	cbz	r1, 1a00b31a <_vfprintf_r+0x1a7a>
1a00b2f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00b2f2:	3301      	adds	r3, #1
1a00b2f4:	930f      	str	r3, [sp, #60]	; 0x3c
1a00b2f6:	460b      	mov	r3, r1
1a00b2f8:	2bff      	cmp	r3, #255	; 0xff
1a00b2fa:	f100 0001 	add.w	r0, r0, #1
1a00b2fe:	d1f2      	bne.n	1a00b2e6 <_vfprintf_r+0x1a46>
1a00b300:	920e      	str	r2, [sp, #56]	; 0x38
1a00b302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00b304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00b306:	9018      	str	r0, [sp, #96]	; 0x60
1a00b308:	4413      	add	r3, r2
1a00b30a:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00b30c:	fb02 6603 	mla	r6, r2, r3, r6
1a00b310:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00b314:	9303      	str	r3, [sp, #12]
1a00b316:	f7ff bb45 	b.w	1a00a9a4 <_vfprintf_r+0x1104>
1a00b31a:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00b31c:	3101      	adds	r1, #1
1a00b31e:	910c      	str	r1, [sp, #48]	; 0x30
1a00b320:	e7df      	b.n	1a00b2e2 <_vfprintf_r+0x1a42>
1a00b322:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00b324:	18d6      	adds	r6, r2, r3
1a00b326:	444e      	add	r6, r9
1a00b328:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00b32c:	e6e3      	b.n	1a00b0f6 <_vfprintf_r+0x1856>
1a00b32e:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00b332:	f7ff b8ec 	b.w	1a00a50e <_vfprintf_r+0xc6e>
1a00b336:	2200      	movs	r2, #0
1a00b338:	2300      	movs	r3, #0
1a00b33a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00b33e:	f7fb fb63 	bl	1a006a08 <__aeabi_dcmpeq>
1a00b342:	2800      	cmp	r0, #0
1a00b344:	f47f ae96 	bne.w	1a00b074 <_vfprintf_r+0x17d4>
1a00b348:	f1c9 0301 	rsb	r3, r9, #1
1a00b34c:	9322      	str	r3, [sp, #136]	; 0x88
1a00b34e:	e692      	b.n	1a00b076 <_vfprintf_r+0x17d6>
1a00b350:	f1c3 0301 	rsb	r3, r3, #1
1a00b354:	441e      	add	r6, r3
1a00b356:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00b35a:	9303      	str	r3, [sp, #12]
1a00b35c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00b360:	e56f      	b.n	1a00ae42 <_vfprintf_r+0x15a2>
1a00b362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00b364:	07dd      	lsls	r5, r3, #31
1a00b366:	f57f ab10 	bpl.w	1a00a98a <_vfprintf_r+0x10ea>
1a00b36a:	f7ff bb0c 	b.w	1a00a986 <_vfprintf_r+0x10e6>
1a00b36e:	b92b      	cbnz	r3, 1a00b37c <_vfprintf_r+0x1adc>
1a00b370:	2301      	movs	r3, #1
1a00b372:	9303      	str	r3, [sp, #12]
1a00b374:	461e      	mov	r6, r3
1a00b376:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00b37a:	e562      	b.n	1a00ae42 <_vfprintf_r+0x15a2>
1a00b37c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00b37e:	1c5e      	adds	r6, r3, #1
1a00b380:	444e      	add	r6, r9
1a00b382:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00b386:	9303      	str	r3, [sp, #12]
1a00b388:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00b38c:	e559      	b.n	1a00ae42 <_vfprintf_r+0x15a2>
1a00b38e:	465a      	mov	r2, fp
1a00b390:	f7ff bb3f 	b.w	1a00aa12 <_vfprintf_r+0x1172>
1a00b394:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a00b398:	e785      	b.n	1a00b2a6 <_vfprintf_r+0x1a06>
1a00b39a:	9b08      	ldr	r3, [sp, #32]
1a00b39c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a00b3a0:	f853 0b04 	ldr.w	r0, [r3], #4
1a00b3a4:	9308      	str	r3, [sp, #32]
1a00b3a6:	4692      	mov	sl, r2
1a00b3a8:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a00b3ac:	f7fe bafc 	b.w	1a0099a8 <_vfprintf_r+0x108>
1a00b3b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00b3b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00b3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00b3bc:	f8a9 300c 	strh.w	r3, [r9, #12]
1a00b3c0:	f7ff b8a5 	b.w	1a00a50e <_vfprintf_r+0xc6e>
1a00b3c4:	461e      	mov	r6, r3
1a00b3c6:	f7fe bc15 	b.w	1a009bf4 <_vfprintf_r+0x354>
1a00b3ca:	461e      	mov	r6, r3
1a00b3cc:	f7fe bc5e 	b.w	1a009c8c <_vfprintf_r+0x3ec>
1a00b3d0:	461e      	mov	r6, r3
1a00b3d2:	f7fe bc48 	b.w	1a009c66 <_vfprintf_r+0x3c6>
1a00b3d6:	464c      	mov	r4, r9
1a00b3d8:	443c      	add	r4, r7
1a00b3da:	e64e      	b.n	1a00b07a <_vfprintf_r+0x17da>
1a00b3dc:	2302      	movs	r3, #2
1a00b3de:	9316      	str	r3, [sp, #88]	; 0x58
1a00b3e0:	f7ff baca 	b.w	1a00a978 <_vfprintf_r+0x10d8>
1a00b3e4:	1a00eb4c 	.word	0x1a00eb4c
1a00b3e8:	1a00eae8 	.word	0x1a00eae8
1a00b3ec:	1a00eae0 	.word	0x1a00eae0
1a00b3f0:	1a00eae4 	.word	0x1a00eae4

1a00b3f4 <__sbprintf>:
1a00b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00b3f8:	460c      	mov	r4, r1
1a00b3fa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a00b3fe:	8989      	ldrh	r1, [r1, #12]
1a00b400:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a00b402:	89e5      	ldrh	r5, [r4, #14]
1a00b404:	9619      	str	r6, [sp, #100]	; 0x64
1a00b406:	f021 0102 	bic.w	r1, r1, #2
1a00b40a:	4606      	mov	r6, r0
1a00b40c:	69e0      	ldr	r0, [r4, #28]
1a00b40e:	f8ad 100c 	strh.w	r1, [sp, #12]
1a00b412:	4617      	mov	r7, r2
1a00b414:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a00b418:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a00b41a:	f8ad 500e 	strh.w	r5, [sp, #14]
1a00b41e:	4698      	mov	r8, r3
1a00b420:	ad1a      	add	r5, sp, #104	; 0x68
1a00b422:	2300      	movs	r3, #0
1a00b424:	9007      	str	r0, [sp, #28]
1a00b426:	a816      	add	r0, sp, #88	; 0x58
1a00b428:	9209      	str	r2, [sp, #36]	; 0x24
1a00b42a:	9306      	str	r3, [sp, #24]
1a00b42c:	9500      	str	r5, [sp, #0]
1a00b42e:	9504      	str	r5, [sp, #16]
1a00b430:	9102      	str	r1, [sp, #8]
1a00b432:	9105      	str	r1, [sp, #20]
1a00b434:	f7fc f80e 	bl	1a007454 <__retarget_lock_init_recursive>
1a00b438:	4643      	mov	r3, r8
1a00b43a:	463a      	mov	r2, r7
1a00b43c:	4669      	mov	r1, sp
1a00b43e:	4630      	mov	r0, r6
1a00b440:	f7fe fa2e 	bl	1a0098a0 <_vfprintf_r>
1a00b444:	1e05      	subs	r5, r0, #0
1a00b446:	db07      	blt.n	1a00b458 <__sbprintf+0x64>
1a00b448:	4630      	mov	r0, r6
1a00b44a:	4669      	mov	r1, sp
1a00b44c:	f7fb fddc 	bl	1a007008 <_fflush_r>
1a00b450:	2800      	cmp	r0, #0
1a00b452:	bf18      	it	ne
1a00b454:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a00b458:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a00b45c:	065b      	lsls	r3, r3, #25
1a00b45e:	d503      	bpl.n	1a00b468 <__sbprintf+0x74>
1a00b460:	89a3      	ldrh	r3, [r4, #12]
1a00b462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00b466:	81a3      	strh	r3, [r4, #12]
1a00b468:	9816      	ldr	r0, [sp, #88]	; 0x58
1a00b46a:	f7fb fff5 	bl	1a007458 <__retarget_lock_close_recursive>
1a00b46e:	4628      	mov	r0, r5
1a00b470:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a00b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00b478 <__swsetup_r>:
1a00b478:	b538      	push	{r3, r4, r5, lr}
1a00b47a:	4b32      	ldr	r3, [pc, #200]	; (1a00b544 <__swsetup_r+0xcc>)
1a00b47c:	681b      	ldr	r3, [r3, #0]
1a00b47e:	4605      	mov	r5, r0
1a00b480:	460c      	mov	r4, r1
1a00b482:	b10b      	cbz	r3, 1a00b488 <__swsetup_r+0x10>
1a00b484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a00b486:	b312      	cbz	r2, 1a00b4ce <__swsetup_r+0x56>
1a00b488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00b48c:	b293      	uxth	r3, r2
1a00b48e:	0718      	lsls	r0, r3, #28
1a00b490:	d525      	bpl.n	1a00b4de <__swsetup_r+0x66>
1a00b492:	6920      	ldr	r0, [r4, #16]
1a00b494:	2800      	cmp	r0, #0
1a00b496:	d02d      	beq.n	1a00b4f4 <__swsetup_r+0x7c>
1a00b498:	f013 0201 	ands.w	r2, r3, #1
1a00b49c:	d007      	beq.n	1a00b4ae <__swsetup_r+0x36>
1a00b49e:	6963      	ldr	r3, [r4, #20]
1a00b4a0:	2200      	movs	r2, #0
1a00b4a2:	425b      	negs	r3, r3
1a00b4a4:	61a3      	str	r3, [r4, #24]
1a00b4a6:	60a2      	str	r2, [r4, #8]
1a00b4a8:	b138      	cbz	r0, 1a00b4ba <__swsetup_r+0x42>
1a00b4aa:	2000      	movs	r0, #0
1a00b4ac:	bd38      	pop	{r3, r4, r5, pc}
1a00b4ae:	0799      	lsls	r1, r3, #30
1a00b4b0:	bf58      	it	pl
1a00b4b2:	6962      	ldrpl	r2, [r4, #20]
1a00b4b4:	60a2      	str	r2, [r4, #8]
1a00b4b6:	2800      	cmp	r0, #0
1a00b4b8:	d1f7      	bne.n	1a00b4aa <__swsetup_r+0x32>
1a00b4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00b4be:	061a      	lsls	r2, r3, #24
1a00b4c0:	d5f4      	bpl.n	1a00b4ac <__swsetup_r+0x34>
1a00b4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00b4c6:	81a3      	strh	r3, [r4, #12]
1a00b4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00b4cc:	bd38      	pop	{r3, r4, r5, pc}
1a00b4ce:	4618      	mov	r0, r3
1a00b4d0:	f7fb fdf6 	bl	1a0070c0 <__sinit>
1a00b4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00b4d8:	b293      	uxth	r3, r2
1a00b4da:	0718      	lsls	r0, r3, #28
1a00b4dc:	d4d9      	bmi.n	1a00b492 <__swsetup_r+0x1a>
1a00b4de:	06d9      	lsls	r1, r3, #27
1a00b4e0:	d528      	bpl.n	1a00b534 <__swsetup_r+0xbc>
1a00b4e2:	0758      	lsls	r0, r3, #29
1a00b4e4:	d412      	bmi.n	1a00b50c <__swsetup_r+0x94>
1a00b4e6:	6920      	ldr	r0, [r4, #16]
1a00b4e8:	f042 0308 	orr.w	r3, r2, #8
1a00b4ec:	81a3      	strh	r3, [r4, #12]
1a00b4ee:	b29b      	uxth	r3, r3
1a00b4f0:	2800      	cmp	r0, #0
1a00b4f2:	d1d1      	bne.n	1a00b498 <__swsetup_r+0x20>
1a00b4f4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a00b4f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a00b4fc:	d0cc      	beq.n	1a00b498 <__swsetup_r+0x20>
1a00b4fe:	4628      	mov	r0, r5
1a00b500:	4621      	mov	r1, r4
1a00b502:	f001 f995 	bl	1a00c830 <__smakebuf_r>
1a00b506:	89a3      	ldrh	r3, [r4, #12]
1a00b508:	6920      	ldr	r0, [r4, #16]
1a00b50a:	e7c5      	b.n	1a00b498 <__swsetup_r+0x20>
1a00b50c:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a00b50e:	b151      	cbz	r1, 1a00b526 <__swsetup_r+0xae>
1a00b510:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00b514:	4299      	cmp	r1, r3
1a00b516:	d004      	beq.n	1a00b522 <__swsetup_r+0xaa>
1a00b518:	4628      	mov	r0, r5
1a00b51a:	f7fb fe57 	bl	1a0071cc <_free_r>
1a00b51e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00b522:	2300      	movs	r3, #0
1a00b524:	6323      	str	r3, [r4, #48]	; 0x30
1a00b526:	2300      	movs	r3, #0
1a00b528:	6920      	ldr	r0, [r4, #16]
1a00b52a:	6063      	str	r3, [r4, #4]
1a00b52c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a00b530:	6020      	str	r0, [r4, #0]
1a00b532:	e7d9      	b.n	1a00b4e8 <__swsetup_r+0x70>
1a00b534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a00b538:	2309      	movs	r3, #9
1a00b53a:	602b      	str	r3, [r5, #0]
1a00b53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00b540:	81a2      	strh	r2, [r4, #12]
1a00b542:	bd38      	pop	{r3, r4, r5, pc}
1a00b544:	10000094 	.word	0x10000094

1a00b548 <quorem>:
1a00b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00b54c:	6903      	ldr	r3, [r0, #16]
1a00b54e:	690f      	ldr	r7, [r1, #16]
1a00b550:	42bb      	cmp	r3, r7
1a00b552:	b083      	sub	sp, #12
1a00b554:	f2c0 8086 	blt.w	1a00b664 <quorem+0x11c>
1a00b558:	3f01      	subs	r7, #1
1a00b55a:	f101 0614 	add.w	r6, r1, #20
1a00b55e:	f100 0a14 	add.w	sl, r0, #20
1a00b562:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a00b566:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00b56a:	00bc      	lsls	r4, r7, #2
1a00b56c:	3301      	adds	r3, #1
1a00b56e:	9400      	str	r4, [sp, #0]
1a00b570:	eb06 0904 	add.w	r9, r6, r4
1a00b574:	429a      	cmp	r2, r3
1a00b576:	4454      	add	r4, sl
1a00b578:	fbb2 f8f3 	udiv	r8, r2, r3
1a00b57c:	9401      	str	r4, [sp, #4]
1a00b57e:	d33a      	bcc.n	1a00b5f6 <quorem+0xae>
1a00b580:	2500      	movs	r5, #0
1a00b582:	462a      	mov	r2, r5
1a00b584:	46b6      	mov	lr, r6
1a00b586:	46d4      	mov	ip, sl
1a00b588:	f85e 4b04 	ldr.w	r4, [lr], #4
1a00b58c:	f8dc 3000 	ldr.w	r3, [ip]
1a00b590:	fa1f fb84 	uxth.w	fp, r4
1a00b594:	fb08 550b 	mla	r5, r8, fp, r5
1a00b598:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a00b59c:	0c24      	lsrs	r4, r4, #16
1a00b59e:	fb08 b404 	mla	r4, r8, r4, fp
1a00b5a2:	b2ad      	uxth	r5, r5
1a00b5a4:	1b55      	subs	r5, r2, r5
1a00b5a6:	b2a2      	uxth	r2, r4
1a00b5a8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a00b5ac:	fa15 f383 	uxtah	r3, r5, r3
1a00b5b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a00b5b4:	b29b      	uxth	r3, r3
1a00b5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00b5ba:	45f1      	cmp	r9, lr
1a00b5bc:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a00b5c0:	f84c 3b04 	str.w	r3, [ip], #4
1a00b5c4:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00b5c8:	d2de      	bcs.n	1a00b588 <quorem+0x40>
1a00b5ca:	9b00      	ldr	r3, [sp, #0]
1a00b5cc:	f85a 3003 	ldr.w	r3, [sl, r3]
1a00b5d0:	b98b      	cbnz	r3, 1a00b5f6 <quorem+0xae>
1a00b5d2:	9a01      	ldr	r2, [sp, #4]
1a00b5d4:	1f13      	subs	r3, r2, #4
1a00b5d6:	459a      	cmp	sl, r3
1a00b5d8:	d20c      	bcs.n	1a00b5f4 <quorem+0xac>
1a00b5da:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a00b5de:	b94b      	cbnz	r3, 1a00b5f4 <quorem+0xac>
1a00b5e0:	f1a2 0308 	sub.w	r3, r2, #8
1a00b5e4:	e002      	b.n	1a00b5ec <quorem+0xa4>
1a00b5e6:	681a      	ldr	r2, [r3, #0]
1a00b5e8:	3b04      	subs	r3, #4
1a00b5ea:	b91a      	cbnz	r2, 1a00b5f4 <quorem+0xac>
1a00b5ec:	459a      	cmp	sl, r3
1a00b5ee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a00b5f2:	d3f8      	bcc.n	1a00b5e6 <quorem+0x9e>
1a00b5f4:	6107      	str	r7, [r0, #16]
1a00b5f6:	4604      	mov	r4, r0
1a00b5f8:	f001 fc34 	bl	1a00ce64 <__mcmp>
1a00b5fc:	2800      	cmp	r0, #0
1a00b5fe:	db2d      	blt.n	1a00b65c <quorem+0x114>
1a00b600:	f108 0801 	add.w	r8, r8, #1
1a00b604:	4650      	mov	r0, sl
1a00b606:	2300      	movs	r3, #0
1a00b608:	f856 1b04 	ldr.w	r1, [r6], #4
1a00b60c:	6805      	ldr	r5, [r0, #0]
1a00b60e:	b28a      	uxth	r2, r1
1a00b610:	1a9a      	subs	r2, r3, r2
1a00b612:	0c0b      	lsrs	r3, r1, #16
1a00b614:	fa12 f285 	uxtah	r2, r2, r5
1a00b618:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a00b61c:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a00b620:	b292      	uxth	r2, r2
1a00b622:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00b626:	45b1      	cmp	r9, r6
1a00b628:	f840 2b04 	str.w	r2, [r0], #4
1a00b62c:	ea4f 4323 	mov.w	r3, r3, asr #16
1a00b630:	d2ea      	bcs.n	1a00b608 <quorem+0xc0>
1a00b632:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00b636:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a00b63a:	b97a      	cbnz	r2, 1a00b65c <quorem+0x114>
1a00b63c:	1f1a      	subs	r2, r3, #4
1a00b63e:	4592      	cmp	sl, r2
1a00b640:	d20b      	bcs.n	1a00b65a <quorem+0x112>
1a00b642:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a00b646:	b942      	cbnz	r2, 1a00b65a <quorem+0x112>
1a00b648:	3b08      	subs	r3, #8
1a00b64a:	e002      	b.n	1a00b652 <quorem+0x10a>
1a00b64c:	681a      	ldr	r2, [r3, #0]
1a00b64e:	3b04      	subs	r3, #4
1a00b650:	b91a      	cbnz	r2, 1a00b65a <quorem+0x112>
1a00b652:	459a      	cmp	sl, r3
1a00b654:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a00b658:	d3f8      	bcc.n	1a00b64c <quorem+0x104>
1a00b65a:	6127      	str	r7, [r4, #16]
1a00b65c:	4640      	mov	r0, r8
1a00b65e:	b003      	add	sp, #12
1a00b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b664:	2000      	movs	r0, #0
1a00b666:	b003      	add	sp, #12
1a00b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b66c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a00b670 <_dtoa_r>:
1a00b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00b674:	ec57 6b10 	vmov	r6, r7, d0
1a00b678:	b097      	sub	sp, #92	; 0x5c
1a00b67a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a00b67c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a00b67e:	9102      	str	r1, [sp, #8]
1a00b680:	4682      	mov	sl, r0
1a00b682:	920a      	str	r2, [sp, #40]	; 0x28
1a00b684:	9307      	str	r3, [sp, #28]
1a00b686:	e9cd 6700 	strd	r6, r7, [sp]
1a00b68a:	b155      	cbz	r5, 1a00b6a2 <_dtoa_r+0x32>
1a00b68c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a00b68e:	606a      	str	r2, [r5, #4]
1a00b690:	2301      	movs	r3, #1
1a00b692:	4093      	lsls	r3, r2
1a00b694:	60ab      	str	r3, [r5, #8]
1a00b696:	4629      	mov	r1, r5
1a00b698:	f001 f9f8 	bl	1a00ca8c <_Bfree>
1a00b69c:	2300      	movs	r3, #0
1a00b69e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a00b6a2:	1e3e      	subs	r6, r7, #0
1a00b6a4:	bfb4      	ite	lt
1a00b6a6:	2301      	movlt	r3, #1
1a00b6a8:	2300      	movge	r3, #0
1a00b6aa:	6023      	str	r3, [r4, #0]
1a00b6ac:	4b76      	ldr	r3, [pc, #472]	; (1a00b888 <_dtoa_r+0x218>)
1a00b6ae:	bfbc      	itt	lt
1a00b6b0:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a00b6b4:	9601      	strlt	r6, [sp, #4]
1a00b6b6:	43b3      	bics	r3, r6
1a00b6b8:	f000 80ae 	beq.w	1a00b818 <_dtoa_r+0x1a8>
1a00b6bc:	ed9d 7b00 	vldr	d7, [sp]
1a00b6c0:	2200      	movs	r2, #0
1a00b6c2:	2300      	movs	r3, #0
1a00b6c4:	ec51 0b17 	vmov	r0, r1, d7
1a00b6c8:	ed8d 7b04 	vstr	d7, [sp, #16]
1a00b6cc:	f7fb f99c 	bl	1a006a08 <__aeabi_dcmpeq>
1a00b6d0:	4605      	mov	r5, r0
1a00b6d2:	b178      	cbz	r0, 1a00b6f4 <_dtoa_r+0x84>
1a00b6d4:	9a07      	ldr	r2, [sp, #28]
1a00b6d6:	2301      	movs	r3, #1
1a00b6d8:	6013      	str	r3, [r2, #0]
1a00b6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00b6dc:	2b00      	cmp	r3, #0
1a00b6de:	f000 8313 	beq.w	1a00bd08 <_dtoa_r+0x698>
1a00b6e2:	4b6a      	ldr	r3, [pc, #424]	; (1a00b88c <_dtoa_r+0x21c>)
1a00b6e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a00b6e6:	6013      	str	r3, [r2, #0]
1a00b6e8:	3b01      	subs	r3, #1
1a00b6ea:	9303      	str	r3, [sp, #12]
1a00b6ec:	9803      	ldr	r0, [sp, #12]
1a00b6ee:	b017      	add	sp, #92	; 0x5c
1a00b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b6f4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a00b6f8:	aa14      	add	r2, sp, #80	; 0x50
1a00b6fa:	a915      	add	r1, sp, #84	; 0x54
1a00b6fc:	ec48 7b10 	vmov	d0, r7, r8
1a00b700:	4650      	mov	r0, sl
1a00b702:	f001 fc47 	bl	1a00cf94 <__d2b>
1a00b706:	0d34      	lsrs	r4, r6, #20
1a00b708:	4683      	mov	fp, r0
1a00b70a:	f040 809b 	bne.w	1a00b844 <_dtoa_r+0x1d4>
1a00b70e:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a00b712:	442c      	add	r4, r5
1a00b714:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a00b718:	2b20      	cmp	r3, #32
1a00b71a:	f340 83bb 	ble.w	1a00be94 <_dtoa_r+0x824>
1a00b71e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a00b722:	409e      	lsls	r6, r3
1a00b724:	9b00      	ldr	r3, [sp, #0]
1a00b726:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a00b72a:	fa23 f000 	lsr.w	r0, r3, r0
1a00b72e:	4330      	orrs	r0, r6
1a00b730:	f7fa fe88 	bl	1a006444 <__aeabi_ui2d>
1a00b734:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a00b738:	2101      	movs	r1, #1
1a00b73a:	4602      	mov	r2, r0
1a00b73c:	3c01      	subs	r4, #1
1a00b73e:	910e      	str	r1, [sp, #56]	; 0x38
1a00b740:	4610      	mov	r0, r2
1a00b742:	4619      	mov	r1, r3
1a00b744:	2200      	movs	r2, #0
1a00b746:	4b52      	ldr	r3, [pc, #328]	; (1a00b890 <_dtoa_r+0x220>)
1a00b748:	f7fa fd3e 	bl	1a0061c8 <__aeabi_dsub>
1a00b74c:	a348      	add	r3, pc, #288	; (adr r3, 1a00b870 <_dtoa_r+0x200>)
1a00b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00b752:	f7fa fef1 	bl	1a006538 <__aeabi_dmul>
1a00b756:	a348      	add	r3, pc, #288	; (adr r3, 1a00b878 <_dtoa_r+0x208>)
1a00b758:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00b75c:	f7fa fd36 	bl	1a0061cc <__adddf3>
1a00b760:	4606      	mov	r6, r0
1a00b762:	4620      	mov	r0, r4
1a00b764:	460f      	mov	r7, r1
1a00b766:	f7fa fe7d 	bl	1a006464 <__aeabi_i2d>
1a00b76a:	a345      	add	r3, pc, #276	; (adr r3, 1a00b880 <_dtoa_r+0x210>)
1a00b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00b770:	f7fa fee2 	bl	1a006538 <__aeabi_dmul>
1a00b774:	4602      	mov	r2, r0
1a00b776:	460b      	mov	r3, r1
1a00b778:	4630      	mov	r0, r6
1a00b77a:	4639      	mov	r1, r7
1a00b77c:	f7fa fd26 	bl	1a0061cc <__adddf3>
1a00b780:	4606      	mov	r6, r0
1a00b782:	460f      	mov	r7, r1
1a00b784:	f7fb f988 	bl	1a006a98 <__aeabi_d2iz>
1a00b788:	2200      	movs	r2, #0
1a00b78a:	4681      	mov	r9, r0
1a00b78c:	2300      	movs	r3, #0
1a00b78e:	4630      	mov	r0, r6
1a00b790:	4639      	mov	r1, r7
1a00b792:	f7fb f943 	bl	1a006a1c <__aeabi_dcmplt>
1a00b796:	2800      	cmp	r0, #0
1a00b798:	f040 82a9 	bne.w	1a00bcee <_dtoa_r+0x67e>
1a00b79c:	1b2c      	subs	r4, r5, r4
1a00b79e:	f1b9 0f16 	cmp.w	r9, #22
1a00b7a2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a00b7a6:	f200 8296 	bhi.w	1a00bcd6 <_dtoa_r+0x666>
1a00b7aa:	4b3a      	ldr	r3, [pc, #232]	; (1a00b894 <_dtoa_r+0x224>)
1a00b7ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a00b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00b7b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00b7b8:	f7fb f930 	bl	1a006a1c <__aeabi_dcmplt>
1a00b7bc:	2800      	cmp	r0, #0
1a00b7be:	d06f      	beq.n	1a00b8a0 <_dtoa_r+0x230>
1a00b7c0:	2300      	movs	r3, #0
1a00b7c2:	f1b8 0f00 	cmp.w	r8, #0
1a00b7c6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a00b7ca:	930d      	str	r3, [sp, #52]	; 0x34
1a00b7cc:	f2c0 8289 	blt.w	1a00bce2 <_dtoa_r+0x672>
1a00b7d0:	2300      	movs	r3, #0
1a00b7d2:	9308      	str	r3, [sp, #32]
1a00b7d4:	f1b9 0f00 	cmp.w	r9, #0
1a00b7d8:	da68      	bge.n	1a00b8ac <_dtoa_r+0x23c>
1a00b7da:	9b08      	ldr	r3, [sp, #32]
1a00b7dc:	f8cd 9018 	str.w	r9, [sp, #24]
1a00b7e0:	eba3 0309 	sub.w	r3, r3, r9
1a00b7e4:	9308      	str	r3, [sp, #32]
1a00b7e6:	f1c9 0300 	rsb	r3, r9, #0
1a00b7ea:	930c      	str	r3, [sp, #48]	; 0x30
1a00b7ec:	9b02      	ldr	r3, [sp, #8]
1a00b7ee:	2b09      	cmp	r3, #9
1a00b7f0:	f04f 0900 	mov.w	r9, #0
1a00b7f4:	d862      	bhi.n	1a00b8bc <_dtoa_r+0x24c>
1a00b7f6:	2b05      	cmp	r3, #5
1a00b7f8:	f340 834a 	ble.w	1a00be90 <_dtoa_r+0x820>
1a00b7fc:	3b04      	subs	r3, #4
1a00b7fe:	9302      	str	r3, [sp, #8]
1a00b800:	2400      	movs	r4, #0
1a00b802:	9b02      	ldr	r3, [sp, #8]
1a00b804:	3b02      	subs	r3, #2
1a00b806:	2b03      	cmp	r3, #3
1a00b808:	f200 8641 	bhi.w	1a00c48e <_dtoa_r+0xe1e>
1a00b80c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00b810:	04630466 	.word	0x04630466
1a00b814:	0456043b 	.word	0x0456043b
1a00b818:	9a07      	ldr	r2, [sp, #28]
1a00b81a:	f242 730f 	movw	r3, #9999	; 0x270f
1a00b81e:	6013      	str	r3, [r2, #0]
1a00b820:	9b00      	ldr	r3, [sp, #0]
1a00b822:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a00b826:	4333      	orrs	r3, r6
1a00b828:	d118      	bne.n	1a00b85c <_dtoa_r+0x1ec>
1a00b82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00b82c:	2b00      	cmp	r3, #0
1a00b82e:	f000 8625 	beq.w	1a00c47c <_dtoa_r+0xe0c>
1a00b832:	4b19      	ldr	r3, [pc, #100]	; (1a00b898 <_dtoa_r+0x228>)
1a00b834:	9303      	str	r3, [sp, #12]
1a00b836:	3308      	adds	r3, #8
1a00b838:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a00b83a:	9803      	ldr	r0, [sp, #12]
1a00b83c:	6013      	str	r3, [r2, #0]
1a00b83e:	b017      	add	sp, #92	; 0x5c
1a00b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b844:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a00b848:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a00b84c:	950e      	str	r5, [sp, #56]	; 0x38
1a00b84e:	463a      	mov	r2, r7
1a00b850:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a00b854:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a00b858:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a00b85a:	e771      	b.n	1a00b740 <_dtoa_r+0xd0>
1a00b85c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00b85e:	2b00      	cmp	r3, #0
1a00b860:	f040 8400 	bne.w	1a00c064 <_dtoa_r+0x9f4>
1a00b864:	4b0d      	ldr	r3, [pc, #52]	; (1a00b89c <_dtoa_r+0x22c>)
1a00b866:	9303      	str	r3, [sp, #12]
1a00b868:	e740      	b.n	1a00b6ec <_dtoa_r+0x7c>
1a00b86a:	bf00      	nop
1a00b86c:	f3af 8000 	nop.w
1a00b870:	636f4361 	.word	0x636f4361
1a00b874:	3fd287a7 	.word	0x3fd287a7
1a00b878:	8b60c8b3 	.word	0x8b60c8b3
1a00b87c:	3fc68a28 	.word	0x3fc68a28
1a00b880:	509f79fb 	.word	0x509f79fb
1a00b884:	3fd34413 	.word	0x3fd34413
1a00b888:	7ff00000 	.word	0x7ff00000
1a00b88c:	1a00eb19 	.word	0x1a00eb19
1a00b890:	3ff80000 	.word	0x3ff80000
1a00b894:	1a00eb98 	.word	0x1a00eb98
1a00b898:	1a00eb60 	.word	0x1a00eb60
1a00b89c:	1a00eb5c 	.word	0x1a00eb5c
1a00b8a0:	f1b8 0f00 	cmp.w	r8, #0
1a00b8a4:	f2c0 84b6 	blt.w	1a00c214 <_dtoa_r+0xba4>
1a00b8a8:	900d      	str	r0, [sp, #52]	; 0x34
1a00b8aa:	9008      	str	r0, [sp, #32]
1a00b8ac:	2300      	movs	r3, #0
1a00b8ae:	930c      	str	r3, [sp, #48]	; 0x30
1a00b8b0:	9b02      	ldr	r3, [sp, #8]
1a00b8b2:	f8cd 9018 	str.w	r9, [sp, #24]
1a00b8b6:	2b09      	cmp	r3, #9
1a00b8b8:	44c8      	add	r8, r9
1a00b8ba:	d99c      	bls.n	1a00b7f6 <_dtoa_r+0x186>
1a00b8bc:	2300      	movs	r3, #0
1a00b8be:	2401      	movs	r4, #1
1a00b8c0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a00b8c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a00b8c8:	9302      	str	r3, [sp, #8]
1a00b8ca:	9509      	str	r5, [sp, #36]	; 0x24
1a00b8cc:	2100      	movs	r1, #0
1a00b8ce:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00b8d2:	950f      	str	r5, [sp, #60]	; 0x3c
1a00b8d4:	4650      	mov	r0, sl
1a00b8d6:	f001 f8b3 	bl	1a00ca40 <_Balloc>
1a00b8da:	2d0e      	cmp	r5, #14
1a00b8dc:	9003      	str	r0, [sp, #12]
1a00b8de:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a00b8e2:	f200 810a 	bhi.w	1a00bafa <_dtoa_r+0x48a>
1a00b8e6:	2c00      	cmp	r4, #0
1a00b8e8:	f000 8107 	beq.w	1a00bafa <_dtoa_r+0x48a>
1a00b8ec:	9906      	ldr	r1, [sp, #24]
1a00b8ee:	2900      	cmp	r1, #0
1a00b8f0:	f340 8466 	ble.w	1a00c1c0 <_dtoa_r+0xb50>
1a00b8f4:	4bb1      	ldr	r3, [pc, #708]	; (1a00bbbc <_dtoa_r+0x54c>)
1a00b8f6:	f001 020f 	and.w	r2, r1, #15
1a00b8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00b8fe:	ed93 7b00 	vldr	d7, [r3]
1a00b902:	110c      	asrs	r4, r1, #4
1a00b904:	06e3      	lsls	r3, r4, #27
1a00b906:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00b90a:	f140 8406 	bpl.w	1a00c11a <_dtoa_r+0xaaa>
1a00b90e:	4bac      	ldr	r3, [pc, #688]	; (1a00bbc0 <_dtoa_r+0x550>)
1a00b910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00b914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a00b918:	f7fa ff38 	bl	1a00678c <__aeabi_ddiv>
1a00b91c:	e9cd 0100 	strd	r0, r1, [sp]
1a00b920:	f004 040f 	and.w	r4, r4, #15
1a00b924:	2603      	movs	r6, #3
1a00b926:	b17c      	cbz	r4, 1a00b948 <_dtoa_r+0x2d8>
1a00b928:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00b92c:	4da4      	ldr	r5, [pc, #656]	; (1a00bbc0 <_dtoa_r+0x550>)
1a00b92e:	07e7      	lsls	r7, r4, #31
1a00b930:	d504      	bpl.n	1a00b93c <_dtoa_r+0x2cc>
1a00b932:	e9d5 2300 	ldrd	r2, r3, [r5]
1a00b936:	f7fa fdff 	bl	1a006538 <__aeabi_dmul>
1a00b93a:	3601      	adds	r6, #1
1a00b93c:	1064      	asrs	r4, r4, #1
1a00b93e:	f105 0508 	add.w	r5, r5, #8
1a00b942:	d1f4      	bne.n	1a00b92e <_dtoa_r+0x2be>
1a00b944:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a00b948:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00b94c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a00b950:	f7fa ff1c 	bl	1a00678c <__aeabi_ddiv>
1a00b954:	e9cd 0100 	strd	r0, r1, [sp]
1a00b958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00b95a:	b153      	cbz	r3, 1a00b972 <_dtoa_r+0x302>
1a00b95c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00b960:	2200      	movs	r2, #0
1a00b962:	4b98      	ldr	r3, [pc, #608]	; (1a00bbc4 <_dtoa_r+0x554>)
1a00b964:	4620      	mov	r0, r4
1a00b966:	4629      	mov	r1, r5
1a00b968:	f7fb f858 	bl	1a006a1c <__aeabi_dcmplt>
1a00b96c:	2800      	cmp	r0, #0
1a00b96e:	f040 8521 	bne.w	1a00c3b4 <_dtoa_r+0xd44>
1a00b972:	4630      	mov	r0, r6
1a00b974:	f7fa fd76 	bl	1a006464 <__aeabi_i2d>
1a00b978:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00b97c:	f7fa fddc 	bl	1a006538 <__aeabi_dmul>
1a00b980:	4b91      	ldr	r3, [pc, #580]	; (1a00bbc8 <_dtoa_r+0x558>)
1a00b982:	2200      	movs	r2, #0
1a00b984:	f7fa fc22 	bl	1a0061cc <__adddf3>
1a00b988:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00b98a:	4604      	mov	r4, r0
1a00b98c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a00b990:	2b00      	cmp	r3, #0
1a00b992:	f000 83f9 	beq.w	1a00c188 <_dtoa_r+0xb18>
1a00b996:	9b06      	ldr	r3, [sp, #24]
1a00b998:	9312      	str	r3, [sp, #72]	; 0x48
1a00b99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00b99c:	9310      	str	r3, [sp, #64]	; 0x40
1a00b99e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a00b9a2:	4639      	mov	r1, r7
1a00b9a4:	4630      	mov	r0, r6
1a00b9a6:	f7fb f877 	bl	1a006a98 <__aeabi_d2iz>
1a00b9aa:	9000      	str	r0, [sp, #0]
1a00b9ac:	f7fa fd5a 	bl	1a006464 <__aeabi_i2d>
1a00b9b0:	4602      	mov	r2, r0
1a00b9b2:	460b      	mov	r3, r1
1a00b9b4:	4630      	mov	r0, r6
1a00b9b6:	4639      	mov	r1, r7
1a00b9b8:	f7fa fc06 	bl	1a0061c8 <__aeabi_dsub>
1a00b9bc:	4b7f      	ldr	r3, [pc, #508]	; (1a00bbbc <_dtoa_r+0x54c>)
1a00b9be:	9a00      	ldr	r2, [sp, #0]
1a00b9c0:	460f      	mov	r7, r1
1a00b9c2:	9910      	ldr	r1, [sp, #64]	; 0x40
1a00b9c4:	4606      	mov	r6, r0
1a00b9c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a00b9ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a00b9cc:	9903      	ldr	r1, [sp, #12]
1a00b9ce:	3230      	adds	r2, #48	; 0x30
1a00b9d0:	e9cd 4500 	strd	r4, r5, [sp]
1a00b9d4:	b2d5      	uxtb	r5, r2
1a00b9d6:	1c4c      	adds	r4, r1, #1
1a00b9d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a00b9dc:	2800      	cmp	r0, #0
1a00b9de:	f000 848d 	beq.w	1a00c2fc <_dtoa_r+0xc8c>
1a00b9e2:	2000      	movs	r0, #0
1a00b9e4:	4979      	ldr	r1, [pc, #484]	; (1a00bbcc <_dtoa_r+0x55c>)
1a00b9e6:	f7fa fed1 	bl	1a00678c <__aeabi_ddiv>
1a00b9ea:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00b9ee:	f7fa fbeb 	bl	1a0061c8 <__aeabi_dsub>
1a00b9f2:	9b03      	ldr	r3, [sp, #12]
1a00b9f4:	4632      	mov	r2, r6
1a00b9f6:	701d      	strb	r5, [r3, #0]
1a00b9f8:	463b      	mov	r3, r7
1a00b9fa:	e9cd 0100 	strd	r0, r1, [sp]
1a00b9fe:	f7fb f82b 	bl	1a006a58 <__aeabi_dcmpgt>
1a00ba02:	2800      	cmp	r0, #0
1a00ba04:	f040 84ca 	bne.w	1a00c39c <_dtoa_r+0xd2c>
1a00ba08:	4632      	mov	r2, r6
1a00ba0a:	463b      	mov	r3, r7
1a00ba0c:	2000      	movs	r0, #0
1a00ba0e:	496d      	ldr	r1, [pc, #436]	; (1a00bbc4 <_dtoa_r+0x554>)
1a00ba10:	f7fa fbda 	bl	1a0061c8 <__aeabi_dsub>
1a00ba14:	4602      	mov	r2, r0
1a00ba16:	460b      	mov	r3, r1
1a00ba18:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00ba1c:	f7fb f81c 	bl	1a006a58 <__aeabi_dcmpgt>
1a00ba20:	2800      	cmp	r0, #0
1a00ba22:	f040 8526 	bne.w	1a00c472 <_dtoa_r+0xe02>
1a00ba26:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00ba28:	2b01      	cmp	r3, #1
1a00ba2a:	d062      	beq.n	1a00baf2 <_dtoa_r+0x482>
1a00ba2c:	9a03      	ldr	r2, [sp, #12]
1a00ba2e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a00ba32:	4413      	add	r3, r2
1a00ba34:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a00ba38:	e9dd 8900 	ldrd	r8, r9, [sp]
1a00ba3c:	f8cd b000 	str.w	fp, [sp]
1a00ba40:	46d3      	mov	fp, sl
1a00ba42:	469a      	mov	sl, r3
1a00ba44:	e00c      	b.n	1a00ba60 <_dtoa_r+0x3f0>
1a00ba46:	2000      	movs	r0, #0
1a00ba48:	495e      	ldr	r1, [pc, #376]	; (1a00bbc4 <_dtoa_r+0x554>)
1a00ba4a:	f7fa fbbd 	bl	1a0061c8 <__aeabi_dsub>
1a00ba4e:	4642      	mov	r2, r8
1a00ba50:	464b      	mov	r3, r9
1a00ba52:	f7fa ffe3 	bl	1a006a1c <__aeabi_dcmplt>
1a00ba56:	2800      	cmp	r0, #0
1a00ba58:	f040 84eb 	bne.w	1a00c432 <_dtoa_r+0xdc2>
1a00ba5c:	45a2      	cmp	sl, r4
1a00ba5e:	d041      	beq.n	1a00bae4 <_dtoa_r+0x474>
1a00ba60:	4640      	mov	r0, r8
1a00ba62:	4649      	mov	r1, r9
1a00ba64:	2200      	movs	r2, #0
1a00ba66:	4b5a      	ldr	r3, [pc, #360]	; (1a00bbd0 <_dtoa_r+0x560>)
1a00ba68:	f7fa fd66 	bl	1a006538 <__aeabi_dmul>
1a00ba6c:	2200      	movs	r2, #0
1a00ba6e:	4b58      	ldr	r3, [pc, #352]	; (1a00bbd0 <_dtoa_r+0x560>)
1a00ba70:	4680      	mov	r8, r0
1a00ba72:	4689      	mov	r9, r1
1a00ba74:	4630      	mov	r0, r6
1a00ba76:	4639      	mov	r1, r7
1a00ba78:	f7fa fd5e 	bl	1a006538 <__aeabi_dmul>
1a00ba7c:	460f      	mov	r7, r1
1a00ba7e:	4606      	mov	r6, r0
1a00ba80:	f7fb f80a 	bl	1a006a98 <__aeabi_d2iz>
1a00ba84:	4605      	mov	r5, r0
1a00ba86:	f7fa fced 	bl	1a006464 <__aeabi_i2d>
1a00ba8a:	4602      	mov	r2, r0
1a00ba8c:	460b      	mov	r3, r1
1a00ba8e:	4630      	mov	r0, r6
1a00ba90:	4639      	mov	r1, r7
1a00ba92:	f7fa fb99 	bl	1a0061c8 <__aeabi_dsub>
1a00ba96:	3530      	adds	r5, #48	; 0x30
1a00ba98:	b2ed      	uxtb	r5, r5
1a00ba9a:	4642      	mov	r2, r8
1a00ba9c:	464b      	mov	r3, r9
1a00ba9e:	f804 5b01 	strb.w	r5, [r4], #1
1a00baa2:	4606      	mov	r6, r0
1a00baa4:	460f      	mov	r7, r1
1a00baa6:	f7fa ffb9 	bl	1a006a1c <__aeabi_dcmplt>
1a00baaa:	4632      	mov	r2, r6
1a00baac:	463b      	mov	r3, r7
1a00baae:	2800      	cmp	r0, #0
1a00bab0:	d0c9      	beq.n	1a00ba46 <_dtoa_r+0x3d6>
1a00bab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00bab4:	46da      	mov	sl, fp
1a00bab6:	3301      	adds	r3, #1
1a00bab8:	f8dd b000 	ldr.w	fp, [sp]
1a00babc:	9306      	str	r3, [sp, #24]
1a00babe:	4659      	mov	r1, fp
1a00bac0:	4650      	mov	r0, sl
1a00bac2:	f000 ffe3 	bl	1a00ca8c <_Bfree>
1a00bac6:	2300      	movs	r3, #0
1a00bac8:	7023      	strb	r3, [r4, #0]
1a00baca:	9b07      	ldr	r3, [sp, #28]
1a00bacc:	461a      	mov	r2, r3
1a00bace:	9b06      	ldr	r3, [sp, #24]
1a00bad0:	6013      	str	r3, [r2, #0]
1a00bad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00bad4:	2b00      	cmp	r3, #0
1a00bad6:	f43f ae09 	beq.w	1a00b6ec <_dtoa_r+0x7c>
1a00bada:	9803      	ldr	r0, [sp, #12]
1a00badc:	601c      	str	r4, [r3, #0]
1a00bade:	b017      	add	sp, #92	; 0x5c
1a00bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00bae4:	46da      	mov	sl, fp
1a00bae6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00baea:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a00baee:	f8dd b000 	ldr.w	fp, [sp]
1a00baf2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a00baf6:	e9cd 3400 	strd	r3, r4, [sp]
1a00bafa:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00bafc:	2b00      	cmp	r3, #0
1a00bafe:	f2c0 80c9 	blt.w	1a00bc94 <_dtoa_r+0x624>
1a00bb02:	9a06      	ldr	r2, [sp, #24]
1a00bb04:	2a0e      	cmp	r2, #14
1a00bb06:	f300 80c5 	bgt.w	1a00bc94 <_dtoa_r+0x624>
1a00bb0a:	4b2c      	ldr	r3, [pc, #176]	; (1a00bbbc <_dtoa_r+0x54c>)
1a00bb0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00bb10:	e9d3 8900 	ldrd	r8, r9, [r3]
1a00bb14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00bb16:	2b00      	cmp	r3, #0
1a00bb18:	da17      	bge.n	1a00bb4a <_dtoa_r+0x4da>
1a00bb1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a00bb1c:	2f00      	cmp	r7, #0
1a00bb1e:	dc14      	bgt.n	1a00bb4a <_dtoa_r+0x4da>
1a00bb20:	f040 834b 	bne.w	1a00c1ba <_dtoa_r+0xb4a>
1a00bb24:	2200      	movs	r2, #0
1a00bb26:	4b2b      	ldr	r3, [pc, #172]	; (1a00bbd4 <_dtoa_r+0x564>)
1a00bb28:	4640      	mov	r0, r8
1a00bb2a:	4649      	mov	r1, r9
1a00bb2c:	f7fa fd04 	bl	1a006538 <__aeabi_dmul>
1a00bb30:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00bb34:	f7fa ff86 	bl	1a006a44 <__aeabi_dcmpge>
1a00bb38:	2800      	cmp	r0, #0
1a00bb3a:	f000 83be 	beq.w	1a00c2ba <_dtoa_r+0xc4a>
1a00bb3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a00bb40:	463d      	mov	r5, r7
1a00bb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00bb44:	9c03      	ldr	r4, [sp, #12]
1a00bb46:	43db      	mvns	r3, r3
1a00bb48:	e260      	b.n	1a00c00c <_dtoa_r+0x99c>
1a00bb4a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00bb4e:	4642      	mov	r2, r8
1a00bb50:	464b      	mov	r3, r9
1a00bb52:	4620      	mov	r0, r4
1a00bb54:	4629      	mov	r1, r5
1a00bb56:	f7fa fe19 	bl	1a00678c <__aeabi_ddiv>
1a00bb5a:	f7fa ff9d 	bl	1a006a98 <__aeabi_d2iz>
1a00bb5e:	9000      	str	r0, [sp, #0]
1a00bb60:	f7fa fc80 	bl	1a006464 <__aeabi_i2d>
1a00bb64:	4642      	mov	r2, r8
1a00bb66:	464b      	mov	r3, r9
1a00bb68:	f7fa fce6 	bl	1a006538 <__aeabi_dmul>
1a00bb6c:	4602      	mov	r2, r0
1a00bb6e:	460b      	mov	r3, r1
1a00bb70:	4620      	mov	r0, r4
1a00bb72:	4629      	mov	r1, r5
1a00bb74:	f7fa fb28 	bl	1a0061c8 <__aeabi_dsub>
1a00bb78:	9b00      	ldr	r3, [sp, #0]
1a00bb7a:	9c03      	ldr	r4, [sp, #12]
1a00bb7c:	9a06      	ldr	r2, [sp, #24]
1a00bb7e:	3330      	adds	r3, #48	; 0x30
1a00bb80:	f804 3b01 	strb.w	r3, [r4], #1
1a00bb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00bb86:	3201      	adds	r2, #1
1a00bb88:	2b01      	cmp	r3, #1
1a00bb8a:	4606      	mov	r6, r0
1a00bb8c:	460f      	mov	r7, r1
1a00bb8e:	9206      	str	r2, [sp, #24]
1a00bb90:	d054      	beq.n	1a00bc3c <_dtoa_r+0x5cc>
1a00bb92:	2200      	movs	r2, #0
1a00bb94:	4b0e      	ldr	r3, [pc, #56]	; (1a00bbd0 <_dtoa_r+0x560>)
1a00bb96:	f7fa fccf 	bl	1a006538 <__aeabi_dmul>
1a00bb9a:	2200      	movs	r2, #0
1a00bb9c:	2300      	movs	r3, #0
1a00bb9e:	4606      	mov	r6, r0
1a00bba0:	460f      	mov	r7, r1
1a00bba2:	f7fa ff31 	bl	1a006a08 <__aeabi_dcmpeq>
1a00bba6:	2800      	cmp	r0, #0
1a00bba8:	d189      	bne.n	1a00babe <_dtoa_r+0x44e>
1a00bbaa:	f8cd b000 	str.w	fp, [sp]
1a00bbae:	2501      	movs	r5, #1
1a00bbb0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a00bbb4:	f8cd a008 	str.w	sl, [sp, #8]
1a00bbb8:	e019      	b.n	1a00bbee <_dtoa_r+0x57e>
1a00bbba:	bf00      	nop
1a00bbbc:	1a00eb98 	.word	0x1a00eb98
1a00bbc0:	1a00eb70 	.word	0x1a00eb70
1a00bbc4:	3ff00000 	.word	0x3ff00000
1a00bbc8:	401c0000 	.word	0x401c0000
1a00bbcc:	3fe00000 	.word	0x3fe00000
1a00bbd0:	40240000 	.word	0x40240000
1a00bbd4:	40140000 	.word	0x40140000
1a00bbd8:	f7fa fcae 	bl	1a006538 <__aeabi_dmul>
1a00bbdc:	2200      	movs	r2, #0
1a00bbde:	2300      	movs	r3, #0
1a00bbe0:	4606      	mov	r6, r0
1a00bbe2:	460f      	mov	r7, r1
1a00bbe4:	f7fa ff10 	bl	1a006a08 <__aeabi_dcmpeq>
1a00bbe8:	2800      	cmp	r0, #0
1a00bbea:	f040 835c 	bne.w	1a00c2a6 <_dtoa_r+0xc36>
1a00bbee:	4642      	mov	r2, r8
1a00bbf0:	464b      	mov	r3, r9
1a00bbf2:	4630      	mov	r0, r6
1a00bbf4:	4639      	mov	r1, r7
1a00bbf6:	f7fa fdc9 	bl	1a00678c <__aeabi_ddiv>
1a00bbfa:	f7fa ff4d 	bl	1a006a98 <__aeabi_d2iz>
1a00bbfe:	4682      	mov	sl, r0
1a00bc00:	f7fa fc30 	bl	1a006464 <__aeabi_i2d>
1a00bc04:	4642      	mov	r2, r8
1a00bc06:	464b      	mov	r3, r9
1a00bc08:	f7fa fc96 	bl	1a006538 <__aeabi_dmul>
1a00bc0c:	4602      	mov	r2, r0
1a00bc0e:	460b      	mov	r3, r1
1a00bc10:	4630      	mov	r0, r6
1a00bc12:	4639      	mov	r1, r7
1a00bc14:	f7fa fad8 	bl	1a0061c8 <__aeabi_dsub>
1a00bc18:	3501      	adds	r5, #1
1a00bc1a:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a00bc1e:	45ab      	cmp	fp, r5
1a00bc20:	4606      	mov	r6, r0
1a00bc22:	460f      	mov	r7, r1
1a00bc24:	f04f 0200 	mov.w	r2, #0
1a00bc28:	4ba7      	ldr	r3, [pc, #668]	; (1a00bec8 <_dtoa_r+0x858>)
1a00bc2a:	f804 cb01 	strb.w	ip, [r4], #1
1a00bc2e:	d1d3      	bne.n	1a00bbd8 <_dtoa_r+0x568>
1a00bc30:	f8dd b000 	ldr.w	fp, [sp]
1a00bc34:	f8cd a000 	str.w	sl, [sp]
1a00bc38:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00bc3c:	4632      	mov	r2, r6
1a00bc3e:	463b      	mov	r3, r7
1a00bc40:	4630      	mov	r0, r6
1a00bc42:	4639      	mov	r1, r7
1a00bc44:	f7fa fac2 	bl	1a0061cc <__adddf3>
1a00bc48:	4642      	mov	r2, r8
1a00bc4a:	464b      	mov	r3, r9
1a00bc4c:	4606      	mov	r6, r0
1a00bc4e:	460f      	mov	r7, r1
1a00bc50:	f7fa ff02 	bl	1a006a58 <__aeabi_dcmpgt>
1a00bc54:	b960      	cbnz	r0, 1a00bc70 <_dtoa_r+0x600>
1a00bc56:	4642      	mov	r2, r8
1a00bc58:	464b      	mov	r3, r9
1a00bc5a:	4630      	mov	r0, r6
1a00bc5c:	4639      	mov	r1, r7
1a00bc5e:	f7fa fed3 	bl	1a006a08 <__aeabi_dcmpeq>
1a00bc62:	2800      	cmp	r0, #0
1a00bc64:	f43f af2b 	beq.w	1a00babe <_dtoa_r+0x44e>
1a00bc68:	9b00      	ldr	r3, [sp, #0]
1a00bc6a:	07db      	lsls	r3, r3, #31
1a00bc6c:	f57f af27 	bpl.w	1a00babe <_dtoa_r+0x44e>
1a00bc70:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00bc74:	9a03      	ldr	r2, [sp, #12]
1a00bc76:	1e63      	subs	r3, r4, #1
1a00bc78:	e004      	b.n	1a00bc84 <_dtoa_r+0x614>
1a00bc7a:	429a      	cmp	r2, r3
1a00bc7c:	f000 83c0 	beq.w	1a00c400 <_dtoa_r+0xd90>
1a00bc80:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a00bc84:	2d39      	cmp	r5, #57	; 0x39
1a00bc86:	f103 0401 	add.w	r4, r3, #1
1a00bc8a:	d0f6      	beq.n	1a00bc7a <_dtoa_r+0x60a>
1a00bc8c:	1c6a      	adds	r2, r5, #1
1a00bc8e:	b2d2      	uxtb	r2, r2
1a00bc90:	701a      	strb	r2, [r3, #0]
1a00bc92:	e714      	b.n	1a00babe <_dtoa_r+0x44e>
1a00bc94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00bc96:	2a00      	cmp	r2, #0
1a00bc98:	d03c      	beq.n	1a00bd14 <_dtoa_r+0x6a4>
1a00bc9a:	9a02      	ldr	r2, [sp, #8]
1a00bc9c:	2a01      	cmp	r2, #1
1a00bc9e:	f340 8258 	ble.w	1a00c152 <_dtoa_r+0xae2>
1a00bca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00bca4:	1e5e      	subs	r6, r3, #1
1a00bca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00bca8:	42b3      	cmp	r3, r6
1a00bcaa:	f280 8234 	bge.w	1a00c116 <_dtoa_r+0xaa6>
1a00bcae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00bcb0:	960c      	str	r6, [sp, #48]	; 0x30
1a00bcb2:	1af3      	subs	r3, r6, r3
1a00bcb4:	4499      	add	r9, r3
1a00bcb6:	2600      	movs	r6, #0
1a00bcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00bcba:	2b00      	cmp	r3, #0
1a00bcbc:	f2c0 82f8 	blt.w	1a00c2b0 <_dtoa_r+0xc40>
1a00bcc0:	9a08      	ldr	r2, [sp, #32]
1a00bcc2:	4614      	mov	r4, r2
1a00bcc4:	441a      	add	r2, r3
1a00bcc6:	4498      	add	r8, r3
1a00bcc8:	9208      	str	r2, [sp, #32]
1a00bcca:	2101      	movs	r1, #1
1a00bccc:	4650      	mov	r0, sl
1a00bcce:	f000 ff7d 	bl	1a00cbcc <__i2b>
1a00bcd2:	4605      	mov	r5, r0
1a00bcd4:	e021      	b.n	1a00bd1a <_dtoa_r+0x6aa>
1a00bcd6:	2301      	movs	r3, #1
1a00bcd8:	f1b8 0f00 	cmp.w	r8, #0
1a00bcdc:	930d      	str	r3, [sp, #52]	; 0x34
1a00bcde:	f6bf ad77 	bge.w	1a00b7d0 <_dtoa_r+0x160>
1a00bce2:	f1c4 0301 	rsb	r3, r4, #1
1a00bce6:	9308      	str	r3, [sp, #32]
1a00bce8:	f04f 0800 	mov.w	r8, #0
1a00bcec:	e572      	b.n	1a00b7d4 <_dtoa_r+0x164>
1a00bcee:	4648      	mov	r0, r9
1a00bcf0:	f7fa fbb8 	bl	1a006464 <__aeabi_i2d>
1a00bcf4:	4632      	mov	r2, r6
1a00bcf6:	463b      	mov	r3, r7
1a00bcf8:	f7fa fe86 	bl	1a006a08 <__aeabi_dcmpeq>
1a00bcfc:	2800      	cmp	r0, #0
1a00bcfe:	f47f ad4d 	bne.w	1a00b79c <_dtoa_r+0x12c>
1a00bd02:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a00bd06:	e549      	b.n	1a00b79c <_dtoa_r+0x12c>
1a00bd08:	4b70      	ldr	r3, [pc, #448]	; (1a00becc <_dtoa_r+0x85c>)
1a00bd0a:	9303      	str	r3, [sp, #12]
1a00bd0c:	9803      	ldr	r0, [sp, #12]
1a00bd0e:	b017      	add	sp, #92	; 0x5c
1a00bd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00bd14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a00bd16:	9c08      	ldr	r4, [sp, #32]
1a00bd18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00bd1a:	2c00      	cmp	r4, #0
1a00bd1c:	dd0c      	ble.n	1a00bd38 <_dtoa_r+0x6c8>
1a00bd1e:	f1b8 0f00 	cmp.w	r8, #0
1a00bd22:	dd09      	ble.n	1a00bd38 <_dtoa_r+0x6c8>
1a00bd24:	4544      	cmp	r4, r8
1a00bd26:	9a08      	ldr	r2, [sp, #32]
1a00bd28:	4623      	mov	r3, r4
1a00bd2a:	bfa8      	it	ge
1a00bd2c:	4643      	movge	r3, r8
1a00bd2e:	1ad2      	subs	r2, r2, r3
1a00bd30:	9208      	str	r2, [sp, #32]
1a00bd32:	1ae4      	subs	r4, r4, r3
1a00bd34:	eba8 0803 	sub.w	r8, r8, r3
1a00bd38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00bd3a:	b1d3      	cbz	r3, 1a00bd72 <_dtoa_r+0x702>
1a00bd3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00bd3e:	2b00      	cmp	r3, #0
1a00bd40:	f000 8189 	beq.w	1a00c056 <_dtoa_r+0x9e6>
1a00bd44:	2e00      	cmp	r6, #0
1a00bd46:	dd10      	ble.n	1a00bd6a <_dtoa_r+0x6fa>
1a00bd48:	4629      	mov	r1, r5
1a00bd4a:	4632      	mov	r2, r6
1a00bd4c:	4650      	mov	r0, sl
1a00bd4e:	f000 ffdf 	bl	1a00cd10 <__pow5mult>
1a00bd52:	465a      	mov	r2, fp
1a00bd54:	4601      	mov	r1, r0
1a00bd56:	4605      	mov	r5, r0
1a00bd58:	4650      	mov	r0, sl
1a00bd5a:	f000 ff41 	bl	1a00cbe0 <__multiply>
1a00bd5e:	4659      	mov	r1, fp
1a00bd60:	4607      	mov	r7, r0
1a00bd62:	4650      	mov	r0, sl
1a00bd64:	f000 fe92 	bl	1a00ca8c <_Bfree>
1a00bd68:	46bb      	mov	fp, r7
1a00bd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00bd6c:	1b9a      	subs	r2, r3, r6
1a00bd6e:	f040 8173 	bne.w	1a00c058 <_dtoa_r+0x9e8>
1a00bd72:	2101      	movs	r1, #1
1a00bd74:	4650      	mov	r0, sl
1a00bd76:	f000 ff29 	bl	1a00cbcc <__i2b>
1a00bd7a:	f1b9 0f00 	cmp.w	r9, #0
1a00bd7e:	4607      	mov	r7, r0
1a00bd80:	f300 808e 	bgt.w	1a00bea0 <_dtoa_r+0x830>
1a00bd84:	9b02      	ldr	r3, [sp, #8]
1a00bd86:	2b01      	cmp	r3, #1
1a00bd88:	f340 8171 	ble.w	1a00c06e <_dtoa_r+0x9fe>
1a00bd8c:	2600      	movs	r6, #0
1a00bd8e:	2001      	movs	r0, #1
1a00bd90:	f1b9 0f00 	cmp.w	r9, #0
1a00bd94:	f040 808f 	bne.w	1a00beb6 <_dtoa_r+0x846>
1a00bd98:	4440      	add	r0, r8
1a00bd9a:	f010 001f 	ands.w	r0, r0, #31
1a00bd9e:	d075      	beq.n	1a00be8c <_dtoa_r+0x81c>
1a00bda0:	f1c0 0320 	rsb	r3, r0, #32
1a00bda4:	2b04      	cmp	r3, #4
1a00bda6:	f340 836d 	ble.w	1a00c484 <_dtoa_r+0xe14>
1a00bdaa:	f1c0 001c 	rsb	r0, r0, #28
1a00bdae:	9b08      	ldr	r3, [sp, #32]
1a00bdb0:	4403      	add	r3, r0
1a00bdb2:	9308      	str	r3, [sp, #32]
1a00bdb4:	4404      	add	r4, r0
1a00bdb6:	4480      	add	r8, r0
1a00bdb8:	9b08      	ldr	r3, [sp, #32]
1a00bdba:	2b00      	cmp	r3, #0
1a00bdbc:	dd05      	ble.n	1a00bdca <_dtoa_r+0x75a>
1a00bdbe:	4659      	mov	r1, fp
1a00bdc0:	461a      	mov	r2, r3
1a00bdc2:	4650      	mov	r0, sl
1a00bdc4:	f000 fff4 	bl	1a00cdb0 <__lshift>
1a00bdc8:	4683      	mov	fp, r0
1a00bdca:	f1b8 0f00 	cmp.w	r8, #0
1a00bdce:	dd05      	ble.n	1a00bddc <_dtoa_r+0x76c>
1a00bdd0:	4639      	mov	r1, r7
1a00bdd2:	4642      	mov	r2, r8
1a00bdd4:	4650      	mov	r0, sl
1a00bdd6:	f000 ffeb 	bl	1a00cdb0 <__lshift>
1a00bdda:	4607      	mov	r7, r0
1a00bddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00bdde:	2b00      	cmp	r3, #0
1a00bde0:	f040 811e 	bne.w	1a00c020 <_dtoa_r+0x9b0>
1a00bde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00bde6:	2b00      	cmp	r3, #0
1a00bde8:	f340 80f5 	ble.w	1a00bfd6 <_dtoa_r+0x966>
1a00bdec:	9b06      	ldr	r3, [sp, #24]
1a00bdee:	3301      	adds	r3, #1
1a00bdf0:	9306      	str	r3, [sp, #24]
1a00bdf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00bdf4:	2b00      	cmp	r3, #0
1a00bdf6:	d177      	bne.n	1a00bee8 <_dtoa_r+0x878>
1a00bdf8:	9c03      	ldr	r4, [sp, #12]
1a00bdfa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00bdfe:	2601      	movs	r6, #1
1a00be00:	e003      	b.n	1a00be0a <_dtoa_r+0x79a>
1a00be02:	f000 fe4d 	bl	1a00caa0 <__multadd>
1a00be06:	3601      	adds	r6, #1
1a00be08:	4683      	mov	fp, r0
1a00be0a:	4639      	mov	r1, r7
1a00be0c:	4658      	mov	r0, fp
1a00be0e:	f7ff fb9b 	bl	1a00b548 <quorem>
1a00be12:	4546      	cmp	r6, r8
1a00be14:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a00be18:	f804 9b01 	strb.w	r9, [r4], #1
1a00be1c:	f04f 0300 	mov.w	r3, #0
1a00be20:	f04f 020a 	mov.w	r2, #10
1a00be24:	4659      	mov	r1, fp
1a00be26:	4650      	mov	r0, sl
1a00be28:	dbeb      	blt.n	1a00be02 <_dtoa_r+0x792>
1a00be2a:	2300      	movs	r3, #0
1a00be2c:	9300      	str	r3, [sp, #0]
1a00be2e:	4659      	mov	r1, fp
1a00be30:	2201      	movs	r2, #1
1a00be32:	4650      	mov	r0, sl
1a00be34:	f000 ffbc 	bl	1a00cdb0 <__lshift>
1a00be38:	4639      	mov	r1, r7
1a00be3a:	4683      	mov	fp, r0
1a00be3c:	f001 f812 	bl	1a00ce64 <__mcmp>
1a00be40:	2800      	cmp	r0, #0
1a00be42:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a00be46:	f340 816f 	ble.w	1a00c128 <_dtoa_r+0xab8>
1a00be4a:	1e63      	subs	r3, r4, #1
1a00be4c:	9903      	ldr	r1, [sp, #12]
1a00be4e:	e004      	b.n	1a00be5a <_dtoa_r+0x7ea>
1a00be50:	4299      	cmp	r1, r3
1a00be52:	f000 8177 	beq.w	1a00c144 <_dtoa_r+0xad4>
1a00be56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00be5a:	2a39      	cmp	r2, #57	; 0x39
1a00be5c:	f103 0401 	add.w	r4, r3, #1
1a00be60:	d0f6      	beq.n	1a00be50 <_dtoa_r+0x7e0>
1a00be62:	3201      	adds	r2, #1
1a00be64:	701a      	strb	r2, [r3, #0]
1a00be66:	4639      	mov	r1, r7
1a00be68:	4650      	mov	r0, sl
1a00be6a:	f000 fe0f 	bl	1a00ca8c <_Bfree>
1a00be6e:	2d00      	cmp	r5, #0
1a00be70:	f43f ae25 	beq.w	1a00babe <_dtoa_r+0x44e>
1a00be74:	9900      	ldr	r1, [sp, #0]
1a00be76:	b121      	cbz	r1, 1a00be82 <_dtoa_r+0x812>
1a00be78:	42a9      	cmp	r1, r5
1a00be7a:	d002      	beq.n	1a00be82 <_dtoa_r+0x812>
1a00be7c:	4650      	mov	r0, sl
1a00be7e:	f000 fe05 	bl	1a00ca8c <_Bfree>
1a00be82:	4629      	mov	r1, r5
1a00be84:	4650      	mov	r0, sl
1a00be86:	f000 fe01 	bl	1a00ca8c <_Bfree>
1a00be8a:	e618      	b.n	1a00babe <_dtoa_r+0x44e>
1a00be8c:	201c      	movs	r0, #28
1a00be8e:	e78e      	b.n	1a00bdae <_dtoa_r+0x73e>
1a00be90:	2401      	movs	r4, #1
1a00be92:	e4b6      	b.n	1a00b802 <_dtoa_r+0x192>
1a00be94:	f1c3 0620 	rsb	r6, r3, #32
1a00be98:	9b00      	ldr	r3, [sp, #0]
1a00be9a:	fa03 f006 	lsl.w	r0, r3, r6
1a00be9e:	e447      	b.n	1a00b730 <_dtoa_r+0xc0>
1a00bea0:	4601      	mov	r1, r0
1a00bea2:	464a      	mov	r2, r9
1a00bea4:	4650      	mov	r0, sl
1a00bea6:	f000 ff33 	bl	1a00cd10 <__pow5mult>
1a00beaa:	9b02      	ldr	r3, [sp, #8]
1a00beac:	2b01      	cmp	r3, #1
1a00beae:	4607      	mov	r7, r0
1a00beb0:	f340 81b2 	ble.w	1a00c218 <_dtoa_r+0xba8>
1a00beb4:	2600      	movs	r6, #0
1a00beb6:	693b      	ldr	r3, [r7, #16]
1a00beb8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00bebc:	6918      	ldr	r0, [r3, #16]
1a00bebe:	f000 fe35 	bl	1a00cb2c <__hi0bits>
1a00bec2:	f1c0 0020 	rsb	r0, r0, #32
1a00bec6:	e767      	b.n	1a00bd98 <_dtoa_r+0x728>
1a00bec8:	40240000 	.word	0x40240000
1a00becc:	1a00eb18 	.word	0x1a00eb18
1a00bed0:	4629      	mov	r1, r5
1a00bed2:	2300      	movs	r3, #0
1a00bed4:	220a      	movs	r2, #10
1a00bed6:	4650      	mov	r0, sl
1a00bed8:	f000 fde2 	bl	1a00caa0 <__multadd>
1a00bedc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00bede:	2b00      	cmp	r3, #0
1a00bee0:	4605      	mov	r5, r0
1a00bee2:	f340 82c1 	ble.w	1a00c468 <_dtoa_r+0xdf8>
1a00bee6:	9309      	str	r3, [sp, #36]	; 0x24
1a00bee8:	2c00      	cmp	r4, #0
1a00beea:	f300 810d 	bgt.w	1a00c108 <_dtoa_r+0xa98>
1a00beee:	2e00      	cmp	r6, #0
1a00bef0:	f040 81c5 	bne.w	1a00c27e <_dtoa_r+0xc0e>
1a00bef4:	46a8      	mov	r8, r5
1a00bef6:	9b00      	ldr	r3, [sp, #0]
1a00bef8:	9902      	ldr	r1, [sp, #8]
1a00befa:	9e03      	ldr	r6, [sp, #12]
1a00befc:	f003 0201 	and.w	r2, r3, #1
1a00bf00:	920b      	str	r2, [sp, #44]	; 0x2c
1a00bf02:	430a      	orrs	r2, r1
1a00bf04:	920a      	str	r2, [sp, #40]	; 0x28
1a00bf06:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00bf08:	1e73      	subs	r3, r6, #1
1a00bf0a:	441a      	add	r2, r3
1a00bf0c:	9209      	str	r2, [sp, #36]	; 0x24
1a00bf0e:	463c      	mov	r4, r7
1a00bf10:	4621      	mov	r1, r4
1a00bf12:	4658      	mov	r0, fp
1a00bf14:	f7ff fb18 	bl	1a00b548 <quorem>
1a00bf18:	4629      	mov	r1, r5
1a00bf1a:	9000      	str	r0, [sp, #0]
1a00bf1c:	4658      	mov	r0, fp
1a00bf1e:	f000 ffa1 	bl	1a00ce64 <__mcmp>
1a00bf22:	4642      	mov	r2, r8
1a00bf24:	4607      	mov	r7, r0
1a00bf26:	4621      	mov	r1, r4
1a00bf28:	4650      	mov	r0, sl
1a00bf2a:	f000 ffb7 	bl	1a00ce9c <__mdiff>
1a00bf2e:	9b00      	ldr	r3, [sp, #0]
1a00bf30:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a00bf34:	68c3      	ldr	r3, [r0, #12]
1a00bf36:	4681      	mov	r9, r0
1a00bf38:	2b00      	cmp	r3, #0
1a00bf3a:	d13e      	bne.n	1a00bfba <_dtoa_r+0x94a>
1a00bf3c:	4601      	mov	r1, r0
1a00bf3e:	4658      	mov	r0, fp
1a00bf40:	9208      	str	r2, [sp, #32]
1a00bf42:	f000 ff8f 	bl	1a00ce64 <__mcmp>
1a00bf46:	4649      	mov	r1, r9
1a00bf48:	9004      	str	r0, [sp, #16]
1a00bf4a:	4650      	mov	r0, sl
1a00bf4c:	f000 fd9e 	bl	1a00ca8c <_Bfree>
1a00bf50:	9b04      	ldr	r3, [sp, #16]
1a00bf52:	9a08      	ldr	r2, [sp, #32]
1a00bf54:	b91b      	cbnz	r3, 1a00bf5e <_dtoa_r+0x8ee>
1a00bf56:	990a      	ldr	r1, [sp, #40]	; 0x28
1a00bf58:	2900      	cmp	r1, #0
1a00bf5a:	f000 8271 	beq.w	1a00c440 <_dtoa_r+0xdd0>
1a00bf5e:	2f00      	cmp	r7, #0
1a00bf60:	f106 0901 	add.w	r9, r6, #1
1a00bf64:	f2c0 816e 	blt.w	1a00c244 <_dtoa_r+0xbd4>
1a00bf68:	9902      	ldr	r1, [sp, #8]
1a00bf6a:	430f      	orrs	r7, r1
1a00bf6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00bf6e:	4339      	orrs	r1, r7
1a00bf70:	f000 8168 	beq.w	1a00c244 <_dtoa_r+0xbd4>
1a00bf74:	2b00      	cmp	r3, #0
1a00bf76:	f300 81a2 	bgt.w	1a00c2be <_dtoa_r+0xc4e>
1a00bf7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00bf7c:	7032      	strb	r2, [r6, #0]
1a00bf7e:	42b3      	cmp	r3, r6
1a00bf80:	f000 81a9 	beq.w	1a00c2d6 <_dtoa_r+0xc66>
1a00bf84:	4659      	mov	r1, fp
1a00bf86:	2300      	movs	r3, #0
1a00bf88:	220a      	movs	r2, #10
1a00bf8a:	4650      	mov	r0, sl
1a00bf8c:	f000 fd88 	bl	1a00caa0 <__multadd>
1a00bf90:	4545      	cmp	r5, r8
1a00bf92:	4683      	mov	fp, r0
1a00bf94:	4629      	mov	r1, r5
1a00bf96:	f04f 0300 	mov.w	r3, #0
1a00bf9a:	f04f 020a 	mov.w	r2, #10
1a00bf9e:	4650      	mov	r0, sl
1a00bfa0:	d013      	beq.n	1a00bfca <_dtoa_r+0x95a>
1a00bfa2:	f000 fd7d 	bl	1a00caa0 <__multadd>
1a00bfa6:	4641      	mov	r1, r8
1a00bfa8:	4605      	mov	r5, r0
1a00bfaa:	2300      	movs	r3, #0
1a00bfac:	220a      	movs	r2, #10
1a00bfae:	4650      	mov	r0, sl
1a00bfb0:	f000 fd76 	bl	1a00caa0 <__multadd>
1a00bfb4:	464e      	mov	r6, r9
1a00bfb6:	4680      	mov	r8, r0
1a00bfb8:	e7aa      	b.n	1a00bf10 <_dtoa_r+0x8a0>
1a00bfba:	4601      	mov	r1, r0
1a00bfbc:	4650      	mov	r0, sl
1a00bfbe:	9204      	str	r2, [sp, #16]
1a00bfc0:	f000 fd64 	bl	1a00ca8c <_Bfree>
1a00bfc4:	2301      	movs	r3, #1
1a00bfc6:	9a04      	ldr	r2, [sp, #16]
1a00bfc8:	e7c9      	b.n	1a00bf5e <_dtoa_r+0x8ee>
1a00bfca:	f000 fd69 	bl	1a00caa0 <__multadd>
1a00bfce:	464e      	mov	r6, r9
1a00bfd0:	4605      	mov	r5, r0
1a00bfd2:	4680      	mov	r8, r0
1a00bfd4:	e79c      	b.n	1a00bf10 <_dtoa_r+0x8a0>
1a00bfd6:	9b02      	ldr	r3, [sp, #8]
1a00bfd8:	2b02      	cmp	r3, #2
1a00bfda:	f340 8082 	ble.w	1a00c0e2 <_dtoa_r+0xa72>
1a00bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00bfe0:	2b00      	cmp	r3, #0
1a00bfe2:	f47f adae 	bne.w	1a00bb42 <_dtoa_r+0x4d2>
1a00bfe6:	4639      	mov	r1, r7
1a00bfe8:	2205      	movs	r2, #5
1a00bfea:	4650      	mov	r0, sl
1a00bfec:	f000 fd58 	bl	1a00caa0 <__multadd>
1a00bff0:	4601      	mov	r1, r0
1a00bff2:	4607      	mov	r7, r0
1a00bff4:	4658      	mov	r0, fp
1a00bff6:	f000 ff35 	bl	1a00ce64 <__mcmp>
1a00bffa:	2800      	cmp	r0, #0
1a00bffc:	f77f ada1 	ble.w	1a00bb42 <_dtoa_r+0x4d2>
1a00c000:	9c03      	ldr	r4, [sp, #12]
1a00c002:	9b06      	ldr	r3, [sp, #24]
1a00c004:	2231      	movs	r2, #49	; 0x31
1a00c006:	f804 2b01 	strb.w	r2, [r4], #1
1a00c00a:	3301      	adds	r3, #1
1a00c00c:	3301      	adds	r3, #1
1a00c00e:	4639      	mov	r1, r7
1a00c010:	4650      	mov	r0, sl
1a00c012:	9306      	str	r3, [sp, #24]
1a00c014:	f000 fd3a 	bl	1a00ca8c <_Bfree>
1a00c018:	2d00      	cmp	r5, #0
1a00c01a:	f47f af32 	bne.w	1a00be82 <_dtoa_r+0x812>
1a00c01e:	e54e      	b.n	1a00babe <_dtoa_r+0x44e>
1a00c020:	4639      	mov	r1, r7
1a00c022:	4658      	mov	r0, fp
1a00c024:	f000 ff1e 	bl	1a00ce64 <__mcmp>
1a00c028:	2800      	cmp	r0, #0
1a00c02a:	f6bf aedb 	bge.w	1a00bde4 <_dtoa_r+0x774>
1a00c02e:	4659      	mov	r1, fp
1a00c030:	2300      	movs	r3, #0
1a00c032:	220a      	movs	r2, #10
1a00c034:	4650      	mov	r0, sl
1a00c036:	f000 fd33 	bl	1a00caa0 <__multadd>
1a00c03a:	9b06      	ldr	r3, [sp, #24]
1a00c03c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a00c040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00c042:	4683      	mov	fp, r0
1a00c044:	2b00      	cmp	r3, #0
1a00c046:	f47f af43 	bne.w	1a00bed0 <_dtoa_r+0x860>
1a00c04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00c04c:	2b00      	cmp	r3, #0
1a00c04e:	f340 8202 	ble.w	1a00c456 <_dtoa_r+0xde6>
1a00c052:	9309      	str	r3, [sp, #36]	; 0x24
1a00c054:	e6d0      	b.n	1a00bdf8 <_dtoa_r+0x788>
1a00c056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00c058:	4659      	mov	r1, fp
1a00c05a:	4650      	mov	r0, sl
1a00c05c:	f000 fe58 	bl	1a00cd10 <__pow5mult>
1a00c060:	4683      	mov	fp, r0
1a00c062:	e686      	b.n	1a00bd72 <_dtoa_r+0x702>
1a00c064:	4b9f      	ldr	r3, [pc, #636]	; (1a00c2e4 <_dtoa_r+0xc74>)
1a00c066:	9303      	str	r3, [sp, #12]
1a00c068:	3303      	adds	r3, #3
1a00c06a:	f7ff bbe5 	b.w	1a00b838 <_dtoa_r+0x1c8>
1a00c06e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00c072:	2900      	cmp	r1, #0
1a00c074:	f47f ae8a 	bne.w	1a00bd8c <_dtoa_r+0x71c>
1a00c078:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00c07c:	2b00      	cmp	r3, #0
1a00c07e:	f000 80d5 	beq.w	1a00c22c <_dtoa_r+0xbbc>
1a00c082:	9e00      	ldr	r6, [sp, #0]
1a00c084:	e683      	b.n	1a00bd8e <_dtoa_r+0x71e>
1a00c086:	2301      	movs	r3, #1
1a00c088:	930b      	str	r3, [sp, #44]	; 0x2c
1a00c08a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00c08c:	2800      	cmp	r0, #0
1a00c08e:	dd46      	ble.n	1a00c11e <_dtoa_r+0xaae>
1a00c090:	900f      	str	r0, [sp, #60]	; 0x3c
1a00c092:	9009      	str	r0, [sp, #36]	; 0x24
1a00c094:	2100      	movs	r1, #0
1a00c096:	2817      	cmp	r0, #23
1a00c098:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00c09c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00c09e:	f77f ac19 	ble.w	1a00b8d4 <_dtoa_r+0x264>
1a00c0a2:	2201      	movs	r2, #1
1a00c0a4:	2304      	movs	r3, #4
1a00c0a6:	005b      	lsls	r3, r3, #1
1a00c0a8:	f103 0614 	add.w	r6, r3, #20
1a00c0ac:	42b0      	cmp	r0, r6
1a00c0ae:	4611      	mov	r1, r2
1a00c0b0:	f102 0201 	add.w	r2, r2, #1
1a00c0b4:	d2f7      	bcs.n	1a00c0a6 <_dtoa_r+0xa36>
1a00c0b6:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00c0ba:	e40b      	b.n	1a00b8d4 <_dtoa_r+0x264>
1a00c0bc:	2301      	movs	r3, #1
1a00c0be:	930b      	str	r3, [sp, #44]	; 0x2c
1a00c0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00c0c2:	9a06      	ldr	r2, [sp, #24]
1a00c0c4:	4413      	add	r3, r2
1a00c0c6:	930f      	str	r3, [sp, #60]	; 0x3c
1a00c0c8:	3301      	adds	r3, #1
1a00c0ca:	2b01      	cmp	r3, #1
1a00c0cc:	4618      	mov	r0, r3
1a00c0ce:	9309      	str	r3, [sp, #36]	; 0x24
1a00c0d0:	bfb8      	it	lt
1a00c0d2:	2001      	movlt	r0, #1
1a00c0d4:	e7de      	b.n	1a00c094 <_dtoa_r+0xa24>
1a00c0d6:	2300      	movs	r3, #0
1a00c0d8:	930b      	str	r3, [sp, #44]	; 0x2c
1a00c0da:	e7f1      	b.n	1a00c0c0 <_dtoa_r+0xa50>
1a00c0dc:	2300      	movs	r3, #0
1a00c0de:	930b      	str	r3, [sp, #44]	; 0x2c
1a00c0e0:	e7d3      	b.n	1a00c08a <_dtoa_r+0xa1a>
1a00c0e2:	9b06      	ldr	r3, [sp, #24]
1a00c0e4:	3301      	adds	r3, #1
1a00c0e6:	9306      	str	r3, [sp, #24]
1a00c0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00c0ea:	2b00      	cmp	r3, #0
1a00c0ec:	f47f aefc 	bne.w	1a00bee8 <_dtoa_r+0x878>
1a00c0f0:	4639      	mov	r1, r7
1a00c0f2:	4658      	mov	r0, fp
1a00c0f4:	f7ff fa28 	bl	1a00b548 <quorem>
1a00c0f8:	9c03      	ldr	r4, [sp, #12]
1a00c0fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a00c0fe:	2300      	movs	r3, #0
1a00c100:	f804 9b01 	strb.w	r9, [r4], #1
1a00c104:	9300      	str	r3, [sp, #0]
1a00c106:	e692      	b.n	1a00be2e <_dtoa_r+0x7be>
1a00c108:	4629      	mov	r1, r5
1a00c10a:	4622      	mov	r2, r4
1a00c10c:	4650      	mov	r0, sl
1a00c10e:	f000 fe4f 	bl	1a00cdb0 <__lshift>
1a00c112:	4605      	mov	r5, r0
1a00c114:	e6eb      	b.n	1a00beee <_dtoa_r+0x87e>
1a00c116:	1b9e      	subs	r6, r3, r6
1a00c118:	e5ce      	b.n	1a00bcb8 <_dtoa_r+0x648>
1a00c11a:	2602      	movs	r6, #2
1a00c11c:	e403      	b.n	1a00b926 <_dtoa_r+0x2b6>
1a00c11e:	2501      	movs	r5, #1
1a00c120:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a00c124:	f7ff bbd2 	b.w	1a00b8cc <_dtoa_r+0x25c>
1a00c128:	d103      	bne.n	1a00c132 <_dtoa_r+0xac2>
1a00c12a:	f019 0f01 	tst.w	r9, #1
1a00c12e:	f47f ae8c 	bne.w	1a00be4a <_dtoa_r+0x7da>
1a00c132:	1e63      	subs	r3, r4, #1
1a00c134:	e001      	b.n	1a00c13a <_dtoa_r+0xaca>
1a00c136:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00c13a:	2a30      	cmp	r2, #48	; 0x30
1a00c13c:	f103 0401 	add.w	r4, r3, #1
1a00c140:	d0f9      	beq.n	1a00c136 <_dtoa_r+0xac6>
1a00c142:	e690      	b.n	1a00be66 <_dtoa_r+0x7f6>
1a00c144:	9a06      	ldr	r2, [sp, #24]
1a00c146:	3201      	adds	r2, #1
1a00c148:	9206      	str	r2, [sp, #24]
1a00c14a:	9a03      	ldr	r2, [sp, #12]
1a00c14c:	2331      	movs	r3, #49	; 0x31
1a00c14e:	7013      	strb	r3, [r2, #0]
1a00c150:	e689      	b.n	1a00be66 <_dtoa_r+0x7f6>
1a00c152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00c154:	2a00      	cmp	r2, #0
1a00c156:	f000 8126 	beq.w	1a00c3a6 <_dtoa_r+0xd36>
1a00c15a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00c15e:	9a08      	ldr	r2, [sp, #32]
1a00c160:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a00c162:	4614      	mov	r4, r2
1a00c164:	441a      	add	r2, r3
1a00c166:	4498      	add	r8, r3
1a00c168:	9208      	str	r2, [sp, #32]
1a00c16a:	e5ae      	b.n	1a00bcca <_dtoa_r+0x65a>
1a00c16c:	4630      	mov	r0, r6
1a00c16e:	f7fa f979 	bl	1a006464 <__aeabi_i2d>
1a00c172:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00c176:	f7fa f9df 	bl	1a006538 <__aeabi_dmul>
1a00c17a:	2200      	movs	r2, #0
1a00c17c:	4b5a      	ldr	r3, [pc, #360]	; (1a00c2e8 <_dtoa_r+0xc78>)
1a00c17e:	f7fa f825 	bl	1a0061cc <__adddf3>
1a00c182:	4604      	mov	r4, r0
1a00c184:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a00c188:	2200      	movs	r2, #0
1a00c18a:	4b58      	ldr	r3, [pc, #352]	; (1a00c2ec <_dtoa_r+0xc7c>)
1a00c18c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00c190:	f7fa f81a 	bl	1a0061c8 <__aeabi_dsub>
1a00c194:	4622      	mov	r2, r4
1a00c196:	462b      	mov	r3, r5
1a00c198:	4606      	mov	r6, r0
1a00c19a:	460f      	mov	r7, r1
1a00c19c:	f7fa fc5c 	bl	1a006a58 <__aeabi_dcmpgt>
1a00c1a0:	2800      	cmp	r0, #0
1a00c1a2:	f040 8089 	bne.w	1a00c2b8 <_dtoa_r+0xc48>
1a00c1a6:	4622      	mov	r2, r4
1a00c1a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a00c1ac:	4630      	mov	r0, r6
1a00c1ae:	4639      	mov	r1, r7
1a00c1b0:	f7fa fc34 	bl	1a006a1c <__aeabi_dcmplt>
1a00c1b4:	2800      	cmp	r0, #0
1a00c1b6:	f43f ac9c 	beq.w	1a00baf2 <_dtoa_r+0x482>
1a00c1ba:	2700      	movs	r7, #0
1a00c1bc:	463d      	mov	r5, r7
1a00c1be:	e4c0      	b.n	1a00bb42 <_dtoa_r+0x4d2>
1a00c1c0:	f000 80f5 	beq.w	1a00c3ae <_dtoa_r+0xd3e>
1a00c1c4:	9b06      	ldr	r3, [sp, #24]
1a00c1c6:	425c      	negs	r4, r3
1a00c1c8:	4b49      	ldr	r3, [pc, #292]	; (1a00c2f0 <_dtoa_r+0xc80>)
1a00c1ca:	f004 020f 	and.w	r2, r4, #15
1a00c1ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00c1d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00c1da:	f7fa f9ad 	bl	1a006538 <__aeabi_dmul>
1a00c1de:	1124      	asrs	r4, r4, #4
1a00c1e0:	e9cd 0100 	strd	r0, r1, [sp]
1a00c1e4:	f000 80e3 	beq.w	1a00c3ae <_dtoa_r+0xd3e>
1a00c1e8:	4d42      	ldr	r5, [pc, #264]	; (1a00c2f4 <_dtoa_r+0xc84>)
1a00c1ea:	2300      	movs	r3, #0
1a00c1ec:	2602      	movs	r6, #2
1a00c1ee:	07e2      	lsls	r2, r4, #31
1a00c1f0:	d505      	bpl.n	1a00c1fe <_dtoa_r+0xb8e>
1a00c1f2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a00c1f6:	f7fa f99f 	bl	1a006538 <__aeabi_dmul>
1a00c1fa:	3601      	adds	r6, #1
1a00c1fc:	2301      	movs	r3, #1
1a00c1fe:	1064      	asrs	r4, r4, #1
1a00c200:	f105 0508 	add.w	r5, r5, #8
1a00c204:	d1f3      	bne.n	1a00c1ee <_dtoa_r+0xb7e>
1a00c206:	2b00      	cmp	r3, #0
1a00c208:	f43f aba6 	beq.w	1a00b958 <_dtoa_r+0x2e8>
1a00c20c:	e9cd 0100 	strd	r0, r1, [sp]
1a00c210:	f7ff bba2 	b.w	1a00b958 <_dtoa_r+0x2e8>
1a00c214:	900d      	str	r0, [sp, #52]	; 0x34
1a00c216:	e564      	b.n	1a00bce2 <_dtoa_r+0x672>
1a00c218:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00c21c:	2900      	cmp	r1, #0
1a00c21e:	f47f ae49 	bne.w	1a00beb4 <_dtoa_r+0x844>
1a00c222:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00c226:	2b00      	cmp	r3, #0
1a00c228:	f47f ae44 	bne.w	1a00beb4 <_dtoa_r+0x844>
1a00c22c:	4e32      	ldr	r6, [pc, #200]	; (1a00c2f8 <_dtoa_r+0xc88>)
1a00c22e:	4016      	ands	r6, r2
1a00c230:	2e00      	cmp	r6, #0
1a00c232:	f43f adac 	beq.w	1a00bd8e <_dtoa_r+0x71e>
1a00c236:	9b08      	ldr	r3, [sp, #32]
1a00c238:	3301      	adds	r3, #1
1a00c23a:	9308      	str	r3, [sp, #32]
1a00c23c:	f108 0801 	add.w	r8, r8, #1
1a00c240:	2601      	movs	r6, #1
1a00c242:	e5a4      	b.n	1a00bd8e <_dtoa_r+0x71e>
1a00c244:	2b00      	cmp	r3, #0
1a00c246:	4627      	mov	r7, r4
1a00c248:	464c      	mov	r4, r9
1a00c24a:	4691      	mov	r9, r2
1a00c24c:	dd12      	ble.n	1a00c274 <_dtoa_r+0xc04>
1a00c24e:	4659      	mov	r1, fp
1a00c250:	2201      	movs	r2, #1
1a00c252:	4650      	mov	r0, sl
1a00c254:	f000 fdac 	bl	1a00cdb0 <__lshift>
1a00c258:	4639      	mov	r1, r7
1a00c25a:	4683      	mov	fp, r0
1a00c25c:	f000 fe02 	bl	1a00ce64 <__mcmp>
1a00c260:	2800      	cmp	r0, #0
1a00c262:	f340 80df 	ble.w	1a00c424 <_dtoa_r+0xdb4>
1a00c266:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00c26a:	f000 80d0 	beq.w	1a00c40e <_dtoa_r+0xd9e>
1a00c26e:	9b00      	ldr	r3, [sp, #0]
1a00c270:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a00c274:	9500      	str	r5, [sp, #0]
1a00c276:	f886 9000 	strb.w	r9, [r6]
1a00c27a:	4645      	mov	r5, r8
1a00c27c:	e5f3      	b.n	1a00be66 <_dtoa_r+0x7f6>
1a00c27e:	6869      	ldr	r1, [r5, #4]
1a00c280:	4650      	mov	r0, sl
1a00c282:	f000 fbdd 	bl	1a00ca40 <_Balloc>
1a00c286:	692b      	ldr	r3, [r5, #16]
1a00c288:	3302      	adds	r3, #2
1a00c28a:	009a      	lsls	r2, r3, #2
1a00c28c:	4604      	mov	r4, r0
1a00c28e:	f105 010c 	add.w	r1, r5, #12
1a00c292:	300c      	adds	r0, #12
1a00c294:	f7fb fb9e 	bl	1a0079d4 <memcpy>
1a00c298:	4621      	mov	r1, r4
1a00c29a:	2201      	movs	r2, #1
1a00c29c:	4650      	mov	r0, sl
1a00c29e:	f000 fd87 	bl	1a00cdb0 <__lshift>
1a00c2a2:	4680      	mov	r8, r0
1a00c2a4:	e627      	b.n	1a00bef6 <_dtoa_r+0x886>
1a00c2a6:	f8dd b000 	ldr.w	fp, [sp]
1a00c2aa:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00c2ae:	e406      	b.n	1a00babe <_dtoa_r+0x44e>
1a00c2b0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a00c2b4:	1a9c      	subs	r4, r3, r2
1a00c2b6:	e508      	b.n	1a00bcca <_dtoa_r+0x65a>
1a00c2b8:	2700      	movs	r7, #0
1a00c2ba:	463d      	mov	r5, r7
1a00c2bc:	e6a0      	b.n	1a00c000 <_dtoa_r+0x990>
1a00c2be:	2a39      	cmp	r2, #57	; 0x39
1a00c2c0:	4627      	mov	r7, r4
1a00c2c2:	464c      	mov	r4, r9
1a00c2c4:	f000 80a3 	beq.w	1a00c40e <_dtoa_r+0xd9e>
1a00c2c8:	f102 0901 	add.w	r9, r2, #1
1a00c2cc:	9500      	str	r5, [sp, #0]
1a00c2ce:	f886 9000 	strb.w	r9, [r6]
1a00c2d2:	4645      	mov	r5, r8
1a00c2d4:	e5c7      	b.n	1a00be66 <_dtoa_r+0x7f6>
1a00c2d6:	4627      	mov	r7, r4
1a00c2d8:	9500      	str	r5, [sp, #0]
1a00c2da:	464c      	mov	r4, r9
1a00c2dc:	4645      	mov	r5, r8
1a00c2de:	4691      	mov	r9, r2
1a00c2e0:	e5a5      	b.n	1a00be2e <_dtoa_r+0x7be>
1a00c2e2:	bf00      	nop
1a00c2e4:	1a00eb5c 	.word	0x1a00eb5c
1a00c2e8:	401c0000 	.word	0x401c0000
1a00c2ec:	40140000 	.word	0x40140000
1a00c2f0:	1a00eb98 	.word	0x1a00eb98
1a00c2f4:	1a00eb70 	.word	0x1a00eb70
1a00c2f8:	7ff00000 	.word	0x7ff00000
1a00c2fc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00c300:	f7fa f91a 	bl	1a006538 <__aeabi_dmul>
1a00c304:	9b03      	ldr	r3, [sp, #12]
1a00c306:	701d      	strb	r5, [r3, #0]
1a00c308:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00c30a:	2b01      	cmp	r3, #1
1a00c30c:	e9cd 0100 	strd	r0, r1, [sp]
1a00c310:	d023      	beq.n	1a00c35a <_dtoa_r+0xcea>
1a00c312:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00c314:	9a03      	ldr	r2, [sp, #12]
1a00c316:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a00c31a:	4413      	add	r3, r2
1a00c31c:	46c1      	mov	r9, r8
1a00c31e:	4698      	mov	r8, r3
1a00c320:	2200      	movs	r2, #0
1a00c322:	4b64      	ldr	r3, [pc, #400]	; (1a00c4b4 <_dtoa_r+0xe44>)
1a00c324:	4630      	mov	r0, r6
1a00c326:	4639      	mov	r1, r7
1a00c328:	f7fa f906 	bl	1a006538 <__aeabi_dmul>
1a00c32c:	460f      	mov	r7, r1
1a00c32e:	4606      	mov	r6, r0
1a00c330:	f7fa fbb2 	bl	1a006a98 <__aeabi_d2iz>
1a00c334:	4605      	mov	r5, r0
1a00c336:	f7fa f895 	bl	1a006464 <__aeabi_i2d>
1a00c33a:	3530      	adds	r5, #48	; 0x30
1a00c33c:	4602      	mov	r2, r0
1a00c33e:	460b      	mov	r3, r1
1a00c340:	4630      	mov	r0, r6
1a00c342:	4639      	mov	r1, r7
1a00c344:	f7f9 ff40 	bl	1a0061c8 <__aeabi_dsub>
1a00c348:	f804 5b01 	strb.w	r5, [r4], #1
1a00c34c:	45a0      	cmp	r8, r4
1a00c34e:	4606      	mov	r6, r0
1a00c350:	460f      	mov	r7, r1
1a00c352:	d1e5      	bne.n	1a00c320 <_dtoa_r+0xcb0>
1a00c354:	46c8      	mov	r8, r9
1a00c356:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00c35a:	4b57      	ldr	r3, [pc, #348]	; (1a00c4b8 <_dtoa_r+0xe48>)
1a00c35c:	2200      	movs	r2, #0
1a00c35e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00c362:	f7f9 ff33 	bl	1a0061cc <__adddf3>
1a00c366:	4632      	mov	r2, r6
1a00c368:	463b      	mov	r3, r7
1a00c36a:	f7fa fb57 	bl	1a006a1c <__aeabi_dcmplt>
1a00c36e:	2800      	cmp	r0, #0
1a00c370:	d152      	bne.n	1a00c418 <_dtoa_r+0xda8>
1a00c372:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00c376:	2000      	movs	r0, #0
1a00c378:	494f      	ldr	r1, [pc, #316]	; (1a00c4b8 <_dtoa_r+0xe48>)
1a00c37a:	f7f9 ff25 	bl	1a0061c8 <__aeabi_dsub>
1a00c37e:	4632      	mov	r2, r6
1a00c380:	463b      	mov	r3, r7
1a00c382:	f7fa fb69 	bl	1a006a58 <__aeabi_dcmpgt>
1a00c386:	2800      	cmp	r0, #0
1a00c388:	f43f abb3 	beq.w	1a00baf2 <_dtoa_r+0x482>
1a00c38c:	e000      	b.n	1a00c390 <_dtoa_r+0xd20>
1a00c38e:	4614      	mov	r4, r2
1a00c390:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a00c394:	2b30      	cmp	r3, #48	; 0x30
1a00c396:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00c39a:	d0f8      	beq.n	1a00c38e <_dtoa_r+0xd1e>
1a00c39c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00c39e:	3301      	adds	r3, #1
1a00c3a0:	9306      	str	r3, [sp, #24]
1a00c3a2:	f7ff bb8c 	b.w	1a00babe <_dtoa_r+0x44e>
1a00c3a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a00c3a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a00c3ac:	e6d7      	b.n	1a00c15e <_dtoa_r+0xaee>
1a00c3ae:	2602      	movs	r6, #2
1a00c3b0:	f7ff bad2 	b.w	1a00b958 <_dtoa_r+0x2e8>
1a00c3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00c3b6:	2b00      	cmp	r3, #0
1a00c3b8:	f43f aed8 	beq.w	1a00c16c <_dtoa_r+0xafc>
1a00c3bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a00c3be:	2f00      	cmp	r7, #0
1a00c3c0:	f77f ab97 	ble.w	1a00baf2 <_dtoa_r+0x482>
1a00c3c4:	2200      	movs	r2, #0
1a00c3c6:	4b3b      	ldr	r3, [pc, #236]	; (1a00c4b4 <_dtoa_r+0xe44>)
1a00c3c8:	4620      	mov	r0, r4
1a00c3ca:	4629      	mov	r1, r5
1a00c3cc:	f7fa f8b4 	bl	1a006538 <__aeabi_dmul>
1a00c3d0:	4604      	mov	r4, r0
1a00c3d2:	460d      	mov	r5, r1
1a00c3d4:	1c70      	adds	r0, r6, #1
1a00c3d6:	e9cd 4500 	strd	r4, r5, [sp]
1a00c3da:	f7fa f843 	bl	1a006464 <__aeabi_i2d>
1a00c3de:	4622      	mov	r2, r4
1a00c3e0:	462b      	mov	r3, r5
1a00c3e2:	f7fa f8a9 	bl	1a006538 <__aeabi_dmul>
1a00c3e6:	4b35      	ldr	r3, [pc, #212]	; (1a00c4bc <_dtoa_r+0xe4c>)
1a00c3e8:	2200      	movs	r2, #0
1a00c3ea:	f7f9 feef 	bl	1a0061cc <__adddf3>
1a00c3ee:	9b06      	ldr	r3, [sp, #24]
1a00c3f0:	9710      	str	r7, [sp, #64]	; 0x40
1a00c3f2:	3b01      	subs	r3, #1
1a00c3f4:	4604      	mov	r4, r0
1a00c3f6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a00c3fa:	9312      	str	r3, [sp, #72]	; 0x48
1a00c3fc:	f7ff bacf 	b.w	1a00b99e <_dtoa_r+0x32e>
1a00c400:	9a06      	ldr	r2, [sp, #24]
1a00c402:	3201      	adds	r2, #1
1a00c404:	9206      	str	r2, [sp, #24]
1a00c406:	2231      	movs	r2, #49	; 0x31
1a00c408:	701a      	strb	r2, [r3, #0]
1a00c40a:	f7ff bb58 	b.w	1a00babe <_dtoa_r+0x44e>
1a00c40e:	2239      	movs	r2, #57	; 0x39
1a00c410:	9500      	str	r5, [sp, #0]
1a00c412:	7032      	strb	r2, [r6, #0]
1a00c414:	4645      	mov	r5, r8
1a00c416:	e518      	b.n	1a00be4a <_dtoa_r+0x7da>
1a00c418:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00c41a:	3301      	adds	r3, #1
1a00c41c:	9306      	str	r3, [sp, #24]
1a00c41e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00c422:	e427      	b.n	1a00bc74 <_dtoa_r+0x604>
1a00c424:	f47f af26 	bne.w	1a00c274 <_dtoa_r+0xc04>
1a00c428:	f019 0f01 	tst.w	r9, #1
1a00c42c:	f47f af1b 	bne.w	1a00c266 <_dtoa_r+0xbf6>
1a00c430:	e720      	b.n	1a00c274 <_dtoa_r+0xc04>
1a00c432:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00c434:	3301      	adds	r3, #1
1a00c436:	46da      	mov	sl, fp
1a00c438:	9306      	str	r3, [sp, #24]
1a00c43a:	f8dd b000 	ldr.w	fp, [sp]
1a00c43e:	e419      	b.n	1a00bc74 <_dtoa_r+0x604>
1a00c440:	2a39      	cmp	r2, #57	; 0x39
1a00c442:	463b      	mov	r3, r7
1a00c444:	4691      	mov	r9, r2
1a00c446:	4627      	mov	r7, r4
1a00c448:	f106 0401 	add.w	r4, r6, #1
1a00c44c:	d0df      	beq.n	1a00c40e <_dtoa_r+0xd9e>
1a00c44e:	2b00      	cmp	r3, #0
1a00c450:	f73f af0d 	bgt.w	1a00c26e <_dtoa_r+0xbfe>
1a00c454:	e70e      	b.n	1a00c274 <_dtoa_r+0xc04>
1a00c456:	9b02      	ldr	r3, [sp, #8]
1a00c458:	2b02      	cmp	r3, #2
1a00c45a:	f77f ae49 	ble.w	1a00c0f0 <_dtoa_r+0xa80>
1a00c45e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00c460:	9309      	str	r3, [sp, #36]	; 0x24
1a00c462:	f8cd 8018 	str.w	r8, [sp, #24]
1a00c466:	e5ba      	b.n	1a00bfde <_dtoa_r+0x96e>
1a00c468:	9b02      	ldr	r3, [sp, #8]
1a00c46a:	2b02      	cmp	r3, #2
1a00c46c:	dcf7      	bgt.n	1a00c45e <_dtoa_r+0xdee>
1a00c46e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00c470:	e539      	b.n	1a00bee6 <_dtoa_r+0x876>
1a00c472:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00c474:	3301      	adds	r3, #1
1a00c476:	9306      	str	r3, [sp, #24]
1a00c478:	f7ff bbfc 	b.w	1a00bc74 <_dtoa_r+0x604>
1a00c47c:	4b10      	ldr	r3, [pc, #64]	; (1a00c4c0 <_dtoa_r+0xe50>)
1a00c47e:	9303      	str	r3, [sp, #12]
1a00c480:	f7ff b934 	b.w	1a00b6ec <_dtoa_r+0x7c>
1a00c484:	f43f ac98 	beq.w	1a00bdb8 <_dtoa_r+0x748>
1a00c488:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00c48c:	e48f      	b.n	1a00bdae <_dtoa_r+0x73e>
1a00c48e:	2400      	movs	r4, #0
1a00c490:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a00c494:	4621      	mov	r1, r4
1a00c496:	4650      	mov	r0, sl
1a00c498:	f000 fad2 	bl	1a00ca40 <_Balloc>
1a00c49c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00c4a0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a00c4a4:	930f      	str	r3, [sp, #60]	; 0x3c
1a00c4a6:	2301      	movs	r3, #1
1a00c4a8:	9003      	str	r0, [sp, #12]
1a00c4aa:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a00c4ae:	930b      	str	r3, [sp, #44]	; 0x2c
1a00c4b0:	f7ff bb23 	b.w	1a00bafa <_dtoa_r+0x48a>
1a00c4b4:	40240000 	.word	0x40240000
1a00c4b8:	3fe00000 	.word	0x3fe00000
1a00c4bc:	401c0000 	.word	0x401c0000
1a00c4c0:	1a00eb60 	.word	0x1a00eb60

1a00c4c4 <__sfvwrite_r>:
1a00c4c4:	6893      	ldr	r3, [r2, #8]
1a00c4c6:	2b00      	cmp	r3, #0
1a00c4c8:	f000 8102 	beq.w	1a00c6d0 <__sfvwrite_r+0x20c>
1a00c4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00c4d0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a00c4d4:	b29b      	uxth	r3, r3
1a00c4d6:	460c      	mov	r4, r1
1a00c4d8:	0719      	lsls	r1, r3, #28
1a00c4da:	b083      	sub	sp, #12
1a00c4dc:	4682      	mov	sl, r0
1a00c4de:	4690      	mov	r8, r2
1a00c4e0:	d535      	bpl.n	1a00c54e <__sfvwrite_r+0x8a>
1a00c4e2:	6922      	ldr	r2, [r4, #16]
1a00c4e4:	b39a      	cbz	r2, 1a00c54e <__sfvwrite_r+0x8a>
1a00c4e6:	f013 0202 	ands.w	r2, r3, #2
1a00c4ea:	f8d8 6000 	ldr.w	r6, [r8]
1a00c4ee:	d03d      	beq.n	1a00c56c <__sfvwrite_r+0xa8>
1a00c4f0:	2700      	movs	r7, #0
1a00c4f2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a00c4f6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a00c4fa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a00c7c8 <__sfvwrite_r+0x304>
1a00c4fe:	463d      	mov	r5, r7
1a00c500:	454d      	cmp	r5, r9
1a00c502:	462b      	mov	r3, r5
1a00c504:	463a      	mov	r2, r7
1a00c506:	bf28      	it	cs
1a00c508:	464b      	movcs	r3, r9
1a00c50a:	4661      	mov	r1, ip
1a00c50c:	4650      	mov	r0, sl
1a00c50e:	b1d5      	cbz	r5, 1a00c546 <__sfvwrite_r+0x82>
1a00c510:	47d8      	blx	fp
1a00c512:	2800      	cmp	r0, #0
1a00c514:	f340 80d2 	ble.w	1a00c6bc <__sfvwrite_r+0x1f8>
1a00c518:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00c51c:	1a1b      	subs	r3, r3, r0
1a00c51e:	4407      	add	r7, r0
1a00c520:	1a2d      	subs	r5, r5, r0
1a00c522:	f8c8 3008 	str.w	r3, [r8, #8]
1a00c526:	2b00      	cmp	r3, #0
1a00c528:	f000 80b7 	beq.w	1a00c69a <__sfvwrite_r+0x1d6>
1a00c52c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a00c530:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a00c534:	454d      	cmp	r5, r9
1a00c536:	462b      	mov	r3, r5
1a00c538:	463a      	mov	r2, r7
1a00c53a:	bf28      	it	cs
1a00c53c:	464b      	movcs	r3, r9
1a00c53e:	4661      	mov	r1, ip
1a00c540:	4650      	mov	r0, sl
1a00c542:	2d00      	cmp	r5, #0
1a00c544:	d1e4      	bne.n	1a00c510 <__sfvwrite_r+0x4c>
1a00c546:	e9d6 7500 	ldrd	r7, r5, [r6]
1a00c54a:	3608      	adds	r6, #8
1a00c54c:	e7d8      	b.n	1a00c500 <__sfvwrite_r+0x3c>
1a00c54e:	4621      	mov	r1, r4
1a00c550:	4650      	mov	r0, sl
1a00c552:	f7fe ff91 	bl	1a00b478 <__swsetup_r>
1a00c556:	2800      	cmp	r0, #0
1a00c558:	f040 8130 	bne.w	1a00c7bc <__sfvwrite_r+0x2f8>
1a00c55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00c560:	f8d8 6000 	ldr.w	r6, [r8]
1a00c564:	b29b      	uxth	r3, r3
1a00c566:	f013 0202 	ands.w	r2, r3, #2
1a00c56a:	d1c1      	bne.n	1a00c4f0 <__sfvwrite_r+0x2c>
1a00c56c:	f013 0901 	ands.w	r9, r3, #1
1a00c570:	f040 80b0 	bne.w	1a00c6d4 <__sfvwrite_r+0x210>
1a00c574:	68a7      	ldr	r7, [r4, #8]
1a00c576:	6820      	ldr	r0, [r4, #0]
1a00c578:	464d      	mov	r5, r9
1a00c57a:	2d00      	cmp	r5, #0
1a00c57c:	d054      	beq.n	1a00c628 <__sfvwrite_r+0x164>
1a00c57e:	059a      	lsls	r2, r3, #22
1a00c580:	f140 80bc 	bpl.w	1a00c6fc <__sfvwrite_r+0x238>
1a00c584:	42af      	cmp	r7, r5
1a00c586:	46bb      	mov	fp, r7
1a00c588:	f200 80e7 	bhi.w	1a00c75a <__sfvwrite_r+0x296>
1a00c58c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a00c590:	d02f      	beq.n	1a00c5f2 <__sfvwrite_r+0x12e>
1a00c592:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a00c596:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a00c59a:	eba0 0b01 	sub.w	fp, r0, r1
1a00c59e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a00c5a2:	1c68      	adds	r0, r5, #1
1a00c5a4:	107f      	asrs	r7, r7, #1
1a00c5a6:	4458      	add	r0, fp
1a00c5a8:	42b8      	cmp	r0, r7
1a00c5aa:	463a      	mov	r2, r7
1a00c5ac:	bf84      	itt	hi
1a00c5ae:	4607      	movhi	r7, r0
1a00c5b0:	463a      	movhi	r2, r7
1a00c5b2:	055b      	lsls	r3, r3, #21
1a00c5b4:	f140 80e9 	bpl.w	1a00c78a <__sfvwrite_r+0x2c6>
1a00c5b8:	4611      	mov	r1, r2
1a00c5ba:	4650      	mov	r0, sl
1a00c5bc:	f7fa ff52 	bl	1a007464 <_malloc_r>
1a00c5c0:	2800      	cmp	r0, #0
1a00c5c2:	f000 80f5 	beq.w	1a00c7b0 <__sfvwrite_r+0x2ec>
1a00c5c6:	465a      	mov	r2, fp
1a00c5c8:	6921      	ldr	r1, [r4, #16]
1a00c5ca:	9001      	str	r0, [sp, #4]
1a00c5cc:	f7fb fa02 	bl	1a0079d4 <memcpy>
1a00c5d0:	89a2      	ldrh	r2, [r4, #12]
1a00c5d2:	9b01      	ldr	r3, [sp, #4]
1a00c5d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a00c5d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00c5dc:	81a2      	strh	r2, [r4, #12]
1a00c5de:	eba7 020b 	sub.w	r2, r7, fp
1a00c5e2:	eb03 000b 	add.w	r0, r3, fp
1a00c5e6:	6167      	str	r7, [r4, #20]
1a00c5e8:	6123      	str	r3, [r4, #16]
1a00c5ea:	6020      	str	r0, [r4, #0]
1a00c5ec:	60a2      	str	r2, [r4, #8]
1a00c5ee:	462f      	mov	r7, r5
1a00c5f0:	46ab      	mov	fp, r5
1a00c5f2:	465a      	mov	r2, fp
1a00c5f4:	4649      	mov	r1, r9
1a00c5f6:	f000 f9bb 	bl	1a00c970 <memmove>
1a00c5fa:	68a2      	ldr	r2, [r4, #8]
1a00c5fc:	6823      	ldr	r3, [r4, #0]
1a00c5fe:	1bd2      	subs	r2, r2, r7
1a00c600:	445b      	add	r3, fp
1a00c602:	462f      	mov	r7, r5
1a00c604:	60a2      	str	r2, [r4, #8]
1a00c606:	6023      	str	r3, [r4, #0]
1a00c608:	2500      	movs	r5, #0
1a00c60a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00c60e:	1bdb      	subs	r3, r3, r7
1a00c610:	44b9      	add	r9, r7
1a00c612:	f8c8 3008 	str.w	r3, [r8, #8]
1a00c616:	2b00      	cmp	r3, #0
1a00c618:	d03f      	beq.n	1a00c69a <__sfvwrite_r+0x1d6>
1a00c61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00c61e:	68a7      	ldr	r7, [r4, #8]
1a00c620:	6820      	ldr	r0, [r4, #0]
1a00c622:	b29b      	uxth	r3, r3
1a00c624:	2d00      	cmp	r5, #0
1a00c626:	d1aa      	bne.n	1a00c57e <__sfvwrite_r+0xba>
1a00c628:	e9d6 9500 	ldrd	r9, r5, [r6]
1a00c62c:	3608      	adds	r6, #8
1a00c62e:	e7a4      	b.n	1a00c57a <__sfvwrite_r+0xb6>
1a00c630:	f10b 0308 	add.w	r3, fp, #8
1a00c634:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a00c638:	469b      	mov	fp, r3
1a00c63a:	3308      	adds	r3, #8
1a00c63c:	2f00      	cmp	r7, #0
1a00c63e:	d0f9      	beq.n	1a00c634 <__sfvwrite_r+0x170>
1a00c640:	463a      	mov	r2, r7
1a00c642:	210a      	movs	r1, #10
1a00c644:	4630      	mov	r0, r6
1a00c646:	f000 f943 	bl	1a00c8d0 <memchr>
1a00c64a:	2800      	cmp	r0, #0
1a00c64c:	d053      	beq.n	1a00c6f6 <__sfvwrite_r+0x232>
1a00c64e:	3001      	adds	r0, #1
1a00c650:	eba0 0906 	sub.w	r9, r0, r6
1a00c654:	464b      	mov	r3, r9
1a00c656:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a00c65a:	6820      	ldr	r0, [r4, #0]
1a00c65c:	42bb      	cmp	r3, r7
1a00c65e:	bf28      	it	cs
1a00c660:	463b      	movcs	r3, r7
1a00c662:	4288      	cmp	r0, r1
1a00c664:	d903      	bls.n	1a00c66e <__sfvwrite_r+0x1aa>
1a00c666:	68a5      	ldr	r5, [r4, #8]
1a00c668:	4415      	add	r5, r2
1a00c66a:	42ab      	cmp	r3, r5
1a00c66c:	dc19      	bgt.n	1a00c6a2 <__sfvwrite_r+0x1de>
1a00c66e:	429a      	cmp	r2, r3
1a00c670:	dc7d      	bgt.n	1a00c76e <__sfvwrite_r+0x2aa>
1a00c672:	4613      	mov	r3, r2
1a00c674:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a00c676:	69e1      	ldr	r1, [r4, #28]
1a00c678:	4632      	mov	r2, r6
1a00c67a:	4650      	mov	r0, sl
1a00c67c:	47a8      	blx	r5
1a00c67e:	1e05      	subs	r5, r0, #0
1a00c680:	dd1c      	ble.n	1a00c6bc <__sfvwrite_r+0x1f8>
1a00c682:	ebb9 0905 	subs.w	r9, r9, r5
1a00c686:	d06b      	beq.n	1a00c760 <__sfvwrite_r+0x29c>
1a00c688:	2001      	movs	r0, #1
1a00c68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00c68e:	1b5b      	subs	r3, r3, r5
1a00c690:	442e      	add	r6, r5
1a00c692:	1b7f      	subs	r7, r7, r5
1a00c694:	f8c8 3008 	str.w	r3, [r8, #8]
1a00c698:	bb13      	cbnz	r3, 1a00c6e0 <__sfvwrite_r+0x21c>
1a00c69a:	2000      	movs	r0, #0
1a00c69c:	b003      	add	sp, #12
1a00c69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00c6a2:	4631      	mov	r1, r6
1a00c6a4:	462a      	mov	r2, r5
1a00c6a6:	f000 f963 	bl	1a00c970 <memmove>
1a00c6aa:	6823      	ldr	r3, [r4, #0]
1a00c6ac:	442b      	add	r3, r5
1a00c6ae:	6023      	str	r3, [r4, #0]
1a00c6b0:	4621      	mov	r1, r4
1a00c6b2:	4650      	mov	r0, sl
1a00c6b4:	f7fa fca8 	bl	1a007008 <_fflush_r>
1a00c6b8:	2800      	cmp	r0, #0
1a00c6ba:	d0e2      	beq.n	1a00c682 <__sfvwrite_r+0x1be>
1a00c6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00c6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00c6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00c6c8:	81a3      	strh	r3, [r4, #12]
1a00c6ca:	b003      	add	sp, #12
1a00c6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00c6d0:	2000      	movs	r0, #0
1a00c6d2:	4770      	bx	lr
1a00c6d4:	4633      	mov	r3, r6
1a00c6d6:	4691      	mov	r9, r2
1a00c6d8:	4610      	mov	r0, r2
1a00c6da:	4617      	mov	r7, r2
1a00c6dc:	464e      	mov	r6, r9
1a00c6de:	469b      	mov	fp, r3
1a00c6e0:	2f00      	cmp	r7, #0
1a00c6e2:	d0a5      	beq.n	1a00c630 <__sfvwrite_r+0x16c>
1a00c6e4:	2800      	cmp	r0, #0
1a00c6e6:	d1b5      	bne.n	1a00c654 <__sfvwrite_r+0x190>
1a00c6e8:	463a      	mov	r2, r7
1a00c6ea:	210a      	movs	r1, #10
1a00c6ec:	4630      	mov	r0, r6
1a00c6ee:	f000 f8ef 	bl	1a00c8d0 <memchr>
1a00c6f2:	2800      	cmp	r0, #0
1a00c6f4:	d1ab      	bne.n	1a00c64e <__sfvwrite_r+0x18a>
1a00c6f6:	1c7b      	adds	r3, r7, #1
1a00c6f8:	4699      	mov	r9, r3
1a00c6fa:	e7ac      	b.n	1a00c656 <__sfvwrite_r+0x192>
1a00c6fc:	6923      	ldr	r3, [r4, #16]
1a00c6fe:	4283      	cmp	r3, r0
1a00c700:	d315      	bcc.n	1a00c72e <__sfvwrite_r+0x26a>
1a00c702:	6961      	ldr	r1, [r4, #20]
1a00c704:	42a9      	cmp	r1, r5
1a00c706:	d812      	bhi.n	1a00c72e <__sfvwrite_r+0x26a>
1a00c708:	4b2e      	ldr	r3, [pc, #184]	; (1a00c7c4 <__sfvwrite_r+0x300>)
1a00c70a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a00c70c:	429d      	cmp	r5, r3
1a00c70e:	bf94      	ite	ls
1a00c710:	462b      	movls	r3, r5
1a00c712:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a00c716:	464a      	mov	r2, r9
1a00c718:	fb93 f3f1 	sdiv	r3, r3, r1
1a00c71c:	4650      	mov	r0, sl
1a00c71e:	fb01 f303 	mul.w	r3, r1, r3
1a00c722:	69e1      	ldr	r1, [r4, #28]
1a00c724:	47b8      	blx	r7
1a00c726:	1e07      	subs	r7, r0, #0
1a00c728:	ddc8      	ble.n	1a00c6bc <__sfvwrite_r+0x1f8>
1a00c72a:	1bed      	subs	r5, r5, r7
1a00c72c:	e76d      	b.n	1a00c60a <__sfvwrite_r+0x146>
1a00c72e:	42af      	cmp	r7, r5
1a00c730:	bf28      	it	cs
1a00c732:	462f      	movcs	r7, r5
1a00c734:	463a      	mov	r2, r7
1a00c736:	4649      	mov	r1, r9
1a00c738:	f000 f91a 	bl	1a00c970 <memmove>
1a00c73c:	68a3      	ldr	r3, [r4, #8]
1a00c73e:	6822      	ldr	r2, [r4, #0]
1a00c740:	1bdb      	subs	r3, r3, r7
1a00c742:	443a      	add	r2, r7
1a00c744:	60a3      	str	r3, [r4, #8]
1a00c746:	6022      	str	r2, [r4, #0]
1a00c748:	2b00      	cmp	r3, #0
1a00c74a:	d1ee      	bne.n	1a00c72a <__sfvwrite_r+0x266>
1a00c74c:	4621      	mov	r1, r4
1a00c74e:	4650      	mov	r0, sl
1a00c750:	f7fa fc5a 	bl	1a007008 <_fflush_r>
1a00c754:	2800      	cmp	r0, #0
1a00c756:	d0e8      	beq.n	1a00c72a <__sfvwrite_r+0x266>
1a00c758:	e7b0      	b.n	1a00c6bc <__sfvwrite_r+0x1f8>
1a00c75a:	462f      	mov	r7, r5
1a00c75c:	46ab      	mov	fp, r5
1a00c75e:	e748      	b.n	1a00c5f2 <__sfvwrite_r+0x12e>
1a00c760:	4621      	mov	r1, r4
1a00c762:	4650      	mov	r0, sl
1a00c764:	f7fa fc50 	bl	1a007008 <_fflush_r>
1a00c768:	2800      	cmp	r0, #0
1a00c76a:	d08e      	beq.n	1a00c68a <__sfvwrite_r+0x1c6>
1a00c76c:	e7a6      	b.n	1a00c6bc <__sfvwrite_r+0x1f8>
1a00c76e:	461a      	mov	r2, r3
1a00c770:	4631      	mov	r1, r6
1a00c772:	9301      	str	r3, [sp, #4]
1a00c774:	f000 f8fc 	bl	1a00c970 <memmove>
1a00c778:	9b01      	ldr	r3, [sp, #4]
1a00c77a:	68a1      	ldr	r1, [r4, #8]
1a00c77c:	6822      	ldr	r2, [r4, #0]
1a00c77e:	1ac9      	subs	r1, r1, r3
1a00c780:	441a      	add	r2, r3
1a00c782:	60a1      	str	r1, [r4, #8]
1a00c784:	6022      	str	r2, [r4, #0]
1a00c786:	461d      	mov	r5, r3
1a00c788:	e77b      	b.n	1a00c682 <__sfvwrite_r+0x1be>
1a00c78a:	4650      	mov	r0, sl
1a00c78c:	f000 fc62 	bl	1a00d054 <_realloc_r>
1a00c790:	4603      	mov	r3, r0
1a00c792:	2800      	cmp	r0, #0
1a00c794:	f47f af23 	bne.w	1a00c5de <__sfvwrite_r+0x11a>
1a00c798:	6921      	ldr	r1, [r4, #16]
1a00c79a:	4650      	mov	r0, sl
1a00c79c:	f7fa fd16 	bl	1a0071cc <_free_r>
1a00c7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00c7a4:	220c      	movs	r2, #12
1a00c7a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00c7aa:	f8ca 2000 	str.w	r2, [sl]
1a00c7ae:	e787      	b.n	1a00c6c0 <__sfvwrite_r+0x1fc>
1a00c7b0:	230c      	movs	r3, #12
1a00c7b2:	f8ca 3000 	str.w	r3, [sl]
1a00c7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00c7ba:	e781      	b.n	1a00c6c0 <__sfvwrite_r+0x1fc>
1a00c7bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00c7c0:	e76c      	b.n	1a00c69c <__sfvwrite_r+0x1d8>
1a00c7c2:	bf00      	nop
1a00c7c4:	7ffffffe 	.word	0x7ffffffe
1a00c7c8:	7ffffc00 	.word	0x7ffffc00

1a00c7cc <_localeconv_r>:
1a00c7cc:	4800      	ldr	r0, [pc, #0]	; (1a00c7d0 <_localeconv_r+0x4>)
1a00c7ce:	4770      	bx	lr
1a00c7d0:	100009c0 	.word	0x100009c0

1a00c7d4 <__swhatbuf_r>:
1a00c7d4:	b570      	push	{r4, r5, r6, lr}
1a00c7d6:	460c      	mov	r4, r1
1a00c7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00c7dc:	2900      	cmp	r1, #0
1a00c7de:	b096      	sub	sp, #88	; 0x58
1a00c7e0:	4615      	mov	r5, r2
1a00c7e2:	461e      	mov	r6, r3
1a00c7e4:	db14      	blt.n	1a00c810 <__swhatbuf_r+0x3c>
1a00c7e6:	466a      	mov	r2, sp
1a00c7e8:	f7f4 fa93 	bl	1a000d12 <_fstat_r>
1a00c7ec:	2800      	cmp	r0, #0
1a00c7ee:	db0f      	blt.n	1a00c810 <__swhatbuf_r+0x3c>
1a00c7f0:	9a01      	ldr	r2, [sp, #4]
1a00c7f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00c7f6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a00c7fa:	fab2 f282 	clz	r2, r2
1a00c7fe:	0952      	lsrs	r2, r2, #5
1a00c800:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00c804:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a00c808:	6032      	str	r2, [r6, #0]
1a00c80a:	602b      	str	r3, [r5, #0]
1a00c80c:	b016      	add	sp, #88	; 0x58
1a00c80e:	bd70      	pop	{r4, r5, r6, pc}
1a00c810:	89a2      	ldrh	r2, [r4, #12]
1a00c812:	2300      	movs	r3, #0
1a00c814:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a00c818:	6033      	str	r3, [r6, #0]
1a00c81a:	d004      	beq.n	1a00c826 <__swhatbuf_r+0x52>
1a00c81c:	2240      	movs	r2, #64	; 0x40
1a00c81e:	4618      	mov	r0, r3
1a00c820:	602a      	str	r2, [r5, #0]
1a00c822:	b016      	add	sp, #88	; 0x58
1a00c824:	bd70      	pop	{r4, r5, r6, pc}
1a00c826:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00c82a:	602b      	str	r3, [r5, #0]
1a00c82c:	b016      	add	sp, #88	; 0x58
1a00c82e:	bd70      	pop	{r4, r5, r6, pc}

1a00c830 <__smakebuf_r>:
1a00c830:	898a      	ldrh	r2, [r1, #12]
1a00c832:	0792      	lsls	r2, r2, #30
1a00c834:	460b      	mov	r3, r1
1a00c836:	d506      	bpl.n	1a00c846 <__smakebuf_r+0x16>
1a00c838:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a00c83c:	2101      	movs	r1, #1
1a00c83e:	601a      	str	r2, [r3, #0]
1a00c840:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a00c844:	4770      	bx	lr
1a00c846:	b570      	push	{r4, r5, r6, lr}
1a00c848:	b082      	sub	sp, #8
1a00c84a:	ab01      	add	r3, sp, #4
1a00c84c:	466a      	mov	r2, sp
1a00c84e:	460c      	mov	r4, r1
1a00c850:	4606      	mov	r6, r0
1a00c852:	f7ff ffbf 	bl	1a00c7d4 <__swhatbuf_r>
1a00c856:	9900      	ldr	r1, [sp, #0]
1a00c858:	4605      	mov	r5, r0
1a00c85a:	4630      	mov	r0, r6
1a00c85c:	f7fa fe02 	bl	1a007464 <_malloc_r>
1a00c860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00c864:	b170      	cbz	r0, 1a00c884 <__smakebuf_r+0x54>
1a00c866:	4916      	ldr	r1, [pc, #88]	; (1a00c8c0 <__smakebuf_r+0x90>)
1a00c868:	63f1      	str	r1, [r6, #60]	; 0x3c
1a00c86a:	9a01      	ldr	r2, [sp, #4]
1a00c86c:	9900      	ldr	r1, [sp, #0]
1a00c86e:	6020      	str	r0, [r4, #0]
1a00c870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00c874:	81a3      	strh	r3, [r4, #12]
1a00c876:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a00c87a:	b98a      	cbnz	r2, 1a00c8a0 <__smakebuf_r+0x70>
1a00c87c:	432b      	orrs	r3, r5
1a00c87e:	81a3      	strh	r3, [r4, #12]
1a00c880:	b002      	add	sp, #8
1a00c882:	bd70      	pop	{r4, r5, r6, pc}
1a00c884:	059a      	lsls	r2, r3, #22
1a00c886:	d4fb      	bmi.n	1a00c880 <__smakebuf_r+0x50>
1a00c888:	f023 0303 	bic.w	r3, r3, #3
1a00c88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00c890:	f043 0302 	orr.w	r3, r3, #2
1a00c894:	2101      	movs	r1, #1
1a00c896:	81a3      	strh	r3, [r4, #12]
1a00c898:	6022      	str	r2, [r4, #0]
1a00c89a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a00c89e:	e7ef      	b.n	1a00c880 <__smakebuf_r+0x50>
1a00c8a0:	4630      	mov	r0, r6
1a00c8a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00c8a6:	f7f4 fa39 	bl	1a000d1c <_isatty_r>
1a00c8aa:	b910      	cbnz	r0, 1a00c8b2 <__smakebuf_r+0x82>
1a00c8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00c8b0:	e7e4      	b.n	1a00c87c <__smakebuf_r+0x4c>
1a00c8b2:	89a3      	ldrh	r3, [r4, #12]
1a00c8b4:	f023 0303 	bic.w	r3, r3, #3
1a00c8b8:	f043 0301 	orr.w	r3, r3, #1
1a00c8bc:	b21b      	sxth	r3, r3
1a00c8be:	e7dd      	b.n	1a00c87c <__smakebuf_r+0x4c>
1a00c8c0:	1a0070b5 	.word	0x1a0070b5
1a00c8c4:	ffffffff 	.word	0xffffffff
1a00c8c8:	ffffffff 	.word	0xffffffff
1a00c8cc:	ffffffff 	.word	0xffffffff

1a00c8d0 <memchr>:
1a00c8d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00c8d4:	2a10      	cmp	r2, #16
1a00c8d6:	db2b      	blt.n	1a00c930 <memchr+0x60>
1a00c8d8:	f010 0f07 	tst.w	r0, #7
1a00c8dc:	d008      	beq.n	1a00c8f0 <memchr+0x20>
1a00c8de:	f810 3b01 	ldrb.w	r3, [r0], #1
1a00c8e2:	3a01      	subs	r2, #1
1a00c8e4:	428b      	cmp	r3, r1
1a00c8e6:	d02d      	beq.n	1a00c944 <memchr+0x74>
1a00c8e8:	f010 0f07 	tst.w	r0, #7
1a00c8ec:	b342      	cbz	r2, 1a00c940 <memchr+0x70>
1a00c8ee:	d1f6      	bne.n	1a00c8de <memchr+0xe>
1a00c8f0:	b4f0      	push	{r4, r5, r6, r7}
1a00c8f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a00c8f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00c8fa:	f022 0407 	bic.w	r4, r2, #7
1a00c8fe:	f07f 0700 	mvns.w	r7, #0
1a00c902:	2300      	movs	r3, #0
1a00c904:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a00c908:	3c08      	subs	r4, #8
1a00c90a:	ea85 0501 	eor.w	r5, r5, r1
1a00c90e:	ea86 0601 	eor.w	r6, r6, r1
1a00c912:	fa85 f547 	uadd8	r5, r5, r7
1a00c916:	faa3 f587 	sel	r5, r3, r7
1a00c91a:	fa86 f647 	uadd8	r6, r6, r7
1a00c91e:	faa5 f687 	sel	r6, r5, r7
1a00c922:	b98e      	cbnz	r6, 1a00c948 <memchr+0x78>
1a00c924:	d1ee      	bne.n	1a00c904 <memchr+0x34>
1a00c926:	bcf0      	pop	{r4, r5, r6, r7}
1a00c928:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00c92c:	f002 0207 	and.w	r2, r2, #7
1a00c930:	b132      	cbz	r2, 1a00c940 <memchr+0x70>
1a00c932:	f810 3b01 	ldrb.w	r3, [r0], #1
1a00c936:	3a01      	subs	r2, #1
1a00c938:	ea83 0301 	eor.w	r3, r3, r1
1a00c93c:	b113      	cbz	r3, 1a00c944 <memchr+0x74>
1a00c93e:	d1f8      	bne.n	1a00c932 <memchr+0x62>
1a00c940:	2000      	movs	r0, #0
1a00c942:	4770      	bx	lr
1a00c944:	3801      	subs	r0, #1
1a00c946:	4770      	bx	lr
1a00c948:	2d00      	cmp	r5, #0
1a00c94a:	bf06      	itte	eq
1a00c94c:	4635      	moveq	r5, r6
1a00c94e:	3803      	subeq	r0, #3
1a00c950:	3807      	subne	r0, #7
1a00c952:	f015 0f01 	tst.w	r5, #1
1a00c956:	d107      	bne.n	1a00c968 <memchr+0x98>
1a00c958:	3001      	adds	r0, #1
1a00c95a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00c95e:	bf02      	ittt	eq
1a00c960:	3001      	addeq	r0, #1
1a00c962:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a00c966:	3001      	addeq	r0, #1
1a00c968:	bcf0      	pop	{r4, r5, r6, r7}
1a00c96a:	3801      	subs	r0, #1
1a00c96c:	4770      	bx	lr
1a00c96e:	bf00      	nop

1a00c970 <memmove>:
1a00c970:	4288      	cmp	r0, r1
1a00c972:	b4f0      	push	{r4, r5, r6, r7}
1a00c974:	d90d      	bls.n	1a00c992 <memmove+0x22>
1a00c976:	188b      	adds	r3, r1, r2
1a00c978:	4283      	cmp	r3, r0
1a00c97a:	d90a      	bls.n	1a00c992 <memmove+0x22>
1a00c97c:	1884      	adds	r4, r0, r2
1a00c97e:	b132      	cbz	r2, 1a00c98e <memmove+0x1e>
1a00c980:	4622      	mov	r2, r4
1a00c982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a00c986:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00c98a:	4299      	cmp	r1, r3
1a00c98c:	d1f9      	bne.n	1a00c982 <memmove+0x12>
1a00c98e:	bcf0      	pop	{r4, r5, r6, r7}
1a00c990:	4770      	bx	lr
1a00c992:	2a0f      	cmp	r2, #15
1a00c994:	d80e      	bhi.n	1a00c9b4 <memmove+0x44>
1a00c996:	4603      	mov	r3, r0
1a00c998:	1e54      	subs	r4, r2, #1
1a00c99a:	2a00      	cmp	r2, #0
1a00c99c:	d0f7      	beq.n	1a00c98e <memmove+0x1e>
1a00c99e:	3401      	adds	r4, #1
1a00c9a0:	440c      	add	r4, r1
1a00c9a2:	3b01      	subs	r3, #1
1a00c9a4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00c9a8:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00c9ac:	42a1      	cmp	r1, r4
1a00c9ae:	d1f9      	bne.n	1a00c9a4 <memmove+0x34>
1a00c9b0:	bcf0      	pop	{r4, r5, r6, r7}
1a00c9b2:	4770      	bx	lr
1a00c9b4:	ea40 0301 	orr.w	r3, r0, r1
1a00c9b8:	079b      	lsls	r3, r3, #30
1a00c9ba:	d13b      	bne.n	1a00ca34 <memmove+0xc4>
1a00c9bc:	f1a2 0710 	sub.w	r7, r2, #16
1a00c9c0:	093f      	lsrs	r7, r7, #4
1a00c9c2:	f101 0620 	add.w	r6, r1, #32
1a00c9c6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a00c9ca:	f101 0310 	add.w	r3, r1, #16
1a00c9ce:	f100 0410 	add.w	r4, r0, #16
1a00c9d2:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a00c9d6:	f844 5c10 	str.w	r5, [r4, #-16]
1a00c9da:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a00c9de:	f844 5c0c 	str.w	r5, [r4, #-12]
1a00c9e2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a00c9e6:	f844 5c08 	str.w	r5, [r4, #-8]
1a00c9ea:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a00c9ee:	f844 5c04 	str.w	r5, [r4, #-4]
1a00c9f2:	3310      	adds	r3, #16
1a00c9f4:	42b3      	cmp	r3, r6
1a00c9f6:	f104 0410 	add.w	r4, r4, #16
1a00c9fa:	d1ea      	bne.n	1a00c9d2 <memmove+0x62>
1a00c9fc:	1c7b      	adds	r3, r7, #1
1a00c9fe:	011b      	lsls	r3, r3, #4
1a00ca00:	f012 0f0c 	tst.w	r2, #12
1a00ca04:	4419      	add	r1, r3
1a00ca06:	f002 050f 	and.w	r5, r2, #15
1a00ca0a:	4403      	add	r3, r0
1a00ca0c:	d015      	beq.n	1a00ca3a <memmove+0xca>
1a00ca0e:	3d04      	subs	r5, #4
1a00ca10:	08ad      	lsrs	r5, r5, #2
1a00ca12:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a00ca16:	1f1c      	subs	r4, r3, #4
1a00ca18:	460e      	mov	r6, r1
1a00ca1a:	f856 7b04 	ldr.w	r7, [r6], #4
1a00ca1e:	f844 7f04 	str.w	r7, [r4, #4]!
1a00ca22:	4564      	cmp	r4, ip
1a00ca24:	d1f9      	bne.n	1a00ca1a <memmove+0xaa>
1a00ca26:	3501      	adds	r5, #1
1a00ca28:	00ad      	lsls	r5, r5, #2
1a00ca2a:	442b      	add	r3, r5
1a00ca2c:	4429      	add	r1, r5
1a00ca2e:	f002 0203 	and.w	r2, r2, #3
1a00ca32:	e7b1      	b.n	1a00c998 <memmove+0x28>
1a00ca34:	1e54      	subs	r4, r2, #1
1a00ca36:	4603      	mov	r3, r0
1a00ca38:	e7b1      	b.n	1a00c99e <memmove+0x2e>
1a00ca3a:	462a      	mov	r2, r5
1a00ca3c:	e7ac      	b.n	1a00c998 <memmove+0x28>
1a00ca3e:	bf00      	nop

1a00ca40 <_Balloc>:
1a00ca40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00ca42:	b570      	push	{r4, r5, r6, lr}
1a00ca44:	4605      	mov	r5, r0
1a00ca46:	460c      	mov	r4, r1
1a00ca48:	b14b      	cbz	r3, 1a00ca5e <_Balloc+0x1e>
1a00ca4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00ca4e:	b180      	cbz	r0, 1a00ca72 <_Balloc+0x32>
1a00ca50:	6802      	ldr	r2, [r0, #0]
1a00ca52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a00ca56:	2300      	movs	r3, #0
1a00ca58:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00ca5c:	bd70      	pop	{r4, r5, r6, pc}
1a00ca5e:	2221      	movs	r2, #33	; 0x21
1a00ca60:	2104      	movs	r1, #4
1a00ca62:	f000 fddf 	bl	1a00d624 <_calloc_r>
1a00ca66:	4603      	mov	r3, r0
1a00ca68:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00ca6a:	2800      	cmp	r0, #0
1a00ca6c:	d1ed      	bne.n	1a00ca4a <_Balloc+0xa>
1a00ca6e:	2000      	movs	r0, #0
1a00ca70:	bd70      	pop	{r4, r5, r6, pc}
1a00ca72:	2101      	movs	r1, #1
1a00ca74:	fa01 f604 	lsl.w	r6, r1, r4
1a00ca78:	1d72      	adds	r2, r6, #5
1a00ca7a:	4628      	mov	r0, r5
1a00ca7c:	0092      	lsls	r2, r2, #2
1a00ca7e:	f000 fdd1 	bl	1a00d624 <_calloc_r>
1a00ca82:	2800      	cmp	r0, #0
1a00ca84:	d0f3      	beq.n	1a00ca6e <_Balloc+0x2e>
1a00ca86:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00ca8a:	e7e4      	b.n	1a00ca56 <_Balloc+0x16>

1a00ca8c <_Bfree>:
1a00ca8c:	b131      	cbz	r1, 1a00ca9c <_Bfree+0x10>
1a00ca8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00ca90:	684a      	ldr	r2, [r1, #4]
1a00ca92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a00ca96:	6008      	str	r0, [r1, #0]
1a00ca98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a00ca9c:	4770      	bx	lr
1a00ca9e:	bf00      	nop

1a00caa0 <__multadd>:
1a00caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00caa2:	690c      	ldr	r4, [r1, #16]
1a00caa4:	b083      	sub	sp, #12
1a00caa6:	460d      	mov	r5, r1
1a00caa8:	4606      	mov	r6, r0
1a00caaa:	f101 0c14 	add.w	ip, r1, #20
1a00caae:	2700      	movs	r7, #0
1a00cab0:	f8dc 0000 	ldr.w	r0, [ip]
1a00cab4:	b281      	uxth	r1, r0
1a00cab6:	fb02 3301 	mla	r3, r2, r1, r3
1a00caba:	0c19      	lsrs	r1, r3, #16
1a00cabc:	0c00      	lsrs	r0, r0, #16
1a00cabe:	fb02 1000 	mla	r0, r2, r0, r1
1a00cac2:	b29b      	uxth	r3, r3
1a00cac4:	3701      	adds	r7, #1
1a00cac6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00caca:	42bc      	cmp	r4, r7
1a00cacc:	f84c 3b04 	str.w	r3, [ip], #4
1a00cad0:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a00cad4:	dcec      	bgt.n	1a00cab0 <__multadd+0x10>
1a00cad6:	b13b      	cbz	r3, 1a00cae8 <__multadd+0x48>
1a00cad8:	68aa      	ldr	r2, [r5, #8]
1a00cada:	42a2      	cmp	r2, r4
1a00cadc:	dd07      	ble.n	1a00caee <__multadd+0x4e>
1a00cade:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00cae2:	3401      	adds	r4, #1
1a00cae4:	6153      	str	r3, [r2, #20]
1a00cae6:	612c      	str	r4, [r5, #16]
1a00cae8:	4628      	mov	r0, r5
1a00caea:	b003      	add	sp, #12
1a00caec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00caee:	6869      	ldr	r1, [r5, #4]
1a00caf0:	9301      	str	r3, [sp, #4]
1a00caf2:	3101      	adds	r1, #1
1a00caf4:	4630      	mov	r0, r6
1a00caf6:	f7ff ffa3 	bl	1a00ca40 <_Balloc>
1a00cafa:	692a      	ldr	r2, [r5, #16]
1a00cafc:	3202      	adds	r2, #2
1a00cafe:	f105 010c 	add.w	r1, r5, #12
1a00cb02:	4607      	mov	r7, r0
1a00cb04:	0092      	lsls	r2, r2, #2
1a00cb06:	300c      	adds	r0, #12
1a00cb08:	f7fa ff64 	bl	1a0079d4 <memcpy>
1a00cb0c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00cb0e:	6869      	ldr	r1, [r5, #4]
1a00cb10:	9b01      	ldr	r3, [sp, #4]
1a00cb12:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a00cb16:	6028      	str	r0, [r5, #0]
1a00cb18:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00cb1c:	463d      	mov	r5, r7
1a00cb1e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00cb22:	3401      	adds	r4, #1
1a00cb24:	6153      	str	r3, [r2, #20]
1a00cb26:	612c      	str	r4, [r5, #16]
1a00cb28:	e7de      	b.n	1a00cae8 <__multadd+0x48>
1a00cb2a:	bf00      	nop

1a00cb2c <__hi0bits>:
1a00cb2c:	0c02      	lsrs	r2, r0, #16
1a00cb2e:	0412      	lsls	r2, r2, #16
1a00cb30:	4603      	mov	r3, r0
1a00cb32:	b9ca      	cbnz	r2, 1a00cb68 <__hi0bits+0x3c>
1a00cb34:	0403      	lsls	r3, r0, #16
1a00cb36:	2010      	movs	r0, #16
1a00cb38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00cb3c:	bf04      	itt	eq
1a00cb3e:	021b      	lsleq	r3, r3, #8
1a00cb40:	3008      	addeq	r0, #8
1a00cb42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00cb46:	bf04      	itt	eq
1a00cb48:	011b      	lsleq	r3, r3, #4
1a00cb4a:	3004      	addeq	r0, #4
1a00cb4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a00cb50:	bf04      	itt	eq
1a00cb52:	009b      	lsleq	r3, r3, #2
1a00cb54:	3002      	addeq	r0, #2
1a00cb56:	2b00      	cmp	r3, #0
1a00cb58:	db05      	blt.n	1a00cb66 <__hi0bits+0x3a>
1a00cb5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00cb5e:	f100 0001 	add.w	r0, r0, #1
1a00cb62:	bf08      	it	eq
1a00cb64:	2020      	moveq	r0, #32
1a00cb66:	4770      	bx	lr
1a00cb68:	2000      	movs	r0, #0
1a00cb6a:	e7e5      	b.n	1a00cb38 <__hi0bits+0xc>

1a00cb6c <__lo0bits>:
1a00cb6c:	6803      	ldr	r3, [r0, #0]
1a00cb6e:	f013 0207 	ands.w	r2, r3, #7
1a00cb72:	4601      	mov	r1, r0
1a00cb74:	d007      	beq.n	1a00cb86 <__lo0bits+0x1a>
1a00cb76:	07da      	lsls	r2, r3, #31
1a00cb78:	d420      	bmi.n	1a00cbbc <__lo0bits+0x50>
1a00cb7a:	0798      	lsls	r0, r3, #30
1a00cb7c:	d522      	bpl.n	1a00cbc4 <__lo0bits+0x58>
1a00cb7e:	085b      	lsrs	r3, r3, #1
1a00cb80:	600b      	str	r3, [r1, #0]
1a00cb82:	2001      	movs	r0, #1
1a00cb84:	4770      	bx	lr
1a00cb86:	b298      	uxth	r0, r3
1a00cb88:	b9b0      	cbnz	r0, 1a00cbb8 <__lo0bits+0x4c>
1a00cb8a:	0c1b      	lsrs	r3, r3, #16
1a00cb8c:	2010      	movs	r0, #16
1a00cb8e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00cb92:	bf04      	itt	eq
1a00cb94:	0a1b      	lsreq	r3, r3, #8
1a00cb96:	3008      	addeq	r0, #8
1a00cb98:	071a      	lsls	r2, r3, #28
1a00cb9a:	bf04      	itt	eq
1a00cb9c:	091b      	lsreq	r3, r3, #4
1a00cb9e:	3004      	addeq	r0, #4
1a00cba0:	079a      	lsls	r2, r3, #30
1a00cba2:	bf04      	itt	eq
1a00cba4:	089b      	lsreq	r3, r3, #2
1a00cba6:	3002      	addeq	r0, #2
1a00cba8:	07da      	lsls	r2, r3, #31
1a00cbaa:	d403      	bmi.n	1a00cbb4 <__lo0bits+0x48>
1a00cbac:	085b      	lsrs	r3, r3, #1
1a00cbae:	f100 0001 	add.w	r0, r0, #1
1a00cbb2:	d005      	beq.n	1a00cbc0 <__lo0bits+0x54>
1a00cbb4:	600b      	str	r3, [r1, #0]
1a00cbb6:	4770      	bx	lr
1a00cbb8:	4610      	mov	r0, r2
1a00cbba:	e7e8      	b.n	1a00cb8e <__lo0bits+0x22>
1a00cbbc:	2000      	movs	r0, #0
1a00cbbe:	4770      	bx	lr
1a00cbc0:	2020      	movs	r0, #32
1a00cbc2:	4770      	bx	lr
1a00cbc4:	089b      	lsrs	r3, r3, #2
1a00cbc6:	600b      	str	r3, [r1, #0]
1a00cbc8:	2002      	movs	r0, #2
1a00cbca:	4770      	bx	lr

1a00cbcc <__i2b>:
1a00cbcc:	b510      	push	{r4, lr}
1a00cbce:	460c      	mov	r4, r1
1a00cbd0:	2101      	movs	r1, #1
1a00cbd2:	f7ff ff35 	bl	1a00ca40 <_Balloc>
1a00cbd6:	2201      	movs	r2, #1
1a00cbd8:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00cbdc:	bd10      	pop	{r4, pc}
1a00cbde:	bf00      	nop

1a00cbe0 <__multiply>:
1a00cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00cbe4:	690e      	ldr	r6, [r1, #16]
1a00cbe6:	6917      	ldr	r7, [r2, #16]
1a00cbe8:	42be      	cmp	r6, r7
1a00cbea:	b083      	sub	sp, #12
1a00cbec:	460c      	mov	r4, r1
1a00cbee:	4615      	mov	r5, r2
1a00cbf0:	db05      	blt.n	1a00cbfe <__multiply+0x1e>
1a00cbf2:	463a      	mov	r2, r7
1a00cbf4:	462b      	mov	r3, r5
1a00cbf6:	4637      	mov	r7, r6
1a00cbf8:	460d      	mov	r5, r1
1a00cbfa:	4616      	mov	r6, r2
1a00cbfc:	461c      	mov	r4, r3
1a00cbfe:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a00cc02:	eb07 0806 	add.w	r8, r7, r6
1a00cc06:	4543      	cmp	r3, r8
1a00cc08:	bfb8      	it	lt
1a00cc0a:	3101      	addlt	r1, #1
1a00cc0c:	f7ff ff18 	bl	1a00ca40 <_Balloc>
1a00cc10:	f100 0a14 	add.w	sl, r0, #20
1a00cc14:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a00cc18:	45ca      	cmp	sl, r9
1a00cc1a:	9000      	str	r0, [sp, #0]
1a00cc1c:	d205      	bcs.n	1a00cc2a <__multiply+0x4a>
1a00cc1e:	4653      	mov	r3, sl
1a00cc20:	2100      	movs	r1, #0
1a00cc22:	f843 1b04 	str.w	r1, [r3], #4
1a00cc26:	4599      	cmp	r9, r3
1a00cc28:	d8fb      	bhi.n	1a00cc22 <__multiply+0x42>
1a00cc2a:	f104 0e14 	add.w	lr, r4, #20
1a00cc2e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a00cc32:	f105 0314 	add.w	r3, r5, #20
1a00cc36:	45de      	cmp	lr, fp
1a00cc38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00cc3c:	d253      	bcs.n	1a00cce6 <__multiply+0x106>
1a00cc3e:	f8cd 8004 	str.w	r8, [sp, #4]
1a00cc42:	4698      	mov	r8, r3
1a00cc44:	e005      	b.n	1a00cc52 <__multiply+0x72>
1a00cc46:	0c09      	lsrs	r1, r1, #16
1a00cc48:	d128      	bne.n	1a00cc9c <__multiply+0xbc>
1a00cc4a:	45f3      	cmp	fp, lr
1a00cc4c:	f10a 0a04 	add.w	sl, sl, #4
1a00cc50:	d947      	bls.n	1a00cce2 <__multiply+0x102>
1a00cc52:	f85e 1b04 	ldr.w	r1, [lr], #4
1a00cc56:	b28e      	uxth	r6, r1
1a00cc58:	2e00      	cmp	r6, #0
1a00cc5a:	d0f4      	beq.n	1a00cc46 <__multiply+0x66>
1a00cc5c:	4645      	mov	r5, r8
1a00cc5e:	4654      	mov	r4, sl
1a00cc60:	2300      	movs	r3, #0
1a00cc62:	f855 1b04 	ldr.w	r1, [r5], #4
1a00cc66:	6820      	ldr	r0, [r4, #0]
1a00cc68:	b28a      	uxth	r2, r1
1a00cc6a:	fa1f fc80 	uxth.w	ip, r0
1a00cc6e:	fb06 c202 	mla	r2, r6, r2, ip
1a00cc72:	0c09      	lsrs	r1, r1, #16
1a00cc74:	0c00      	lsrs	r0, r0, #16
1a00cc76:	4413      	add	r3, r2
1a00cc78:	fb06 0201 	mla	r2, r6, r1, r0
1a00cc7c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a00cc80:	b29b      	uxth	r3, r3
1a00cc82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00cc86:	42af      	cmp	r7, r5
1a00cc88:	f844 3b04 	str.w	r3, [r4], #4
1a00cc8c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a00cc90:	d8e7      	bhi.n	1a00cc62 <__multiply+0x82>
1a00cc92:	6023      	str	r3, [r4, #0]
1a00cc94:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a00cc98:	0c09      	lsrs	r1, r1, #16
1a00cc9a:	d0d6      	beq.n	1a00cc4a <__multiply+0x6a>
1a00cc9c:	f8da 3000 	ldr.w	r3, [sl]
1a00cca0:	4640      	mov	r0, r8
1a00cca2:	461a      	mov	r2, r3
1a00cca4:	4654      	mov	r4, sl
1a00cca6:	f04f 0c00 	mov.w	ip, #0
1a00ccaa:	8805      	ldrh	r5, [r0, #0]
1a00ccac:	0c12      	lsrs	r2, r2, #16
1a00ccae:	fb01 2205 	mla	r2, r1, r5, r2
1a00ccb2:	4494      	add	ip, r2
1a00ccb4:	b29b      	uxth	r3, r3
1a00ccb6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00ccba:	f844 3b04 	str.w	r3, [r4], #4
1a00ccbe:	f850 3b04 	ldr.w	r3, [r0], #4
1a00ccc2:	6822      	ldr	r2, [r4, #0]
1a00ccc4:	0c1b      	lsrs	r3, r3, #16
1a00ccc6:	b295      	uxth	r5, r2
1a00ccc8:	fb01 5303 	mla	r3, r1, r3, r5
1a00cccc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a00ccd0:	4287      	cmp	r7, r0
1a00ccd2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00ccd6:	d8e8      	bhi.n	1a00ccaa <__multiply+0xca>
1a00ccd8:	45f3      	cmp	fp, lr
1a00ccda:	6023      	str	r3, [r4, #0]
1a00ccdc:	f10a 0a04 	add.w	sl, sl, #4
1a00cce0:	d8b7      	bhi.n	1a00cc52 <__multiply+0x72>
1a00cce2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a00cce6:	f1b8 0f00 	cmp.w	r8, #0
1a00ccea:	dd0b      	ble.n	1a00cd04 <__multiply+0x124>
1a00ccec:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a00ccf0:	f1a9 0904 	sub.w	r9, r9, #4
1a00ccf4:	b11b      	cbz	r3, 1a00ccfe <__multiply+0x11e>
1a00ccf6:	e005      	b.n	1a00cd04 <__multiply+0x124>
1a00ccf8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a00ccfc:	b913      	cbnz	r3, 1a00cd04 <__multiply+0x124>
1a00ccfe:	f1b8 0801 	subs.w	r8, r8, #1
1a00cd02:	d1f9      	bne.n	1a00ccf8 <__multiply+0x118>
1a00cd04:	9800      	ldr	r0, [sp, #0]
1a00cd06:	f8c0 8010 	str.w	r8, [r0, #16]
1a00cd0a:	b003      	add	sp, #12
1a00cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00cd10 <__pow5mult>:
1a00cd10:	f012 0303 	ands.w	r3, r2, #3
1a00cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00cd18:	4614      	mov	r4, r2
1a00cd1a:	4607      	mov	r7, r0
1a00cd1c:	d12e      	bne.n	1a00cd7c <__pow5mult+0x6c>
1a00cd1e:	460d      	mov	r5, r1
1a00cd20:	10a4      	asrs	r4, r4, #2
1a00cd22:	d01c      	beq.n	1a00cd5e <__pow5mult+0x4e>
1a00cd24:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a00cd26:	b396      	cbz	r6, 1a00cd8e <__pow5mult+0x7e>
1a00cd28:	07e3      	lsls	r3, r4, #31
1a00cd2a:	f04f 0800 	mov.w	r8, #0
1a00cd2e:	d406      	bmi.n	1a00cd3e <__pow5mult+0x2e>
1a00cd30:	1064      	asrs	r4, r4, #1
1a00cd32:	d014      	beq.n	1a00cd5e <__pow5mult+0x4e>
1a00cd34:	6830      	ldr	r0, [r6, #0]
1a00cd36:	b1a8      	cbz	r0, 1a00cd64 <__pow5mult+0x54>
1a00cd38:	4606      	mov	r6, r0
1a00cd3a:	07e3      	lsls	r3, r4, #31
1a00cd3c:	d5f8      	bpl.n	1a00cd30 <__pow5mult+0x20>
1a00cd3e:	4632      	mov	r2, r6
1a00cd40:	4629      	mov	r1, r5
1a00cd42:	4638      	mov	r0, r7
1a00cd44:	f7ff ff4c 	bl	1a00cbe0 <__multiply>
1a00cd48:	b1b5      	cbz	r5, 1a00cd78 <__pow5mult+0x68>
1a00cd4a:	686a      	ldr	r2, [r5, #4]
1a00cd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00cd4e:	1064      	asrs	r4, r4, #1
1a00cd50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00cd54:	6029      	str	r1, [r5, #0]
1a00cd56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00cd5a:	4605      	mov	r5, r0
1a00cd5c:	d1ea      	bne.n	1a00cd34 <__pow5mult+0x24>
1a00cd5e:	4628      	mov	r0, r5
1a00cd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00cd64:	4632      	mov	r2, r6
1a00cd66:	4631      	mov	r1, r6
1a00cd68:	4638      	mov	r0, r7
1a00cd6a:	f7ff ff39 	bl	1a00cbe0 <__multiply>
1a00cd6e:	6030      	str	r0, [r6, #0]
1a00cd70:	f8c0 8000 	str.w	r8, [r0]
1a00cd74:	4606      	mov	r6, r0
1a00cd76:	e7e0      	b.n	1a00cd3a <__pow5mult+0x2a>
1a00cd78:	4605      	mov	r5, r0
1a00cd7a:	e7d9      	b.n	1a00cd30 <__pow5mult+0x20>
1a00cd7c:	3b01      	subs	r3, #1
1a00cd7e:	4a0b      	ldr	r2, [pc, #44]	; (1a00cdac <__pow5mult+0x9c>)
1a00cd80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00cd84:	2300      	movs	r3, #0
1a00cd86:	f7ff fe8b 	bl	1a00caa0 <__multadd>
1a00cd8a:	4605      	mov	r5, r0
1a00cd8c:	e7c8      	b.n	1a00cd20 <__pow5mult+0x10>
1a00cd8e:	2101      	movs	r1, #1
1a00cd90:	4638      	mov	r0, r7
1a00cd92:	f7ff fe55 	bl	1a00ca40 <_Balloc>
1a00cd96:	f240 2371 	movw	r3, #625	; 0x271
1a00cd9a:	6143      	str	r3, [r0, #20]
1a00cd9c:	2201      	movs	r2, #1
1a00cd9e:	2300      	movs	r3, #0
1a00cda0:	6102      	str	r2, [r0, #16]
1a00cda2:	4606      	mov	r6, r0
1a00cda4:	64b8      	str	r0, [r7, #72]	; 0x48
1a00cda6:	6003      	str	r3, [r0, #0]
1a00cda8:	e7be      	b.n	1a00cd28 <__pow5mult+0x18>
1a00cdaa:	bf00      	nop
1a00cdac:	1a00ec60 	.word	0x1a00ec60

1a00cdb0 <__lshift>:
1a00cdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00cdb4:	690e      	ldr	r6, [r1, #16]
1a00cdb6:	460d      	mov	r5, r1
1a00cdb8:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00cdbc:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a00cdc0:	444e      	add	r6, r9
1a00cdc2:	1c74      	adds	r4, r6, #1
1a00cdc4:	429c      	cmp	r4, r3
1a00cdc6:	4690      	mov	r8, r2
1a00cdc8:	4607      	mov	r7, r0
1a00cdca:	dd04      	ble.n	1a00cdd6 <__lshift+0x26>
1a00cdcc:	005b      	lsls	r3, r3, #1
1a00cdce:	429c      	cmp	r4, r3
1a00cdd0:	f101 0101 	add.w	r1, r1, #1
1a00cdd4:	dcfa      	bgt.n	1a00cdcc <__lshift+0x1c>
1a00cdd6:	4638      	mov	r0, r7
1a00cdd8:	f7ff fe32 	bl	1a00ca40 <_Balloc>
1a00cddc:	f1b9 0f00 	cmp.w	r9, #0
1a00cde0:	f100 0c14 	add.w	ip, r0, #20
1a00cde4:	dd0e      	ble.n	1a00ce04 <__lshift+0x54>
1a00cde6:	f109 0905 	add.w	r9, r9, #5
1a00cdea:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a00cdee:	eb00 0109 	add.w	r1, r0, r9
1a00cdf2:	4663      	mov	r3, ip
1a00cdf4:	2200      	movs	r2, #0
1a00cdf6:	f843 2b04 	str.w	r2, [r3], #4
1a00cdfa:	428b      	cmp	r3, r1
1a00cdfc:	d1fb      	bne.n	1a00cdf6 <__lshift+0x46>
1a00cdfe:	f1a9 0914 	sub.w	r9, r9, #20
1a00ce02:	44cc      	add	ip, r9
1a00ce04:	6929      	ldr	r1, [r5, #16]
1a00ce06:	f105 0314 	add.w	r3, r5, #20
1a00ce0a:	f018 081f 	ands.w	r8, r8, #31
1a00ce0e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a00ce12:	d01d      	beq.n	1a00ce50 <__lshift+0xa0>
1a00ce14:	f1c8 0920 	rsb	r9, r8, #32
1a00ce18:	2200      	movs	r2, #0
1a00ce1a:	6819      	ldr	r1, [r3, #0]
1a00ce1c:	fa01 f108 	lsl.w	r1, r1, r8
1a00ce20:	4311      	orrs	r1, r2
1a00ce22:	f84c 1b04 	str.w	r1, [ip], #4
1a00ce26:	f853 2b04 	ldr.w	r2, [r3], #4
1a00ce2a:	4573      	cmp	r3, lr
1a00ce2c:	fa22 f209 	lsr.w	r2, r2, r9
1a00ce30:	d3f3      	bcc.n	1a00ce1a <__lshift+0x6a>
1a00ce32:	f8cc 2000 	str.w	r2, [ip]
1a00ce36:	2a00      	cmp	r2, #0
1a00ce38:	bf18      	it	ne
1a00ce3a:	4626      	movne	r6, r4
1a00ce3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00ce3e:	686a      	ldr	r2, [r5, #4]
1a00ce40:	6106      	str	r6, [r0, #16]
1a00ce42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00ce46:	6029      	str	r1, [r5, #0]
1a00ce48:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00ce4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00ce50:	f1ac 0c04 	sub.w	ip, ip, #4
1a00ce54:	f853 2b04 	ldr.w	r2, [r3], #4
1a00ce58:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00ce5c:	459e      	cmp	lr, r3
1a00ce5e:	d8f9      	bhi.n	1a00ce54 <__lshift+0xa4>
1a00ce60:	e7ec      	b.n	1a00ce3c <__lshift+0x8c>
1a00ce62:	bf00      	nop

1a00ce64 <__mcmp>:
1a00ce64:	b430      	push	{r4, r5}
1a00ce66:	690b      	ldr	r3, [r1, #16]
1a00ce68:	4605      	mov	r5, r0
1a00ce6a:	6900      	ldr	r0, [r0, #16]
1a00ce6c:	1ac0      	subs	r0, r0, r3
1a00ce6e:	d110      	bne.n	1a00ce92 <__mcmp+0x2e>
1a00ce70:	009b      	lsls	r3, r3, #2
1a00ce72:	3514      	adds	r5, #20
1a00ce74:	3114      	adds	r1, #20
1a00ce76:	4419      	add	r1, r3
1a00ce78:	442b      	add	r3, r5
1a00ce7a:	e001      	b.n	1a00ce80 <__mcmp+0x1c>
1a00ce7c:	429d      	cmp	r5, r3
1a00ce7e:	d208      	bcs.n	1a00ce92 <__mcmp+0x2e>
1a00ce80:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00ce84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00ce88:	4294      	cmp	r4, r2
1a00ce8a:	d0f7      	beq.n	1a00ce7c <__mcmp+0x18>
1a00ce8c:	d203      	bcs.n	1a00ce96 <__mcmp+0x32>
1a00ce8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00ce92:	bc30      	pop	{r4, r5}
1a00ce94:	4770      	bx	lr
1a00ce96:	2001      	movs	r0, #1
1a00ce98:	bc30      	pop	{r4, r5}
1a00ce9a:	4770      	bx	lr

1a00ce9c <__mdiff>:
1a00ce9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00cea0:	460f      	mov	r7, r1
1a00cea2:	690d      	ldr	r5, [r1, #16]
1a00cea4:	6911      	ldr	r1, [r2, #16]
1a00cea6:	1a6d      	subs	r5, r5, r1
1a00cea8:	2d00      	cmp	r5, #0
1a00ceaa:	4690      	mov	r8, r2
1a00ceac:	4684      	mov	ip, r0
1a00ceae:	f107 0414 	add.w	r4, r7, #20
1a00ceb2:	f102 0614 	add.w	r6, r2, #20
1a00ceb6:	d114      	bne.n	1a00cee2 <__mdiff+0x46>
1a00ceb8:	0089      	lsls	r1, r1, #2
1a00ceba:	1863      	adds	r3, r4, r1
1a00cebc:	4431      	add	r1, r6
1a00cebe:	e001      	b.n	1a00cec4 <__mdiff+0x28>
1a00cec0:	42a3      	cmp	r3, r4
1a00cec2:	d95d      	bls.n	1a00cf80 <__mdiff+0xe4>
1a00cec4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a00cec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00cecc:	4290      	cmp	r0, r2
1a00cece:	d0f7      	beq.n	1a00cec0 <__mdiff+0x24>
1a00ced0:	d209      	bcs.n	1a00cee6 <__mdiff+0x4a>
1a00ced2:	4622      	mov	r2, r4
1a00ced4:	463b      	mov	r3, r7
1a00ced6:	4634      	mov	r4, r6
1a00ced8:	4647      	mov	r7, r8
1a00ceda:	4616      	mov	r6, r2
1a00cedc:	4698      	mov	r8, r3
1a00cede:	2501      	movs	r5, #1
1a00cee0:	e001      	b.n	1a00cee6 <__mdiff+0x4a>
1a00cee2:	dbf6      	blt.n	1a00ced2 <__mdiff+0x36>
1a00cee4:	2500      	movs	r5, #0
1a00cee6:	4660      	mov	r0, ip
1a00cee8:	6879      	ldr	r1, [r7, #4]
1a00ceea:	f7ff fda9 	bl	1a00ca40 <_Balloc>
1a00ceee:	693f      	ldr	r7, [r7, #16]
1a00cef0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a00cef4:	60c5      	str	r5, [r0, #12]
1a00cef6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a00cefa:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a00cefe:	f100 0514 	add.w	r5, r0, #20
1a00cf02:	2200      	movs	r2, #0
1a00cf04:	e000      	b.n	1a00cf08 <__mdiff+0x6c>
1a00cf06:	460d      	mov	r5, r1
1a00cf08:	f856 1b04 	ldr.w	r1, [r6], #4
1a00cf0c:	f854 8b04 	ldr.w	r8, [r4], #4
1a00cf10:	fa1f f981 	uxth.w	r9, r1
1a00cf14:	fa12 f388 	uxtah	r3, r2, r8
1a00cf18:	0c0a      	lsrs	r2, r1, #16
1a00cf1a:	eba3 0309 	sub.w	r3, r3, r9
1a00cf1e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a00cf22:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a00cf26:	4629      	mov	r1, r5
1a00cf28:	b29b      	uxth	r3, r3
1a00cf2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00cf2e:	45b6      	cmp	lr, r6
1a00cf30:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00cf34:	f841 3b04 	str.w	r3, [r1], #4
1a00cf38:	46a0      	mov	r8, r4
1a00cf3a:	d8e4      	bhi.n	1a00cf06 <__mdiff+0x6a>
1a00cf3c:	45a4      	cmp	ip, r4
1a00cf3e:	d916      	bls.n	1a00cf6e <__mdiff+0xd2>
1a00cf40:	460e      	mov	r6, r1
1a00cf42:	f858 5b04 	ldr.w	r5, [r8], #4
1a00cf46:	fa12 f385 	uxtah	r3, r2, r5
1a00cf4a:	141a      	asrs	r2, r3, #16
1a00cf4c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a00cf50:	b29b      	uxth	r3, r3
1a00cf52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00cf56:	45c4      	cmp	ip, r8
1a00cf58:	f846 3b04 	str.w	r3, [r6], #4
1a00cf5c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00cf60:	d8ef      	bhi.n	1a00cf42 <__mdiff+0xa6>
1a00cf62:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a00cf66:	1b2d      	subs	r5, r5, r4
1a00cf68:	f025 0503 	bic.w	r5, r5, #3
1a00cf6c:	440d      	add	r5, r1
1a00cf6e:	b923      	cbnz	r3, 1a00cf7a <__mdiff+0xde>
1a00cf70:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a00cf74:	3f01      	subs	r7, #1
1a00cf76:	2b00      	cmp	r3, #0
1a00cf78:	d0fa      	beq.n	1a00cf70 <__mdiff+0xd4>
1a00cf7a:	6107      	str	r7, [r0, #16]
1a00cf7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00cf80:	4660      	mov	r0, ip
1a00cf82:	2100      	movs	r1, #0
1a00cf84:	f7ff fd5c 	bl	1a00ca40 <_Balloc>
1a00cf88:	2201      	movs	r2, #1
1a00cf8a:	2300      	movs	r3, #0
1a00cf8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a00cf90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00cf94 <__d2b>:
1a00cf94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00cf98:	460f      	mov	r7, r1
1a00cf9a:	b083      	sub	sp, #12
1a00cf9c:	2101      	movs	r1, #1
1a00cf9e:	ec55 4b10 	vmov	r4, r5, d0
1a00cfa2:	4616      	mov	r6, r2
1a00cfa4:	f7ff fd4c 	bl	1a00ca40 <_Balloc>
1a00cfa8:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00cfac:	4681      	mov	r9, r0
1a00cfae:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a00cfb2:	f1b8 0f00 	cmp.w	r8, #0
1a00cfb6:	d001      	beq.n	1a00cfbc <__d2b+0x28>
1a00cfb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00cfbc:	2c00      	cmp	r4, #0
1a00cfbe:	9301      	str	r3, [sp, #4]
1a00cfc0:	d02b      	beq.n	1a00d01a <__d2b+0x86>
1a00cfc2:	4668      	mov	r0, sp
1a00cfc4:	9400      	str	r4, [sp, #0]
1a00cfc6:	f7ff fdd1 	bl	1a00cb6c <__lo0bits>
1a00cfca:	b9d0      	cbnz	r0, 1a00d002 <__d2b+0x6e>
1a00cfcc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00cfd0:	f8c9 2014 	str.w	r2, [r9, #20]
1a00cfd4:	2b00      	cmp	r3, #0
1a00cfd6:	bf14      	ite	ne
1a00cfd8:	2102      	movne	r1, #2
1a00cfda:	2101      	moveq	r1, #1
1a00cfdc:	f8c9 3018 	str.w	r3, [r9, #24]
1a00cfe0:	f8c9 1010 	str.w	r1, [r9, #16]
1a00cfe4:	f1b8 0f00 	cmp.w	r8, #0
1a00cfe8:	d024      	beq.n	1a00d034 <__d2b+0xa0>
1a00cfea:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a00cfee:	eb08 0300 	add.w	r3, r8, r0
1a00cff2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00cff6:	603b      	str	r3, [r7, #0]
1a00cff8:	6030      	str	r0, [r6, #0]
1a00cffa:	4648      	mov	r0, r9
1a00cffc:	b003      	add	sp, #12
1a00cffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00d002:	e9dd 1300 	ldrd	r1, r3, [sp]
1a00d006:	f1c0 0220 	rsb	r2, r0, #32
1a00d00a:	fa03 f202 	lsl.w	r2, r3, r2
1a00d00e:	430a      	orrs	r2, r1
1a00d010:	40c3      	lsrs	r3, r0
1a00d012:	9301      	str	r3, [sp, #4]
1a00d014:	f8c9 2014 	str.w	r2, [r9, #20]
1a00d018:	e7dc      	b.n	1a00cfd4 <__d2b+0x40>
1a00d01a:	a801      	add	r0, sp, #4
1a00d01c:	f7ff fda6 	bl	1a00cb6c <__lo0bits>
1a00d020:	9b01      	ldr	r3, [sp, #4]
1a00d022:	f8c9 3014 	str.w	r3, [r9, #20]
1a00d026:	2101      	movs	r1, #1
1a00d028:	3020      	adds	r0, #32
1a00d02a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00d02e:	f1b8 0f00 	cmp.w	r8, #0
1a00d032:	d1da      	bne.n	1a00cfea <__d2b+0x56>
1a00d034:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a00d038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00d03c:	6038      	str	r0, [r7, #0]
1a00d03e:	6918      	ldr	r0, [r3, #16]
1a00d040:	f7ff fd74 	bl	1a00cb2c <__hi0bits>
1a00d044:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a00d048:	6030      	str	r0, [r6, #0]
1a00d04a:	4648      	mov	r0, r9
1a00d04c:	b003      	add	sp, #12
1a00d04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00d052:	bf00      	nop

1a00d054 <_realloc_r>:
1a00d054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d058:	4617      	mov	r7, r2
1a00d05a:	2900      	cmp	r1, #0
1a00d05c:	f000 80bb 	beq.w	1a00d1d6 <_realloc_r+0x182>
1a00d060:	f107 040b 	add.w	r4, r7, #11
1a00d064:	4681      	mov	r9, r0
1a00d066:	460d      	mov	r5, r1
1a00d068:	f7fa fd9e 	bl	1a007ba8 <__malloc_lock>
1a00d06c:	2c16      	cmp	r4, #22
1a00d06e:	d85e      	bhi.n	1a00d12e <_realloc_r+0xda>
1a00d070:	2410      	movs	r4, #16
1a00d072:	4622      	mov	r2, r4
1a00d074:	42a7      	cmp	r7, r4
1a00d076:	d85f      	bhi.n	1a00d138 <_realloc_r+0xe4>
1a00d078:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00d07c:	f02e 0603 	bic.w	r6, lr, #3
1a00d080:	f1a5 0808 	sub.w	r8, r5, #8
1a00d084:	4296      	cmp	r6, r2
1a00d086:	eb08 0a06 	add.w	sl, r8, r6
1a00d08a:	f280 8081 	bge.w	1a00d190 <_realloc_r+0x13c>
1a00d08e:	4bcb      	ldr	r3, [pc, #812]	; (1a00d3bc <_realloc_r+0x368>)
1a00d090:	f8da 0004 	ldr.w	r0, [sl, #4]
1a00d094:	6899      	ldr	r1, [r3, #8]
1a00d096:	4551      	cmp	r1, sl
1a00d098:	f000 80b5 	beq.w	1a00d206 <_realloc_r+0x1b2>
1a00d09c:	f020 0301 	bic.w	r3, r0, #1
1a00d0a0:	4453      	add	r3, sl
1a00d0a2:	685b      	ldr	r3, [r3, #4]
1a00d0a4:	07db      	lsls	r3, r3, #31
1a00d0a6:	f100 808a 	bmi.w	1a00d1be <_realloc_r+0x16a>
1a00d0aa:	f020 0003 	bic.w	r0, r0, #3
1a00d0ae:	1833      	adds	r3, r6, r0
1a00d0b0:	4293      	cmp	r3, r2
1a00d0b2:	f280 8112 	bge.w	1a00d2da <_realloc_r+0x286>
1a00d0b6:	f01e 0f01 	tst.w	lr, #1
1a00d0ba:	d10f      	bne.n	1a00d0dc <_realloc_r+0x88>
1a00d0bc:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00d0c0:	eba8 0b03 	sub.w	fp, r8, r3
1a00d0c4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00d0c8:	f021 0103 	bic.w	r1, r1, #3
1a00d0cc:	4408      	add	r0, r1
1a00d0ce:	1983      	adds	r3, r0, r6
1a00d0d0:	4293      	cmp	r3, r2
1a00d0d2:	f280 8116 	bge.w	1a00d302 <_realloc_r+0x2ae>
1a00d0d6:	1873      	adds	r3, r6, r1
1a00d0d8:	4293      	cmp	r3, r2
1a00d0da:	da34      	bge.n	1a00d146 <_realloc_r+0xf2>
1a00d0dc:	4639      	mov	r1, r7
1a00d0de:	4648      	mov	r0, r9
1a00d0e0:	f7fa f9c0 	bl	1a007464 <_malloc_r>
1a00d0e4:	4607      	mov	r7, r0
1a00d0e6:	b1e0      	cbz	r0, 1a00d122 <_realloc_r+0xce>
1a00d0e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00d0ec:	f023 0301 	bic.w	r3, r3, #1
1a00d0f0:	4443      	add	r3, r8
1a00d0f2:	f1a0 0208 	sub.w	r2, r0, #8
1a00d0f6:	4293      	cmp	r3, r2
1a00d0f8:	f000 80f7 	beq.w	1a00d2ea <_realloc_r+0x296>
1a00d0fc:	1f32      	subs	r2, r6, #4
1a00d0fe:	2a24      	cmp	r2, #36	; 0x24
1a00d100:	f200 80fb 	bhi.w	1a00d2fa <_realloc_r+0x2a6>
1a00d104:	2a13      	cmp	r2, #19
1a00d106:	6829      	ldr	r1, [r5, #0]
1a00d108:	f200 80c9 	bhi.w	1a00d29e <_realloc_r+0x24a>
1a00d10c:	4603      	mov	r3, r0
1a00d10e:	462a      	mov	r2, r5
1a00d110:	6019      	str	r1, [r3, #0]
1a00d112:	6851      	ldr	r1, [r2, #4]
1a00d114:	6059      	str	r1, [r3, #4]
1a00d116:	6892      	ldr	r2, [r2, #8]
1a00d118:	609a      	str	r2, [r3, #8]
1a00d11a:	4629      	mov	r1, r5
1a00d11c:	4648      	mov	r0, r9
1a00d11e:	f7fa f855 	bl	1a0071cc <_free_r>
1a00d122:	4648      	mov	r0, r9
1a00d124:	f7fa fd46 	bl	1a007bb4 <__malloc_unlock>
1a00d128:	4638      	mov	r0, r7
1a00d12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d12e:	f024 0407 	bic.w	r4, r4, #7
1a00d132:	2c00      	cmp	r4, #0
1a00d134:	4622      	mov	r2, r4
1a00d136:	da9d      	bge.n	1a00d074 <_realloc_r+0x20>
1a00d138:	230c      	movs	r3, #12
1a00d13a:	f8c9 3000 	str.w	r3, [r9]
1a00d13e:	2700      	movs	r7, #0
1a00d140:	4638      	mov	r0, r7
1a00d142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d146:	465f      	mov	r7, fp
1a00d148:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00d14c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00d150:	1f32      	subs	r2, r6, #4
1a00d152:	2a24      	cmp	r2, #36	; 0x24
1a00d154:	60c1      	str	r1, [r0, #12]
1a00d156:	eb0b 0a03 	add.w	sl, fp, r3
1a00d15a:	6088      	str	r0, [r1, #8]
1a00d15c:	f200 80d9 	bhi.w	1a00d312 <_realloc_r+0x2be>
1a00d160:	2a13      	cmp	r2, #19
1a00d162:	6829      	ldr	r1, [r5, #0]
1a00d164:	f240 80d3 	bls.w	1a00d30e <_realloc_r+0x2ba>
1a00d168:	f8cb 1008 	str.w	r1, [fp, #8]
1a00d16c:	6869      	ldr	r1, [r5, #4]
1a00d16e:	f8cb 100c 	str.w	r1, [fp, #12]
1a00d172:	2a1b      	cmp	r2, #27
1a00d174:	68a9      	ldr	r1, [r5, #8]
1a00d176:	f200 80e0 	bhi.w	1a00d33a <_realloc_r+0x2e6>
1a00d17a:	f10b 0210 	add.w	r2, fp, #16
1a00d17e:	3508      	adds	r5, #8
1a00d180:	6011      	str	r1, [r2, #0]
1a00d182:	6869      	ldr	r1, [r5, #4]
1a00d184:	6051      	str	r1, [r2, #4]
1a00d186:	68a9      	ldr	r1, [r5, #8]
1a00d188:	6091      	str	r1, [r2, #8]
1a00d18a:	461e      	mov	r6, r3
1a00d18c:	46d8      	mov	r8, fp
1a00d18e:	463d      	mov	r5, r7
1a00d190:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a00d194:	1b32      	subs	r2, r6, r4
1a00d196:	2a0f      	cmp	r2, #15
1a00d198:	f003 0301 	and.w	r3, r3, #1
1a00d19c:	d820      	bhi.n	1a00d1e0 <_realloc_r+0x18c>
1a00d19e:	4333      	orrs	r3, r6
1a00d1a0:	f8c8 3004 	str.w	r3, [r8, #4]
1a00d1a4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00d1a8:	f043 0301 	orr.w	r3, r3, #1
1a00d1ac:	f8ca 3004 	str.w	r3, [sl, #4]
1a00d1b0:	4648      	mov	r0, r9
1a00d1b2:	462f      	mov	r7, r5
1a00d1b4:	f7fa fcfe 	bl	1a007bb4 <__malloc_unlock>
1a00d1b8:	4638      	mov	r0, r7
1a00d1ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d1be:	f01e 0f01 	tst.w	lr, #1
1a00d1c2:	d18b      	bne.n	1a00d0dc <_realloc_r+0x88>
1a00d1c4:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00d1c8:	eba8 0b03 	sub.w	fp, r8, r3
1a00d1cc:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00d1d0:	f021 0103 	bic.w	r1, r1, #3
1a00d1d4:	e77f      	b.n	1a00d0d6 <_realloc_r+0x82>
1a00d1d6:	4611      	mov	r1, r2
1a00d1d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d1dc:	f7fa b942 	b.w	1a007464 <_malloc_r>
1a00d1e0:	eb08 0104 	add.w	r1, r8, r4
1a00d1e4:	4323      	orrs	r3, r4
1a00d1e6:	f042 0201 	orr.w	r2, r2, #1
1a00d1ea:	f8c8 3004 	str.w	r3, [r8, #4]
1a00d1ee:	604a      	str	r2, [r1, #4]
1a00d1f0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00d1f4:	f043 0301 	orr.w	r3, r3, #1
1a00d1f8:	3108      	adds	r1, #8
1a00d1fa:	f8ca 3004 	str.w	r3, [sl, #4]
1a00d1fe:	4648      	mov	r0, r9
1a00d200:	f7f9 ffe4 	bl	1a0071cc <_free_r>
1a00d204:	e7d4      	b.n	1a00d1b0 <_realloc_r+0x15c>
1a00d206:	f020 0003 	bic.w	r0, r0, #3
1a00d20a:	1831      	adds	r1, r6, r0
1a00d20c:	f104 0c10 	add.w	ip, r4, #16
1a00d210:	4561      	cmp	r1, ip
1a00d212:	da4f      	bge.n	1a00d2b4 <_realloc_r+0x260>
1a00d214:	f01e 0f01 	tst.w	lr, #1
1a00d218:	f47f af60 	bne.w	1a00d0dc <_realloc_r+0x88>
1a00d21c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a00d220:	eba8 0b01 	sub.w	fp, r8, r1
1a00d224:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00d228:	f021 0103 	bic.w	r1, r1, #3
1a00d22c:	4408      	add	r0, r1
1a00d22e:	eb00 0a06 	add.w	sl, r0, r6
1a00d232:	45d4      	cmp	ip, sl
1a00d234:	f73f af4f 	bgt.w	1a00d0d6 <_realloc_r+0x82>
1a00d238:	465f      	mov	r7, fp
1a00d23a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00d23e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00d242:	1f32      	subs	r2, r6, #4
1a00d244:	2a24      	cmp	r2, #36	; 0x24
1a00d246:	60c1      	str	r1, [r0, #12]
1a00d248:	6088      	str	r0, [r1, #8]
1a00d24a:	f200 8099 	bhi.w	1a00d380 <_realloc_r+0x32c>
1a00d24e:	2a13      	cmp	r2, #19
1a00d250:	6829      	ldr	r1, [r5, #0]
1a00d252:	f240 8093 	bls.w	1a00d37c <_realloc_r+0x328>
1a00d256:	f8cb 1008 	str.w	r1, [fp, #8]
1a00d25a:	6869      	ldr	r1, [r5, #4]
1a00d25c:	f8cb 100c 	str.w	r1, [fp, #12]
1a00d260:	2a1b      	cmp	r2, #27
1a00d262:	68a9      	ldr	r1, [r5, #8]
1a00d264:	f200 8092 	bhi.w	1a00d38c <_realloc_r+0x338>
1a00d268:	f10b 0210 	add.w	r2, fp, #16
1a00d26c:	3508      	adds	r5, #8
1a00d26e:	6011      	str	r1, [r2, #0]
1a00d270:	6869      	ldr	r1, [r5, #4]
1a00d272:	6051      	str	r1, [r2, #4]
1a00d274:	68a9      	ldr	r1, [r5, #8]
1a00d276:	6091      	str	r1, [r2, #8]
1a00d278:	eb0b 0104 	add.w	r1, fp, r4
1a00d27c:	ebaa 0204 	sub.w	r2, sl, r4
1a00d280:	f042 0201 	orr.w	r2, r2, #1
1a00d284:	6099      	str	r1, [r3, #8]
1a00d286:	604a      	str	r2, [r1, #4]
1a00d288:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00d28c:	f003 0301 	and.w	r3, r3, #1
1a00d290:	431c      	orrs	r4, r3
1a00d292:	4648      	mov	r0, r9
1a00d294:	f8cb 4004 	str.w	r4, [fp, #4]
1a00d298:	f7fa fc8c 	bl	1a007bb4 <__malloc_unlock>
1a00d29c:	e750      	b.n	1a00d140 <_realloc_r+0xec>
1a00d29e:	6001      	str	r1, [r0, #0]
1a00d2a0:	686b      	ldr	r3, [r5, #4]
1a00d2a2:	6043      	str	r3, [r0, #4]
1a00d2a4:	2a1b      	cmp	r2, #27
1a00d2a6:	d83c      	bhi.n	1a00d322 <_realloc_r+0x2ce>
1a00d2a8:	f105 0208 	add.w	r2, r5, #8
1a00d2ac:	f100 0308 	add.w	r3, r0, #8
1a00d2b0:	68a9      	ldr	r1, [r5, #8]
1a00d2b2:	e72d      	b.n	1a00d110 <_realloc_r+0xbc>
1a00d2b4:	eb08 0004 	add.w	r0, r8, r4
1a00d2b8:	1b0a      	subs	r2, r1, r4
1a00d2ba:	f042 0201 	orr.w	r2, r2, #1
1a00d2be:	6098      	str	r0, [r3, #8]
1a00d2c0:	6042      	str	r2, [r0, #4]
1a00d2c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00d2c6:	f003 0301 	and.w	r3, r3, #1
1a00d2ca:	431c      	orrs	r4, r3
1a00d2cc:	4648      	mov	r0, r9
1a00d2ce:	f845 4c04 	str.w	r4, [r5, #-4]
1a00d2d2:	f7fa fc6f 	bl	1a007bb4 <__malloc_unlock>
1a00d2d6:	462f      	mov	r7, r5
1a00d2d8:	e732      	b.n	1a00d140 <_realloc_r+0xec>
1a00d2da:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00d2de:	461e      	mov	r6, r3
1a00d2e0:	60ca      	str	r2, [r1, #12]
1a00d2e2:	eb08 0a03 	add.w	sl, r8, r3
1a00d2e6:	6091      	str	r1, [r2, #8]
1a00d2e8:	e752      	b.n	1a00d190 <_realloc_r+0x13c>
1a00d2ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a00d2ee:	f023 0303 	bic.w	r3, r3, #3
1a00d2f2:	441e      	add	r6, r3
1a00d2f4:	eb08 0a06 	add.w	sl, r8, r6
1a00d2f8:	e74a      	b.n	1a00d190 <_realloc_r+0x13c>
1a00d2fa:	4629      	mov	r1, r5
1a00d2fc:	f7ff fb38 	bl	1a00c970 <memmove>
1a00d300:	e70b      	b.n	1a00d11a <_realloc_r+0xc6>
1a00d302:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00d306:	465f      	mov	r7, fp
1a00d308:	60ca      	str	r2, [r1, #12]
1a00d30a:	6091      	str	r1, [r2, #8]
1a00d30c:	e71c      	b.n	1a00d148 <_realloc_r+0xf4>
1a00d30e:	463a      	mov	r2, r7
1a00d310:	e736      	b.n	1a00d180 <_realloc_r+0x12c>
1a00d312:	4629      	mov	r1, r5
1a00d314:	4638      	mov	r0, r7
1a00d316:	461e      	mov	r6, r3
1a00d318:	46d8      	mov	r8, fp
1a00d31a:	f7ff fb29 	bl	1a00c970 <memmove>
1a00d31e:	463d      	mov	r5, r7
1a00d320:	e736      	b.n	1a00d190 <_realloc_r+0x13c>
1a00d322:	68ab      	ldr	r3, [r5, #8]
1a00d324:	6083      	str	r3, [r0, #8]
1a00d326:	68eb      	ldr	r3, [r5, #12]
1a00d328:	60c3      	str	r3, [r0, #12]
1a00d32a:	2a24      	cmp	r2, #36	; 0x24
1a00d32c:	d011      	beq.n	1a00d352 <_realloc_r+0x2fe>
1a00d32e:	f105 0210 	add.w	r2, r5, #16
1a00d332:	f100 0310 	add.w	r3, r0, #16
1a00d336:	6929      	ldr	r1, [r5, #16]
1a00d338:	e6ea      	b.n	1a00d110 <_realloc_r+0xbc>
1a00d33a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00d33e:	68e9      	ldr	r1, [r5, #12]
1a00d340:	f8cb 1014 	str.w	r1, [fp, #20]
1a00d344:	2a24      	cmp	r2, #36	; 0x24
1a00d346:	d00e      	beq.n	1a00d366 <_realloc_r+0x312>
1a00d348:	6929      	ldr	r1, [r5, #16]
1a00d34a:	f10b 0218 	add.w	r2, fp, #24
1a00d34e:	3510      	adds	r5, #16
1a00d350:	e716      	b.n	1a00d180 <_realloc_r+0x12c>
1a00d352:	692b      	ldr	r3, [r5, #16]
1a00d354:	6103      	str	r3, [r0, #16]
1a00d356:	696b      	ldr	r3, [r5, #20]
1a00d358:	6143      	str	r3, [r0, #20]
1a00d35a:	69a9      	ldr	r1, [r5, #24]
1a00d35c:	f105 0218 	add.w	r2, r5, #24
1a00d360:	f100 0318 	add.w	r3, r0, #24
1a00d364:	e6d4      	b.n	1a00d110 <_realloc_r+0xbc>
1a00d366:	692a      	ldr	r2, [r5, #16]
1a00d368:	f8cb 2018 	str.w	r2, [fp, #24]
1a00d36c:	696a      	ldr	r2, [r5, #20]
1a00d36e:	f8cb 201c 	str.w	r2, [fp, #28]
1a00d372:	69a9      	ldr	r1, [r5, #24]
1a00d374:	f10b 0220 	add.w	r2, fp, #32
1a00d378:	3518      	adds	r5, #24
1a00d37a:	e701      	b.n	1a00d180 <_realloc_r+0x12c>
1a00d37c:	463a      	mov	r2, r7
1a00d37e:	e776      	b.n	1a00d26e <_realloc_r+0x21a>
1a00d380:	4629      	mov	r1, r5
1a00d382:	4638      	mov	r0, r7
1a00d384:	f7ff faf4 	bl	1a00c970 <memmove>
1a00d388:	4b0c      	ldr	r3, [pc, #48]	; (1a00d3bc <_realloc_r+0x368>)
1a00d38a:	e775      	b.n	1a00d278 <_realloc_r+0x224>
1a00d38c:	f8cb 1010 	str.w	r1, [fp, #16]
1a00d390:	68e9      	ldr	r1, [r5, #12]
1a00d392:	f8cb 1014 	str.w	r1, [fp, #20]
1a00d396:	2a24      	cmp	r2, #36	; 0x24
1a00d398:	d004      	beq.n	1a00d3a4 <_realloc_r+0x350>
1a00d39a:	6929      	ldr	r1, [r5, #16]
1a00d39c:	f10b 0218 	add.w	r2, fp, #24
1a00d3a0:	3510      	adds	r5, #16
1a00d3a2:	e764      	b.n	1a00d26e <_realloc_r+0x21a>
1a00d3a4:	692a      	ldr	r2, [r5, #16]
1a00d3a6:	f8cb 2018 	str.w	r2, [fp, #24]
1a00d3aa:	696a      	ldr	r2, [r5, #20]
1a00d3ac:	f8cb 201c 	str.w	r2, [fp, #28]
1a00d3b0:	69a9      	ldr	r1, [r5, #24]
1a00d3b2:	f10b 0220 	add.w	r2, fp, #32
1a00d3b6:	3518      	adds	r5, #24
1a00d3b8:	e759      	b.n	1a00d26e <_realloc_r+0x21a>
1a00d3ba:	bf00      	nop
1a00d3bc:	100004c0 	.word	0x100004c0

1a00d3c0 <frexp>:
1a00d3c0:	ec53 2b10 	vmov	r2, r3, d0
1a00d3c4:	b570      	push	{r4, r5, r6, lr}
1a00d3c6:	4e16      	ldr	r6, [pc, #88]	; (1a00d420 <frexp+0x60>)
1a00d3c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00d3cc:	2500      	movs	r5, #0
1a00d3ce:	42b1      	cmp	r1, r6
1a00d3d0:	4604      	mov	r4, r0
1a00d3d2:	6005      	str	r5, [r0, #0]
1a00d3d4:	dc21      	bgt.n	1a00d41a <frexp+0x5a>
1a00d3d6:	ee10 6a10 	vmov	r6, s0
1a00d3da:	430e      	orrs	r6, r1
1a00d3dc:	d01d      	beq.n	1a00d41a <frexp+0x5a>
1a00d3de:	4e11      	ldr	r6, [pc, #68]	; (1a00d424 <frexp+0x64>)
1a00d3e0:	401e      	ands	r6, r3
1a00d3e2:	4618      	mov	r0, r3
1a00d3e4:	b966      	cbnz	r6, 1a00d400 <frexp+0x40>
1a00d3e6:	4619      	mov	r1, r3
1a00d3e8:	2200      	movs	r2, #0
1a00d3ea:	ee10 0a10 	vmov	r0, s0
1a00d3ee:	4b0e      	ldr	r3, [pc, #56]	; (1a00d428 <frexp+0x68>)
1a00d3f0:	f7f9 f8a2 	bl	1a006538 <__aeabi_dmul>
1a00d3f4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a00d3f8:	4602      	mov	r2, r0
1a00d3fa:	4608      	mov	r0, r1
1a00d3fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00d400:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a00d404:	1509      	asrs	r1, r1, #20
1a00d406:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a00d40a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a00d40e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a00d412:	4429      	add	r1, r5
1a00d414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a00d418:	6021      	str	r1, [r4, #0]
1a00d41a:	ec43 2b10 	vmov	d0, r2, r3
1a00d41e:	bd70      	pop	{r4, r5, r6, pc}
1a00d420:	7fefffff 	.word	0x7fefffff
1a00d424:	7ff00000 	.word	0x7ff00000
1a00d428:	43500000 	.word	0x43500000

1a00d42c <strncpy>:
1a00d42c:	b470      	push	{r4, r5, r6}
1a00d42e:	ea40 0401 	orr.w	r4, r0, r1
1a00d432:	07a3      	lsls	r3, r4, #30
1a00d434:	d127      	bne.n	1a00d486 <strncpy+0x5a>
1a00d436:	2a03      	cmp	r2, #3
1a00d438:	d925      	bls.n	1a00d486 <strncpy+0x5a>
1a00d43a:	460b      	mov	r3, r1
1a00d43c:	4606      	mov	r6, r0
1a00d43e:	4619      	mov	r1, r3
1a00d440:	f853 5b04 	ldr.w	r5, [r3], #4
1a00d444:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a00d448:	ea24 0405 	bic.w	r4, r4, r5
1a00d44c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a00d450:	d106      	bne.n	1a00d460 <strncpy+0x34>
1a00d452:	3a04      	subs	r2, #4
1a00d454:	2a03      	cmp	r2, #3
1a00d456:	f846 5b04 	str.w	r5, [r6], #4
1a00d45a:	4619      	mov	r1, r3
1a00d45c:	d8ef      	bhi.n	1a00d43e <strncpy+0x12>
1a00d45e:	b182      	cbz	r2, 1a00d482 <strncpy+0x56>
1a00d460:	4633      	mov	r3, r6
1a00d462:	780c      	ldrb	r4, [r1, #0]
1a00d464:	f803 4b01 	strb.w	r4, [r3], #1
1a00d468:	1e55      	subs	r5, r2, #1
1a00d46a:	b174      	cbz	r4, 1a00d48a <strncpy+0x5e>
1a00d46c:	4432      	add	r2, r6
1a00d46e:	442e      	add	r6, r5
1a00d470:	e005      	b.n	1a00d47e <strncpy+0x52>
1a00d472:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a00d476:	1af5      	subs	r5, r6, r3
1a00d478:	f803 4b01 	strb.w	r4, [r3], #1
1a00d47c:	b12c      	cbz	r4, 1a00d48a <strncpy+0x5e>
1a00d47e:	429a      	cmp	r2, r3
1a00d480:	d1f7      	bne.n	1a00d472 <strncpy+0x46>
1a00d482:	bc70      	pop	{r4, r5, r6}
1a00d484:	4770      	bx	lr
1a00d486:	4606      	mov	r6, r0
1a00d488:	e7e9      	b.n	1a00d45e <strncpy+0x32>
1a00d48a:	2d00      	cmp	r5, #0
1a00d48c:	d0f9      	beq.n	1a00d482 <strncpy+0x56>
1a00d48e:	441d      	add	r5, r3
1a00d490:	2200      	movs	r2, #0
1a00d492:	f803 2b01 	strb.w	r2, [r3], #1
1a00d496:	42ab      	cmp	r3, r5
1a00d498:	d1fb      	bne.n	1a00d492 <strncpy+0x66>
1a00d49a:	bc70      	pop	{r4, r5, r6}
1a00d49c:	4770      	bx	lr
1a00d49e:	bf00      	nop

1a00d4a0 <__ssprint_r>:
1a00d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d4a4:	6893      	ldr	r3, [r2, #8]
1a00d4a6:	b083      	sub	sp, #12
1a00d4a8:	4690      	mov	r8, r2
1a00d4aa:	2b00      	cmp	r3, #0
1a00d4ac:	d06d      	beq.n	1a00d58a <__ssprint_r+0xea>
1a00d4ae:	6817      	ldr	r7, [r2, #0]
1a00d4b0:	688d      	ldr	r5, [r1, #8]
1a00d4b2:	4682      	mov	sl, r0
1a00d4b4:	460c      	mov	r4, r1
1a00d4b6:	6808      	ldr	r0, [r1, #0]
1a00d4b8:	3708      	adds	r7, #8
1a00d4ba:	e043      	b.n	1a00d544 <__ssprint_r+0xa4>
1a00d4bc:	89a3      	ldrh	r3, [r4, #12]
1a00d4be:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a00d4c2:	d02e      	beq.n	1a00d522 <__ssprint_r+0x82>
1a00d4c4:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
1a00d4c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a00d4cc:	eba0 0b01 	sub.w	fp, r0, r1
1a00d4d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1a00d4d4:	eb0b 0006 	add.w	r0, fp, r6
1a00d4d8:	106d      	asrs	r5, r5, #1
1a00d4da:	3001      	adds	r0, #1
1a00d4dc:	42a8      	cmp	r0, r5
1a00d4de:	462a      	mov	r2, r5
1a00d4e0:	bf84      	itt	hi
1a00d4e2:	4605      	movhi	r5, r0
1a00d4e4:	462a      	movhi	r2, r5
1a00d4e6:	055b      	lsls	r3, r3, #21
1a00d4e8:	d536      	bpl.n	1a00d558 <__ssprint_r+0xb8>
1a00d4ea:	4611      	mov	r1, r2
1a00d4ec:	4650      	mov	r0, sl
1a00d4ee:	f7f9 ffb9 	bl	1a007464 <_malloc_r>
1a00d4f2:	2800      	cmp	r0, #0
1a00d4f4:	d03a      	beq.n	1a00d56c <__ssprint_r+0xcc>
1a00d4f6:	465a      	mov	r2, fp
1a00d4f8:	6921      	ldr	r1, [r4, #16]
1a00d4fa:	9001      	str	r0, [sp, #4]
1a00d4fc:	f7fa fa6a 	bl	1a0079d4 <memcpy>
1a00d500:	89a2      	ldrh	r2, [r4, #12]
1a00d502:	9b01      	ldr	r3, [sp, #4]
1a00d504:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a00d508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00d50c:	81a2      	strh	r2, [r4, #12]
1a00d50e:	eba5 020b 	sub.w	r2, r5, fp
1a00d512:	eb03 000b 	add.w	r0, r3, fp
1a00d516:	6165      	str	r5, [r4, #20]
1a00d518:	6123      	str	r3, [r4, #16]
1a00d51a:	6020      	str	r0, [r4, #0]
1a00d51c:	60a2      	str	r2, [r4, #8]
1a00d51e:	4635      	mov	r5, r6
1a00d520:	46b3      	mov	fp, r6
1a00d522:	465a      	mov	r2, fp
1a00d524:	4649      	mov	r1, r9
1a00d526:	f7ff fa23 	bl	1a00c970 <memmove>
1a00d52a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00d52e:	68a2      	ldr	r2, [r4, #8]
1a00d530:	6820      	ldr	r0, [r4, #0]
1a00d532:	1b55      	subs	r5, r2, r5
1a00d534:	4458      	add	r0, fp
1a00d536:	1b9e      	subs	r6, r3, r6
1a00d538:	60a5      	str	r5, [r4, #8]
1a00d53a:	6020      	str	r0, [r4, #0]
1a00d53c:	f8c8 6008 	str.w	r6, [r8, #8]
1a00d540:	b31e      	cbz	r6, 1a00d58a <__ssprint_r+0xea>
1a00d542:	3708      	adds	r7, #8
1a00d544:	e957 9602 	ldrd	r9, r6, [r7, #-8]
1a00d548:	46ab      	mov	fp, r5
1a00d54a:	2e00      	cmp	r6, #0
1a00d54c:	d0f9      	beq.n	1a00d542 <__ssprint_r+0xa2>
1a00d54e:	42ae      	cmp	r6, r5
1a00d550:	d2b4      	bcs.n	1a00d4bc <__ssprint_r+0x1c>
1a00d552:	4635      	mov	r5, r6
1a00d554:	46b3      	mov	fp, r6
1a00d556:	e7e4      	b.n	1a00d522 <__ssprint_r+0x82>
1a00d558:	4650      	mov	r0, sl
1a00d55a:	f7ff fd7b 	bl	1a00d054 <_realloc_r>
1a00d55e:	4603      	mov	r3, r0
1a00d560:	2800      	cmp	r0, #0
1a00d562:	d1d4      	bne.n	1a00d50e <__ssprint_r+0x6e>
1a00d564:	6921      	ldr	r1, [r4, #16]
1a00d566:	4650      	mov	r0, sl
1a00d568:	f7f9 fe30 	bl	1a0071cc <_free_r>
1a00d56c:	230c      	movs	r3, #12
1a00d56e:	f8ca 3000 	str.w	r3, [sl]
1a00d572:	89a3      	ldrh	r3, [r4, #12]
1a00d574:	2200      	movs	r2, #0
1a00d576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00d57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00d57e:	81a3      	strh	r3, [r4, #12]
1a00d580:	e9c8 2201 	strd	r2, r2, [r8, #4]
1a00d584:	b003      	add	sp, #12
1a00d586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d58a:	2000      	movs	r0, #0
1a00d58c:	f8c8 0004 	str.w	r0, [r8, #4]
1a00d590:	b003      	add	sp, #12
1a00d592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d596:	bf00      	nop

1a00d598 <__sprint_r.part.0>:
1a00d598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00d59c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a00d59e:	049c      	lsls	r4, r3, #18
1a00d5a0:	4693      	mov	fp, r2
1a00d5a2:	d52d      	bpl.n	1a00d600 <__sprint_r.part.0+0x68>
1a00d5a4:	6893      	ldr	r3, [r2, #8]
1a00d5a6:	6812      	ldr	r2, [r2, #0]
1a00d5a8:	b343      	cbz	r3, 1a00d5fc <__sprint_r.part.0+0x64>
1a00d5aa:	460e      	mov	r6, r1
1a00d5ac:	4607      	mov	r7, r0
1a00d5ae:	f102 0908 	add.w	r9, r2, #8
1a00d5b2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a00d5b6:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a00d5ba:	d015      	beq.n	1a00d5e8 <__sprint_r.part.0+0x50>
1a00d5bc:	3d04      	subs	r5, #4
1a00d5be:	2400      	movs	r4, #0
1a00d5c0:	e001      	b.n	1a00d5c6 <__sprint_r.part.0+0x2e>
1a00d5c2:	45a0      	cmp	r8, r4
1a00d5c4:	d00e      	beq.n	1a00d5e4 <__sprint_r.part.0+0x4c>
1a00d5c6:	4632      	mov	r2, r6
1a00d5c8:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a00d5cc:	4638      	mov	r0, r7
1a00d5ce:	f000 f8a9 	bl	1a00d724 <_fputwc_r>
1a00d5d2:	1c43      	adds	r3, r0, #1
1a00d5d4:	f104 0401 	add.w	r4, r4, #1
1a00d5d8:	d1f3      	bne.n	1a00d5c2 <__sprint_r.part.0+0x2a>
1a00d5da:	2300      	movs	r3, #0
1a00d5dc:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00d5e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d5e4:	f8db 3008 	ldr.w	r3, [fp, #8]
1a00d5e8:	f02a 0a03 	bic.w	sl, sl, #3
1a00d5ec:	eba3 030a 	sub.w	r3, r3, sl
1a00d5f0:	f8cb 3008 	str.w	r3, [fp, #8]
1a00d5f4:	f109 0908 	add.w	r9, r9, #8
1a00d5f8:	2b00      	cmp	r3, #0
1a00d5fa:	d1da      	bne.n	1a00d5b2 <__sprint_r.part.0+0x1a>
1a00d5fc:	2000      	movs	r0, #0
1a00d5fe:	e7ec      	b.n	1a00d5da <__sprint_r.part.0+0x42>
1a00d600:	f7fe ff60 	bl	1a00c4c4 <__sfvwrite_r>
1a00d604:	2300      	movs	r3, #0
1a00d606:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00d60a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00d60e:	bf00      	nop

1a00d610 <__sprint_r>:
1a00d610:	6893      	ldr	r3, [r2, #8]
1a00d612:	b10b      	cbz	r3, 1a00d618 <__sprint_r+0x8>
1a00d614:	f7ff bfc0 	b.w	1a00d598 <__sprint_r.part.0>
1a00d618:	b410      	push	{r4}
1a00d61a:	4618      	mov	r0, r3
1a00d61c:	6053      	str	r3, [r2, #4]
1a00d61e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00d622:	4770      	bx	lr

1a00d624 <_calloc_r>:
1a00d624:	b510      	push	{r4, lr}
1a00d626:	fb02 f101 	mul.w	r1, r2, r1
1a00d62a:	f7f9 ff1b 	bl	1a007464 <_malloc_r>
1a00d62e:	4604      	mov	r4, r0
1a00d630:	b168      	cbz	r0, 1a00d64e <_calloc_r+0x2a>
1a00d632:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00d636:	f022 0203 	bic.w	r2, r2, #3
1a00d63a:	3a04      	subs	r2, #4
1a00d63c:	2a24      	cmp	r2, #36	; 0x24
1a00d63e:	d818      	bhi.n	1a00d672 <_calloc_r+0x4e>
1a00d640:	2a13      	cmp	r2, #19
1a00d642:	d806      	bhi.n	1a00d652 <_calloc_r+0x2e>
1a00d644:	4602      	mov	r2, r0
1a00d646:	2300      	movs	r3, #0
1a00d648:	e9c2 3300 	strd	r3, r3, [r2]
1a00d64c:	6093      	str	r3, [r2, #8]
1a00d64e:	4620      	mov	r0, r4
1a00d650:	bd10      	pop	{r4, pc}
1a00d652:	2300      	movs	r3, #0
1a00d654:	2a1b      	cmp	r2, #27
1a00d656:	e9c0 3300 	strd	r3, r3, [r0]
1a00d65a:	d90f      	bls.n	1a00d67c <_calloc_r+0x58>
1a00d65c:	2a24      	cmp	r2, #36	; 0x24
1a00d65e:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00d662:	bf12      	itee	ne
1a00d664:	f100 0210 	addne.w	r2, r0, #16
1a00d668:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a00d66c:	f100 0218 	addeq.w	r2, r0, #24
1a00d670:	e7e9      	b.n	1a00d646 <_calloc_r+0x22>
1a00d672:	2100      	movs	r1, #0
1a00d674:	f7fa fa48 	bl	1a007b08 <memset>
1a00d678:	4620      	mov	r0, r4
1a00d67a:	bd10      	pop	{r4, pc}
1a00d67c:	f100 0208 	add.w	r2, r0, #8
1a00d680:	e7e1      	b.n	1a00d646 <_calloc_r+0x22>
1a00d682:	bf00      	nop

1a00d684 <__fputwc>:
1a00d684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00d688:	b082      	sub	sp, #8
1a00d68a:	4680      	mov	r8, r0
1a00d68c:	4689      	mov	r9, r1
1a00d68e:	4614      	mov	r4, r2
1a00d690:	f000 f87a 	bl	1a00d788 <__locale_mb_cur_max>
1a00d694:	2801      	cmp	r0, #1
1a00d696:	d103      	bne.n	1a00d6a0 <__fputwc+0x1c>
1a00d698:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a00d69c:	2bfe      	cmp	r3, #254	; 0xfe
1a00d69e:	d933      	bls.n	1a00d708 <__fputwc+0x84>
1a00d6a0:	464a      	mov	r2, r9
1a00d6a2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00d6a6:	a901      	add	r1, sp, #4
1a00d6a8:	4640      	mov	r0, r8
1a00d6aa:	f000 f8e1 	bl	1a00d870 <_wcrtomb_r>
1a00d6ae:	1c42      	adds	r2, r0, #1
1a00d6b0:	4606      	mov	r6, r0
1a00d6b2:	d02f      	beq.n	1a00d714 <__fputwc+0x90>
1a00d6b4:	b320      	cbz	r0, 1a00d700 <__fputwc+0x7c>
1a00d6b6:	f89d c004 	ldrb.w	ip, [sp, #4]
1a00d6ba:	2500      	movs	r5, #0
1a00d6bc:	f10d 0a04 	add.w	sl, sp, #4
1a00d6c0:	e009      	b.n	1a00d6d6 <__fputwc+0x52>
1a00d6c2:	6823      	ldr	r3, [r4, #0]
1a00d6c4:	1c5a      	adds	r2, r3, #1
1a00d6c6:	6022      	str	r2, [r4, #0]
1a00d6c8:	f883 c000 	strb.w	ip, [r3]
1a00d6cc:	3501      	adds	r5, #1
1a00d6ce:	42b5      	cmp	r5, r6
1a00d6d0:	d216      	bcs.n	1a00d700 <__fputwc+0x7c>
1a00d6d2:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00d6d6:	68a3      	ldr	r3, [r4, #8]
1a00d6d8:	3b01      	subs	r3, #1
1a00d6da:	2b00      	cmp	r3, #0
1a00d6dc:	60a3      	str	r3, [r4, #8]
1a00d6de:	daf0      	bge.n	1a00d6c2 <__fputwc+0x3e>
1a00d6e0:	69a7      	ldr	r7, [r4, #24]
1a00d6e2:	42bb      	cmp	r3, r7
1a00d6e4:	4661      	mov	r1, ip
1a00d6e6:	4622      	mov	r2, r4
1a00d6e8:	4640      	mov	r0, r8
1a00d6ea:	db02      	blt.n	1a00d6f2 <__fputwc+0x6e>
1a00d6ec:	f1bc 0f0a 	cmp.w	ip, #10
1a00d6f0:	d1e7      	bne.n	1a00d6c2 <__fputwc+0x3e>
1a00d6f2:	f000 f865 	bl	1a00d7c0 <__swbuf_r>
1a00d6f6:	1c43      	adds	r3, r0, #1
1a00d6f8:	d1e8      	bne.n	1a00d6cc <__fputwc+0x48>
1a00d6fa:	b002      	add	sp, #8
1a00d6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00d700:	4648      	mov	r0, r9
1a00d702:	b002      	add	sp, #8
1a00d704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00d708:	fa5f fc89 	uxtb.w	ip, r9
1a00d70c:	4606      	mov	r6, r0
1a00d70e:	f88d c004 	strb.w	ip, [sp, #4]
1a00d712:	e7d2      	b.n	1a00d6ba <__fputwc+0x36>
1a00d714:	89a3      	ldrh	r3, [r4, #12]
1a00d716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00d71a:	81a3      	strh	r3, [r4, #12]
1a00d71c:	b002      	add	sp, #8
1a00d71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00d722:	bf00      	nop

1a00d724 <_fputwc_r>:
1a00d724:	b530      	push	{r4, r5, lr}
1a00d726:	4605      	mov	r5, r0
1a00d728:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00d72a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a00d72e:	07c0      	lsls	r0, r0, #31
1a00d730:	4614      	mov	r4, r2
1a00d732:	b083      	sub	sp, #12
1a00d734:	b29a      	uxth	r2, r3
1a00d736:	d401      	bmi.n	1a00d73c <_fputwc_r+0x18>
1a00d738:	0590      	lsls	r0, r2, #22
1a00d73a:	d51c      	bpl.n	1a00d776 <_fputwc_r+0x52>
1a00d73c:	0490      	lsls	r0, r2, #18
1a00d73e:	d406      	bmi.n	1a00d74e <_fputwc_r+0x2a>
1a00d740:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00d742:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00d746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00d74a:	81a3      	strh	r3, [r4, #12]
1a00d74c:	6662      	str	r2, [r4, #100]	; 0x64
1a00d74e:	4628      	mov	r0, r5
1a00d750:	4622      	mov	r2, r4
1a00d752:	f7ff ff97 	bl	1a00d684 <__fputwc>
1a00d756:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00d758:	07da      	lsls	r2, r3, #31
1a00d75a:	4605      	mov	r5, r0
1a00d75c:	d402      	bmi.n	1a00d764 <_fputwc_r+0x40>
1a00d75e:	89a3      	ldrh	r3, [r4, #12]
1a00d760:	059b      	lsls	r3, r3, #22
1a00d762:	d502      	bpl.n	1a00d76a <_fputwc_r+0x46>
1a00d764:	4628      	mov	r0, r5
1a00d766:	b003      	add	sp, #12
1a00d768:	bd30      	pop	{r4, r5, pc}
1a00d76a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00d76c:	f7f9 fe78 	bl	1a007460 <__retarget_lock_release_recursive>
1a00d770:	4628      	mov	r0, r5
1a00d772:	b003      	add	sp, #12
1a00d774:	bd30      	pop	{r4, r5, pc}
1a00d776:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00d778:	9101      	str	r1, [sp, #4]
1a00d77a:	f7f9 fe6f 	bl	1a00745c <__retarget_lock_acquire_recursive>
1a00d77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00d782:	9901      	ldr	r1, [sp, #4]
1a00d784:	b29a      	uxth	r2, r3
1a00d786:	e7d9      	b.n	1a00d73c <_fputwc_r+0x18>

1a00d788 <__locale_mb_cur_max>:
1a00d788:	4b01      	ldr	r3, [pc, #4]	; (1a00d790 <__locale_mb_cur_max+0x8>)
1a00d78a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a00d78e:	4770      	bx	lr
1a00d790:	100008d0 	.word	0x100008d0

1a00d794 <__ascii_mbtowc>:
1a00d794:	b082      	sub	sp, #8
1a00d796:	b149      	cbz	r1, 1a00d7ac <__ascii_mbtowc+0x18>
1a00d798:	b15a      	cbz	r2, 1a00d7b2 <__ascii_mbtowc+0x1e>
1a00d79a:	b16b      	cbz	r3, 1a00d7b8 <__ascii_mbtowc+0x24>
1a00d79c:	7813      	ldrb	r3, [r2, #0]
1a00d79e:	600b      	str	r3, [r1, #0]
1a00d7a0:	7812      	ldrb	r2, [r2, #0]
1a00d7a2:	1c10      	adds	r0, r2, #0
1a00d7a4:	bf18      	it	ne
1a00d7a6:	2001      	movne	r0, #1
1a00d7a8:	b002      	add	sp, #8
1a00d7aa:	4770      	bx	lr
1a00d7ac:	a901      	add	r1, sp, #4
1a00d7ae:	2a00      	cmp	r2, #0
1a00d7b0:	d1f3      	bne.n	1a00d79a <__ascii_mbtowc+0x6>
1a00d7b2:	4610      	mov	r0, r2
1a00d7b4:	b002      	add	sp, #8
1a00d7b6:	4770      	bx	lr
1a00d7b8:	f06f 0001 	mvn.w	r0, #1
1a00d7bc:	e7f4      	b.n	1a00d7a8 <__ascii_mbtowc+0x14>
1a00d7be:	bf00      	nop

1a00d7c0 <__swbuf_r>:
1a00d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00d7c2:	460d      	mov	r5, r1
1a00d7c4:	4614      	mov	r4, r2
1a00d7c6:	4606      	mov	r6, r0
1a00d7c8:	b110      	cbz	r0, 1a00d7d0 <__swbuf_r+0x10>
1a00d7ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00d7cc:	2b00      	cmp	r3, #0
1a00d7ce:	d043      	beq.n	1a00d858 <__swbuf_r+0x98>
1a00d7d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00d7d4:	69a3      	ldr	r3, [r4, #24]
1a00d7d6:	60a3      	str	r3, [r4, #8]
1a00d7d8:	b291      	uxth	r1, r2
1a00d7da:	0708      	lsls	r0, r1, #28
1a00d7dc:	d51b      	bpl.n	1a00d816 <__swbuf_r+0x56>
1a00d7de:	6923      	ldr	r3, [r4, #16]
1a00d7e0:	b1cb      	cbz	r3, 1a00d816 <__swbuf_r+0x56>
1a00d7e2:	b2ed      	uxtb	r5, r5
1a00d7e4:	0489      	lsls	r1, r1, #18
1a00d7e6:	462f      	mov	r7, r5
1a00d7e8:	d522      	bpl.n	1a00d830 <__swbuf_r+0x70>
1a00d7ea:	6822      	ldr	r2, [r4, #0]
1a00d7ec:	6961      	ldr	r1, [r4, #20]
1a00d7ee:	1ad3      	subs	r3, r2, r3
1a00d7f0:	4299      	cmp	r1, r3
1a00d7f2:	dd29      	ble.n	1a00d848 <__swbuf_r+0x88>
1a00d7f4:	3301      	adds	r3, #1
1a00d7f6:	68a1      	ldr	r1, [r4, #8]
1a00d7f8:	1c50      	adds	r0, r2, #1
1a00d7fa:	3901      	subs	r1, #1
1a00d7fc:	60a1      	str	r1, [r4, #8]
1a00d7fe:	6020      	str	r0, [r4, #0]
1a00d800:	7015      	strb	r5, [r2, #0]
1a00d802:	6962      	ldr	r2, [r4, #20]
1a00d804:	429a      	cmp	r2, r3
1a00d806:	d02a      	beq.n	1a00d85e <__swbuf_r+0x9e>
1a00d808:	89a3      	ldrh	r3, [r4, #12]
1a00d80a:	07db      	lsls	r3, r3, #31
1a00d80c:	d501      	bpl.n	1a00d812 <__swbuf_r+0x52>
1a00d80e:	2d0a      	cmp	r5, #10
1a00d810:	d025      	beq.n	1a00d85e <__swbuf_r+0x9e>
1a00d812:	4638      	mov	r0, r7
1a00d814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00d816:	4621      	mov	r1, r4
1a00d818:	4630      	mov	r0, r6
1a00d81a:	f7fd fe2d 	bl	1a00b478 <__swsetup_r>
1a00d81e:	bb20      	cbnz	r0, 1a00d86a <__swbuf_r+0xaa>
1a00d820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00d824:	6923      	ldr	r3, [r4, #16]
1a00d826:	b291      	uxth	r1, r2
1a00d828:	b2ed      	uxtb	r5, r5
1a00d82a:	0489      	lsls	r1, r1, #18
1a00d82c:	462f      	mov	r7, r5
1a00d82e:	d4dc      	bmi.n	1a00d7ea <__swbuf_r+0x2a>
1a00d830:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00d832:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00d836:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00d83a:	81a2      	strh	r2, [r4, #12]
1a00d83c:	6822      	ldr	r2, [r4, #0]
1a00d83e:	6661      	str	r1, [r4, #100]	; 0x64
1a00d840:	6961      	ldr	r1, [r4, #20]
1a00d842:	1ad3      	subs	r3, r2, r3
1a00d844:	4299      	cmp	r1, r3
1a00d846:	dcd5      	bgt.n	1a00d7f4 <__swbuf_r+0x34>
1a00d848:	4621      	mov	r1, r4
1a00d84a:	4630      	mov	r0, r6
1a00d84c:	f7f9 fbdc 	bl	1a007008 <_fflush_r>
1a00d850:	b958      	cbnz	r0, 1a00d86a <__swbuf_r+0xaa>
1a00d852:	6822      	ldr	r2, [r4, #0]
1a00d854:	2301      	movs	r3, #1
1a00d856:	e7ce      	b.n	1a00d7f6 <__swbuf_r+0x36>
1a00d858:	f7f9 fc32 	bl	1a0070c0 <__sinit>
1a00d85c:	e7b8      	b.n	1a00d7d0 <__swbuf_r+0x10>
1a00d85e:	4621      	mov	r1, r4
1a00d860:	4630      	mov	r0, r6
1a00d862:	f7f9 fbd1 	bl	1a007008 <_fflush_r>
1a00d866:	2800      	cmp	r0, #0
1a00d868:	d0d3      	beq.n	1a00d812 <__swbuf_r+0x52>
1a00d86a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00d86e:	e7d0      	b.n	1a00d812 <__swbuf_r+0x52>

1a00d870 <_wcrtomb_r>:
1a00d870:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00d872:	4c0b      	ldr	r4, [pc, #44]	; (1a00d8a0 <_wcrtomb_r+0x30>)
1a00d874:	b085      	sub	sp, #20
1a00d876:	4606      	mov	r6, r0
1a00d878:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00d87c:	461f      	mov	r7, r3
1a00d87e:	b121      	cbz	r1, 1a00d88a <_wcrtomb_r+0x1a>
1a00d880:	47a0      	blx	r4
1a00d882:	1c43      	adds	r3, r0, #1
1a00d884:	d006      	beq.n	1a00d894 <_wcrtomb_r+0x24>
1a00d886:	b005      	add	sp, #20
1a00d888:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00d88a:	460a      	mov	r2, r1
1a00d88c:	a901      	add	r1, sp, #4
1a00d88e:	47a0      	blx	r4
1a00d890:	1c43      	adds	r3, r0, #1
1a00d892:	d1f8      	bne.n	1a00d886 <_wcrtomb_r+0x16>
1a00d894:	2200      	movs	r2, #0
1a00d896:	238a      	movs	r3, #138	; 0x8a
1a00d898:	603a      	str	r2, [r7, #0]
1a00d89a:	6033      	str	r3, [r6, #0]
1a00d89c:	b005      	add	sp, #20
1a00d89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00d8a0:	100008d0 	.word	0x100008d0

1a00d8a4 <__ascii_wctomb>:
1a00d8a4:	b149      	cbz	r1, 1a00d8ba <__ascii_wctomb+0x16>
1a00d8a6:	2aff      	cmp	r2, #255	; 0xff
1a00d8a8:	d802      	bhi.n	1a00d8b0 <__ascii_wctomb+0xc>
1a00d8aa:	700a      	strb	r2, [r1, #0]
1a00d8ac:	2001      	movs	r0, #1
1a00d8ae:	4770      	bx	lr
1a00d8b0:	238a      	movs	r3, #138	; 0x8a
1a00d8b2:	6003      	str	r3, [r0, #0]
1a00d8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00d8b8:	4770      	bx	lr
1a00d8ba:	4608      	mov	r0, r1
1a00d8bc:	4770      	bx	lr
1a00d8be:	bf00      	nop
1a00d8c0:	4f525245 	.word	0x4f525245
1a00d8c4:	69252052 	.word	0x69252052
1a00d8c8:	000a0d2e 	.word	0x000a0d2e
1a00d8cc:	0d214b4f 	.word	0x0d214b4f
1a00d8d0:	ffff000a 	.word	0xffff000a
1a00d8d4:	63656a45 	.word	0x63656a45
1a00d8d8:	6e617475 	.word	0x6e617475
1a00d8dc:	27206f64 	.word	0x27206f64
1a00d8e0:	2e277325 	.word	0x2e277325
1a00d8e4:	ff002e2e 	.word	0xff002e2e
1a00d8e8:	72617473 	.word	0x72617473
1a00d8ec:	00000074 	.word	0x00000074
1a00d8f0:	63696e49 	.word	0x63696e49
1a00d8f4:	646e6169 	.word	0x646e6169
1a00d8f8:	6473206f 	.word	0x6473206f
1a00d8fc:	64726163 	.word	0x64726163
1a00d900:	6e6f6320 	.word	0x6e6f6320
1a00d904:	6e6f6320 	.word	0x6e6f6320
1a00d908:	75676966 	.word	0x75676966
1a00d90c:	69636172 	.word	0x69636172
1a00d910:	0d3a6e6f 	.word	0x0d3a6e6f
1a00d914:	0000000a 	.word	0x0000000a
1a00d918:	65762020 	.word	0x65762020
1a00d91c:	69636f6c 	.word	0x69636f6c
1a00d920:	20646164 	.word	0x20646164
1a00d924:	63696e69 	.word	0x63696e69
1a00d928:	206c6169 	.word	0x206c6169
1a00d92c:	48206925 	.word	0x48206925
1a00d930:	0a0d2e7a 	.word	0x0a0d2e7a
1a00d934:	00000000 	.word	0x00000000
1a00d938:	65762020 	.word	0x65762020
1a00d93c:	69636f6c 	.word	0x69636f6c
1a00d940:	20646164 	.word	0x20646164
1a00d944:	74206564 	.word	0x74206564
1a00d948:	61626172 	.word	0x61626172
1a00d94c:	25206f6a 	.word	0x25206f6a
1a00d950:	7a482069 	.word	0x7a482069
1a00d954:	000a0d2e 	.word	0x000a0d2e
1a00d958:	63696e49 	.word	0x63696e49
1a00d95c:	64206f69 	.word	0x64206f69
1a00d960:	64732065 	.word	0x64732065
1a00d964:	64726163 	.word	0x64726163
1a00d968:	4c414620 	.word	0x4c414620
1a00d96c:	0d2e4f4c 	.word	0x0d2e4f4c
1a00d970:	462a2a0a 	.word	0x462a2a0a
1a00d974:	2a2a4e49 	.word	0x2a2a4e49
1a00d978:	00000a0d 	.word	0x00000a0d
1a00d97c:	63696e49 	.word	0x63696e49
1a00d980:	64206f69 	.word	0x64206f69
1a00d984:	64732065 	.word	0x64732065
1a00d988:	64726163 	.word	0x64726163
1a00d98c:	214b4f20 	.word	0x214b4f20
1a00d990:	696e5520 	.word	0x696e5520
1a00d994:	20646164 	.word	0x20646164
1a00d998:	46746146 	.word	0x46746146
1a00d99c:	00272073 	.word	0x00272073
1a00d9a0:	0a0d2e27 	.word	0x0a0d2e27
1a00d9a4:	00000000 	.word	0x00000000
1a00d9a8:	75676f4c 	.word	0x75676f4c
1a00d9ac:	646e6165 	.word	0x646e6165
1a00d9b0:	5453206f 	.word	0x5453206f
1a00d9b4:	53555441 	.word	0x53555441
1a00d9b8:	20656420 	.word	0x20656420
1a00d9bc:	6f706964 	.word	0x6f706964
1a00d9c0:	69746973 	.word	0x69746973
1a00d9c4:	2e736f76 	.word	0x2e736f76
1a00d9c8:	0a0d2e2e 	.word	0x0a0d2e2e
1a00d9cc:	ffffff00 	.word	0xffffff00
1a00d9d0:	54415453 	.word	0x54415453
1a00d9d4:	203a5355 	.word	0x203a5355
1a00d9d8:	20726f50 	.word	0x20726f50
1a00d9dc:	6f766166 	.word	0x6f766166
1a00d9e0:	6e692072 	.word	0x6e692072
1a00d9e4:	74726573 	.word	0x74726573
1a00d9e8:	61542065 	.word	0x61542065
1a00d9ec:	74656a72 	.word	0x74656a72
1a00d9f0:	44532061 	.word	0x44532061
1a00d9f4:	000a0d2e 	.word	0x000a0d2e
1a00d9f8:	54415453 	.word	0x54415453
1a00d9fc:	203a5355 	.word	0x203a5355
1a00da00:	6a726154 	.word	0x6a726154
1a00da04:	20617465 	.word	0x20617465
1a00da08:	69204453 	.word	0x69204453
1a00da0c:	7265736e 	.word	0x7265736e
1a00da10:	61646174 	.word	0x61646174
1a00da14:	000a0d2e 	.word	0x000a0d2e
1a00da18:	54415453 	.word	0x54415453
1a00da1c:	203a5355 	.word	0x203a5355
1a00da20:	666e6f43 	.word	0x666e6f43
1a00da24:	72756769 	.word	0x72756769
1a00da28:	6f646e61 	.word	0x6f646e61
1a00da2c:	72617420 	.word	0x72617420
1a00da30:	6174656a 	.word	0x6174656a
1a00da34:	2e445320 	.word	0x2e445320
1a00da38:	00000a0d 	.word	0x00000a0d
1a00da3c:	54415453 	.word	0x54415453
1a00da40:	203a5355 	.word	0x203a5355
1a00da44:	63696e49 	.word	0x63696e49
1a00da48:	646e6169 	.word	0x646e6169
1a00da4c:	6174206f 	.word	0x6174206f
1a00da50:	74656a72 	.word	0x74656a72
1a00da54:	44532061 	.word	0x44532061
1a00da58:	000a0d2e 	.word	0x000a0d2e
1a00da5c:	54415453 	.word	0x54415453
1a00da60:	203a5355 	.word	0x203a5355
1a00da64:	6a726154 	.word	0x6a726154
1a00da68:	20617465 	.word	0x20617465
1a00da6c:	6c204453 	.word	0x6c204453
1a00da70:	61747369 	.word	0x61747369
1a00da74:	72657020 	.word	0x72657020
1a00da78:	6564206f 	.word	0x6564206f
1a00da7c:	6e6f6d73 	.word	0x6e6f6d73
1a00da80:	61646174 	.word	0x61646174
1a00da84:	000a0d2e 	.word	0x000a0d2e
1a00da88:	54415453 	.word	0x54415453
1a00da8c:	203a5355 	.word	0x203a5355
1a00da90:	6a726154 	.word	0x6a726154
1a00da94:	20617465 	.word	0x20617465
1a00da98:	6c204453 	.word	0x6c204453
1a00da9c:	61747369 	.word	0x61747369
1a00daa0:	6d207920 	.word	0x6d207920
1a00daa4:	61746e6f 	.word	0x61746e6f
1a00daa8:	0d2e6164 	.word	0x0d2e6164
1a00daac:	0000000a 	.word	0x0000000a
1a00dab0:	54415453 	.word	0x54415453
1a00dab4:	203a5355 	.word	0x203a5355
1a00dab8:	6a726154 	.word	0x6a726154
1a00dabc:	20617465 	.word	0x20617465
1a00dac0:	65204453 	.word	0x65204453
1a00dac4:	7365206e 	.word	0x7365206e
1a00dac8:	6f646174 	.word	0x6f646174
1a00dacc:	20656420 	.word	0x20656420
1a00dad0:	6f727245 	.word	0x6f727245
1a00dad4:	0a0d2e72 	.word	0x0a0d2e72
1a00dad8:	ffffff00 	.word	0xffffff00
1a00dadc:	612f7325 	.word	0x612f7325
1a00dae0:	32303032 	.word	0x32303032
1a00dae4:	30313130 	.word	0x30313130
1a00dae8:	652d3130 	.word	0x652d3130
1a00daec:	772e3230 	.word	0x772e3230
1a00daf0:	00007661 	.word	0x00007661
1a00daf4:	706f5f66 	.word	0x706f5f66
1a00daf8:	20286e65 	.word	0x20286e65
1a00dafc:	44414552 	.word	0x44414552
1a00db00:	ff002920 	.word	0xff002920
1a00db04:	6f727245 	.word	0x6f727245
1a00db08:	65722072 	.word	0x65722072
1a00db0c:	6e696461 	.word	0x6e696461
1a00db10:	69662067 	.word	0x69662067
1a00db14:	2520656c 	.word	0x2520656c
1a00db18:	79622064 	.word	0x79622064
1a00db1c:	20736574 	.word	0x20736574
1a00db20:	0000000a 	.word	0x0000000a
1a00db24:	696e6946 	.word	0x696e6946
1a00db28:	72206873 	.word	0x72206873
1a00db2c:	20646165 	.word	0x20646165
1a00db30:	656c6966 	.word	0x656c6966
1a00db34:	ffffff00 	.word	0xffffff00
1a00db38:	4f525245 	.word	0x4f525245
1a00db3c:	72203a52 	.word	0x72203a52
1a00db40:	3a666669 	.word	0x3a666669
1a00db44:	20642520 	.word	0x20642520
1a00db48:	2520213d 	.word	0x2520213d
1a00db4c:	00000064 	.word	0x00000064
1a00db50:	342d3128 	.word	0x342d3128
1a00db54:	25203a29 	.word	0x25203a29
1a00db58:	000a0d73 	.word	0x000a0d73
1a00db5c:	7265766f 	.word	0x7265766f
1a00db60:	5f6c6c61 	.word	0x5f6c6c61
1a00db64:	657a6973 	.word	0x657a6973
1a00db68:	6425203a 	.word	0x6425203a
1a00db6c:	20213d20 	.word	0x20213d20
1a00db70:	00006425 	.word	0x00006425
1a00db74:	382d3528 	.word	0x382d3528
1a00db78:	764f2029 	.word	0x764f2029
1a00db7c:	6c617265 	.word	0x6c617265
1a00db80:	6973206c 	.word	0x6973206c
1a00db84:	203a657a 	.word	0x203a657a
1a00db88:	65747962 	.word	0x65747962
1a00db8c:	75253a73 	.word	0x75253a73
1a00db90:	624b202c 	.word	0x624b202c
1a00db94:	2075253a 	.word	0x2075253a
1a00db98:	0000000a 	.word	0x0000000a
1a00db9c:	65766177 	.word	0x65766177
1a00dba0:	6425203a 	.word	0x6425203a
1a00dba4:	20213d20 	.word	0x20213d20
1a00dba8:	00006425 	.word	0x00006425
1a00dbac:	312d3928 	.word	0x312d3928
1a00dbb0:	57202932 	.word	0x57202932
1a00dbb4:	20657661 	.word	0x20657661
1a00dbb8:	6b72616d 	.word	0x6b72616d
1a00dbbc:	203a7265 	.word	0x203a7265
1a00dbc0:	0a207325 	.word	0x0a207325
1a00dbc4:	00000000 	.word	0x00000000
1a00dbc8:	5f746d66 	.word	0x5f746d66
1a00dbcc:	6e756863 	.word	0x6e756863
1a00dbd0:	616d5f6b 	.word	0x616d5f6b
1a00dbd4:	72656b72 	.word	0x72656b72
1a00dbd8:	6425203a 	.word	0x6425203a
1a00dbdc:	20213d20 	.word	0x20213d20
1a00dbe0:	00006425 	.word	0x00006425
1a00dbe4:	2d333128 	.word	0x2d333128
1a00dbe8:	20293631 	.word	0x20293631
1a00dbec:	20746d46 	.word	0x20746d46
1a00dbf0:	6b72616d 	.word	0x6b72616d
1a00dbf4:	203a7265 	.word	0x203a7265
1a00dbf8:	0a207325 	.word	0x0a207325
1a00dbfc:	00000000 	.word	0x00000000
1a00dc00:	676e656c 	.word	0x676e656c
1a00dc04:	6f5f6874 	.word	0x6f5f6874
1a00dc08:	6d665f66 	.word	0x6d665f66
1a00dc0c:	25203a74 	.word	0x25203a74
1a00dc10:	213d2064 	.word	0x213d2064
1a00dc14:	00642520 	.word	0x00642520
1a00dc18:	2d373128 	.word	0x2d373128
1a00dc1c:	20293032 	.word	0x20293032
1a00dc20:	676e654c 	.word	0x676e654c
1a00dc24:	6f206874 	.word	0x6f206874
1a00dc28:	6d462066 	.word	0x6d462066
1a00dc2c:	65682074 	.word	0x65682074
1a00dc30:	72656461 	.word	0x72656461
1a00dc34:	7525203a 	.word	0x7525203a
1a00dc38:	000a2020 	.word	0x000a2020
1a00dc3c:	6d726f66 	.word	0x6d726f66
1a00dc40:	745f7461 	.word	0x745f7461
1a00dc44:	3a657079 	.word	0x3a657079
1a00dc48:	20642520 	.word	0x20642520
1a00dc4c:	2520213d 	.word	0x2520213d
1a00dc50:	0a0d2064 	.word	0x0a0d2064
1a00dc54:	00000000 	.word	0x00000000
1a00dc58:	616c2d41 	.word	0x616c2d41
1a00dc5c:	00000077 	.word	0x00000077
1a00dc60:	6c2d754d 	.word	0x6c2d754d
1a00dc64:	00007761 	.word	0x00007761
1a00dc68:	2d313228 	.word	0x2d313228
1a00dc6c:	20293232 	.word	0x20293232
1a00dc70:	6d726f46 	.word	0x6d726f46
1a00dc74:	74207461 	.word	0x74207461
1a00dc78:	3a657079 	.word	0x3a657079
1a00dc7c:	20752520 	.word	0x20752520
1a00dc80:	20207325 	.word	0x20207325
1a00dc84:	0000000a 	.word	0x0000000a
1a00dc88:	6e616863 	.word	0x6e616863
1a00dc8c:	736c656e 	.word	0x736c656e
1a00dc90:	6425203a 	.word	0x6425203a
1a00dc94:	20213d20 	.word	0x20213d20
1a00dc98:	0a0d6425 	.word	0x0a0d6425
1a00dc9c:	00000000 	.word	0x00000000
1a00dca0:	2d333228 	.word	0x2d333228
1a00dca4:	20293432 	.word	0x20293432
1a00dca8:	6e616843 	.word	0x6e616843
1a00dcac:	736c656e 	.word	0x736c656e
1a00dcb0:	7525203a 	.word	0x7525203a
1a00dcb4:	000a2020 	.word	0x000a2020
1a00dcb8:	706d6173 	.word	0x706d6173
1a00dcbc:	725f656c 	.word	0x725f656c
1a00dcc0:	3a657461 	.word	0x3a657461
1a00dcc4:	20642520 	.word	0x20642520
1a00dcc8:	2520213d 	.word	0x2520213d
1a00dccc:	00000064 	.word	0x00000064
1a00dcd0:	2d353228 	.word	0x2d353228
1a00dcd4:	20293832 	.word	0x20293832
1a00dcd8:	706d6153 	.word	0x706d6153
1a00dcdc:	7220656c 	.word	0x7220656c
1a00dce0:	3a657461 	.word	0x3a657461
1a00dce4:	20752520 	.word	0x20752520
1a00dce8:	0000000a 	.word	0x0000000a
1a00dcec:	65747962 	.word	0x65747962
1a00dcf0:	65746172 	.word	0x65746172
1a00dcf4:	6425203a 	.word	0x6425203a
1a00dcf8:	20213d20 	.word	0x20213d20
1a00dcfc:	00006425 	.word	0x00006425
1a00dd00:	2d393228 	.word	0x2d393228
1a00dd04:	20293233 	.word	0x20293233
1a00dd08:	65747942 	.word	0x65747942
1a00dd0c:	74615220 	.word	0x74615220
1a00dd10:	25203a65 	.word	0x25203a65
1a00dd14:	202c2075 	.word	0x202c2075
1a00dd18:	20746942 	.word	0x20746942
1a00dd1c:	65746152 	.word	0x65746152
1a00dd20:	7525203a 	.word	0x7525203a
1a00dd24:	00000a20 	.word	0x00000a20
1a00dd28:	636f6c62 	.word	0x636f6c62
1a00dd2c:	6c615f6b 	.word	0x6c615f6b
1a00dd30:	3a6e6769 	.word	0x3a6e6769
1a00dd34:	20642520 	.word	0x20642520
1a00dd38:	2520213d 	.word	0x2520213d
1a00dd3c:	00000064 	.word	0x00000064
1a00dd40:	2d333328 	.word	0x2d333328
1a00dd44:	20293433 	.word	0x20293433
1a00dd48:	636f6c42 	.word	0x636f6c42
1a00dd4c:	6c41206b 	.word	0x6c41206b
1a00dd50:	6d6e6769 	.word	0x6d6e6769
1a00dd54:	3a746e65 	.word	0x3a746e65
1a00dd58:	20752520 	.word	0x20752520
1a00dd5c:	00000a20 	.word	0x00000a20
1a00dd60:	73746962 	.word	0x73746962
1a00dd64:	7265705f 	.word	0x7265705f
1a00dd68:	6d61735f 	.word	0x6d61735f
1a00dd6c:	3a656c70 	.word	0x3a656c70
1a00dd70:	20642520 	.word	0x20642520
1a00dd74:	2520213d 	.word	0x2520213d
1a00dd78:	00000064 	.word	0x00000064
1a00dd7c:	2d353328 	.word	0x2d353328
1a00dd80:	20293633 	.word	0x20293633
1a00dd84:	73746942 	.word	0x73746942
1a00dd88:	72657020 	.word	0x72657020
1a00dd8c:	6d617320 	.word	0x6d617320
1a00dd90:	3a656c70 	.word	0x3a656c70
1a00dd94:	20752520 	.word	0x20752520
1a00dd98:	00000a20 	.word	0x00000a20
1a00dd9c:	61746164 	.word	0x61746164
1a00dda0:	7568635f 	.word	0x7568635f
1a00dda4:	685f6b6e 	.word	0x685f6b6e
1a00dda8:	65646165 	.word	0x65646165
1a00ddac:	25203a72 	.word	0x25203a72
1a00ddb0:	213d2064 	.word	0x213d2064
1a00ddb4:	00642520 	.word	0x00642520
1a00ddb8:	2d373328 	.word	0x2d373328
1a00ddbc:	20293034 	.word	0x20293034
1a00ddc0:	61746144 	.word	0x61746144
1a00ddc4:	72614d20 	.word	0x72614d20
1a00ddc8:	3a72656b 	.word	0x3a72656b
1a00ddcc:	20732520 	.word	0x20732520
1a00ddd0:	00000a20 	.word	0x00000a20
1a00ddd4:	61746164 	.word	0x61746164
1a00ddd8:	7a69735f 	.word	0x7a69735f
1a00dddc:	25203a65 	.word	0x25203a65
1a00dde0:	213d2064 	.word	0x213d2064
1a00dde4:	00642520 	.word	0x00642520
1a00dde8:	2d313428 	.word	0x2d313428
1a00ddec:	20293434 	.word	0x20293434
1a00ddf0:	657a6953 	.word	0x657a6953
1a00ddf4:	20666f20 	.word	0x20666f20
1a00ddf8:	61746164 	.word	0x61746164
1a00ddfc:	75686320 	.word	0x75686320
1a00de00:	203a6b6e 	.word	0x203a6b6e
1a00de04:	20207525 	.word	0x20207525
1a00de08:	0000000a 	.word	0x0000000a
1a00de0c:	626d754e 	.word	0x626d754e
1a00de10:	6f207265 	.word	0x6f207265
1a00de14:	61732066 	.word	0x61732066
1a00de18:	656c706d 	.word	0x656c706d
1a00de1c:	25203a73 	.word	0x25203a73
1a00de20:	2020756c 	.word	0x2020756c
1a00de24:	0000000a 	.word	0x0000000a
1a00de28:	657a6953 	.word	0x657a6953
1a00de2c:	20666f20 	.word	0x20666f20
1a00de30:	68636165 	.word	0x68636165
1a00de34:	6d617320 	.word	0x6d617320
1a00de38:	3a656c70 	.word	0x3a656c70
1a00de3c:	646c2520 	.word	0x646c2520
1a00de40:	74796220 	.word	0x74796220
1a00de44:	0a207365 	.word	0x0a207365
1a00de48:	ffffff00 	.word	0xffffff00
1a00de4c:	736f6c63 	.word	0x736f6c63
1a00de50:	69662065 	.word	0x69662065
1a00de54:	ff00656c 	.word	0xff00656c
1a00de58:	74696e49 	.word	0x74696e49
1a00de5c:	53324920 	.word	0x53324920
1a00de60:	0000000d 	.word	0x0000000d
1a00de64:	6f727245 	.word	0x6f727245
1a00de68:	6e692072 	.word	0x6e692072
1a00de6c:	695f7469 	.word	0x695f7469
1a00de70:	203a7332 	.word	0x203a7332
1a00de74:	70696843 	.word	0x70696843
1a00de78:	5332495f 	.word	0x5332495f
1a00de7c:	4378545f 	.word	0x4378545f
1a00de80:	69666e6f 	.word	0x69666e6f
1a00de84:	74732067 	.word	0x74732067
1a00de88:	73757461 	.word	0x73757461
1a00de8c:	0a642520 	.word	0x0a642520
1a00de90:	ffffff00 	.word	0xffffff00
1a00de94:	746f7250 	.word	0x746f7250
1a00de98:	6c6f636f 	.word	0x6c6f636f
1a00de9c:	0000006f 	.word	0x0000006f
1a00dea0:	73726170 	.word	0x73726170
1a00dea4:	61645f65 	.word	0x61645f65
1a00dea8:	735f6174 	.word	0x735f6174
1a00deac:	00000064 	.word	0x00000064
1a00deb0:	646e6573 	.word	0x646e6573
1a00deb4:	6675625f 	.word	0x6675625f
1a00deb8:	5f726566 	.word	0x5f726566
1a00debc:	00733269 	.word	0x00733269
1a00dec0:	6c6c614d 	.word	0x6c6c614d
1a00dec4:	4620636f 	.word	0x4620636f
1a00dec8:	656c6961 	.word	0x656c6961
1a00decc:	6f482064 	.word	0x6f482064
1a00ded0:	00216b6f 	.word	0x00216b6f
1a00ded4:	31533249 	.word	0x31533249
1a00ded8:	5152495f 	.word	0x5152495f
1a00dedc:	646e6148 	.word	0x646e6148
1a00dee0:	0072656c 	.word	0x0072656c
1a00dee4:	646e6553 	.word	0x646e6553
1a00dee8:	66754220 	.word	0x66754220
1a00deec:	20726566 	.word	0x20726566
1a00def0:	00000031 	.word	0x00000031
1a00def4:	646e6553 	.word	0x646e6553
1a00def8:	66754220 	.word	0x66754220
1a00defc:	20726566 	.word	0x20726566
1a00df00:	00000032 	.word	0x00000032
1a00df04:	6f727245 	.word	0x6f727245
1a00df08:	694e2072 	.word	0x694e2072
1a00df0c:	6e75676e 	.word	0x6e75676e
1a00df10:	66756220 	.word	0x66756220
1a00df14:	20726566 	.word	0x20726566
1a00df18:	6e656c6c 	.word	0x6e656c6c
1a00df1c:	6170206f 	.word	0x6170206f
1a00df20:	65206172 	.word	0x65206172
1a00df24:	6169766e 	.word	0x6169766e
1a00df28:	ffff0072 	.word	0xffff0072

1a00df2c <ExCvt>:
1a00df2c:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
1a00df3c:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
1a00df4c:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
1a00df5c:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
1a00df6c:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
1a00df7c:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
1a00df8c:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
1a00df9c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

1a00dfac <LfnOfs>:
1a00dfac:	07050301 12100e09 1c181614 ffffff1e     ................

1a00dfbc <VolumeStr>:
1a00dfbc:	1a00dff0 1a00dff4 459076eb 54414658     .........v.EXFAT
1a00dfcc:	00202020 00544146 33544146 ffff0032        .FAT.FAT32...
1a00dfdc:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
1a00dfec:	ff005d5b 00434453 00425355              []..SDC.USB.

1a00dff8 <cvt1.5576>:
1a00dff8:	031a0061 031700e0 030700f8 000100ff     a...............
1a00e008:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
1a00e018:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
1a00e028:	01840182 01860184 01870187 018a0189     ................
1a00e038:	018b018b 018e018d 0190018f 01910191     ................
1a00e048:	01940193 019601f6 01980197 023d0198     ..............=.
1a00e058:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
1a00e068:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
1a00e078:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
1a00e088:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
1a00e098:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
1a00e0a8:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
1a00e0b8:	01ca01cb 011001cd 000101dd 01de018e     ................
1a00e0c8:	01f30112 01f10003 01f401f4 012801f8     ..............(.
1a00e0d8:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
1a00e0e8:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
1a00e0f8:	01810040 02550186 018a0189 018f0258     @.....U.....X...
1a00e108:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
1a00e118:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
1a00e128:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
1a00e138:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
1a00e148:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
1a00e158:	01a90282 02850284 02870286 024401ae     ..............D.
1a00e168:	01b201b1 028d0245 028f028e 02910290     ....E...........
1a00e178:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
1a00e188:	03880386 038a0389 031103b1 000203c2     ................
1a00e198:	03a303a3 030803c4 000303cc 038e038c     ................
1a00e1a8:	03d8038f 03f20118 03f9000a 03f403f3     ................
1a00e1b8:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
1a00e1c8:	04500320 04600710 048a0122 04c10136      .P...`."...6...
1a00e1d8:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
1a00e1e8:	ffff0000                                ....

1a00e1ec <cvt2.5577>:
1a00e1ec:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
1a00e1fc:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
1a00e20c:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
1a00e21c:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
1a00e22c:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
1a00e23c:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
1a00e24c:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
1a00e25c:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
1a00e26c:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
1a00e27c:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
1a00e28c:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
1a00e29c:	2d000164 ff410826 0000031a              d..-&.A.....

1a00e2a8 <uc850>:
1a00e2a8:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
1a00e2b8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
1a00e2c8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
1a00e2d8:	00d600ff 00f800dc 00d800a3 019200d7     ................
1a00e2e8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
1a00e2f8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
1a00e308:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
1a00e318:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
1a00e328:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
1a00e338:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
1a00e348:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
1a00e358:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
1a00e368:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
1a00e378:	00da00de 00d900db 00dd00fd 00b400af     ................
1a00e388:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
1a00e398:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..
1a00e3a8:	6c707041 74616369 206e6f69 6c6c614d     Application Mall
1a00e3b8:	4620636f 656c6961 6f482064 0d216b6f     oc Failed Hook!.
1a00e3c8:	00000000 7362696c 6572662f 6f747265     ....libs/freerto
1a00e3d8:	6f732f73 65637275 6f6f682f 632e736b     s/source/hooks.c
1a00e3e8:	ffffff00 70410a0d 63696c70 6f697461     ......Applicatio
1a00e3f8:	7453206e 206b6361 7265764f 776f6c66     n Stack Overflow
1a00e408:	6f202121 6154206e 203a6b73 0a0d7325     !! on Task: %s..
1a00e418:	ffffff00 41760a0d 72657373 6c614374     ......vAssertCal
1a00e428:	2864656c 200a0d29 4c4c2020 20656e69     led()..   LLine 
1a00e438:	626d754e 3d207265 0d642520 2020200a     Number = %d..   
1a00e448:	656c6946 6d614e20 203d2065 0a0d7325     File Name = %s..
1a00e458:	ff000a0d 454c4449 ffffff00 44535346     ....IDLE....FSSD
1a00e468:	5b203a43 74696e49 6f4e205d 72616320     C: [Init] No car
1a00e478:	6e692064 636f7320 2e74656b 00000a0d     d in socket.....
1a00e488:	44535346 5b203a43 74696e49 6e49205d     FSSDC: [Init] In
1a00e498:	61697469 617a696c 6e6f6974 67656220     itialization beg
1a00e4a8:	2e736e69 00000a0d 44535346 5b203a43     ins.....FSSDC: [
1a00e4b8:	74696e49 654e205d 61632077 73206472     Init] New card s
1a00e4c8:	75746174 4e203a73 76697461 6f4d2065     tatus: Native Mo
1a00e4d8:	0d2e6564 0000000a 44535346 5b203a43     de......FSSDC: [
1a00e4e8:	74696e49 654e205d 61632077 73206472     Init] New card s
1a00e4f8:	75746174 49203a73 6974696e 7a696c61     tatus: Initializ
1a00e508:	2e676e69 00000a0d 44535346 5b203a43     ing.....FSSDC: [
1a00e518:	74696e49 654e205d 61632077 73206472     Init] New card s
1a00e528:	75746174 52203a73 79646165 61462820     tatus: Ready (Fa
1a00e538:	43207473 6b636f6c 0a0d2e29 00000000     st Clock).......
1a00e548:	44535346 5b203a43 74696e49 654e205d     FSSDC: [Init] Ne
1a00e558:	61632077 73206472 75746174 45203a73     w card status: E
1a00e568:	726f7272 6f4e2820 6e492074 61697469     rror (Not Initia
1a00e578:	657a696c 0d2e2964 ffff000a 44535346     lized)......FSSD
1a00e588:	5b203a43 74434f49 43205d6c 20647261     C: [IOCtl] Card 
1a00e598:	20746f6e 74696e69 696c6169 2e64657a     not initialized.
1a00e5a8:	00000a0d 44535346 5b203a43 74434f49     ....FSSDC: [IOCt
1a00e5b8:	52205d6c 72757465 676e696e 72724520     l] Returning Err
1a00e5c8:	0d2e726f ffff000a 44535346 5b203a43     or......FSSDC: [
1a00e5d8:	64616552 6143205d 6e206472 6920746f     Read] Card not i
1a00e5e8:	6974696e 7a696c61 0d2e6465 ffff000a     nitialized......
1a00e5f8:	44535346 5b203a43 74697257 43205d65     FSSDC: [Write] C
1a00e608:	20647261 20746f6e 74696e69 696c6169     ard not initiali
1a00e618:	2e64657a 00000a0d 44535346 5b203a43     zed.....FSSDC: [
1a00e628:	74697257 43205d65 20647261 77207369     Write] Card is w
1a00e638:	65746972 6f727020 74636574 0d2e6465     rite protected..
1a00e648:	ffff000a 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a00e658:	5d495053 77654e20 72616320 74732064     SPI] New card st
1a00e668:	73757461 6e49203a 74726573 0d2e6465     atus: Inserted..
1a00e678:	ffff000a 3a434453 ffffff00 69706173     ....SDC:....sapi
1a00e688:	6364735f 3a647261 74754120 756f6d6f     _sdcard: Automou
1a00e698:	6620746e 656c6961 0a0d2164 ffffff00     nt failed!......

1a00e6a8 <ExtRateIn>:
1a00e6a8:	00000000                                ....

1a00e6ac <GpioButtons>:
1a00e6ac:	08000400 09010900                       ........

1a00e6b4 <GpioLeds>:
1a00e6b4:	01050005 0e000205 0c010b01              ............

1a00e6c0 <GpioPorts>:
1a00e6c0:	03030003 0f050403 05031005 07030603     ................
1a00e6d0:	ffff0802                                ....

1a00e6d4 <OscRateIn>:
1a00e6d4:	00b71b00                                ....

1a00e6d8 <InitClkStates>:
1a00e6d8:	01010f01                                ....

1a00e6dc <pinmuxing>:
1a00e6dc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00e6ec:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00e6fc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00e70c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00e71c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00e72c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00e73c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00e74c:	00570206                                ..W.

1a00e750 <UART_BClock>:
1a00e750:	01a201c2 01620182                       ......b.

1a00e758 <UART_PClock>:
1a00e758:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00e768:	ffff00ff                                ....

1a00e76c <periph_to_base>:
1a00e76c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00e77c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00e78c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00e79c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00e7ac:	01820013 00120182 01a201a2 01c20011     ................
1a00e7bc:	001001c2 01e201e2 0202000f 000e0202     ................
1a00e7cc:	02220222 0223000d 001c0223              "."...#.#...

1a00e7d8 <InitClkStates>:
1a00e7d8:	00010100 00010909 0001090a 01010701     ................
1a00e7e8:	00010902 00010906 0101090c 0001090d     ................
1a00e7f8:	0001090e 0001090f 00010910 00010911     ................
1a00e808:	00010912 00010913 00011114 00011119     ................
1a00e818:	0001111a 0001111b                       ........

1a00e820 <lpcUarts>:
1a00e820:	40081000 06020406 00180205 40081000     ...@...........@
1a00e830:	09070509 00180706 40082000 00000000     ......... .@....
1a00e840:	00190000 400c1000 07060107 001a0602     .......@........
1a00e850:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00e860:	02020302 001b0204 20657355 7420666f     ........Use of t
1a00e870:	436b6369 626c6c61 536b6361 29287465     ickCallbackSet()
1a00e880:	206e6920 72702061 6172676f 6977206d      in a program wi
1a00e890:	66206874 52656572 20534f54 20736168     th freeRTOS has 
1a00e8a0:	65206f6e 63656666 000a0d74 20657355     no effect...Use 
1a00e8b0:	7420666f 496b6369 2874696e 6e692029     of tickInit() in
1a00e8c0:	70206120 72676f72 77206d61 20687469      a program with 
1a00e8d0:	65657266 534f5452 73616820 206f6e20     freeRTOS has no 
1a00e8e0:	65666665 0a0d7463 ffffff00              effect......

1a00e8ec <gpioPinsInit>:
1a00e8ec:	02000104 00050701 05010d03 04080100     ................
1a00e8fc:	02020002 02000304 00000403 04070002     ................
1a00e90c:	030c0300 09050402 05040103 04030208     ................
1a00e91c:	04020305 06040504 0802000c 03000b06     ................
1a00e92c:	00090607 07060503 060f0504 03030004     ................
1a00e93c:	02000404 00050404 06040502 04060200     ................
1a00e94c:	0c050408 05040a04 0003010e 14010a00     ................
1a00e95c:	010f0000 0d000012 00001101 0010010c     ................
1a00e96c:	07070300 000f0300 01000001 00000000     ................
1a00e97c:	000a0600 08060603 06100504 04030005     ................
1a00e98c:	03000106 04090400 04010d05 010b0000     ................
1a00e99c:	0200000f 00000001 00010104 02010800     ................
1a00e9ac:	01090000 09010006 05040002 04010200     ................
1a00e9bc:	02020105 02020504 0e00000a 01000b02     ................
1a00e9cc:	000c020b ffff0c01                       ........

1a00e9d4 <_ctype_>:
1a00e9d4:	20202000 20202020 28282020 20282828     .         ((((( 
1a00e9e4:	20202020 20202020 20202020 20202020                     
1a00e9f4:	10108820 10101010 10101010 10101010      ...............
1a00ea04:	04040410 04040404 10040404 10101010     ................
1a00ea14:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a00ea24:	01010101 01010101 01010101 10101010     ................
1a00ea34:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a00ea44:	02020202 02020202 02020202 10101010     ................
1a00ea54:	00000020 00000000 00000000 00000000      ...............
	...
1a00ead4:	ffffff00 00464e49 00666e69 004e414e     ....INF.inf.NAN.
1a00eae4:	006e616e 33323130 37363534 62613938     nan.0123456789ab
1a00eaf4:	66656463 00000000 33323130 37363534     cdef....01234567
1a00eb04:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
1a00eb14:	0000296c ffff0030                       l)..0...

1a00eb1c <blanks.8678>:
1a00eb1c:	20202020 20202020 20202020 20202020                     

1a00eb2c <zeroes.8679>:
1a00eb2c:	30303030 30303030 30303030 30303030     0000000000000000

1a00eb3c <blanks.8693>:
1a00eb3c:	20202020 20202020 20202020 20202020                     

1a00eb4c <zeroes.8694>:
1a00eb4c:	30303030 30303030 30303030 30303030     0000000000000000
1a00eb5c:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....
1a00eb6c:	ffffffff                                ....

1a00eb70 <__mprec_bigtens>:
1a00eb70:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a00eb80:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a00eb90:	7f73bf3c 75154fdd                       <.s..O.u

1a00eb98 <__mprec_tens>:
1a00eb98:	00000000 3ff00000 00000000 40240000     .......?......$@
1a00eba8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a00ebb8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a00ebc8:	00000000 412e8480 00000000 416312d0     .......A......cA
1a00ebd8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a00ebe8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a00ebf8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a00ec08:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a00ec18:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a00ec28:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a00ec38:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a00ec48:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a00ec58:	79d99db4 44ea7843                       ...yCx.D

1a00ec60 <p05.7442>:
1a00ec60:	00000005 00000019 0000007d 00000043     ........}...C...
1a00ec70:	49534f50 ffff0058 0000002e              POSIX.......
