
projects/C3/out/C3.elf:     file format elf32-littlearm
projects/C3/out/C3.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000569

Program Header:
0x70000001 off    0x00014bcc vaddr 0x1a004bcc paddr 0x1a004bcc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a4 vaddr 0x100000a4 paddr 0x100000a4 align 2**16
         filesz 0x00000000 memsz 0x00002200 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004bd4 memsz 0x00004bd4 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004bd4 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bc8  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a004bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002200  100000a4  100000a4  000100a4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004bc8  1a004bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004bcc  1a004bcc  00014bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  100022a4  100022a4  000200a4  2**2
                  CONTENTS
 19 .debug_info   0002a6a3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005aaa  00000000  00000000  0004a747  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c9f2  00000000  00000000  000501f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ed0  00000000  00000000  0005cbe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001110  00000000  00000000  0005dab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f538  00000000  00000000  0005ebc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00019409  00000000  00000000  0006e0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f896  00000000  00000000  00087504  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000b6d9a  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000b6e02  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002d0c  00000000  00000000  000b6e34  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004bc8 l    d  .init_array	00000000 .init_array
1a004bcc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100022a4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 C3.c
100000a4 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 fsm_debounce.c
100000a5 l     O .bss	00000001 contFalling.14133
100000a6 l     O .bss	00000001 contRising.14134
00000000 l    df *ABS*	00000000 system.c
100000a8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
100000b0 l     O .bss	00002000 ucHeap
100000ac l     O .bss	00000004 pucAlignedHeap.11512
100020b0 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000742 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000754 l     F .text	0000001e prvIsQueueFull
1a000772 l     F .text	0000001a prvIsQueueEmpty
1a00078c l     F .text	00000076 prvCopyDataToQueue
1a000802 l     F .text	00000024 prvCopyDataFromQueue
1a000826 l     F .text	0000006e prvUnlockQueue
1a000918 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0010a8 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0010d4 l     F .text	00000012 prvDeleteTCB
1a0010e6 l     F .text	00000090 prvInitialiseNewTask
1a001178 l     F .text	00000068 prvInitialiseTaskLists
1a0011e0 l     F .text	000000ac prvAddNewTaskToReadyList
1a00128c l     F .text	0000004c prvCheckTasksWaitingTermination
1a0012d8 l     F .text	00000028 prvIdleTask
1a001300 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100020b8 l     O .bss	00000004 pxDelayedTaskList
100020bc l     O .bss	00000004 pxOverflowDelayedTaskList
100020c0 l     O .bss	0000008c pxReadyTasksLists
1000214c l     O .bss	00000004 uxCurrentNumberOfTasks
10002150 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002154 l     O .bss	00000004 uxPendedTicks
10002158 l     O .bss	00000004 uxSchedulerSuspended
1000215c l     O .bss	00000004 uxTaskNumber
10002160 l     O .bss	00000004 uxTopReadyPriority
10002164 l     O .bss	00000014 xDelayedTaskList1
10002178 l     O .bss	00000014 xDelayedTaskList2
1000218c l     O .bss	00000004 xIdleTaskHandle
10002190 l     O .bss	00000004 xNextTaskUnblockTime
10002194 l     O .bss	00000004 xNumOfOverflows
10002198 l     O .bss	00000014 xPendingReadyList
100021ac l     O .bss	00000004 xSchedulerRunning
100021b0 l     O .bss	00000014 xSuspendedTaskList
100021c4 l     O .bss	00000014 xTasksWaitingTermination
100021d8 l     O .bss	00000004 xTickCount
100021dc l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001bd0 l     F .text	00000020 prvGetNextExpireTime
1a001bf0 l     F .text	00000048 prvInsertTimerInActiveList
1a001c38 l     F .text	0000005c prvCheckForValidListAndQueue
1a001fbc l     F .text	00000016 prvTimerTask
1a001d50 l     F .text	00000078 prvSwitchTimerLists
1a001dc8 l     F .text	0000002c prvSampleTimeNow
1a001df4 l     F .text	00000060 prvProcessExpiredTimer
1a001e54 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001ec8 l     F .text	000000f4 prvProcessReceivedCommands
100021e0 l     O .bss	00000004 pxCurrentTimerList
100021e4 l     O .bss	00000004 pxOverflowTimerList
100021e8 l     O .bss	00000014 xActiveTimerList1
100021fc l     O .bss	00000014 xActiveTimerList2
10002210 l     O .bss	00000004 xLastTime.11818
10002214 l     O .bss	00000004 xTimerQueue
10002218 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001fd4 l     F .text	00000040 prvTaskExitError
1a002014 l     F .text	00000022 prvPortStartFirstTask
1a00203c l     F .text	0000000e vPortEnableVFP
1a0020a0 l       .text	00000000 pxCurrentTCBConst2
1a002180 l       .text	00000000 pxCurrentTCBConst
1000221c l     O .bss	00000001 ucMaxSysCallPriority
10002220 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002374 l     F .text	00000044 Board_LED_Init
1a0023b8 l     F .text	00000040 Board_TEC_Init
1a0023f8 l     F .text	00000040 Board_GPIO_Init
1a002438 l     F .text	00000030 Board_ADC_Init
1a002468 l     F .text	00000038 Board_SPI_Init
1a0024a0 l     F .text	00000024 Board_I2C_Init
1a00488c l     O .text	00000008 GpioButtons
1a004894 l     O .text	0000000c GpioLeds
1a0048a0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0048b8 l     O .text	00000004 InitClkStates
1a0048bc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002690 l     F .text	0000002c Chip_UART_GetIndex
1a004930 l     O .text	00000008 UART_BClock
1a004938 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00282c l     F .text	00000014 Chip_ADC_GetClockIndex
1a002840 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002908 l     F .text	000000a0 pll_calc_divs
1a0029a8 l     F .text	0000010c pll_get_frac
1a002ab4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002d28 l     F .text	00000022 Chip_Clock_GetDivRate
10002228 l     O .bss	00000008 audio_usb_pll_freq
1a00494c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0049b8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002ff0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003004 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004a00 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003174 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002230 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003948 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003cfc l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004bcc l       .init_array	00000000 __init_array_end
1a004bc8 l       .bss_RAM5	00000000 __preinit_array_end
1a004bc8 l       .init_array	00000000 __init_array_start
1a004bc8 l       .bss_RAM5	00000000 __preinit_array_start
1a002b4c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000608 g     F .text	00000012 _isatty_r
1a000454 g     F .text	00000050 buttonReleased
1a0042e4 g     F .text	000000dc _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00061a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0020e8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0042b4 g     F .text	00000030 printf
1a00255a g     F .text	00000008 __stdio_init
10002298 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00442a g     F .text	00000024 __sseek
1a0039f8 g     F .text	00000070 __sinit
1a004458 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000f64 g     F .text	00000052 vQueueWaitForMessageRestricted
1a00399c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0028e6 g     F .text	0000000c Chip_ADC_SetResolution
1a00474c g     F .text	0000000c __malloc_unlock
1a002184 g     F .text	0000002c SysTick_Handler
1a002710 g     F .text	00000040 Chip_UART_SetBaud
10002299 g     O .bss	00000001 __lock___arc4random_mutex
1a000564  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0024fc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002120 g     F .text	00000064 PendSV_Handler
1a000b44 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004bd4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
100020b4 g     O .bss	00000004 pxCurrentTCB
1a0005fe g     F .text	0000000a _fstat_r
53ff7326 g       *ABS*	00000000 __valid_user_code_checksum
1a004bd4 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
10002240 g     O .bss	00000004 tiempo_down
1a0018bc g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002dca g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0021e8 g     F .text	00000110 xPortStartScheduler
1a003b7e g     F .text	0000001c memcpy
1a0017c8 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003990 g     F .text	0000000c _cleanup_r
1a0021b0  w    F .text	00000038 vPortSetupTimerInterrupt
1a0034c0 g     F .text	00000000 .hidden __aeabi_uldivmod
100022a4 g       .noinit	00000000 _noinit
1a0043c0 g     F .text	00000010 puts
1a00072c g     F .text	00000016 vPortFree
10002290 g     O .bss	00000004 SystemCoreClock
1a000300 g     F .text	00000014 tarea_tecla
1a0026bc g     F .text	00000054 Chip_UART_Init
1a000d70 g     F .text	000001a4 xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0022f8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002e48 g     F .text	0000004c Chip_Clock_GetRate
1a000fd2 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0034b0 g     F .text	00000010 printInitUart
1a00259c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0034f0 g     F .text	000002d0 .hidden __udivmoddi4
1a00069c g     F .text	00000020 _sbrk_r
1a004888 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000624 g     F .text	0000004e _read_r
1a000fcc g     F .text	00000006 vListInitialiseItem
10002244 g     O .bss	00000004 tiempo_diff
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000c14 g     F .text	0000015c xQueueReceive
10002250 g     O .bss	00000040 xQueueRegistry
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004bcc g       .ARM.exidx	00000000 __exidx_start
1000229a g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1000229b g     O .bss	00000001 __lock___sinit_recursive_mutex
1a004b90 g     O .text	00000004 _global_impure_ptr
1a003b30 g     F .text	00000048 __libc_init_array
1000223c g     O .bss	00000004 sem_tec_pulsada
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0006bc g     F .text	00000070 pvPortMalloc
1a002518 g     F .text	00000030 Board_Init
1a0005f2  w    F .text	00000002 _init
1a000fb6 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001490 g     F .text	0000000c xTaskGetTickCount
1a0009c4 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100022a4 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000568 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002658 g     F .text	00000038 Chip_I2C_SetClockRate
1a001a40 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002b00 g     F .text	0000004c Chip_Clock_EnableCrystal
1000229c g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001830 g     F .text	0000008c xTaskRemoveFromEventList
1a001070  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004b30 g     O .text	00000020 __sf_fake_stderr
1a002634 g     F .text	00000024 Chip_I2C_Init
1a003b7c g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002cbc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004a48 g     O .text	000000e6 gpioPinsInit
1a001044  w    F .text	0000002c vAssertCalled
1a001bb4 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a00301c g     F .text	00000012 Chip_SSP_SetClockRate
1a003d2a g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0039c8 g     F .text	0000000c __sfp_lock_acquire
1a0046a0 g     F .text	00000000 memchr
1a0018d4 g     F .text	00000084 xTaskCheckForTimeOut
1a003bac g     F .text	0000009c _free_r
1a002da4 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001984 g     F .text	000000bc xTaskPriorityInherit
100000a4 g       .bss	00000000 _bss
1a0004a4 g     F .text	0000000c fsmButtonError
1a0028b4 g     F .text	00000032 Chip_ADC_SetSampleRate
10002224 g     O .bss	00000004 freeRtosInterruptCallback
1a001480 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00302e g     F .text	0000003e Chip_SSP_SetBitRate
1a00101c g     F .text	00000026 uxListRemove
1a002e94 g     F .text	00000002 Chip_GPIO_Init
1a0048b4 g     O .text	00000004 OscRateIn
1a0030f8 g     F .text	0000007c uartInit
100022a4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000314 g     F .text	00000044 tarea_led
1a0016fc g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0017f8 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000444 g     F .text	00000010 buttonPressed
1a0005f4 g     F .text	0000000a _close_r
1a0031a8 g     F .text	000001ac gpioInit
1a001ce4 g     F .text	0000006c xTimerGenericCommand
1a0044fc g     F .text	000000dc __swsetup_r
1a00108c  w    F .text	0000001c vApplicationStackOverflowHook
1a0037c0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003a68 g     F .text	0000008c __sfp
1a0039ec g     F .text	0000000c __sinit_lock_release
1a0043d0 g     F .text	00000022 __sread
1a003428 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004740 g     F .text	0000000c __malloc_lock
1a0024e8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
10002248 g     O .bss	00000004 tiempo_up
1a0038d0 g     F .text	00000078 _fflush_r
1000224c g     O .bss	00000001 fsmButtonState
1a004b50 g     O .text	00000020 __sf_fake_stdin
1a002b68 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003b7a g     F .text	00000002 __retarget_lock_acquire_recursive
1a003b9a g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000358 g     F .text	000000d4 main
1a003b78 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000fe8 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002080 g     F .text	00000024 SVC_Handler
1a00444e g     F .text	00000008 __sclose
1a001c94 g     F .text	00000050 xTimerCreateTimerTask
1a003c48 g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002dd8 g     F .text	0000003c Chip_Clock_EnableOpts
1a002552 g     F .text	00000008 __stdio_getchar
1a00093a g     F .text	00000048 xQueueGenericCreate
1a002b84 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000982 g     F .text	00000040 xQueueCreateCountingSemaphore
1a002c3c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0004bc g     F .text	000000a8 fsmButtonUpdate
1a000438 g     F .text	0000000c clear_diff
1a0030a4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003354 g     F .text	0000006a gpioWrite
1a0005f0  w    F .text	00000002 _fini
1a0042b4 g     F .text	00000030 iprintf
1a0015b4 g     F .text	000000fc xTaskResumeAll
1a0013fc g     F .text	00000084 vTaskStartScheduler
1a002874 g     F .text	00000040 Chip_ADC_Init
10002294 g     O .bss	00000004 g_pUsbApi
1a002564 g     F .text	00000038 Board_SetupMuxing
1a002750 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000672 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a003fa0 g     F .text	000000ea _printf_common
10000040 g     O .data	00000004 _impure_ptr
1a0037c4 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00042c g     F .text	0000000c get_diff
10000000 g       .data	00000000 _data
1a001958 g     F .text	0000000c vTaskMissedYield
100022a4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00306c g     F .text	00000038 Chip_SSP_Init
1a000f14 g     F .text	00000026 uxQueueMessagesWaiting
1a000f3c g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a00149c g     F .text	00000118 xTaskIncrementTick
1a0045d8 g     F .text	00000048 __swhatbuf_r
1a002354 g     F .text	00000020 DAC_IRQHandler
1a0024c4 g     F .text	00000024 Board_Debug_Init
1a002548 g     F .text	0000000a __stdio_putchar
1a000894 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a002614 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1000229d g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001398 g     F .text	00000062 xTaskCreate
1a002e98 g     F .text	00000158 Chip_SetupCoreClock
1a0043f2 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a003d50 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003af4 g     F .text	0000003c _fwalk_reent
1a0028f4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0016b0 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0039d4 g     F .text	0000000c __sfp_lock_release
1a004b70 g     O .text	00000020 __sf_fake_stdout
1a001964 g     F .text	00000020 xTaskGetSchedulerState
1a001af4 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0037c0  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1000229e g     O .bss	00000001 __lock___dd_hash_mutex
1a004620 g     F .text	00000080 __smakebuf_r
1000229f g     O .bss	00000001 __lock___tz_mutex
1a002050 g     F .text	0000002c pxPortInitialiseStack
1a00408c g     F .text	00000228 _printf_i
1a002e14 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002238 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0033be g     F .text	00000068 gpioRead
1a003444 g     F .text	0000006c boardInit
1a0020a4 g     F .text	00000044 vPortEnterCritical
10002234 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003d50 g     F .text	00000250 _vfprintf_r
1a0004b0 g     F .text	0000000c fsmButtonInit
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002d4c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0030dc g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100022a0 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0039e0 g     F .text	0000000c __sinit_lock_acquire
1a002608 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 05 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 73 ff 53     }...........&s.S
	...
1a00002c:	81 20 00 1a 85 01 00 1a 00 00 00 00 21 21 00 1a     . ..........!!..
1a00003c:	85 21 00 1a                                         .!..

1a000040 <g_pfnVendorVectors>:
1a000040:	55 23 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     U#..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	29 34 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     )4..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004bd4 	.word	0x1a004bd4
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a004bd4 	.word	0x1a004bd4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004bd4 	.word	0x1a004bd4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004bd4 	.word	0x1a004bd4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004bd4 	.word	0x1a004bd4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a4 	.word	0x100000a4
1a000154:	00002200 	.word	0x00002200
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <tarea_tecla>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

void tarea_tecla( void* taskParmPtr )
{
1a000300:	b508      	push	{r3, lr}
	fsmButtonInit();
1a000302:	f000 f8d5 	bl	1a0004b0 <fsmButtonInit>

	while( TRUE )
	{
		fsmButtonUpdate( TEC1 );
1a000306:	2024      	movs	r0, #36	; 0x24
1a000308:	f000 f8d8 	bl	1a0004bc <fsmButtonUpdate>
	 	vTaskDelay( BUTTON_RATE / portTICK_RATE_MS );
1a00030c:	2001      	movs	r0, #1
1a00030e:	f001 f9cf 	bl	1a0016b0 <vTaskDelay>
1a000312:	e7f8      	b.n	1a000306 <tarea_tecla+0x6>

1a000314 <tarea_led>:
	}
}

// Implementacion de funcion de la tarea
void tarea_led( void* taskParmPtr )
{
1a000314:	b570      	push	{r4, r5, r6, lr}
    // ---------- CONFIGURACIONES ------------------------------
	gpioMap_t led = (gpioMap_t) taskParmPtr;
1a000316:	b245      	sxtb	r5, r0
1a000318:	e001      	b.n	1a00031e <tarea_led+0xa>

		gpioWrite( led , ON );
		vTaskDelay( dif );
		gpioWrite( led , OFF );
		if(uxSemaphoreGetCount(sem_tec_pulsada)==0){
			clear_diff();
1a00031a:	f000 f88d 	bl	1a000438 <clear_diff>
    	xSemaphoreTake( sem_tec_pulsada , portMAX_DELAY );			// Esperamos tecla
1a00031e:	4c0d      	ldr	r4, [pc, #52]	; (1a000354 <tarea_led+0x40>)
1a000320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000324:	6820      	ldr	r0, [r4, #0]
1a000326:	f000 fd23 	bl	1a000d70 <xQueueSemaphoreTake>
    	TickType_t dif = get_diff();
1a00032a:	f000 f87f 	bl	1a00042c <get_diff>
1a00032e:	4606      	mov	r6, r0
		gpioWrite( led , ON );
1a000330:	2101      	movs	r1, #1
1a000332:	4628      	mov	r0, r5
1a000334:	f003 f80e 	bl	1a003354 <gpioWrite>
		vTaskDelay( dif );
1a000338:	4630      	mov	r0, r6
1a00033a:	f001 f9b9 	bl	1a0016b0 <vTaskDelay>
		gpioWrite( led , OFF );
1a00033e:	2100      	movs	r1, #0
1a000340:	4628      	mov	r0, r5
1a000342:	f003 f807 	bl	1a003354 <gpioWrite>
		if(uxSemaphoreGetCount(sem_tec_pulsada)==0){
1a000346:	6820      	ldr	r0, [r4, #0]
1a000348:	f000 fde4 	bl	1a000f14 <uxQueueMessagesWaiting>
1a00034c:	2800      	cmp	r0, #0
1a00034e:	d1e6      	bne.n	1a00031e <tarea_led+0xa>
1a000350:	e7e3      	b.n	1a00031a <tarea_led+0x6>
1a000352:	bf00      	nop
1a000354:	1000223c 	.word	0x1000223c

1a000358 <main>:
{
1a000358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00035c:	b083      	sub	sp, #12
	boardConfig();									// Inicializar y configurar la plataforma
1a00035e:	f003 f871 	bl	1a003444 <boardInit>
	debugPrintConfigUart( UART_USB, 115200 );		// UART for debug messages
1a000362:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000366:	2103      	movs	r1, #3
1a000368:	4827      	ldr	r0, [pc, #156]	; (1a000408 <main+0xb0>)
1a00036a:	f003 f8a1 	bl	1a0034b0 <printInitUart>
	printf( "Ejercicio C_1.\r\n" );
1a00036e:	4827      	ldr	r0, [pc, #156]	; (1a00040c <main+0xb4>)
1a000370:	f004 f826 	bl	1a0043c0 <puts>
    xTaskCreate(
1a000374:	4f26      	ldr	r7, [pc, #152]	; (1a000410 <main+0xb8>)
1a000376:	4e27      	ldr	r6, [pc, #156]	; (1a000414 <main+0xbc>)
1a000378:	2400      	movs	r4, #0
1a00037a:	9401      	str	r4, [sp, #4]
1a00037c:	2501      	movs	r5, #1
1a00037e:	9500      	str	r5, [sp, #0]
1a000380:	2328      	movs	r3, #40	; 0x28
1a000382:	22b4      	movs	r2, #180	; 0xb4
1a000384:	4639      	mov	r1, r7
1a000386:	4630      	mov	r0, r6
1a000388:	f001 f806 	bl	1a001398 <xTaskCreate>
1a00038c:	4681      	mov	r9, r0
    xTaskCreate(
1a00038e:	9401      	str	r4, [sp, #4]
1a000390:	9500      	str	r5, [sp, #0]
1a000392:	2329      	movs	r3, #41	; 0x29
1a000394:	22b4      	movs	r2, #180	; 0xb4
1a000396:	4639      	mov	r1, r7
1a000398:	4630      	mov	r0, r6
1a00039a:	f000 fffd 	bl	1a001398 <xTaskCreate>
1a00039e:	4680      	mov	r8, r0
    xTaskCreate(
1a0003a0:	9401      	str	r4, [sp, #4]
1a0003a2:	9500      	str	r5, [sp, #0]
1a0003a4:	232a      	movs	r3, #42	; 0x2a
1a0003a6:	22b4      	movs	r2, #180	; 0xb4
1a0003a8:	4639      	mov	r1, r7
1a0003aa:	4630      	mov	r0, r6
1a0003ac:	f000 fff4 	bl	1a001398 <xTaskCreate>
1a0003b0:	4606      	mov	r6, r0
    xTaskCreate(
1a0003b2:	9401      	str	r4, [sp, #4]
1a0003b4:	9500      	str	r5, [sp, #0]
1a0003b6:	4623      	mov	r3, r4
1a0003b8:	22b4      	movs	r2, #180	; 0xb4
1a0003ba:	4917      	ldr	r1, [pc, #92]	; (1a000418 <main+0xc0>)
1a0003bc:	4817      	ldr	r0, [pc, #92]	; (1a00041c <main+0xc4>)
1a0003be:	f000 ffeb 	bl	1a001398 <xTaskCreate>
	if((res_A || res_B|| res_C|| res_D) == pdFAIL)
1a0003c2:	f1b9 0f00 	cmp.w	r9, #0
1a0003c6:	d104      	bne.n	1a0003d2 <main+0x7a>
1a0003c8:	f1b8 0f00 	cmp.w	r8, #0
1a0003cc:	d101      	bne.n	1a0003d2 <main+0x7a>
1a0003ce:	b906      	cbnz	r6, 1a0003d2 <main+0x7a>
1a0003d0:	b148      	cbz	r0, 1a0003e6 <main+0x8e>
	sem_tec_pulsada = xSemaphoreCreateCounting(MAX, INICIAL);
1a0003d2:	2100      	movs	r1, #0
1a0003d4:	2003      	movs	r0, #3
1a0003d6:	f000 fad4 	bl	1a000982 <xQueueCreateCountingSemaphore>
1a0003da:	4b11      	ldr	r3, [pc, #68]	; (1a000420 <main+0xc8>)
1a0003dc:	6018      	str	r0, [r3, #0]
	if( sem_tec_pulsada == NULL)
1a0003de:	b150      	cbz	r0, 1a0003f6 <main+0x9e>
    vTaskStartScheduler();					// Enciende tick | Crea idle y pone en ready | Evalua las tareas creadas | Prioridad mas alta pasa a running
1a0003e0:	f001 f80c 	bl	1a0013fc <vTaskStartScheduler>
    }
1a0003e4:	e7fe      	b.n	1a0003e4 <main+0x8c>
		gpioWrite( LED_ERROR, ON );
1a0003e6:	4629      	mov	r1, r5
1a0003e8:	202b      	movs	r0, #43	; 0x2b
1a0003ea:	f002 ffb3 	bl	1a003354 <gpioWrite>
		printf( "Error al crear las tareas.\r\n" );
1a0003ee:	480d      	ldr	r0, [pc, #52]	; (1a000424 <main+0xcc>)
1a0003f0:	f003 ffe6 	bl	1a0043c0 <puts>
		while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
1a0003f4:	e7fe      	b.n	1a0003f4 <main+0x9c>
		gpioWrite( LED_ERROR, ON );
1a0003f6:	2101      	movs	r1, #1
1a0003f8:	202b      	movs	r0, #43	; 0x2b
1a0003fa:	f002 ffab 	bl	1a003354 <gpioWrite>
		printf( "Error al crear los semaforos.\r\n" );
1a0003fe:	480a      	ldr	r0, [pc, #40]	; (1a000428 <main+0xd0>)
1a000400:	f003 ffde 	bl	1a0043c0 <puts>
		while(TRUE);						// VER ESTE LINK: https://pbs.twimg.com/media/BafQje7CcAAN5en.jpg
1a000404:	e7fe      	b.n	1a000404 <main+0xac>
1a000406:	bf00      	nop
1a000408:	100000a4 	.word	0x100000a4
1a00040c:	1a004758 	.word	0x1a004758
1a000410:	1a004768 	.word	0x1a004768
1a000414:	1a000315 	.word	0x1a000315
1a000418:	1a004774 	.word	0x1a004774
1a00041c:	1a000301 	.word	0x1a000301
1a000420:	1000223c 	.word	0x1000223c
1a000424:	1a004780 	.word	0x1a004780
1a000428:	1a00479c 	.word	0x1a00479c

1a00042c <get_diff>:
TickType_t tiempo_diff;

TickType_t get_diff()
{
	return tiempo_diff;
}
1a00042c:	4b01      	ldr	r3, [pc, #4]	; (1a000434 <get_diff+0x8>)
1a00042e:	6818      	ldr	r0, [r3, #0]
1a000430:	4770      	bx	lr
1a000432:	bf00      	nop
1a000434:	10002244 	.word	0x10002244

1a000438 <clear_diff>:

void clear_diff()
{
	tiempo_diff = 0;
1a000438:	4b01      	ldr	r3, [pc, #4]	; (1a000440 <clear_diff+0x8>)
1a00043a:	2200      	movs	r2, #0
1a00043c:	601a      	str	r2, [r3, #0]
}
1a00043e:	4770      	bx	lr
1a000440:	10002244 	.word	0x10002244

1a000444 <buttonPressed>:


/* accion de el evento de tecla pulsada */
void buttonPressed( void )
{
1a000444:	b508      	push	{r3, lr}
	tiempo_down = xTaskGetTickCount();
1a000446:	f001 f823 	bl	1a001490 <xTaskGetTickCount>
1a00044a:	4b01      	ldr	r3, [pc, #4]	; (1a000450 <buttonPressed+0xc>)
1a00044c:	6018      	str	r0, [r3, #0]
}
1a00044e:	bd08      	pop	{r3, pc}
1a000450:	10002240 	.word	0x10002240

1a000454 <buttonReleased>:

/* accion de el evento de tecla liberada */
void buttonReleased( void )
{
1a000454:	b510      	push	{r4, lr}
	tiempo_up = xTaskGetTickCount();
1a000456:	f001 f81b 	bl	1a001490 <xTaskGetTickCount>
1a00045a:	4b0e      	ldr	r3, [pc, #56]	; (1a000494 <buttonReleased+0x40>)
1a00045c:	6018      	str	r0, [r3, #0]
	tiempo_diff = tiempo_up - tiempo_down;
1a00045e:	4b0e      	ldr	r3, [pc, #56]	; (1a000498 <buttonReleased+0x44>)
1a000460:	681b      	ldr	r3, [r3, #0]
1a000462:	1ac0      	subs	r0, r0, r3
1a000464:	4b0d      	ldr	r3, [pc, #52]	; (1a00049c <buttonReleased+0x48>)
1a000466:	6018      	str	r0, [r3, #0]
	if(tiempo_diff>0){
1a000468:	b900      	cbnz	r0, 1a00046c <buttonReleased+0x18>
		//hay cero semaforo
		xSemaphoreGive(  sem_tec_pulsada ); //1 sem
		xSemaphoreGive(  sem_tec_pulsada ); //2 sem
		xSemaphoreGive(  sem_tec_pulsada ); //3 sem
	}
}
1a00046a:	bd10      	pop	{r4, pc}
		xSemaphoreGive(  sem_tec_pulsada ); //1 sem
1a00046c:	4c0c      	ldr	r4, [pc, #48]	; (1a0004a0 <buttonReleased+0x4c>)
1a00046e:	2300      	movs	r3, #0
1a000470:	461a      	mov	r2, r3
1a000472:	4619      	mov	r1, r3
1a000474:	6820      	ldr	r0, [r4, #0]
1a000476:	f000 faa5 	bl	1a0009c4 <xQueueGenericSend>
		xSemaphoreGive(  sem_tec_pulsada ); //2 sem
1a00047a:	2300      	movs	r3, #0
1a00047c:	461a      	mov	r2, r3
1a00047e:	4619      	mov	r1, r3
1a000480:	6820      	ldr	r0, [r4, #0]
1a000482:	f000 fa9f 	bl	1a0009c4 <xQueueGenericSend>
		xSemaphoreGive(  sem_tec_pulsada ); //3 sem
1a000486:	2300      	movs	r3, #0
1a000488:	461a      	mov	r2, r3
1a00048a:	4619      	mov	r1, r3
1a00048c:	6820      	ldr	r0, [r4, #0]
1a00048e:	f000 fa99 	bl	1a0009c4 <xQueueGenericSend>
}
1a000492:	e7ea      	b.n	1a00046a <buttonReleased+0x16>
1a000494:	10002248 	.word	0x10002248
1a000498:	10002240 	.word	0x10002240
1a00049c:	10002244 	.word	0x10002244
1a0004a0:	1000223c 	.word	0x1000223c

1a0004a4 <fsmButtonError>:

void fsmButtonError( void )
{
    fsmButtonState = BUTTON_UP;
1a0004a4:	4b01      	ldr	r3, [pc, #4]	; (1a0004ac <fsmButtonError+0x8>)
1a0004a6:	2200      	movs	r2, #0
1a0004a8:	701a      	strb	r2, [r3, #0]
}
1a0004aa:	4770      	bx	lr
1a0004ac:	1000224c 	.word	0x1000224c

1a0004b0 <fsmButtonInit>:

void fsmButtonInit( void )
{
    fsmButtonState = BUTTON_UP;  // Set initial state
1a0004b0:	4b01      	ldr	r3, [pc, #4]	; (1a0004b8 <fsmButtonInit+0x8>)
1a0004b2:	2200      	movs	r2, #0
1a0004b4:	701a      	strb	r2, [r3, #0]
}
1a0004b6:	4770      	bx	lr
1a0004b8:	1000224c 	.word	0x1000224c

1a0004bc <fsmButtonUpdate>:

#define DEBOUNCE_TIME 40

// FSM Update Sate Function
void fsmButtonUpdate( gpioMap_t tecla )
{
1a0004bc:	b508      	push	{r3, lr}

    static uint8_t contFalling = 0;
    static uint8_t contRising = 0;

    switch( fsmButtonState )
1a0004be:	4b26      	ldr	r3, [pc, #152]	; (1a000558 <fsmButtonUpdate+0x9c>)
1a0004c0:	781b      	ldrb	r3, [r3, #0]
1a0004c2:	2b03      	cmp	r3, #3
1a0004c4:	d844      	bhi.n	1a000550 <fsmButtonUpdate+0x94>
1a0004c6:	e8df f003 	tbb	[pc, r3]
1a0004ca:	2202      	.short	0x2202
1a0004cc:	2a09      	.short	0x2a09
    {
        case STATE_BUTTON_UP:
            /* CHECK TRANSITION CONDITIONS */
            if( !gpioRead( tecla ) )
1a0004ce:	f002 ff76 	bl	1a0033be <gpioRead>
1a0004d2:	b958      	cbnz	r0, 1a0004ec <fsmButtonUpdate+0x30>
            {
                fsmButtonState = STATE_BUTTON_FALLING;
1a0004d4:	4b20      	ldr	r3, [pc, #128]	; (1a000558 <fsmButtonUpdate+0x9c>)
1a0004d6:	2202      	movs	r2, #2
1a0004d8:	701a      	strb	r2, [r3, #0]
1a0004da:	e007      	b.n	1a0004ec <fsmButtonUpdate+0x30>

        case STATE_BUTTON_FALLING:
            /* ENTRY */

            /* CHECK TRANSITION CONDITIONS */
            if( contFalling >= DEBOUNCE_TIME )
1a0004dc:	4b1f      	ldr	r3, [pc, #124]	; (1a00055c <fsmButtonUpdate+0xa0>)
1a0004de:	781b      	ldrb	r3, [r3, #0]
1a0004e0:	2b27      	cmp	r3, #39	; 0x27
1a0004e2:	d804      	bhi.n	1a0004ee <fsmButtonUpdate+0x32>
                }

                contFalling = 0;
            }

            contFalling++;
1a0004e4:	4a1d      	ldr	r2, [pc, #116]	; (1a00055c <fsmButtonUpdate+0xa0>)
1a0004e6:	7813      	ldrb	r3, [r2, #0]
1a0004e8:	3301      	adds	r3, #1
1a0004ea:	7013      	strb	r3, [r2, #0]

        default:
            fsmButtonError();
            break;
    }
}
1a0004ec:	bd08      	pop	{r3, pc}
                if( !gpioRead( tecla ) )
1a0004ee:	f002 ff66 	bl	1a0033be <gpioRead>
1a0004f2:	b130      	cbz	r0, 1a000502 <fsmButtonUpdate+0x46>
                    fsmButtonState = STATE_BUTTON_UP;
1a0004f4:	4b18      	ldr	r3, [pc, #96]	; (1a000558 <fsmButtonUpdate+0x9c>)
1a0004f6:	2200      	movs	r2, #0
1a0004f8:	701a      	strb	r2, [r3, #0]
                contFalling = 0;
1a0004fa:	4b18      	ldr	r3, [pc, #96]	; (1a00055c <fsmButtonUpdate+0xa0>)
1a0004fc:	2200      	movs	r2, #0
1a0004fe:	701a      	strb	r2, [r3, #0]
1a000500:	e7f0      	b.n	1a0004e4 <fsmButtonUpdate+0x28>
                    fsmButtonState = STATE_BUTTON_DOWN;
1a000502:	4b15      	ldr	r3, [pc, #84]	; (1a000558 <fsmButtonUpdate+0x9c>)
1a000504:	2201      	movs	r2, #1
1a000506:	701a      	strb	r2, [r3, #0]
                    buttonPressed();
1a000508:	f7ff ff9c 	bl	1a000444 <buttonPressed>
1a00050c:	e7f5      	b.n	1a0004fa <fsmButtonUpdate+0x3e>
			if( gpioRead( tecla ) )
1a00050e:	f002 ff56 	bl	1a0033be <gpioRead>
1a000512:	2800      	cmp	r0, #0
1a000514:	d0ea      	beq.n	1a0004ec <fsmButtonUpdate+0x30>
				fsmButtonState = STATE_BUTTON_RISING;
1a000516:	4b10      	ldr	r3, [pc, #64]	; (1a000558 <fsmButtonUpdate+0x9c>)
1a000518:	2203      	movs	r2, #3
1a00051a:	701a      	strb	r2, [r3, #0]
1a00051c:	e7e6      	b.n	1a0004ec <fsmButtonUpdate+0x30>
            if( contRising >= DEBOUNCE_TIME )
1a00051e:	4b10      	ldr	r3, [pc, #64]	; (1a000560 <fsmButtonUpdate+0xa4>)
1a000520:	781b      	ldrb	r3, [r3, #0]
1a000522:	2b27      	cmp	r3, #39	; 0x27
1a000524:	d804      	bhi.n	1a000530 <fsmButtonUpdate+0x74>
            contRising++;
1a000526:	4a0e      	ldr	r2, [pc, #56]	; (1a000560 <fsmButtonUpdate+0xa4>)
1a000528:	7813      	ldrb	r3, [r2, #0]
1a00052a:	3301      	adds	r3, #1
1a00052c:	7013      	strb	r3, [r2, #0]
            break;
1a00052e:	e7dd      	b.n	1a0004ec <fsmButtonUpdate+0x30>
                if( gpioRead( tecla ) )
1a000530:	f002 ff45 	bl	1a0033be <gpioRead>
1a000534:	b930      	cbnz	r0, 1a000544 <fsmButtonUpdate+0x88>
                    fsmButtonState = STATE_BUTTON_DOWN;
1a000536:	4b08      	ldr	r3, [pc, #32]	; (1a000558 <fsmButtonUpdate+0x9c>)
1a000538:	2201      	movs	r2, #1
1a00053a:	701a      	strb	r2, [r3, #0]
                contRising = 0;
1a00053c:	4b08      	ldr	r3, [pc, #32]	; (1a000560 <fsmButtonUpdate+0xa4>)
1a00053e:	2200      	movs	r2, #0
1a000540:	701a      	strb	r2, [r3, #0]
1a000542:	e7f0      	b.n	1a000526 <fsmButtonUpdate+0x6a>
                    fsmButtonState = STATE_BUTTON_UP;
1a000544:	4b04      	ldr	r3, [pc, #16]	; (1a000558 <fsmButtonUpdate+0x9c>)
1a000546:	2200      	movs	r2, #0
1a000548:	701a      	strb	r2, [r3, #0]
                    buttonReleased();
1a00054a:	f7ff ff83 	bl	1a000454 <buttonReleased>
1a00054e:	e7f5      	b.n	1a00053c <fsmButtonUpdate+0x80>
            fsmButtonError();
1a000550:	f7ff ffa8 	bl	1a0004a4 <fsmButtonError>
}
1a000554:	e7ca      	b.n	1a0004ec <fsmButtonUpdate+0x30>
1a000556:	bf00      	nop
1a000558:	1000224c 	.word	0x1000224c
1a00055c:	100000a5 	.word	0x100000a5
1a000560:	100000a6 	.word	0x100000a6

1a000564 <initialise_monitor_handles>:
}
1a000564:	4770      	bx	lr
1a000566:	Address 0x000000001a000566 is out of bounds.


1a000568 <Reset_Handler>:
void Reset_Handler(void) {
1a000568:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00056a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00056c:	4b19      	ldr	r3, [pc, #100]	; (1a0005d4 <Reset_Handler+0x6c>)
1a00056e:	4a1a      	ldr	r2, [pc, #104]	; (1a0005d8 <Reset_Handler+0x70>)
1a000570:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000572:	3304      	adds	r3, #4
1a000574:	4a19      	ldr	r2, [pc, #100]	; (1a0005dc <Reset_Handler+0x74>)
1a000576:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000578:	2300      	movs	r3, #0
1a00057a:	e005      	b.n	1a000588 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00057c:	4a18      	ldr	r2, [pc, #96]	; (1a0005e0 <Reset_Handler+0x78>)
1a00057e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000586:	3301      	adds	r3, #1
1a000588:	2b07      	cmp	r3, #7
1a00058a:	d9f7      	bls.n	1a00057c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00058c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00058e:	4b15      	ldr	r3, [pc, #84]	; (1a0005e4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000590:	e007      	b.n	1a0005a2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000592:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000596:	689a      	ldr	r2, [r3, #8]
1a000598:	6859      	ldr	r1, [r3, #4]
1a00059a:	6818      	ldr	r0, [r3, #0]
1a00059c:	f7ff fdf5 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005a0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005a2:	4a11      	ldr	r2, [pc, #68]	; (1a0005e8 <Reset_Handler+0x80>)
1a0005a4:	4293      	cmp	r3, r2
1a0005a6:	d3f4      	bcc.n	1a000592 <Reset_Handler+0x2a>
1a0005a8:	e006      	b.n	1a0005b8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0005aa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005ac:	6859      	ldr	r1, [r3, #4]
1a0005ae:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005b2:	f7ff fdf9 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005b6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005b8:	4a0c      	ldr	r2, [pc, #48]	; (1a0005ec <Reset_Handler+0x84>)
1a0005ba:	4293      	cmp	r3, r2
1a0005bc:	d3f5      	bcc.n	1a0005aa <Reset_Handler+0x42>
    SystemInit();
1a0005be:	f002 fd71 	bl	1a0030a4 <SystemInit>
    __libc_init_array();
1a0005c2:	f003 fab5 	bl	1a003b30 <__libc_init_array>
    initialise_monitor_handles();
1a0005c6:	f7ff ffcd 	bl	1a000564 <initialise_monitor_handles>
    main();
1a0005ca:	f7ff fec5 	bl	1a000358 <main>
        __asm__ volatile("wfi");
1a0005ce:	bf30      	wfi
1a0005d0:	e7fd      	b.n	1a0005ce <Reset_Handler+0x66>
1a0005d2:	bf00      	nop
1a0005d4:	40053100 	.word	0x40053100
1a0005d8:	10df1000 	.word	0x10df1000
1a0005dc:	01dff7ff 	.word	0x01dff7ff
1a0005e0:	e000e280 	.word	0xe000e280
1a0005e4:	1a000114 	.word	0x1a000114
1a0005e8:	1a000150 	.word	0x1a000150
1a0005ec:	1a000178 	.word	0x1a000178

1a0005f0 <_fini>:
void _fini(void) {}
1a0005f0:	4770      	bx	lr

1a0005f2 <_init>:
void _init(void) {}
1a0005f2:	4770      	bx	lr

1a0005f4 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0005f4:	2309      	movs	r3, #9
1a0005f6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005fc:	4770      	bx	lr

1a0005fe <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0005fe:	2358      	movs	r3, #88	; 0x58
1a000600:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000606:	4770      	bx	lr

1a000608 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000608:	2902      	cmp	r1, #2
1a00060a:	d904      	bls.n	1a000616 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00060c:	2309      	movs	r3, #9
1a00060e:	6003      	str	r3, [r0, #0]
       return -1;
1a000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000614:	4770      	bx	lr
       return 1;
1a000616:	2001      	movs	r0, #1
   }
}
1a000618:	4770      	bx	lr

1a00061a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00061a:	2358      	movs	r3, #88	; 0x58
1a00061c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00061e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000622:	4770      	bx	lr

1a000624 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000624:	2902      	cmp	r1, #2
1a000626:	d81f      	bhi.n	1a000668 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00062c:	461d      	mov	r5, r3
1a00062e:	4617      	mov	r7, r2
1a000630:	4606      	mov	r6, r0
  size_t i = 0;
1a000632:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000634:	42ac      	cmp	r4, r5
1a000636:	d211      	bcs.n	1a00065c <_read_r+0x38>
         int c = __stdio_getchar();
1a000638:	f001 ff8b 	bl	1a002552 <__stdio_getchar>
         if( c != -1 ){
1a00063c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000640:	d0f8      	beq.n	1a000634 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000642:	f104 0801 	add.w	r8, r4, #1
1a000646:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000648:	280d      	cmp	r0, #13
1a00064a:	d003      	beq.n	1a000654 <_read_r+0x30>
1a00064c:	280a      	cmp	r0, #10
1a00064e:	d001      	beq.n	1a000654 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000650:	4644      	mov	r4, r8
1a000652:	e7ef      	b.n	1a000634 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000654:	f001 ff7d 	bl	1a002552 <__stdio_getchar>
               return i;
1a000658:	4640      	mov	r0, r8
1a00065a:	e003      	b.n	1a000664 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00065c:	2313      	movs	r3, #19
1a00065e:	6033      	str	r3, [r6, #0]
      return -1;
1a000660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000668:	2313      	movs	r3, #19
1a00066a:	6003      	str	r3, [r0, #0]
      return -1;
1a00066c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000670:	4770      	bx	lr

1a000672 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000672:	2902      	cmp	r1, #2
1a000674:	d80c      	bhi.n	1a000690 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000676:	b570      	push	{r4, r5, r6, lr}
1a000678:	461d      	mov	r5, r3
1a00067a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00067c:	2400      	movs	r4, #0
1a00067e:	42ac      	cmp	r4, r5
1a000680:	d204      	bcs.n	1a00068c <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000682:	5d30      	ldrb	r0, [r6, r4]
1a000684:	f001 ff60 	bl	1a002548 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000688:	3401      	adds	r4, #1
1a00068a:	e7f8      	b.n	1a00067e <_write_r+0xc>
       return n;
1a00068c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00068e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000690:	2313      	movs	r3, #19
1a000692:	6003      	str	r3, [r0, #0]
       return -1;
1a000694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000698:	4770      	bx	lr
1a00069a:	Address 0x000000001a00069a is out of bounds.


1a00069c <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00069c:	4b05      	ldr	r3, [pc, #20]	; (1a0006b4 <_sbrk_r+0x18>)
1a00069e:	681b      	ldr	r3, [r3, #0]
1a0006a0:	b123      	cbz	r3, 1a0006ac <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006a2:	4b04      	ldr	r3, [pc, #16]	; (1a0006b4 <_sbrk_r+0x18>)
1a0006a4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006a6:	4401      	add	r1, r0
1a0006a8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006aa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0006ac:	4b01      	ldr	r3, [pc, #4]	; (1a0006b4 <_sbrk_r+0x18>)
1a0006ae:	4a02      	ldr	r2, [pc, #8]	; (1a0006b8 <_sbrk_r+0x1c>)
1a0006b0:	601a      	str	r2, [r3, #0]
1a0006b2:	e7f6      	b.n	1a0006a2 <_sbrk_r+0x6>
1a0006b4:	100000a8 	.word	0x100000a8
1a0006b8:	100022a4 	.word	0x100022a4

1a0006bc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a0006bc:	b538      	push	{r3, r4, r5, lr}
1a0006be:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a0006c0:	f010 0f07 	tst.w	r0, #7
1a0006c4:	d002      	beq.n	1a0006cc <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0006c6:	f020 0407 	bic.w	r4, r0, #7
1a0006ca:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a0006cc:	f000 fed8 	bl	1a001480 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a0006d0:	4b13      	ldr	r3, [pc, #76]	; (1a000720 <pvPortMalloc+0x64>)
1a0006d2:	681b      	ldr	r3, [r3, #0]
1a0006d4:	b17b      	cbz	r3, 1a0006f6 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0006d6:	4b13      	ldr	r3, [pc, #76]	; (1a000724 <pvPortMalloc+0x68>)
1a0006d8:	681b      	ldr	r3, [r3, #0]
1a0006da:	441c      	add	r4, r3
1a0006dc:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0006e0:	4294      	cmp	r4, r2
1a0006e2:	d80e      	bhi.n	1a000702 <pvPortMalloc+0x46>
1a0006e4:	42a3      	cmp	r3, r4
1a0006e6:	d310      	bcc.n	1a00070a <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0006e8:	f000 ff64 	bl	1a0015b4 <xTaskResumeAll>
void *pvReturn = NULL;
1a0006ec:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0006ee:	f000 fcbf 	bl	1a001070 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a0006f2:	4628      	mov	r0, r5
1a0006f4:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a0006f6:	4b0c      	ldr	r3, [pc, #48]	; (1a000728 <pvPortMalloc+0x6c>)
1a0006f8:	f023 0307 	bic.w	r3, r3, #7
1a0006fc:	4a08      	ldr	r2, [pc, #32]	; (1a000720 <pvPortMalloc+0x64>)
1a0006fe:	6013      	str	r3, [r2, #0]
1a000700:	e7e9      	b.n	1a0006d6 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a000702:	f000 ff57 	bl	1a0015b4 <xTaskResumeAll>
void *pvReturn = NULL;
1a000706:	2500      	movs	r5, #0
1a000708:	e7f1      	b.n	1a0006ee <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00070a:	4a05      	ldr	r2, [pc, #20]	; (1a000720 <pvPortMalloc+0x64>)
1a00070c:	6815      	ldr	r5, [r2, #0]
1a00070e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000710:	4b04      	ldr	r3, [pc, #16]	; (1a000724 <pvPortMalloc+0x68>)
1a000712:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000714:	f000 ff4e 	bl	1a0015b4 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000718:	2d00      	cmp	r5, #0
1a00071a:	d1ea      	bne.n	1a0006f2 <pvPortMalloc+0x36>
1a00071c:	e7e7      	b.n	1a0006ee <pvPortMalloc+0x32>
1a00071e:	bf00      	nop
1a000720:	100000ac 	.word	0x100000ac
1a000724:	100020b0 	.word	0x100020b0
1a000728:	100000b8 	.word	0x100000b8

1a00072c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a00072c:	b140      	cbz	r0, 1a000740 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00072e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000732:	f383 8811 	msr	BASEPRI, r3
1a000736:	f3bf 8f6f 	isb	sy
1a00073a:	f3bf 8f4f 	dsb	sy
1a00073e:	e7fe      	b.n	1a00073e <vPortFree+0x12>
}
1a000740:	4770      	bx	lr

1a000742 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000742:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000744:	b123      	cbz	r3, 1a000750 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000746:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000748:	6818      	ldr	r0, [r3, #0]
1a00074a:	f1c0 0007 	rsb	r0, r0, #7
1a00074e:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000750:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000752:	4770      	bx	lr

1a000754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000754:	b510      	push	{r4, lr}
1a000756:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000758:	f001 fca4 	bl	1a0020a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00075c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00075e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000760:	429a      	cmp	r2, r3
1a000762:	d004      	beq.n	1a00076e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000764:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000766:	f001 fcbf 	bl	1a0020e8 <vPortExitCritical>

	return xReturn;
}
1a00076a:	4620      	mov	r0, r4
1a00076c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00076e:	2401      	movs	r4, #1
1a000770:	e7f9      	b.n	1a000766 <prvIsQueueFull+0x12>

1a000772 <prvIsQueueEmpty>:
{
1a000772:	b510      	push	{r4, lr}
1a000774:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000776:	f001 fc95 	bl	1a0020a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00077a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00077c:	b923      	cbnz	r3, 1a000788 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a00077e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a000780:	f001 fcb2 	bl	1a0020e8 <vPortExitCritical>
}
1a000784:	4620      	mov	r0, r4
1a000786:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a000788:	2400      	movs	r4, #0
1a00078a:	e7f9      	b.n	1a000780 <prvIsQueueEmpty+0xe>

1a00078c <prvCopyDataToQueue>:
{
1a00078c:	b570      	push	{r4, r5, r6, lr}
1a00078e:	4604      	mov	r4, r0
1a000790:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000792:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000794:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000796:	b95a      	cbnz	r2, 1a0007b0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000798:	6803      	ldr	r3, [r0, #0]
1a00079a:	b11b      	cbz	r3, 1a0007a4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00079c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00079e:	3501      	adds	r5, #1
1a0007a0:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0007a2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0007a4:	6840      	ldr	r0, [r0, #4]
1a0007a6:	f001 f94b 	bl	1a001a40 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0007aa:	2300      	movs	r3, #0
1a0007ac:	6063      	str	r3, [r4, #4]
1a0007ae:	e7f6      	b.n	1a00079e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0007b0:	b96e      	cbnz	r6, 1a0007ce <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0007b2:	6880      	ldr	r0, [r0, #8]
1a0007b4:	f003 f9e3 	bl	1a003b7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0007b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0007ba:	68a3      	ldr	r3, [r4, #8]
1a0007bc:	4413      	add	r3, r2
1a0007be:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0007c0:	6862      	ldr	r2, [r4, #4]
1a0007c2:	4293      	cmp	r3, r2
1a0007c4:	d319      	bcc.n	1a0007fa <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0007c6:	6823      	ldr	r3, [r4, #0]
1a0007c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0007ca:	2000      	movs	r0, #0
1a0007cc:	e7e7      	b.n	1a00079e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0007ce:	68c0      	ldr	r0, [r0, #12]
1a0007d0:	f003 f9d5 	bl	1a003b7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0007d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0007d6:	4252      	negs	r2, r2
1a0007d8:	68e3      	ldr	r3, [r4, #12]
1a0007da:	4413      	add	r3, r2
1a0007dc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0007de:	6821      	ldr	r1, [r4, #0]
1a0007e0:	428b      	cmp	r3, r1
1a0007e2:	d202      	bcs.n	1a0007ea <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0007e4:	6863      	ldr	r3, [r4, #4]
1a0007e6:	441a      	add	r2, r3
1a0007e8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0007ea:	2e02      	cmp	r6, #2
1a0007ec:	d001      	beq.n	1a0007f2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0007ee:	2000      	movs	r0, #0
1a0007f0:	e7d5      	b.n	1a00079e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0007f2:	b125      	cbz	r5, 1a0007fe <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0007f4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0007f6:	2000      	movs	r0, #0
1a0007f8:	e7d1      	b.n	1a00079e <prvCopyDataToQueue+0x12>
1a0007fa:	2000      	movs	r0, #0
1a0007fc:	e7cf      	b.n	1a00079e <prvCopyDataToQueue+0x12>
1a0007fe:	2000      	movs	r0, #0
1a000800:	e7cd      	b.n	1a00079e <prvCopyDataToQueue+0x12>

1a000802 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000802:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000804:	b172      	cbz	r2, 1a000824 <prvCopyDataFromQueue+0x22>
{
1a000806:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000808:	68c3      	ldr	r3, [r0, #12]
1a00080a:	4413      	add	r3, r2
1a00080c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00080e:	6844      	ldr	r4, [r0, #4]
1a000810:	42a3      	cmp	r3, r4
1a000812:	d301      	bcc.n	1a000818 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000814:	6803      	ldr	r3, [r0, #0]
1a000816:	60c3      	str	r3, [r0, #12]
1a000818:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00081a:	68c1      	ldr	r1, [r0, #12]
1a00081c:	4620      	mov	r0, r4
1a00081e:	f003 f9ae 	bl	1a003b7e <memcpy>
}
1a000822:	bd10      	pop	{r4, pc}
1a000824:	4770      	bx	lr

1a000826 <prvUnlockQueue>:
{
1a000826:	b538      	push	{r3, r4, r5, lr}
1a000828:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00082a:	f001 fc3b 	bl	1a0020a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00082e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000832:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000834:	e003      	b.n	1a00083e <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000836:	f001 f88f 	bl	1a001958 <vTaskMissedYield>
			--cTxLock;
1a00083a:	3c01      	subs	r4, #1
1a00083c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00083e:	2c00      	cmp	r4, #0
1a000840:	dd08      	ble.n	1a000854 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000844:	b133      	cbz	r3, 1a000854 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000846:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00084a:	f000 fff1 	bl	1a001830 <xTaskRemoveFromEventList>
1a00084e:	2800      	cmp	r0, #0
1a000850:	d0f3      	beq.n	1a00083a <prvUnlockQueue+0x14>
1a000852:	e7f0      	b.n	1a000836 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000854:	23ff      	movs	r3, #255	; 0xff
1a000856:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00085a:	f001 fc45 	bl	1a0020e8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00085e:	f001 fc21 	bl	1a0020a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000862:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000866:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000868:	e003      	b.n	1a000872 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00086a:	f001 f875 	bl	1a001958 <vTaskMissedYield>
				--cRxLock;
1a00086e:	3c01      	subs	r4, #1
1a000870:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000872:	2c00      	cmp	r4, #0
1a000874:	dd08      	ble.n	1a000888 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000876:	692b      	ldr	r3, [r5, #16]
1a000878:	b133      	cbz	r3, 1a000888 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00087a:	f105 0010 	add.w	r0, r5, #16
1a00087e:	f000 ffd7 	bl	1a001830 <xTaskRemoveFromEventList>
1a000882:	2800      	cmp	r0, #0
1a000884:	d0f3      	beq.n	1a00086e <prvUnlockQueue+0x48>
1a000886:	e7f0      	b.n	1a00086a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000888:	23ff      	movs	r3, #255	; 0xff
1a00088a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00088e:	f001 fc2b 	bl	1a0020e8 <vPortExitCritical>
}
1a000892:	bd38      	pop	{r3, r4, r5, pc}

1a000894 <xQueueGenericReset>:
{
1a000894:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000896:	b1e0      	cbz	r0, 1a0008d2 <xQueueGenericReset+0x3e>
1a000898:	4604      	mov	r4, r0
1a00089a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00089c:	f001 fc02 	bl	1a0020a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0008a0:	6821      	ldr	r1, [r4, #0]
1a0008a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0008a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0008a6:	fb03 1002 	mla	r0, r3, r2, r1
1a0008aa:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0008ac:	2000      	movs	r0, #0
1a0008ae:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0008b0:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0008b2:	3a01      	subs	r2, #1
1a0008b4:	fb02 1303 	mla	r3, r2, r3, r1
1a0008b8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0008ba:	23ff      	movs	r3, #255	; 0xff
1a0008bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0008c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0008c4:	b9ed      	cbnz	r5, 1a000902 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0008c6:	6923      	ldr	r3, [r4, #16]
1a0008c8:	b963      	cbnz	r3, 1a0008e4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0008ca:	f001 fc0d 	bl	1a0020e8 <vPortExitCritical>
}
1a0008ce:	2001      	movs	r0, #1
1a0008d0:	bd38      	pop	{r3, r4, r5, pc}
1a0008d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0008d6:	f383 8811 	msr	BASEPRI, r3
1a0008da:	f3bf 8f6f 	isb	sy
1a0008de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0008e2:	e7fe      	b.n	1a0008e2 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0008e4:	f104 0010 	add.w	r0, r4, #16
1a0008e8:	f000 ffa2 	bl	1a001830 <xTaskRemoveFromEventList>
1a0008ec:	2800      	cmp	r0, #0
1a0008ee:	d0ec      	beq.n	1a0008ca <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a0008f0:	4b08      	ldr	r3, [pc, #32]	; (1a000914 <xQueueGenericReset+0x80>)
1a0008f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0008f6:	601a      	str	r2, [r3, #0]
1a0008f8:	f3bf 8f4f 	dsb	sy
1a0008fc:	f3bf 8f6f 	isb	sy
1a000900:	e7e3      	b.n	1a0008ca <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000902:	f104 0010 	add.w	r0, r4, #16
1a000906:	f000 fb56 	bl	1a000fb6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00090a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00090e:	f000 fb52 	bl	1a000fb6 <vListInitialise>
1a000912:	e7da      	b.n	1a0008ca <xQueueGenericReset+0x36>
1a000914:	e000ed04 	.word	0xe000ed04

1a000918 <prvInitialiseNewQueue>:
{
1a000918:	b538      	push	{r3, r4, r5, lr}
1a00091a:	461d      	mov	r5, r3
1a00091c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00091e:	460b      	mov	r3, r1
1a000920:	b949      	cbnz	r1, 1a000936 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000922:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000924:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000926:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000928:	2101      	movs	r1, #1
1a00092a:	4620      	mov	r0, r4
1a00092c:	f7ff ffb2 	bl	1a000894 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000930:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000934:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000936:	6022      	str	r2, [r4, #0]
1a000938:	e7f4      	b.n	1a000924 <prvInitialiseNewQueue+0xc>

1a00093a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00093a:	b940      	cbnz	r0, 1a00094e <xQueueGenericCreate+0x14>
1a00093c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000940:	f383 8811 	msr	BASEPRI, r3
1a000944:	f3bf 8f6f 	isb	sy
1a000948:	f3bf 8f4f 	dsb	sy
1a00094c:	e7fe      	b.n	1a00094c <xQueueGenericCreate+0x12>
	{
1a00094e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000950:	b083      	sub	sp, #12
1a000952:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000954:	b199      	cbz	r1, 1a00097e <xQueueGenericCreate+0x44>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000956:	fb01 f000 	mul.w	r0, r1, r0
1a00095a:	4617      	mov	r7, r2
1a00095c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00095e:	3050      	adds	r0, #80	; 0x50
1a000960:	f7ff feac 	bl	1a0006bc <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000964:	4606      	mov	r6, r0
1a000966:	b138      	cbz	r0, 1a000978 <xQueueGenericCreate+0x3e>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000968:	9000      	str	r0, [sp, #0]
1a00096a:	463b      	mov	r3, r7
1a00096c:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000970:	4621      	mov	r1, r4
1a000972:	4628      	mov	r0, r5
1a000974:	f7ff ffd0 	bl	1a000918 <prvInitialiseNewQueue>
	}
1a000978:	4630      	mov	r0, r6
1a00097a:	b003      	add	sp, #12
1a00097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a00097e:	2000      	movs	r0, #0
1a000980:	e7eb      	b.n	1a00095a <xQueueGenericCreate+0x20>

1a000982 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
1a000982:	b940      	cbnz	r0, 1a000996 <xQueueCreateCountingSemaphore+0x14>
1a000984:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000988:	f383 8811 	msr	BASEPRI, r3
1a00098c:	f3bf 8f6f 	isb	sy
1a000990:	f3bf 8f4f 	dsb	sy
1a000994:	e7fe      	b.n	1a000994 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
1a000996:	4288      	cmp	r0, r1
1a000998:	d208      	bcs.n	1a0009ac <xQueueCreateCountingSemaphore+0x2a>
1a00099a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00099e:	f383 8811 	msr	BASEPRI, r3
1a0009a2:	f3bf 8f6f 	isb	sy
1a0009a6:	f3bf 8f4f 	dsb	sy
1a0009aa:	e7fe      	b.n	1a0009aa <xQueueCreateCountingSemaphore+0x28>
	{
1a0009ac:	b510      	push	{r4, lr}
1a0009ae:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
1a0009b0:	2202      	movs	r2, #2
1a0009b2:	2100      	movs	r1, #0
1a0009b4:	f7ff ffc1 	bl	1a00093a <xQueueGenericCreate>
		if( xHandle != NULL )
1a0009b8:	4603      	mov	r3, r0
1a0009ba:	b100      	cbz	r0, 1a0009be <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
1a0009bc:	6384      	str	r4, [r0, #56]	; 0x38
	}
1a0009be:	4618      	mov	r0, r3
1a0009c0:	bd10      	pop	{r4, pc}
1a0009c2:	Address 0x000000001a0009c2 is out of bounds.


1a0009c4 <xQueueGenericSend>:
{
1a0009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0009c6:	b085      	sub	sp, #20
1a0009c8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0009ca:	b178      	cbz	r0, 1a0009ec <xQueueGenericSend+0x28>
1a0009cc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0009ce:	b1b1      	cbz	r1, 1a0009fe <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0009d0:	2b02      	cmp	r3, #2
1a0009d2:	d120      	bne.n	1a000a16 <xQueueGenericSend+0x52>
1a0009d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0009d6:	2a01      	cmp	r2, #1
1a0009d8:	d01d      	beq.n	1a000a16 <xQueueGenericSend+0x52>
1a0009da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009de:	f383 8811 	msr	BASEPRI, r3
1a0009e2:	f3bf 8f6f 	isb	sy
1a0009e6:	f3bf 8f4f 	dsb	sy
1a0009ea:	e7fe      	b.n	1a0009ea <xQueueGenericSend+0x26>
1a0009ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009f0:	f383 8811 	msr	BASEPRI, r3
1a0009f4:	f3bf 8f6f 	isb	sy
1a0009f8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0009fc:	e7fe      	b.n	1a0009fc <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0009fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000a00:	2a00      	cmp	r2, #0
1a000a02:	d0e5      	beq.n	1a0009d0 <xQueueGenericSend+0xc>
1a000a04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a08:	f383 8811 	msr	BASEPRI, r3
1a000a0c:	f3bf 8f6f 	isb	sy
1a000a10:	f3bf 8f4f 	dsb	sy
1a000a14:	e7fe      	b.n	1a000a14 <xQueueGenericSend+0x50>
1a000a16:	461e      	mov	r6, r3
1a000a18:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000a1a:	f000 ffa3 	bl	1a001964 <xTaskGetSchedulerState>
1a000a1e:	b950      	cbnz	r0, 1a000a36 <xQueueGenericSend+0x72>
1a000a20:	9b01      	ldr	r3, [sp, #4]
1a000a22:	b153      	cbz	r3, 1a000a3a <xQueueGenericSend+0x76>
1a000a24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a28:	f383 8811 	msr	BASEPRI, r3
1a000a2c:	f3bf 8f6f 	isb	sy
1a000a30:	f3bf 8f4f 	dsb	sy
1a000a34:	e7fe      	b.n	1a000a34 <xQueueGenericSend+0x70>
1a000a36:	2500      	movs	r5, #0
1a000a38:	e03b      	b.n	1a000ab2 <xQueueGenericSend+0xee>
1a000a3a:	2500      	movs	r5, #0
1a000a3c:	e039      	b.n	1a000ab2 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000a3e:	4632      	mov	r2, r6
1a000a40:	4639      	mov	r1, r7
1a000a42:	4620      	mov	r0, r4
1a000a44:	f7ff fea2 	bl	1a00078c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000a4a:	b96b      	cbnz	r3, 1a000a68 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a000a4c:	b138      	cbz	r0, 1a000a5e <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a000a4e:	4b3c      	ldr	r3, [pc, #240]	; (1a000b40 <xQueueGenericSend+0x17c>)
1a000a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a54:	601a      	str	r2, [r3, #0]
1a000a56:	f3bf 8f4f 	dsb	sy
1a000a5a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000a5e:	f001 fb43 	bl	1a0020e8 <vPortExitCritical>
				return pdPASS;
1a000a62:	2001      	movs	r0, #1
}
1a000a64:	b005      	add	sp, #20
1a000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000a68:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a6c:	f000 fee0 	bl	1a001830 <xTaskRemoveFromEventList>
1a000a70:	2800      	cmp	r0, #0
1a000a72:	d0f4      	beq.n	1a000a5e <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a000a74:	4b32      	ldr	r3, [pc, #200]	; (1a000b40 <xQueueGenericSend+0x17c>)
1a000a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a7a:	601a      	str	r2, [r3, #0]
1a000a7c:	f3bf 8f4f 	dsb	sy
1a000a80:	f3bf 8f6f 	isb	sy
1a000a84:	e7eb      	b.n	1a000a5e <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000a86:	f001 fb2f 	bl	1a0020e8 <vPortExitCritical>
					return errQUEUE_FULL;
1a000a8a:	2000      	movs	r0, #0
1a000a8c:	e7ea      	b.n	1a000a64 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000a8e:	a802      	add	r0, sp, #8
1a000a90:	f000 ff14 	bl	1a0018bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000a94:	2501      	movs	r5, #1
1a000a96:	e019      	b.n	1a000acc <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a000a98:	2300      	movs	r3, #0
1a000a9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000a9e:	e021      	b.n	1a000ae4 <xQueueGenericSend+0x120>
1a000aa0:	2300      	movs	r3, #0
1a000aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000aa6:	e023      	b.n	1a000af0 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a000aa8:	4620      	mov	r0, r4
1a000aaa:	f7ff febc 	bl	1a000826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000aae:	f000 fd81 	bl	1a0015b4 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000ab2:	f001 faf7 	bl	1a0020a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000ab6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000ab8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000aba:	429a      	cmp	r2, r3
1a000abc:	d3bf      	bcc.n	1a000a3e <xQueueGenericSend+0x7a>
1a000abe:	2e02      	cmp	r6, #2
1a000ac0:	d0bd      	beq.n	1a000a3e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000ac2:	9b01      	ldr	r3, [sp, #4]
1a000ac4:	2b00      	cmp	r3, #0
1a000ac6:	d0de      	beq.n	1a000a86 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a000ac8:	2d00      	cmp	r5, #0
1a000aca:	d0e0      	beq.n	1a000a8e <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a000acc:	f001 fb0c 	bl	1a0020e8 <vPortExitCritical>
		vTaskSuspendAll();
1a000ad0:	f000 fcd6 	bl	1a001480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ad4:	f001 fae6 	bl	1a0020a4 <vPortEnterCritical>
1a000ad8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000adc:	b25b      	sxtb	r3, r3
1a000ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ae2:	d0d9      	beq.n	1a000a98 <xQueueGenericSend+0xd4>
1a000ae4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000ae8:	b25b      	sxtb	r3, r3
1a000aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000aee:	d0d7      	beq.n	1a000aa0 <xQueueGenericSend+0xdc>
1a000af0:	f001 fafa 	bl	1a0020e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000af4:	a901      	add	r1, sp, #4
1a000af6:	a802      	add	r0, sp, #8
1a000af8:	f000 feec 	bl	1a0018d4 <xTaskCheckForTimeOut>
1a000afc:	b9c8      	cbnz	r0, 1a000b32 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000afe:	4620      	mov	r0, r4
1a000b00:	f7ff fe28 	bl	1a000754 <prvIsQueueFull>
1a000b04:	2800      	cmp	r0, #0
1a000b06:	d0cf      	beq.n	1a000aa8 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000b08:	9901      	ldr	r1, [sp, #4]
1a000b0a:	f104 0010 	add.w	r0, r4, #16
1a000b0e:	f000 fe5b 	bl	1a0017c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000b12:	4620      	mov	r0, r4
1a000b14:	f7ff fe87 	bl	1a000826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000b18:	f000 fd4c 	bl	1a0015b4 <xTaskResumeAll>
1a000b1c:	2800      	cmp	r0, #0
1a000b1e:	d1c8      	bne.n	1a000ab2 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a000b20:	4b07      	ldr	r3, [pc, #28]	; (1a000b40 <xQueueGenericSend+0x17c>)
1a000b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b26:	601a      	str	r2, [r3, #0]
1a000b28:	f3bf 8f4f 	dsb	sy
1a000b2c:	f3bf 8f6f 	isb	sy
1a000b30:	e7bf      	b.n	1a000ab2 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a000b32:	4620      	mov	r0, r4
1a000b34:	f7ff fe77 	bl	1a000826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000b38:	f000 fd3c 	bl	1a0015b4 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000b3c:	2000      	movs	r0, #0
1a000b3e:	e791      	b.n	1a000a64 <xQueueGenericSend+0xa0>
1a000b40:	e000ed04 	.word	0xe000ed04

1a000b44 <xQueueGenericSendFromISR>:
{
1a000b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000b48:	b178      	cbz	r0, 1a000b6a <xQueueGenericSendFromISR+0x26>
1a000b4a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b4c:	b1b1      	cbz	r1, 1a000b7c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000b4e:	2b02      	cmp	r3, #2
1a000b50:	d120      	bne.n	1a000b94 <xQueueGenericSendFromISR+0x50>
1a000b52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000b54:	2801      	cmp	r0, #1
1a000b56:	d01d      	beq.n	1a000b94 <xQueueGenericSendFromISR+0x50>
1a000b58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b5c:	f383 8811 	msr	BASEPRI, r3
1a000b60:	f3bf 8f6f 	isb	sy
1a000b64:	f3bf 8f4f 	dsb	sy
1a000b68:	e7fe      	b.n	1a000b68 <xQueueGenericSendFromISR+0x24>
1a000b6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b6e:	f383 8811 	msr	BASEPRI, r3
1a000b72:	f3bf 8f6f 	isb	sy
1a000b76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000b7a:	e7fe      	b.n	1a000b7a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b7c:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000b7e:	2800      	cmp	r0, #0
1a000b80:	d0e5      	beq.n	1a000b4e <xQueueGenericSendFromISR+0xa>
1a000b82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b86:	f383 8811 	msr	BASEPRI, r3
1a000b8a:	f3bf 8f6f 	isb	sy
1a000b8e:	f3bf 8f4f 	dsb	sy
1a000b92:	e7fe      	b.n	1a000b92 <xQueueGenericSendFromISR+0x4e>
1a000b94:	461f      	mov	r7, r3
1a000b96:	4690      	mov	r8, r2
1a000b98:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000b9a:	f001 fbad 	bl	1a0022f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000b9e:	f3ef 8611 	mrs	r6, BASEPRI
1a000ba2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ba6:	f383 8811 	msr	BASEPRI, r3
1a000baa:	f3bf 8f6f 	isb	sy
1a000bae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000bb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000bb6:	429a      	cmp	r2, r3
1a000bb8:	d306      	bcc.n	1a000bc8 <xQueueGenericSendFromISR+0x84>
1a000bba:	2f02      	cmp	r7, #2
1a000bbc:	d004      	beq.n	1a000bc8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a000bbe:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000bc0:	f386 8811 	msr	BASEPRI, r6
}
1a000bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a000bc8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000bcc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000bce:	463a      	mov	r2, r7
1a000bd0:	4649      	mov	r1, r9
1a000bd2:	4620      	mov	r0, r4
1a000bd4:	f7ff fdda 	bl	1a00078c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000bd8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000bdc:	d005      	beq.n	1a000bea <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000bde:	1c6b      	adds	r3, r5, #1
1a000be0:	b25b      	sxtb	r3, r3
1a000be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000be6:	2001      	movs	r0, #1
1a000be8:	e7ea      	b.n	1a000bc0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000bec:	b90b      	cbnz	r3, 1a000bf2 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a000bee:	2001      	movs	r0, #1
1a000bf0:	e7e6      	b.n	1a000bc0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000bf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bf6:	f000 fe1b 	bl	1a001830 <xTaskRemoveFromEventList>
1a000bfa:	b130      	cbz	r0, 1a000c0a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000bfc:	f1b8 0f00 	cmp.w	r8, #0
1a000c00:	d005      	beq.n	1a000c0e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000c02:	2001      	movs	r0, #1
1a000c04:	f8c8 0000 	str.w	r0, [r8]
1a000c08:	e7da      	b.n	1a000bc0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a000c0a:	2001      	movs	r0, #1
1a000c0c:	e7d8      	b.n	1a000bc0 <xQueueGenericSendFromISR+0x7c>
1a000c0e:	2001      	movs	r0, #1
1a000c10:	e7d6      	b.n	1a000bc0 <xQueueGenericSendFromISR+0x7c>
1a000c12:	Address 0x000000001a000c12 is out of bounds.


1a000c14 <xQueueReceive>:
{
1a000c14:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c16:	b085      	sub	sp, #20
1a000c18:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000c1a:	b180      	cbz	r0, 1a000c3e <xQueueReceive+0x2a>
1a000c1c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c1e:	b1b9      	cbz	r1, 1a000c50 <xQueueReceive+0x3c>
1a000c20:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000c22:	f000 fe9f 	bl	1a001964 <xTaskGetSchedulerState>
1a000c26:	b9f8      	cbnz	r0, 1a000c68 <xQueueReceive+0x54>
1a000c28:	9b01      	ldr	r3, [sp, #4]
1a000c2a:	b1fb      	cbz	r3, 1a000c6c <xQueueReceive+0x58>
	__asm volatile
1a000c2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c30:	f383 8811 	msr	BASEPRI, r3
1a000c34:	f3bf 8f6f 	isb	sy
1a000c38:	f3bf 8f4f 	dsb	sy
1a000c3c:	e7fe      	b.n	1a000c3c <xQueueReceive+0x28>
1a000c3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c42:	f383 8811 	msr	BASEPRI, r3
1a000c46:	f3bf 8f6f 	isb	sy
1a000c4a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000c4e:	e7fe      	b.n	1a000c4e <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c50:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000c52:	2b00      	cmp	r3, #0
1a000c54:	d0e4      	beq.n	1a000c20 <xQueueReceive+0xc>
1a000c56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c5a:	f383 8811 	msr	BASEPRI, r3
1a000c5e:	f3bf 8f6f 	isb	sy
1a000c62:	f3bf 8f4f 	dsb	sy
1a000c66:	e7fe      	b.n	1a000c66 <xQueueReceive+0x52>
1a000c68:	2600      	movs	r6, #0
1a000c6a:	e03e      	b.n	1a000cea <xQueueReceive+0xd6>
1a000c6c:	2600      	movs	r6, #0
1a000c6e:	e03c      	b.n	1a000cea <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000c70:	4639      	mov	r1, r7
1a000c72:	4620      	mov	r0, r4
1a000c74:	f7ff fdc5 	bl	1a000802 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000c78:	3d01      	subs	r5, #1
1a000c7a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c7c:	6923      	ldr	r3, [r4, #16]
1a000c7e:	b923      	cbnz	r3, 1a000c8a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a000c80:	f001 fa32 	bl	1a0020e8 <vPortExitCritical>
				return pdPASS;
1a000c84:	2001      	movs	r0, #1
}
1a000c86:	b005      	add	sp, #20
1a000c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c8a:	f104 0010 	add.w	r0, r4, #16
1a000c8e:	f000 fdcf 	bl	1a001830 <xTaskRemoveFromEventList>
1a000c92:	2800      	cmp	r0, #0
1a000c94:	d0f4      	beq.n	1a000c80 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a000c96:	4b35      	ldr	r3, [pc, #212]	; (1a000d6c <xQueueReceive+0x158>)
1a000c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c9c:	601a      	str	r2, [r3, #0]
1a000c9e:	f3bf 8f4f 	dsb	sy
1a000ca2:	f3bf 8f6f 	isb	sy
1a000ca6:	e7eb      	b.n	1a000c80 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a000ca8:	f001 fa1e 	bl	1a0020e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000cac:	2000      	movs	r0, #0
1a000cae:	e7ea      	b.n	1a000c86 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000cb0:	a802      	add	r0, sp, #8
1a000cb2:	f000 fe03 	bl	1a0018bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000cb6:	2601      	movs	r6, #1
1a000cb8:	e021      	b.n	1a000cfe <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a000cba:	2300      	movs	r3, #0
1a000cbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000cc0:	e029      	b.n	1a000d16 <xQueueReceive+0x102>
1a000cc2:	2300      	movs	r3, #0
1a000cc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000cc8:	e02b      	b.n	1a000d22 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a000cca:	4620      	mov	r0, r4
1a000ccc:	f7ff fdab 	bl	1a000826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000cd0:	f000 fc70 	bl	1a0015b4 <xTaskResumeAll>
1a000cd4:	e009      	b.n	1a000cea <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a000cd6:	4620      	mov	r0, r4
1a000cd8:	f7ff fda5 	bl	1a000826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000cdc:	f000 fc6a 	bl	1a0015b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000ce0:	4620      	mov	r0, r4
1a000ce2:	f7ff fd46 	bl	1a000772 <prvIsQueueEmpty>
1a000ce6:	2800      	cmp	r0, #0
1a000ce8:	d13d      	bne.n	1a000d66 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a000cea:	f001 f9db 	bl	1a0020a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000cee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000cf0:	2d00      	cmp	r5, #0
1a000cf2:	d1bd      	bne.n	1a000c70 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000cf4:	9b01      	ldr	r3, [sp, #4]
1a000cf6:	2b00      	cmp	r3, #0
1a000cf8:	d0d6      	beq.n	1a000ca8 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a000cfa:	2e00      	cmp	r6, #0
1a000cfc:	d0d8      	beq.n	1a000cb0 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a000cfe:	f001 f9f3 	bl	1a0020e8 <vPortExitCritical>
		vTaskSuspendAll();
1a000d02:	f000 fbbd 	bl	1a001480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000d06:	f001 f9cd 	bl	1a0020a4 <vPortEnterCritical>
1a000d0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000d0e:	b25b      	sxtb	r3, r3
1a000d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d14:	d0d1      	beq.n	1a000cba <xQueueReceive+0xa6>
1a000d16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000d1a:	b25b      	sxtb	r3, r3
1a000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d20:	d0cf      	beq.n	1a000cc2 <xQueueReceive+0xae>
1a000d22:	f001 f9e1 	bl	1a0020e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000d26:	a901      	add	r1, sp, #4
1a000d28:	a802      	add	r0, sp, #8
1a000d2a:	f000 fdd3 	bl	1a0018d4 <xTaskCheckForTimeOut>
1a000d2e:	2800      	cmp	r0, #0
1a000d30:	d1d1      	bne.n	1a000cd6 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000d32:	4620      	mov	r0, r4
1a000d34:	f7ff fd1d 	bl	1a000772 <prvIsQueueEmpty>
1a000d38:	2800      	cmp	r0, #0
1a000d3a:	d0c6      	beq.n	1a000cca <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000d3c:	9901      	ldr	r1, [sp, #4]
1a000d3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d42:	f000 fd41 	bl	1a0017c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000d46:	4620      	mov	r0, r4
1a000d48:	f7ff fd6d 	bl	1a000826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000d4c:	f000 fc32 	bl	1a0015b4 <xTaskResumeAll>
1a000d50:	2800      	cmp	r0, #0
1a000d52:	d1ca      	bne.n	1a000cea <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a000d54:	4b05      	ldr	r3, [pc, #20]	; (1a000d6c <xQueueReceive+0x158>)
1a000d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d5a:	601a      	str	r2, [r3, #0]
1a000d5c:	f3bf 8f4f 	dsb	sy
1a000d60:	f3bf 8f6f 	isb	sy
1a000d64:	e7c1      	b.n	1a000cea <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a000d66:	2000      	movs	r0, #0
1a000d68:	e78d      	b.n	1a000c86 <xQueueReceive+0x72>
1a000d6a:	bf00      	nop
1a000d6c:	e000ed04 	.word	0xe000ed04

1a000d70 <xQueueSemaphoreTake>:
{
1a000d70:	b570      	push	{r4, r5, r6, lr}
1a000d72:	b084      	sub	sp, #16
1a000d74:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000d76:	b158      	cbz	r0, 1a000d90 <xQueueSemaphoreTake+0x20>
1a000d78:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000d7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000d7c:	b18b      	cbz	r3, 1a000da2 <xQueueSemaphoreTake+0x32>
1a000d7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d82:	f383 8811 	msr	BASEPRI, r3
1a000d86:	f3bf 8f6f 	isb	sy
1a000d8a:	f3bf 8f4f 	dsb	sy
1a000d8e:	e7fe      	b.n	1a000d8e <xQueueSemaphoreTake+0x1e>
1a000d90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d94:	f383 8811 	msr	BASEPRI, r3
1a000d98:	f3bf 8f6f 	isb	sy
1a000d9c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000da0:	e7fe      	b.n	1a000da0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000da2:	f000 fddf 	bl	1a001964 <xTaskGetSchedulerState>
1a000da6:	b950      	cbnz	r0, 1a000dbe <xQueueSemaphoreTake+0x4e>
1a000da8:	9b01      	ldr	r3, [sp, #4]
1a000daa:	b15b      	cbz	r3, 1a000dc4 <xQueueSemaphoreTake+0x54>
1a000dac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000db0:	f383 8811 	msr	BASEPRI, r3
1a000db4:	f3bf 8f6f 	isb	sy
1a000db8:	f3bf 8f4f 	dsb	sy
1a000dbc:	e7fe      	b.n	1a000dbc <xQueueSemaphoreTake+0x4c>
1a000dbe:	2500      	movs	r5, #0
1a000dc0:	462e      	mov	r6, r5
1a000dc2:	e054      	b.n	1a000e6e <xQueueSemaphoreTake+0xfe>
1a000dc4:	2500      	movs	r5, #0
1a000dc6:	462e      	mov	r6, r5
1a000dc8:	e051      	b.n	1a000e6e <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000dca:	3b01      	subs	r3, #1
1a000dcc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000dce:	6823      	ldr	r3, [r4, #0]
1a000dd0:	b13b      	cbz	r3, 1a000de2 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000dd2:	6923      	ldr	r3, [r4, #16]
1a000dd4:	b94b      	cbnz	r3, 1a000dea <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
1a000dd6:	f001 f987 	bl	1a0020e8 <vPortExitCritical>
				return pdPASS;
1a000dda:	2501      	movs	r5, #1
}
1a000ddc:	4628      	mov	r0, r5
1a000dde:	b004      	add	sp, #16
1a000de0:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a000de2:	f000 fee7 	bl	1a001bb4 <pvTaskIncrementMutexHeldCount>
1a000de6:	6060      	str	r0, [r4, #4]
1a000de8:	e7f3      	b.n	1a000dd2 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000dea:	f104 0010 	add.w	r0, r4, #16
1a000dee:	f000 fd1f 	bl	1a001830 <xTaskRemoveFromEventList>
1a000df2:	2800      	cmp	r0, #0
1a000df4:	d0ef      	beq.n	1a000dd6 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
1a000df6:	4b46      	ldr	r3, [pc, #280]	; (1a000f10 <xQueueSemaphoreTake+0x1a0>)
1a000df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000dfc:	601a      	str	r2, [r3, #0]
1a000dfe:	f3bf 8f4f 	dsb	sy
1a000e02:	f3bf 8f6f 	isb	sy
1a000e06:	e7e6      	b.n	1a000dd6 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
1a000e08:	b145      	cbz	r5, 1a000e1c <xQueueSemaphoreTake+0xac>
1a000e0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e0e:	f383 8811 	msr	BASEPRI, r3
1a000e12:	f3bf 8f6f 	isb	sy
1a000e16:	f3bf 8f4f 	dsb	sy
1a000e1a:	e7fe      	b.n	1a000e1a <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a000e1c:	f001 f964 	bl	1a0020e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000e20:	e7dc      	b.n	1a000ddc <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000e22:	a802      	add	r0, sp, #8
1a000e24:	f000 fd4a 	bl	1a0018bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000e28:	2601      	movs	r6, #1
1a000e2a:	e02a      	b.n	1a000e82 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a000e2c:	2300      	movs	r3, #0
1a000e2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000e32:	e032      	b.n	1a000e9a <xQueueSemaphoreTake+0x12a>
1a000e34:	2300      	movs	r3, #0
1a000e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000e3a:	e034      	b.n	1a000ea6 <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a000e3c:	f001 f932 	bl	1a0020a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a000e40:	6860      	ldr	r0, [r4, #4]
1a000e42:	f000 fd9f 	bl	1a001984 <xTaskPriorityInherit>
1a000e46:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a000e48:	f001 f94e 	bl	1a0020e8 <vPortExitCritical>
1a000e4c:	e03b      	b.n	1a000ec6 <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a000e4e:	4620      	mov	r0, r4
1a000e50:	f7ff fce9 	bl	1a000826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000e54:	f000 fbae 	bl	1a0015b4 <xTaskResumeAll>
1a000e58:	e009      	b.n	1a000e6e <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a000e5a:	4620      	mov	r0, r4
1a000e5c:	f7ff fce3 	bl	1a000826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e60:	f000 fba8 	bl	1a0015b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e64:	4620      	mov	r0, r4
1a000e66:	f7ff fc84 	bl	1a000772 <prvIsQueueEmpty>
1a000e6a:	2800      	cmp	r0, #0
1a000e6c:	d140      	bne.n	1a000ef0 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a000e6e:	f001 f919 	bl	1a0020a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a000e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a000e74:	2b00      	cmp	r3, #0
1a000e76:	d1a8      	bne.n	1a000dca <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000e78:	9b01      	ldr	r3, [sp, #4]
1a000e7a:	2b00      	cmp	r3, #0
1a000e7c:	d0c4      	beq.n	1a000e08 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a000e7e:	2e00      	cmp	r6, #0
1a000e80:	d0cf      	beq.n	1a000e22 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a000e82:	f001 f931 	bl	1a0020e8 <vPortExitCritical>
		vTaskSuspendAll();
1a000e86:	f000 fafb 	bl	1a001480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000e8a:	f001 f90b 	bl	1a0020a4 <vPortEnterCritical>
1a000e8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e92:	b25b      	sxtb	r3, r3
1a000e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e98:	d0c8      	beq.n	1a000e2c <xQueueSemaphoreTake+0xbc>
1a000e9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e9e:	b25b      	sxtb	r3, r3
1a000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ea4:	d0c6      	beq.n	1a000e34 <xQueueSemaphoreTake+0xc4>
1a000ea6:	f001 f91f 	bl	1a0020e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000eaa:	a901      	add	r1, sp, #4
1a000eac:	a802      	add	r0, sp, #8
1a000eae:	f000 fd11 	bl	1a0018d4 <xTaskCheckForTimeOut>
1a000eb2:	2800      	cmp	r0, #0
1a000eb4:	d1d1      	bne.n	1a000e5a <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000eb6:	4620      	mov	r0, r4
1a000eb8:	f7ff fc5b 	bl	1a000772 <prvIsQueueEmpty>
1a000ebc:	2800      	cmp	r0, #0
1a000ebe:	d0c6      	beq.n	1a000e4e <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000ec0:	6823      	ldr	r3, [r4, #0]
1a000ec2:	2b00      	cmp	r3, #0
1a000ec4:	d0ba      	beq.n	1a000e3c <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000ec6:	9901      	ldr	r1, [sp, #4]
1a000ec8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000ecc:	f000 fc7c 	bl	1a0017c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000ed0:	4620      	mov	r0, r4
1a000ed2:	f7ff fca8 	bl	1a000826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000ed6:	f000 fb6d 	bl	1a0015b4 <xTaskResumeAll>
1a000eda:	2800      	cmp	r0, #0
1a000edc:	d1c7      	bne.n	1a000e6e <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a000ede:	4b0c      	ldr	r3, [pc, #48]	; (1a000f10 <xQueueSemaphoreTake+0x1a0>)
1a000ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ee4:	601a      	str	r2, [r3, #0]
1a000ee6:	f3bf 8f4f 	dsb	sy
1a000eea:	f3bf 8f6f 	isb	sy
1a000eee:	e7be      	b.n	1a000e6e <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a000ef0:	b90d      	cbnz	r5, 1a000ef6 <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
1a000ef2:	2500      	movs	r5, #0
1a000ef4:	e772      	b.n	1a000ddc <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
1a000ef6:	f001 f8d5 	bl	1a0020a4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a000efa:	4620      	mov	r0, r4
1a000efc:	f7ff fc21 	bl	1a000742 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a000f00:	4601      	mov	r1, r0
1a000f02:	6860      	ldr	r0, [r4, #4]
1a000f04:	f000 fdf6 	bl	1a001af4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a000f08:	f001 f8ee 	bl	1a0020e8 <vPortExitCritical>
1a000f0c:	e7f1      	b.n	1a000ef2 <xQueueSemaphoreTake+0x182>
1a000f0e:	bf00      	nop
1a000f10:	e000ed04 	.word	0xe000ed04

1a000f14 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
1a000f14:	b140      	cbz	r0, 1a000f28 <uxQueueMessagesWaiting+0x14>
{
1a000f16:	b510      	push	{r4, lr}
1a000f18:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000f1a:	f001 f8c3 	bl	1a0020a4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1a000f1e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
1a000f20:	f001 f8e2 	bl	1a0020e8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a000f24:	4620      	mov	r0, r4
1a000f26:	bd10      	pop	{r4, pc}
1a000f28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f2c:	f383 8811 	msr	BASEPRI, r3
1a000f30:	f3bf 8f6f 	isb	sy
1a000f34:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
1a000f38:	e7fe      	b.n	1a000f38 <uxQueueMessagesWaiting+0x24>
1a000f3a:	Address 0x000000001a000f3a is out of bounds.


1a000f3c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000f3c:	2300      	movs	r3, #0
1a000f3e:	2b07      	cmp	r3, #7
1a000f40:	d80c      	bhi.n	1a000f5c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000f42:	4a07      	ldr	r2, [pc, #28]	; (1a000f60 <vQueueAddToRegistry+0x24>)
1a000f44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000f48:	b10a      	cbz	r2, 1a000f4e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000f4a:	3301      	adds	r3, #1
1a000f4c:	e7f7      	b.n	1a000f3e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000f4e:	4a04      	ldr	r2, [pc, #16]	; (1a000f60 <vQueueAddToRegistry+0x24>)
1a000f50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000f54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000f58:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000f5a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000f5c:	4770      	bx	lr
1a000f5e:	bf00      	nop
1a000f60:	10002250 	.word	0x10002250

1a000f64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000f64:	b570      	push	{r4, r5, r6, lr}
1a000f66:	4604      	mov	r4, r0
1a000f68:	460d      	mov	r5, r1
1a000f6a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000f6c:	f001 f89a 	bl	1a0020a4 <vPortEnterCritical>
1a000f70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f74:	b25b      	sxtb	r3, r3
1a000f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f7a:	d00d      	beq.n	1a000f98 <vQueueWaitForMessageRestricted+0x34>
1a000f7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f80:	b25b      	sxtb	r3, r3
1a000f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f86:	d00b      	beq.n	1a000fa0 <vQueueWaitForMessageRestricted+0x3c>
1a000f88:	f001 f8ae 	bl	1a0020e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000f8e:	b15b      	cbz	r3, 1a000fa8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000f90:	4620      	mov	r0, r4
1a000f92:	f7ff fc48 	bl	1a000826 <prvUnlockQueue>
	}
1a000f96:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000f98:	2300      	movs	r3, #0
1a000f9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000f9e:	e7ed      	b.n	1a000f7c <vQueueWaitForMessageRestricted+0x18>
1a000fa0:	2300      	movs	r3, #0
1a000fa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000fa6:	e7ef      	b.n	1a000f88 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000fa8:	4632      	mov	r2, r6
1a000faa:	4629      	mov	r1, r5
1a000fac:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000fb0:	f000 fc22 	bl	1a0017f8 <vTaskPlaceOnEventListRestricted>
1a000fb4:	e7ec      	b.n	1a000f90 <vQueueWaitForMessageRestricted+0x2c>

1a000fb6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000fb6:	f100 0308 	add.w	r3, r0, #8
1a000fba:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000fc0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000fc2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000fc4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000fc6:	2300      	movs	r3, #0
1a000fc8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000fca:	4770      	bx	lr

1a000fcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000fcc:	2300      	movs	r3, #0
1a000fce:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000fd0:	4770      	bx	lr

1a000fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000fd2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000fd4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000fd6:	689a      	ldr	r2, [r3, #8]
1a000fd8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000fda:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000fdc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000fde:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000fe0:	6803      	ldr	r3, [r0, #0]
1a000fe2:	3301      	adds	r3, #1
1a000fe4:	6003      	str	r3, [r0, #0]
}
1a000fe6:	4770      	bx	lr

1a000fe8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000fe8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000fea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000fec:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000ff0:	d002      	beq.n	1a000ff8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ff2:	f100 0208 	add.w	r2, r0, #8
1a000ff6:	e002      	b.n	1a000ffe <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000ff8:	6902      	ldr	r2, [r0, #16]
1a000ffa:	e004      	b.n	1a001006 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ffc:	461a      	mov	r2, r3
1a000ffe:	6853      	ldr	r3, [r2, #4]
1a001000:	681c      	ldr	r4, [r3, #0]
1a001002:	42ac      	cmp	r4, r5
1a001004:	d9fa      	bls.n	1a000ffc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001006:	6853      	ldr	r3, [r2, #4]
1a001008:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00100a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00100c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a00100e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001010:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001012:	6803      	ldr	r3, [r0, #0]
1a001014:	3301      	adds	r3, #1
1a001016:	6003      	str	r3, [r0, #0]
}
1a001018:	bc30      	pop	{r4, r5}
1a00101a:	4770      	bx	lr

1a00101c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00101c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a00101e:	6841      	ldr	r1, [r0, #4]
1a001020:	6882      	ldr	r2, [r0, #8]
1a001022:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001024:	6841      	ldr	r1, [r0, #4]
1a001026:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001028:	685a      	ldr	r2, [r3, #4]
1a00102a:	4282      	cmp	r2, r0
1a00102c:	d006      	beq.n	1a00103c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00102e:	2200      	movs	r2, #0
1a001030:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001032:	681a      	ldr	r2, [r3, #0]
1a001034:	3a01      	subs	r2, #1
1a001036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001038:	6818      	ldr	r0, [r3, #0]
}
1a00103a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a00103c:	6882      	ldr	r2, [r0, #8]
1a00103e:	605a      	str	r2, [r3, #4]
1a001040:	e7f5      	b.n	1a00102e <uxListRemove+0x12>
1a001042:	Address 0x000000001a001042 is out of bounds.


1a001044 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001044:	b510      	push	{r4, lr}
1a001046:	b082      	sub	sp, #8
1a001048:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a00104a:	9001      	str	r0, [sp, #4]
1a00104c:	2300      	movs	r3, #0
1a00104e:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001050:	f001 f828 	bl	1a0020a4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001054:	9901      	ldr	r1, [sp, #4]
1a001056:	4622      	mov	r2, r4
1a001058:	4804      	ldr	r0, [pc, #16]	; (1a00106c <vAssertCalled+0x28>)
1a00105a:	f003 f92b 	bl	1a0042b4 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00105e:	9b00      	ldr	r3, [sp, #0]
1a001060:	2b00      	cmp	r3, #0
1a001062:	d0fc      	beq.n	1a00105e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001064:	f001 f840 	bl	1a0020e8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001068:	b002      	add	sp, #8
1a00106a:	bd10      	pop	{r4, pc}
1a00106c:	1a004830 	.word	0x1a004830

1a001070 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001070:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001072:	4804      	ldr	r0, [pc, #16]	; (1a001084 <vApplicationMallocFailedHook+0x14>)
1a001074:	f003 f9a4 	bl	1a0043c0 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001078:	4903      	ldr	r1, [pc, #12]	; (1a001088 <vApplicationMallocFailedHook+0x18>)
1a00107a:	202c      	movs	r0, #44	; 0x2c
1a00107c:	f7ff ffe2 	bl	1a001044 <vAssertCalled>
}
1a001080:	bd08      	pop	{r3, pc}
1a001082:	bf00      	nop
1a001084:	1a0047bc 	.word	0x1a0047bc
1a001088:	1a0047e0 	.word	0x1a0047e0

1a00108c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a00108c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00108e:	4804      	ldr	r0, [pc, #16]	; (1a0010a0 <vApplicationStackOverflowHook+0x14>)
1a001090:	f003 f910 	bl	1a0042b4 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001094:	4903      	ldr	r1, [pc, #12]	; (1a0010a4 <vApplicationStackOverflowHook+0x18>)
1a001096:	2050      	movs	r0, #80	; 0x50
1a001098:	f7ff ffd4 	bl	1a001044 <vAssertCalled>
}
1a00109c:	bd08      	pop	{r3, pc}
1a00109e:	bf00      	nop
1a0010a0:	1a004800 	.word	0x1a004800
1a0010a4:	1a0047e0 	.word	0x1a0047e0

1a0010a8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0010a8:	4b08      	ldr	r3, [pc, #32]	; (1a0010cc <prvResetNextTaskUnblockTime+0x24>)
1a0010aa:	681b      	ldr	r3, [r3, #0]
1a0010ac:	681b      	ldr	r3, [r3, #0]
1a0010ae:	b923      	cbnz	r3, 1a0010ba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a0010b0:	4b07      	ldr	r3, [pc, #28]	; (1a0010d0 <prvResetNextTaskUnblockTime+0x28>)
1a0010b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0010b6:	601a      	str	r2, [r3, #0]
1a0010b8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0010ba:	4b04      	ldr	r3, [pc, #16]	; (1a0010cc <prvResetNextTaskUnblockTime+0x24>)
1a0010bc:	681b      	ldr	r3, [r3, #0]
1a0010be:	68db      	ldr	r3, [r3, #12]
1a0010c0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0010c2:	685a      	ldr	r2, [r3, #4]
1a0010c4:	4b02      	ldr	r3, [pc, #8]	; (1a0010d0 <prvResetNextTaskUnblockTime+0x28>)
1a0010c6:	601a      	str	r2, [r3, #0]
	}
}
1a0010c8:	4770      	bx	lr
1a0010ca:	bf00      	nop
1a0010cc:	100020b8 	.word	0x100020b8
1a0010d0:	10002190 	.word	0x10002190

1a0010d4 <prvDeleteTCB>:
	{
1a0010d4:	b510      	push	{r4, lr}
1a0010d6:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
1a0010d8:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0010da:	f7ff fb27 	bl	1a00072c <vPortFree>
			vPortFree( pxTCB );
1a0010de:	4620      	mov	r0, r4
1a0010e0:	f7ff fb24 	bl	1a00072c <vPortFree>
	}
1a0010e4:	bd10      	pop	{r4, pc}

1a0010e6 <prvInitialiseNewTask>:
{
1a0010e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0010ea:	4681      	mov	r9, r0
1a0010ec:	460d      	mov	r5, r1
1a0010ee:	4617      	mov	r7, r2
1a0010f0:	469a      	mov	sl, r3
1a0010f2:	9e08      	ldr	r6, [sp, #32]
1a0010f4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0010f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0010fa:	0092      	lsls	r2, r2, #2
1a0010fc:	21a5      	movs	r1, #165	; 0xa5
1a0010fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001100:	f002 fd4b 	bl	1a003b9a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001104:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001106:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a00110a:	3a01      	subs	r2, #1
1a00110c:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001110:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001114:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001116:	2300      	movs	r3, #0
1a001118:	2b0f      	cmp	r3, #15
1a00111a:	d806      	bhi.n	1a00112a <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a00111c:	5cea      	ldrb	r2, [r5, r3]
1a00111e:	18e1      	adds	r1, r4, r3
1a001120:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001124:	b10a      	cbz	r2, 1a00112a <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001126:	3301      	adds	r3, #1
1a001128:	e7f6      	b.n	1a001118 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a00112a:	2300      	movs	r3, #0
1a00112c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001130:	2e06      	cmp	r6, #6
1a001132:	d900      	bls.n	1a001136 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001134:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001136:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001138:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00113a:	2500      	movs	r5, #0
1a00113c:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00113e:	1d20      	adds	r0, r4, #4
1a001140:	f7ff ff44 	bl	1a000fcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001144:	f104 0018 	add.w	r0, r4, #24
1a001148:	f7ff ff40 	bl	1a000fcc <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00114c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00114e:	f1c6 0607 	rsb	r6, r6, #7
1a001152:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001154:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001156:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001158:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a00115c:	4652      	mov	r2, sl
1a00115e:	4649      	mov	r1, r9
1a001160:	4638      	mov	r0, r7
1a001162:	f000 ff75 	bl	1a002050 <pxPortInitialiseStack>
1a001166:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001168:	f1b8 0f00 	cmp.w	r8, #0
1a00116c:	d001      	beq.n	1a001172 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00116e:	f8c8 4000 	str.w	r4, [r8]
}
1a001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001176:	Address 0x000000001a001176 is out of bounds.


1a001178 <prvInitialiseTaskLists>:
{
1a001178:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00117a:	2400      	movs	r4, #0
1a00117c:	2c06      	cmp	r4, #6
1a00117e:	d808      	bhi.n	1a001192 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001180:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001184:	0093      	lsls	r3, r2, #2
1a001186:	480e      	ldr	r0, [pc, #56]	; (1a0011c0 <prvInitialiseTaskLists+0x48>)
1a001188:	4418      	add	r0, r3
1a00118a:	f7ff ff14 	bl	1a000fb6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00118e:	3401      	adds	r4, #1
1a001190:	e7f4      	b.n	1a00117c <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a001192:	4d0c      	ldr	r5, [pc, #48]	; (1a0011c4 <prvInitialiseTaskLists+0x4c>)
1a001194:	4628      	mov	r0, r5
1a001196:	f7ff ff0e 	bl	1a000fb6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00119a:	4c0b      	ldr	r4, [pc, #44]	; (1a0011c8 <prvInitialiseTaskLists+0x50>)
1a00119c:	4620      	mov	r0, r4
1a00119e:	f7ff ff0a 	bl	1a000fb6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0011a2:	480a      	ldr	r0, [pc, #40]	; (1a0011cc <prvInitialiseTaskLists+0x54>)
1a0011a4:	f7ff ff07 	bl	1a000fb6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0011a8:	4809      	ldr	r0, [pc, #36]	; (1a0011d0 <prvInitialiseTaskLists+0x58>)
1a0011aa:	f7ff ff04 	bl	1a000fb6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0011ae:	4809      	ldr	r0, [pc, #36]	; (1a0011d4 <prvInitialiseTaskLists+0x5c>)
1a0011b0:	f7ff ff01 	bl	1a000fb6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0011b4:	4b08      	ldr	r3, [pc, #32]	; (1a0011d8 <prvInitialiseTaskLists+0x60>)
1a0011b6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0011b8:	4b08      	ldr	r3, [pc, #32]	; (1a0011dc <prvInitialiseTaskLists+0x64>)
1a0011ba:	601c      	str	r4, [r3, #0]
}
1a0011bc:	bd38      	pop	{r3, r4, r5, pc}
1a0011be:	bf00      	nop
1a0011c0:	100020c0 	.word	0x100020c0
1a0011c4:	10002164 	.word	0x10002164
1a0011c8:	10002178 	.word	0x10002178
1a0011cc:	10002198 	.word	0x10002198
1a0011d0:	100021c4 	.word	0x100021c4
1a0011d4:	100021b0 	.word	0x100021b0
1a0011d8:	100020b8 	.word	0x100020b8
1a0011dc:	100020bc 	.word	0x100020bc

1a0011e0 <prvAddNewTaskToReadyList>:
{
1a0011e0:	b510      	push	{r4, lr}
1a0011e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0011e4:	f000 ff5e 	bl	1a0020a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0011e8:	4a21      	ldr	r2, [pc, #132]	; (1a001270 <prvAddNewTaskToReadyList+0x90>)
1a0011ea:	6813      	ldr	r3, [r2, #0]
1a0011ec:	3301      	adds	r3, #1
1a0011ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0011f0:	4b20      	ldr	r3, [pc, #128]	; (1a001274 <prvAddNewTaskToReadyList+0x94>)
1a0011f2:	681b      	ldr	r3, [r3, #0]
1a0011f4:	b15b      	cbz	r3, 1a00120e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0011f6:	4b20      	ldr	r3, [pc, #128]	; (1a001278 <prvAddNewTaskToReadyList+0x98>)
1a0011f8:	681b      	ldr	r3, [r3, #0]
1a0011fa:	b96b      	cbnz	r3, 1a001218 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0011fc:	4b1d      	ldr	r3, [pc, #116]	; (1a001274 <prvAddNewTaskToReadyList+0x94>)
1a0011fe:	681b      	ldr	r3, [r3, #0]
1a001200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001204:	429a      	cmp	r2, r3
1a001206:	d807      	bhi.n	1a001218 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001208:	4b1a      	ldr	r3, [pc, #104]	; (1a001274 <prvAddNewTaskToReadyList+0x94>)
1a00120a:	601c      	str	r4, [r3, #0]
1a00120c:	e004      	b.n	1a001218 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00120e:	4b19      	ldr	r3, [pc, #100]	; (1a001274 <prvAddNewTaskToReadyList+0x94>)
1a001210:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001212:	6813      	ldr	r3, [r2, #0]
1a001214:	2b01      	cmp	r3, #1
1a001216:	d027      	beq.n	1a001268 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001218:	4a18      	ldr	r2, [pc, #96]	; (1a00127c <prvAddNewTaskToReadyList+0x9c>)
1a00121a:	6813      	ldr	r3, [r2, #0]
1a00121c:	3301      	adds	r3, #1
1a00121e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001220:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001222:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001224:	2201      	movs	r2, #1
1a001226:	409a      	lsls	r2, r3
1a001228:	4915      	ldr	r1, [pc, #84]	; (1a001280 <prvAddNewTaskToReadyList+0xa0>)
1a00122a:	6808      	ldr	r0, [r1, #0]
1a00122c:	4302      	orrs	r2, r0
1a00122e:	600a      	str	r2, [r1, #0]
1a001230:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001234:	009a      	lsls	r2, r3, #2
1a001236:	1d21      	adds	r1, r4, #4
1a001238:	4812      	ldr	r0, [pc, #72]	; (1a001284 <prvAddNewTaskToReadyList+0xa4>)
1a00123a:	4410      	add	r0, r2
1a00123c:	f7ff fec9 	bl	1a000fd2 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001240:	f000 ff52 	bl	1a0020e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001244:	4b0c      	ldr	r3, [pc, #48]	; (1a001278 <prvAddNewTaskToReadyList+0x98>)
1a001246:	681b      	ldr	r3, [r3, #0]
1a001248:	b16b      	cbz	r3, 1a001266 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00124a:	4b0a      	ldr	r3, [pc, #40]	; (1a001274 <prvAddNewTaskToReadyList+0x94>)
1a00124c:	681b      	ldr	r3, [r3, #0]
1a00124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001252:	429a      	cmp	r2, r3
1a001254:	d207      	bcs.n	1a001266 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001256:	4b0c      	ldr	r3, [pc, #48]	; (1a001288 <prvAddNewTaskToReadyList+0xa8>)
1a001258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00125c:	601a      	str	r2, [r3, #0]
1a00125e:	f3bf 8f4f 	dsb	sy
1a001262:	f3bf 8f6f 	isb	sy
}
1a001266:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001268:	f7ff ff86 	bl	1a001178 <prvInitialiseTaskLists>
1a00126c:	e7d4      	b.n	1a001218 <prvAddNewTaskToReadyList+0x38>
1a00126e:	bf00      	nop
1a001270:	1000214c 	.word	0x1000214c
1a001274:	100020b4 	.word	0x100020b4
1a001278:	100021ac 	.word	0x100021ac
1a00127c:	1000215c 	.word	0x1000215c
1a001280:	10002160 	.word	0x10002160
1a001284:	100020c0 	.word	0x100020c0
1a001288:	e000ed04 	.word	0xe000ed04

1a00128c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00128c:	4b0f      	ldr	r3, [pc, #60]	; (1a0012cc <prvCheckTasksWaitingTermination+0x40>)
1a00128e:	681b      	ldr	r3, [r3, #0]
1a001290:	b1d3      	cbz	r3, 1a0012c8 <prvCheckTasksWaitingTermination+0x3c>
{
1a001292:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001294:	f000 ff06 	bl	1a0020a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001298:	4b0d      	ldr	r3, [pc, #52]	; (1a0012d0 <prvCheckTasksWaitingTermination+0x44>)
1a00129a:	68db      	ldr	r3, [r3, #12]
1a00129c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00129e:	1d20      	adds	r0, r4, #4
1a0012a0:	f7ff febc 	bl	1a00101c <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0012a4:	4a0b      	ldr	r2, [pc, #44]	; (1a0012d4 <prvCheckTasksWaitingTermination+0x48>)
1a0012a6:	6813      	ldr	r3, [r2, #0]
1a0012a8:	3b01      	subs	r3, #1
1a0012aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0012ac:	4a07      	ldr	r2, [pc, #28]	; (1a0012cc <prvCheckTasksWaitingTermination+0x40>)
1a0012ae:	6813      	ldr	r3, [r2, #0]
1a0012b0:	3b01      	subs	r3, #1
1a0012b2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0012b4:	f000 ff18 	bl	1a0020e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0012b8:	4620      	mov	r0, r4
1a0012ba:	f7ff ff0b 	bl	1a0010d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0012be:	4b03      	ldr	r3, [pc, #12]	; (1a0012cc <prvCheckTasksWaitingTermination+0x40>)
1a0012c0:	681b      	ldr	r3, [r3, #0]
1a0012c2:	2b00      	cmp	r3, #0
1a0012c4:	d1e6      	bne.n	1a001294 <prvCheckTasksWaitingTermination+0x8>
}
1a0012c6:	bd10      	pop	{r4, pc}
1a0012c8:	4770      	bx	lr
1a0012ca:	bf00      	nop
1a0012cc:	10002150 	.word	0x10002150
1a0012d0:	100021c4 	.word	0x100021c4
1a0012d4:	1000214c 	.word	0x1000214c

1a0012d8 <prvIdleTask>:
{
1a0012d8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0012da:	f7ff ffd7 	bl	1a00128c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0012de:	4b06      	ldr	r3, [pc, #24]	; (1a0012f8 <prvIdleTask+0x20>)
1a0012e0:	681b      	ldr	r3, [r3, #0]
1a0012e2:	2b01      	cmp	r3, #1
1a0012e4:	d9f9      	bls.n	1a0012da <prvIdleTask+0x2>
				taskYIELD();
1a0012e6:	4b05      	ldr	r3, [pc, #20]	; (1a0012fc <prvIdleTask+0x24>)
1a0012e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012ec:	601a      	str	r2, [r3, #0]
1a0012ee:	f3bf 8f4f 	dsb	sy
1a0012f2:	f3bf 8f6f 	isb	sy
1a0012f6:	e7f0      	b.n	1a0012da <prvIdleTask+0x2>
1a0012f8:	100020c0 	.word	0x100020c0
1a0012fc:	e000ed04 	.word	0xe000ed04

1a001300 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001300:	b570      	push	{r4, r5, r6, lr}
1a001302:	4604      	mov	r4, r0
1a001304:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001306:	4b1d      	ldr	r3, [pc, #116]	; (1a00137c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001308:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00130a:	4b1d      	ldr	r3, [pc, #116]	; (1a001380 <prvAddCurrentTaskToDelayedList+0x80>)
1a00130c:	6818      	ldr	r0, [r3, #0]
1a00130e:	3004      	adds	r0, #4
1a001310:	f7ff fe84 	bl	1a00101c <uxListRemove>
1a001314:	b950      	cbnz	r0, 1a00132c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001316:	4b1a      	ldr	r3, [pc, #104]	; (1a001380 <prvAddCurrentTaskToDelayedList+0x80>)
1a001318:	681b      	ldr	r3, [r3, #0]
1a00131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00131c:	2301      	movs	r3, #1
1a00131e:	fa03 f202 	lsl.w	r2, r3, r2
1a001322:	4918      	ldr	r1, [pc, #96]	; (1a001384 <prvAddCurrentTaskToDelayedList+0x84>)
1a001324:	680b      	ldr	r3, [r1, #0]
1a001326:	ea23 0302 	bic.w	r3, r3, r2
1a00132a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00132c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001330:	d00d      	beq.n	1a00134e <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001332:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001334:	4b12      	ldr	r3, [pc, #72]	; (1a001380 <prvAddCurrentTaskToDelayedList+0x80>)
1a001336:	681b      	ldr	r3, [r3, #0]
1a001338:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00133a:	42a5      	cmp	r5, r4
1a00133c:	d910      	bls.n	1a001360 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00133e:	4b12      	ldr	r3, [pc, #72]	; (1a001388 <prvAddCurrentTaskToDelayedList+0x88>)
1a001340:	6818      	ldr	r0, [r3, #0]
1a001342:	4b0f      	ldr	r3, [pc, #60]	; (1a001380 <prvAddCurrentTaskToDelayedList+0x80>)
1a001344:	6819      	ldr	r1, [r3, #0]
1a001346:	3104      	adds	r1, #4
1a001348:	f7ff fe4e 	bl	1a000fe8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00134c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00134e:	2e00      	cmp	r6, #0
1a001350:	d0ef      	beq.n	1a001332 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001352:	4b0b      	ldr	r3, [pc, #44]	; (1a001380 <prvAddCurrentTaskToDelayedList+0x80>)
1a001354:	6819      	ldr	r1, [r3, #0]
1a001356:	3104      	adds	r1, #4
1a001358:	480c      	ldr	r0, [pc, #48]	; (1a00138c <prvAddCurrentTaskToDelayedList+0x8c>)
1a00135a:	f7ff fe3a 	bl	1a000fd2 <vListInsertEnd>
1a00135e:	e7f5      	b.n	1a00134c <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001360:	4b0b      	ldr	r3, [pc, #44]	; (1a001390 <prvAddCurrentTaskToDelayedList+0x90>)
1a001362:	6818      	ldr	r0, [r3, #0]
1a001364:	4b06      	ldr	r3, [pc, #24]	; (1a001380 <prvAddCurrentTaskToDelayedList+0x80>)
1a001366:	6819      	ldr	r1, [r3, #0]
1a001368:	3104      	adds	r1, #4
1a00136a:	f7ff fe3d 	bl	1a000fe8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a00136e:	4b09      	ldr	r3, [pc, #36]	; (1a001394 <prvAddCurrentTaskToDelayedList+0x94>)
1a001370:	681b      	ldr	r3, [r3, #0]
1a001372:	42a3      	cmp	r3, r4
1a001374:	d9ea      	bls.n	1a00134c <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a001376:	4b07      	ldr	r3, [pc, #28]	; (1a001394 <prvAddCurrentTaskToDelayedList+0x94>)
1a001378:	601c      	str	r4, [r3, #0]
}
1a00137a:	e7e7      	b.n	1a00134c <prvAddCurrentTaskToDelayedList+0x4c>
1a00137c:	100021d8 	.word	0x100021d8
1a001380:	100020b4 	.word	0x100020b4
1a001384:	10002160 	.word	0x10002160
1a001388:	100020bc 	.word	0x100020bc
1a00138c:	100021b0 	.word	0x100021b0
1a001390:	100020b8 	.word	0x100020b8
1a001394:	10002190 	.word	0x10002190

1a001398 <xTaskCreate>:
	{
1a001398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00139c:	b085      	sub	sp, #20
1a00139e:	4607      	mov	r7, r0
1a0013a0:	4688      	mov	r8, r1
1a0013a2:	4614      	mov	r4, r2
1a0013a4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0013a6:	0090      	lsls	r0, r2, #2
1a0013a8:	f7ff f988 	bl	1a0006bc <pvPortMalloc>
			if( pxStack != NULL )
1a0013ac:	b1e8      	cbz	r0, 1a0013ea <xTaskCreate+0x52>
1a0013ae:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0013b0:	2060      	movs	r0, #96	; 0x60
1a0013b2:	f7ff f983 	bl	1a0006bc <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0013b6:	4605      	mov	r5, r0
1a0013b8:	b198      	cbz	r0, 1a0013e2 <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
1a0013ba:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0013bc:	b1d5      	cbz	r5, 1a0013f4 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0013be:	2300      	movs	r3, #0
1a0013c0:	9303      	str	r3, [sp, #12]
1a0013c2:	9502      	str	r5, [sp, #8]
1a0013c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0013c6:	9301      	str	r3, [sp, #4]
1a0013c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0013ca:	9300      	str	r3, [sp, #0]
1a0013cc:	464b      	mov	r3, r9
1a0013ce:	4622      	mov	r2, r4
1a0013d0:	4641      	mov	r1, r8
1a0013d2:	4638      	mov	r0, r7
1a0013d4:	f7ff fe87 	bl	1a0010e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0013d8:	4628      	mov	r0, r5
1a0013da:	f7ff ff01 	bl	1a0011e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0013de:	2001      	movs	r0, #1
1a0013e0:	e005      	b.n	1a0013ee <xTaskCreate+0x56>
					vPortFree( pxStack );
1a0013e2:	4630      	mov	r0, r6
1a0013e4:	f7ff f9a2 	bl	1a00072c <vPortFree>
1a0013e8:	e7e8      	b.n	1a0013bc <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0013ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a0013ee:	b005      	add	sp, #20
1a0013f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0013f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0013f8:	e7f9      	b.n	1a0013ee <xTaskCreate+0x56>
1a0013fa:	Address 0x000000001a0013fa is out of bounds.


1a0013fc <vTaskStartScheduler>:
{
1a0013fc:	b500      	push	{lr}
1a0013fe:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a001400:	4b19      	ldr	r3, [pc, #100]	; (1a001468 <vTaskStartScheduler+0x6c>)
1a001402:	9301      	str	r3, [sp, #4]
1a001404:	2300      	movs	r3, #0
1a001406:	9300      	str	r3, [sp, #0]
1a001408:	225a      	movs	r2, #90	; 0x5a
1a00140a:	4918      	ldr	r1, [pc, #96]	; (1a00146c <vTaskStartScheduler+0x70>)
1a00140c:	4818      	ldr	r0, [pc, #96]	; (1a001470 <vTaskStartScheduler+0x74>)
1a00140e:	f7ff ffc3 	bl	1a001398 <xTaskCreate>
		if( xReturn == pdPASS )
1a001412:	2801      	cmp	r0, #1
1a001414:	d007      	beq.n	1a001426 <vTaskStartScheduler+0x2a>
	if( xReturn == pdPASS )
1a001416:	2801      	cmp	r0, #1
1a001418:	d008      	beq.n	1a00142c <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00141a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00141e:	d01a      	beq.n	1a001456 <vTaskStartScheduler+0x5a>
}
1a001420:	b003      	add	sp, #12
1a001422:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
1a001426:	f000 fc35 	bl	1a001c94 <xTimerCreateTimerTask>
1a00142a:	e7f4      	b.n	1a001416 <vTaskStartScheduler+0x1a>
1a00142c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001430:	f383 8811 	msr	BASEPRI, r3
1a001434:	f3bf 8f6f 	isb	sy
1a001438:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a00143c:	4b0d      	ldr	r3, [pc, #52]	; (1a001474 <vTaskStartScheduler+0x78>)
1a00143e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001442:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001444:	4b0c      	ldr	r3, [pc, #48]	; (1a001478 <vTaskStartScheduler+0x7c>)
1a001446:	2201      	movs	r2, #1
1a001448:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a00144a:	4b0c      	ldr	r3, [pc, #48]	; (1a00147c <vTaskStartScheduler+0x80>)
1a00144c:	2200      	movs	r2, #0
1a00144e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001450:	f000 feca 	bl	1a0021e8 <xPortStartScheduler>
1a001454:	e7e4      	b.n	1a001420 <vTaskStartScheduler+0x24>
1a001456:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00145a:	f383 8811 	msr	BASEPRI, r3
1a00145e:	f3bf 8f6f 	isb	sy
1a001462:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001466:	e7fe      	b.n	1a001466 <vTaskStartScheduler+0x6a>
1a001468:	1000218c 	.word	0x1000218c
1a00146c:	1a004870 	.word	0x1a004870
1a001470:	1a0012d9 	.word	0x1a0012d9
1a001474:	10002190 	.word	0x10002190
1a001478:	100021ac 	.word	0x100021ac
1a00147c:	100021d8 	.word	0x100021d8

1a001480 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001480:	4a02      	ldr	r2, [pc, #8]	; (1a00148c <vTaskSuspendAll+0xc>)
1a001482:	6813      	ldr	r3, [r2, #0]
1a001484:	3301      	adds	r3, #1
1a001486:	6013      	str	r3, [r2, #0]
}
1a001488:	4770      	bx	lr
1a00148a:	bf00      	nop
1a00148c:	10002158 	.word	0x10002158

1a001490 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001490:	4b01      	ldr	r3, [pc, #4]	; (1a001498 <xTaskGetTickCount+0x8>)
1a001492:	6818      	ldr	r0, [r3, #0]
}
1a001494:	4770      	bx	lr
1a001496:	bf00      	nop
1a001498:	100021d8 	.word	0x100021d8

1a00149c <xTaskIncrementTick>:
{
1a00149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00149e:	4b3a      	ldr	r3, [pc, #232]	; (1a001588 <xTaskIncrementTick+0xec>)
1a0014a0:	681b      	ldr	r3, [r3, #0]
1a0014a2:	2b00      	cmp	r3, #0
1a0014a4:	d164      	bne.n	1a001570 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0014a6:	4b39      	ldr	r3, [pc, #228]	; (1a00158c <xTaskIncrementTick+0xf0>)
1a0014a8:	681d      	ldr	r5, [r3, #0]
1a0014aa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0014ac:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0014ae:	b9c5      	cbnz	r5, 1a0014e2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0014b0:	4b37      	ldr	r3, [pc, #220]	; (1a001590 <xTaskIncrementTick+0xf4>)
1a0014b2:	681b      	ldr	r3, [r3, #0]
1a0014b4:	681b      	ldr	r3, [r3, #0]
1a0014b6:	b143      	cbz	r3, 1a0014ca <xTaskIncrementTick+0x2e>
1a0014b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014bc:	f383 8811 	msr	BASEPRI, r3
1a0014c0:	f3bf 8f6f 	isb	sy
1a0014c4:	f3bf 8f4f 	dsb	sy
1a0014c8:	e7fe      	b.n	1a0014c8 <xTaskIncrementTick+0x2c>
1a0014ca:	4a31      	ldr	r2, [pc, #196]	; (1a001590 <xTaskIncrementTick+0xf4>)
1a0014cc:	6811      	ldr	r1, [r2, #0]
1a0014ce:	4b31      	ldr	r3, [pc, #196]	; (1a001594 <xTaskIncrementTick+0xf8>)
1a0014d0:	6818      	ldr	r0, [r3, #0]
1a0014d2:	6010      	str	r0, [r2, #0]
1a0014d4:	6019      	str	r1, [r3, #0]
1a0014d6:	4a30      	ldr	r2, [pc, #192]	; (1a001598 <xTaskIncrementTick+0xfc>)
1a0014d8:	6813      	ldr	r3, [r2, #0]
1a0014da:	3301      	adds	r3, #1
1a0014dc:	6013      	str	r3, [r2, #0]
1a0014de:	f7ff fde3 	bl	1a0010a8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0014e2:	4b2e      	ldr	r3, [pc, #184]	; (1a00159c <xTaskIncrementTick+0x100>)
1a0014e4:	681b      	ldr	r3, [r3, #0]
1a0014e6:	42ab      	cmp	r3, r5
1a0014e8:	d938      	bls.n	1a00155c <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0014ea:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0014ec:	4b2c      	ldr	r3, [pc, #176]	; (1a0015a0 <xTaskIncrementTick+0x104>)
1a0014ee:	681b      	ldr	r3, [r3, #0]
1a0014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014f6:	009a      	lsls	r2, r3, #2
1a0014f8:	4b2a      	ldr	r3, [pc, #168]	; (1a0015a4 <xTaskIncrementTick+0x108>)
1a0014fa:	589b      	ldr	r3, [r3, r2]
1a0014fc:	2b01      	cmp	r3, #1
1a0014fe:	d93c      	bls.n	1a00157a <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001500:	2401      	movs	r4, #1
1a001502:	e03a      	b.n	1a00157a <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001504:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001506:	4b22      	ldr	r3, [pc, #136]	; (1a001590 <xTaskIncrementTick+0xf4>)
1a001508:	681b      	ldr	r3, [r3, #0]
1a00150a:	681b      	ldr	r3, [r3, #0]
1a00150c:	b343      	cbz	r3, 1a001560 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00150e:	4b20      	ldr	r3, [pc, #128]	; (1a001590 <xTaskIncrementTick+0xf4>)
1a001510:	681b      	ldr	r3, [r3, #0]
1a001512:	68db      	ldr	r3, [r3, #12]
1a001514:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001516:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001518:	429d      	cmp	r5, r3
1a00151a:	d326      	bcc.n	1a00156a <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00151c:	1d37      	adds	r7, r6, #4
1a00151e:	4638      	mov	r0, r7
1a001520:	f7ff fd7c 	bl	1a00101c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001524:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001526:	b11b      	cbz	r3, 1a001530 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001528:	f106 0018 	add.w	r0, r6, #24
1a00152c:	f7ff fd76 	bl	1a00101c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001530:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001532:	2201      	movs	r2, #1
1a001534:	409a      	lsls	r2, r3
1a001536:	491c      	ldr	r1, [pc, #112]	; (1a0015a8 <xTaskIncrementTick+0x10c>)
1a001538:	6808      	ldr	r0, [r1, #0]
1a00153a:	4302      	orrs	r2, r0
1a00153c:	600a      	str	r2, [r1, #0]
1a00153e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001542:	009a      	lsls	r2, r3, #2
1a001544:	4639      	mov	r1, r7
1a001546:	4817      	ldr	r0, [pc, #92]	; (1a0015a4 <xTaskIncrementTick+0x108>)
1a001548:	4410      	add	r0, r2
1a00154a:	f7ff fd42 	bl	1a000fd2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00154e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001550:	4b13      	ldr	r3, [pc, #76]	; (1a0015a0 <xTaskIncrementTick+0x104>)
1a001552:	681b      	ldr	r3, [r3, #0]
1a001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001556:	429a      	cmp	r2, r3
1a001558:	d2d4      	bcs.n	1a001504 <xTaskIncrementTick+0x68>
1a00155a:	e7d4      	b.n	1a001506 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a00155c:	2400      	movs	r4, #0
1a00155e:	e7d2      	b.n	1a001506 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001560:	4b0e      	ldr	r3, [pc, #56]	; (1a00159c <xTaskIncrementTick+0x100>)
1a001562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001566:	601a      	str	r2, [r3, #0]
					break;
1a001568:	e7c0      	b.n	1a0014ec <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00156a:	4a0c      	ldr	r2, [pc, #48]	; (1a00159c <xTaskIncrementTick+0x100>)
1a00156c:	6013      	str	r3, [r2, #0]
						break;
1a00156e:	e7bd      	b.n	1a0014ec <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001570:	4a0e      	ldr	r2, [pc, #56]	; (1a0015ac <xTaskIncrementTick+0x110>)
1a001572:	6813      	ldr	r3, [r2, #0]
1a001574:	3301      	adds	r3, #1
1a001576:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001578:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00157a:	4b0d      	ldr	r3, [pc, #52]	; (1a0015b0 <xTaskIncrementTick+0x114>)
1a00157c:	681b      	ldr	r3, [r3, #0]
1a00157e:	b103      	cbz	r3, 1a001582 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001580:	2401      	movs	r4, #1
}
1a001582:	4620      	mov	r0, r4
1a001584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001586:	bf00      	nop
1a001588:	10002158 	.word	0x10002158
1a00158c:	100021d8 	.word	0x100021d8
1a001590:	100020b8 	.word	0x100020b8
1a001594:	100020bc 	.word	0x100020bc
1a001598:	10002194 	.word	0x10002194
1a00159c:	10002190 	.word	0x10002190
1a0015a0:	100020b4 	.word	0x100020b4
1a0015a4:	100020c0 	.word	0x100020c0
1a0015a8:	10002160 	.word	0x10002160
1a0015ac:	10002154 	.word	0x10002154
1a0015b0:	100021dc 	.word	0x100021dc

1a0015b4 <xTaskResumeAll>:
{
1a0015b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0015b6:	4b35      	ldr	r3, [pc, #212]	; (1a00168c <xTaskResumeAll+0xd8>)
1a0015b8:	681b      	ldr	r3, [r3, #0]
1a0015ba:	b943      	cbnz	r3, 1a0015ce <xTaskResumeAll+0x1a>
1a0015bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015c0:	f383 8811 	msr	BASEPRI, r3
1a0015c4:	f3bf 8f6f 	isb	sy
1a0015c8:	f3bf 8f4f 	dsb	sy
1a0015cc:	e7fe      	b.n	1a0015cc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0015ce:	f000 fd69 	bl	1a0020a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0015d2:	4b2e      	ldr	r3, [pc, #184]	; (1a00168c <xTaskResumeAll+0xd8>)
1a0015d4:	681a      	ldr	r2, [r3, #0]
1a0015d6:	3a01      	subs	r2, #1
1a0015d8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0015da:	681b      	ldr	r3, [r3, #0]
1a0015dc:	2b00      	cmp	r3, #0
1a0015de:	d14d      	bne.n	1a00167c <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0015e0:	4b2b      	ldr	r3, [pc, #172]	; (1a001690 <xTaskResumeAll+0xdc>)
1a0015e2:	681b      	ldr	r3, [r3, #0]
1a0015e4:	b90b      	cbnz	r3, 1a0015ea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a0015e6:	2400      	movs	r4, #0
1a0015e8:	e049      	b.n	1a00167e <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a0015ea:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0015ec:	4b29      	ldr	r3, [pc, #164]	; (1a001694 <xTaskResumeAll+0xe0>)
1a0015ee:	681b      	ldr	r3, [r3, #0]
1a0015f0:	b31b      	cbz	r3, 1a00163a <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0015f2:	4b28      	ldr	r3, [pc, #160]	; (1a001694 <xTaskResumeAll+0xe0>)
1a0015f4:	68db      	ldr	r3, [r3, #12]
1a0015f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0015f8:	f104 0018 	add.w	r0, r4, #24
1a0015fc:	f7ff fd0e 	bl	1a00101c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001600:	1d25      	adds	r5, r4, #4
1a001602:	4628      	mov	r0, r5
1a001604:	f7ff fd0a 	bl	1a00101c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001608:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00160a:	2201      	movs	r2, #1
1a00160c:	409a      	lsls	r2, r3
1a00160e:	4922      	ldr	r1, [pc, #136]	; (1a001698 <xTaskResumeAll+0xe4>)
1a001610:	6808      	ldr	r0, [r1, #0]
1a001612:	4302      	orrs	r2, r0
1a001614:	600a      	str	r2, [r1, #0]
1a001616:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00161a:	009a      	lsls	r2, r3, #2
1a00161c:	4629      	mov	r1, r5
1a00161e:	481f      	ldr	r0, [pc, #124]	; (1a00169c <xTaskResumeAll+0xe8>)
1a001620:	4410      	add	r0, r2
1a001622:	f7ff fcd6 	bl	1a000fd2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001626:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001628:	4b1d      	ldr	r3, [pc, #116]	; (1a0016a0 <xTaskResumeAll+0xec>)
1a00162a:	681b      	ldr	r3, [r3, #0]
1a00162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00162e:	429a      	cmp	r2, r3
1a001630:	d3dc      	bcc.n	1a0015ec <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a001632:	4b1c      	ldr	r3, [pc, #112]	; (1a0016a4 <xTaskResumeAll+0xf0>)
1a001634:	2201      	movs	r2, #1
1a001636:	601a      	str	r2, [r3, #0]
1a001638:	e7d8      	b.n	1a0015ec <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a00163a:	b10c      	cbz	r4, 1a001640 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a00163c:	f7ff fd34 	bl	1a0010a8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001640:	4b19      	ldr	r3, [pc, #100]	; (1a0016a8 <xTaskResumeAll+0xf4>)
1a001642:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001644:	b974      	cbnz	r4, 1a001664 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a001646:	4b17      	ldr	r3, [pc, #92]	; (1a0016a4 <xTaskResumeAll+0xf0>)
1a001648:	681b      	ldr	r3, [r3, #0]
1a00164a:	b1e3      	cbz	r3, 1a001686 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a00164c:	4b17      	ldr	r3, [pc, #92]	; (1a0016ac <xTaskResumeAll+0xf8>)
1a00164e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001652:	601a      	str	r2, [r3, #0]
1a001654:	f3bf 8f4f 	dsb	sy
1a001658:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00165c:	2401      	movs	r4, #1
1a00165e:	e00e      	b.n	1a00167e <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001660:	3c01      	subs	r4, #1
1a001662:	d007      	beq.n	1a001674 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a001664:	f7ff ff1a 	bl	1a00149c <xTaskIncrementTick>
1a001668:	2800      	cmp	r0, #0
1a00166a:	d0f9      	beq.n	1a001660 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a00166c:	4b0d      	ldr	r3, [pc, #52]	; (1a0016a4 <xTaskResumeAll+0xf0>)
1a00166e:	2201      	movs	r2, #1
1a001670:	601a      	str	r2, [r3, #0]
1a001672:	e7f5      	b.n	1a001660 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a001674:	4b0c      	ldr	r3, [pc, #48]	; (1a0016a8 <xTaskResumeAll+0xf4>)
1a001676:	2200      	movs	r2, #0
1a001678:	601a      	str	r2, [r3, #0]
1a00167a:	e7e4      	b.n	1a001646 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a00167c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00167e:	f000 fd33 	bl	1a0020e8 <vPortExitCritical>
}
1a001682:	4620      	mov	r0, r4
1a001684:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a001686:	2400      	movs	r4, #0
1a001688:	e7f9      	b.n	1a00167e <xTaskResumeAll+0xca>
1a00168a:	bf00      	nop
1a00168c:	10002158 	.word	0x10002158
1a001690:	1000214c 	.word	0x1000214c
1a001694:	10002198 	.word	0x10002198
1a001698:	10002160 	.word	0x10002160
1a00169c:	100020c0 	.word	0x100020c0
1a0016a0:	100020b4 	.word	0x100020b4
1a0016a4:	100021dc 	.word	0x100021dc
1a0016a8:	10002154 	.word	0x10002154
1a0016ac:	e000ed04 	.word	0xe000ed04

1a0016b0 <vTaskDelay>:
	{
1a0016b0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0016b2:	b1a8      	cbz	r0, 1a0016e0 <vTaskDelay+0x30>
1a0016b4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0016b6:	4b0f      	ldr	r3, [pc, #60]	; (1a0016f4 <vTaskDelay+0x44>)
1a0016b8:	681b      	ldr	r3, [r3, #0]
1a0016ba:	b143      	cbz	r3, 1a0016ce <vTaskDelay+0x1e>
1a0016bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016c0:	f383 8811 	msr	BASEPRI, r3
1a0016c4:	f3bf 8f6f 	isb	sy
1a0016c8:	f3bf 8f4f 	dsb	sy
1a0016cc:	e7fe      	b.n	1a0016cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0016ce:	f7ff fed7 	bl	1a001480 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0016d2:	2100      	movs	r1, #0
1a0016d4:	4620      	mov	r0, r4
1a0016d6:	f7ff fe13 	bl	1a001300 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0016da:	f7ff ff6b 	bl	1a0015b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0016de:	b938      	cbnz	r0, 1a0016f0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0016e0:	4b05      	ldr	r3, [pc, #20]	; (1a0016f8 <vTaskDelay+0x48>)
1a0016e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016e6:	601a      	str	r2, [r3, #0]
1a0016e8:	f3bf 8f4f 	dsb	sy
1a0016ec:	f3bf 8f6f 	isb	sy
	}
1a0016f0:	bd10      	pop	{r4, pc}
1a0016f2:	bf00      	nop
1a0016f4:	10002158 	.word	0x10002158
1a0016f8:	e000ed04 	.word	0xe000ed04

1a0016fc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0016fc:	4b2d      	ldr	r3, [pc, #180]	; (1a0017b4 <vTaskSwitchContext+0xb8>)
1a0016fe:	681b      	ldr	r3, [r3, #0]
1a001700:	b11b      	cbz	r3, 1a00170a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001702:	4b2d      	ldr	r3, [pc, #180]	; (1a0017b8 <vTaskSwitchContext+0xbc>)
1a001704:	2201      	movs	r2, #1
1a001706:	601a      	str	r2, [r3, #0]
1a001708:	4770      	bx	lr
{
1a00170a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00170c:	4b2a      	ldr	r3, [pc, #168]	; (1a0017b8 <vTaskSwitchContext+0xbc>)
1a00170e:	2200      	movs	r2, #0
1a001710:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001712:	4b2a      	ldr	r3, [pc, #168]	; (1a0017bc <vTaskSwitchContext+0xc0>)
1a001714:	681b      	ldr	r3, [r3, #0]
1a001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001718:	681a      	ldr	r2, [r3, #0]
1a00171a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00171e:	d103      	bne.n	1a001728 <vTaskSwitchContext+0x2c>
1a001720:	685a      	ldr	r2, [r3, #4]
1a001722:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001726:	d01b      	beq.n	1a001760 <vTaskSwitchContext+0x64>
1a001728:	4b24      	ldr	r3, [pc, #144]	; (1a0017bc <vTaskSwitchContext+0xc0>)
1a00172a:	6818      	ldr	r0, [r3, #0]
1a00172c:	6819      	ldr	r1, [r3, #0]
1a00172e:	3134      	adds	r1, #52	; 0x34
1a001730:	f7ff fcac 	bl	1a00108c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001734:	4b22      	ldr	r3, [pc, #136]	; (1a0017c0 <vTaskSwitchContext+0xc4>)
1a001736:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001738:	fab3 f383 	clz	r3, r3
1a00173c:	b2db      	uxtb	r3, r3
1a00173e:	f1c3 031f 	rsb	r3, r3, #31
1a001742:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001746:	008a      	lsls	r2, r1, #2
1a001748:	491e      	ldr	r1, [pc, #120]	; (1a0017c4 <vTaskSwitchContext+0xc8>)
1a00174a:	588a      	ldr	r2, [r1, r2]
1a00174c:	b98a      	cbnz	r2, 1a001772 <vTaskSwitchContext+0x76>
	__asm volatile
1a00174e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001752:	f383 8811 	msr	BASEPRI, r3
1a001756:	f3bf 8f6f 	isb	sy
1a00175a:	f3bf 8f4f 	dsb	sy
1a00175e:	e7fe      	b.n	1a00175e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001760:	689a      	ldr	r2, [r3, #8]
1a001762:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001766:	d1df      	bne.n	1a001728 <vTaskSwitchContext+0x2c>
1a001768:	68db      	ldr	r3, [r3, #12]
1a00176a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00176e:	d1db      	bne.n	1a001728 <vTaskSwitchContext+0x2c>
1a001770:	e7e0      	b.n	1a001734 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001772:	4814      	ldr	r0, [pc, #80]	; (1a0017c4 <vTaskSwitchContext+0xc8>)
1a001774:	009a      	lsls	r2, r3, #2
1a001776:	18d4      	adds	r4, r2, r3
1a001778:	00a1      	lsls	r1, r4, #2
1a00177a:	4401      	add	r1, r0
1a00177c:	684c      	ldr	r4, [r1, #4]
1a00177e:	6864      	ldr	r4, [r4, #4]
1a001780:	604c      	str	r4, [r1, #4]
1a001782:	441a      	add	r2, r3
1a001784:	0091      	lsls	r1, r2, #2
1a001786:	3108      	adds	r1, #8
1a001788:	4408      	add	r0, r1
1a00178a:	4284      	cmp	r4, r0
1a00178c:	d009      	beq.n	1a0017a2 <vTaskSwitchContext+0xa6>
1a00178e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001792:	009a      	lsls	r2, r3, #2
1a001794:	4b0b      	ldr	r3, [pc, #44]	; (1a0017c4 <vTaskSwitchContext+0xc8>)
1a001796:	4413      	add	r3, r2
1a001798:	685b      	ldr	r3, [r3, #4]
1a00179a:	68da      	ldr	r2, [r3, #12]
1a00179c:	4b07      	ldr	r3, [pc, #28]	; (1a0017bc <vTaskSwitchContext+0xc0>)
1a00179e:	601a      	str	r2, [r3, #0]
}
1a0017a0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0017a2:	6860      	ldr	r0, [r4, #4]
1a0017a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a0017a8:	0091      	lsls	r1, r2, #2
1a0017aa:	4a06      	ldr	r2, [pc, #24]	; (1a0017c4 <vTaskSwitchContext+0xc8>)
1a0017ac:	440a      	add	r2, r1
1a0017ae:	6050      	str	r0, [r2, #4]
1a0017b0:	e7ed      	b.n	1a00178e <vTaskSwitchContext+0x92>
1a0017b2:	bf00      	nop
1a0017b4:	10002158 	.word	0x10002158
1a0017b8:	100021dc 	.word	0x100021dc
1a0017bc:	100020b4 	.word	0x100020b4
1a0017c0:	10002160 	.word	0x10002160
1a0017c4:	100020c0 	.word	0x100020c0

1a0017c8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0017c8:	b158      	cbz	r0, 1a0017e2 <vTaskPlaceOnEventList+0x1a>
{
1a0017ca:	b510      	push	{r4, lr}
1a0017cc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0017ce:	4b09      	ldr	r3, [pc, #36]	; (1a0017f4 <vTaskPlaceOnEventList+0x2c>)
1a0017d0:	6819      	ldr	r1, [r3, #0]
1a0017d2:	3118      	adds	r1, #24
1a0017d4:	f7ff fc08 	bl	1a000fe8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0017d8:	2101      	movs	r1, #1
1a0017da:	4620      	mov	r0, r4
1a0017dc:	f7ff fd90 	bl	1a001300 <prvAddCurrentTaskToDelayedList>
}
1a0017e0:	bd10      	pop	{r4, pc}
1a0017e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017e6:	f383 8811 	msr	BASEPRI, r3
1a0017ea:	f3bf 8f6f 	isb	sy
1a0017ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a0017f2:	e7fe      	b.n	1a0017f2 <vTaskPlaceOnEventList+0x2a>
1a0017f4:	100020b4 	.word	0x100020b4

1a0017f8 <vTaskPlaceOnEventListRestricted>:
	{
1a0017f8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0017fa:	b170      	cbz	r0, 1a00181a <vTaskPlaceOnEventListRestricted+0x22>
1a0017fc:	460c      	mov	r4, r1
1a0017fe:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001800:	4a0a      	ldr	r2, [pc, #40]	; (1a00182c <vTaskPlaceOnEventListRestricted+0x34>)
1a001802:	6811      	ldr	r1, [r2, #0]
1a001804:	3118      	adds	r1, #24
1a001806:	f7ff fbe4 	bl	1a000fd2 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00180a:	b10d      	cbz	r5, 1a001810 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a00180c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001810:	4629      	mov	r1, r5
1a001812:	4620      	mov	r0, r4
1a001814:	f7ff fd74 	bl	1a001300 <prvAddCurrentTaskToDelayedList>
	}
1a001818:	bd38      	pop	{r3, r4, r5, pc}
1a00181a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00181e:	f383 8811 	msr	BASEPRI, r3
1a001822:	f3bf 8f6f 	isb	sy
1a001826:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a00182a:	e7fe      	b.n	1a00182a <vTaskPlaceOnEventListRestricted+0x32>
1a00182c:	100020b4 	.word	0x100020b4

1a001830 <xTaskRemoveFromEventList>:
{
1a001830:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001832:	68c3      	ldr	r3, [r0, #12]
1a001834:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001836:	b324      	cbz	r4, 1a001882 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001838:	f104 0518 	add.w	r5, r4, #24
1a00183c:	4628      	mov	r0, r5
1a00183e:	f7ff fbed 	bl	1a00101c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001842:	4b18      	ldr	r3, [pc, #96]	; (1a0018a4 <xTaskRemoveFromEventList+0x74>)
1a001844:	681b      	ldr	r3, [r3, #0]
1a001846:	bb2b      	cbnz	r3, 1a001894 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001848:	1d25      	adds	r5, r4, #4
1a00184a:	4628      	mov	r0, r5
1a00184c:	f7ff fbe6 	bl	1a00101c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001852:	2201      	movs	r2, #1
1a001854:	409a      	lsls	r2, r3
1a001856:	4914      	ldr	r1, [pc, #80]	; (1a0018a8 <xTaskRemoveFromEventList+0x78>)
1a001858:	6808      	ldr	r0, [r1, #0]
1a00185a:	4302      	orrs	r2, r0
1a00185c:	600a      	str	r2, [r1, #0]
1a00185e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001862:	009a      	lsls	r2, r3, #2
1a001864:	4629      	mov	r1, r5
1a001866:	4811      	ldr	r0, [pc, #68]	; (1a0018ac <xTaskRemoveFromEventList+0x7c>)
1a001868:	4410      	add	r0, r2
1a00186a:	f7ff fbb2 	bl	1a000fd2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00186e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001870:	4b0f      	ldr	r3, [pc, #60]	; (1a0018b0 <xTaskRemoveFromEventList+0x80>)
1a001872:	681b      	ldr	r3, [r3, #0]
1a001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001876:	429a      	cmp	r2, r3
1a001878:	d911      	bls.n	1a00189e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a00187a:	2001      	movs	r0, #1
1a00187c:	4b0d      	ldr	r3, [pc, #52]	; (1a0018b4 <xTaskRemoveFromEventList+0x84>)
1a00187e:	6018      	str	r0, [r3, #0]
1a001880:	e00e      	b.n	1a0018a0 <xTaskRemoveFromEventList+0x70>
1a001882:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001886:	f383 8811 	msr	BASEPRI, r3
1a00188a:	f3bf 8f6f 	isb	sy
1a00188e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a001892:	e7fe      	b.n	1a001892 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001894:	4629      	mov	r1, r5
1a001896:	4808      	ldr	r0, [pc, #32]	; (1a0018b8 <xTaskRemoveFromEventList+0x88>)
1a001898:	f7ff fb9b 	bl	1a000fd2 <vListInsertEnd>
1a00189c:	e7e7      	b.n	1a00186e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a00189e:	2000      	movs	r0, #0
}
1a0018a0:	bd38      	pop	{r3, r4, r5, pc}
1a0018a2:	bf00      	nop
1a0018a4:	10002158 	.word	0x10002158
1a0018a8:	10002160 	.word	0x10002160
1a0018ac:	100020c0 	.word	0x100020c0
1a0018b0:	100020b4 	.word	0x100020b4
1a0018b4:	100021dc 	.word	0x100021dc
1a0018b8:	10002198 	.word	0x10002198

1a0018bc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0018bc:	4b03      	ldr	r3, [pc, #12]	; (1a0018cc <vTaskInternalSetTimeOutState+0x10>)
1a0018be:	681b      	ldr	r3, [r3, #0]
1a0018c0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0018c2:	4b03      	ldr	r3, [pc, #12]	; (1a0018d0 <vTaskInternalSetTimeOutState+0x14>)
1a0018c4:	681b      	ldr	r3, [r3, #0]
1a0018c6:	6043      	str	r3, [r0, #4]
}
1a0018c8:	4770      	bx	lr
1a0018ca:	bf00      	nop
1a0018cc:	10002194 	.word	0x10002194
1a0018d0:	100021d8 	.word	0x100021d8

1a0018d4 <xTaskCheckForTimeOut>:
{
1a0018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0018d6:	b1c8      	cbz	r0, 1a00190c <xTaskCheckForTimeOut+0x38>
1a0018d8:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0018da:	b301      	cbz	r1, 1a00191e <xTaskCheckForTimeOut+0x4a>
1a0018dc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0018de:	f000 fbe1 	bl	1a0020a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0018e2:	4b1b      	ldr	r3, [pc, #108]	; (1a001950 <xTaskCheckForTimeOut+0x7c>)
1a0018e4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0018e6:	686b      	ldr	r3, [r5, #4]
1a0018e8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a0018ea:	6822      	ldr	r2, [r4, #0]
1a0018ec:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a0018f0:	d026      	beq.n	1a001940 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0018f2:	682f      	ldr	r7, [r5, #0]
1a0018f4:	4e17      	ldr	r6, [pc, #92]	; (1a001954 <xTaskCheckForTimeOut+0x80>)
1a0018f6:	6836      	ldr	r6, [r6, #0]
1a0018f8:	42b7      	cmp	r7, r6
1a0018fa:	d001      	beq.n	1a001900 <xTaskCheckForTimeOut+0x2c>
1a0018fc:	428b      	cmp	r3, r1
1a0018fe:	d924      	bls.n	1a00194a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001900:	4282      	cmp	r2, r0
1a001902:	d815      	bhi.n	1a001930 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001904:	2300      	movs	r3, #0
1a001906:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001908:	2401      	movs	r4, #1
1a00190a:	e01a      	b.n	1a001942 <xTaskCheckForTimeOut+0x6e>
1a00190c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001910:	f383 8811 	msr	BASEPRI, r3
1a001914:	f3bf 8f6f 	isb	sy
1a001918:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a00191c:	e7fe      	b.n	1a00191c <xTaskCheckForTimeOut+0x48>
1a00191e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001922:	f383 8811 	msr	BASEPRI, r3
1a001926:	f3bf 8f6f 	isb	sy
1a00192a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a00192e:	e7fe      	b.n	1a00192e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001930:	1a5b      	subs	r3, r3, r1
1a001932:	4413      	add	r3, r2
1a001934:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001936:	4628      	mov	r0, r5
1a001938:	f7ff ffc0 	bl	1a0018bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00193c:	2400      	movs	r4, #0
1a00193e:	e000      	b.n	1a001942 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a001940:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001942:	f000 fbd1 	bl	1a0020e8 <vPortExitCritical>
}
1a001946:	4620      	mov	r0, r4
1a001948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a00194a:	2401      	movs	r4, #1
1a00194c:	e7f9      	b.n	1a001942 <xTaskCheckForTimeOut+0x6e>
1a00194e:	bf00      	nop
1a001950:	100021d8 	.word	0x100021d8
1a001954:	10002194 	.word	0x10002194

1a001958 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001958:	4b01      	ldr	r3, [pc, #4]	; (1a001960 <vTaskMissedYield+0x8>)
1a00195a:	2201      	movs	r2, #1
1a00195c:	601a      	str	r2, [r3, #0]
}
1a00195e:	4770      	bx	lr
1a001960:	100021dc 	.word	0x100021dc

1a001964 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001964:	4b05      	ldr	r3, [pc, #20]	; (1a00197c <xTaskGetSchedulerState+0x18>)
1a001966:	681b      	ldr	r3, [r3, #0]
1a001968:	b133      	cbz	r3, 1a001978 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00196a:	4b05      	ldr	r3, [pc, #20]	; (1a001980 <xTaskGetSchedulerState+0x1c>)
1a00196c:	681b      	ldr	r3, [r3, #0]
1a00196e:	b10b      	cbz	r3, 1a001974 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001970:	2000      	movs	r0, #0
	}
1a001972:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001974:	2002      	movs	r0, #2
1a001976:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001978:	2001      	movs	r0, #1
1a00197a:	4770      	bx	lr
1a00197c:	100021ac 	.word	0x100021ac
1a001980:	10002158 	.word	0x10002158

1a001984 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001984:	2800      	cmp	r0, #0
1a001986:	d050      	beq.n	1a001a2a <xTaskPriorityInherit+0xa6>
	{
1a001988:	b538      	push	{r3, r4, r5, lr}
1a00198a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a00198c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a00198e:	4929      	ldr	r1, [pc, #164]	; (1a001a34 <xTaskPriorityInherit+0xb0>)
1a001990:	6809      	ldr	r1, [r1, #0]
1a001992:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001994:	428a      	cmp	r2, r1
1a001996:	d240      	bcs.n	1a001a1a <xTaskPriorityInherit+0x96>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001998:	6981      	ldr	r1, [r0, #24]
1a00199a:	2900      	cmp	r1, #0
1a00199c:	db05      	blt.n	1a0019aa <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00199e:	4925      	ldr	r1, [pc, #148]	; (1a001a34 <xTaskPriorityInherit+0xb0>)
1a0019a0:	6809      	ldr	r1, [r1, #0]
1a0019a2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0019a4:	f1c1 0107 	rsb	r1, r1, #7
1a0019a8:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a0019aa:	6960      	ldr	r0, [r4, #20]
1a0019ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0019b0:	0091      	lsls	r1, r2, #2
1a0019b2:	4a21      	ldr	r2, [pc, #132]	; (1a001a38 <xTaskPriorityInherit+0xb4>)
1a0019b4:	440a      	add	r2, r1
1a0019b6:	4290      	cmp	r0, r2
1a0019b8:	d005      	beq.n	1a0019c6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0019ba:	4a1e      	ldr	r2, [pc, #120]	; (1a001a34 <xTaskPriorityInherit+0xb0>)
1a0019bc:	6812      	ldr	r2, [r2, #0]
1a0019be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a0019c0:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a0019c2:	2001      	movs	r0, #1
	}
1a0019c4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019c6:	1d25      	adds	r5, r4, #4
1a0019c8:	4628      	mov	r0, r5
1a0019ca:	f7ff fb27 	bl	1a00101c <uxListRemove>
1a0019ce:	b1a0      	cbz	r0, 1a0019fa <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0019d0:	4b18      	ldr	r3, [pc, #96]	; (1a001a34 <xTaskPriorityInherit+0xb0>)
1a0019d2:	681b      	ldr	r3, [r3, #0]
1a0019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0019d6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a0019d8:	2401      	movs	r4, #1
1a0019da:	fa04 f203 	lsl.w	r2, r4, r3
1a0019de:	4917      	ldr	r1, [pc, #92]	; (1a001a3c <xTaskPriorityInherit+0xb8>)
1a0019e0:	6808      	ldr	r0, [r1, #0]
1a0019e2:	4302      	orrs	r2, r0
1a0019e4:	600a      	str	r2, [r1, #0]
1a0019e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0019ea:	009a      	lsls	r2, r3, #2
1a0019ec:	4629      	mov	r1, r5
1a0019ee:	4812      	ldr	r0, [pc, #72]	; (1a001a38 <xTaskPriorityInherit+0xb4>)
1a0019f0:	4410      	add	r0, r2
1a0019f2:	f7ff faee 	bl	1a000fd2 <vListInsertEnd>
				xReturn = pdTRUE;
1a0019f6:	4620      	mov	r0, r4
1a0019f8:	e7e4      	b.n	1a0019c4 <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a0019fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0019fc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001a00:	008a      	lsls	r2, r1, #2
1a001a02:	490d      	ldr	r1, [pc, #52]	; (1a001a38 <xTaskPriorityInherit+0xb4>)
1a001a04:	588a      	ldr	r2, [r1, r2]
1a001a06:	2a00      	cmp	r2, #0
1a001a08:	d1e2      	bne.n	1a0019d0 <xTaskPriorityInherit+0x4c>
1a001a0a:	2201      	movs	r2, #1
1a001a0c:	409a      	lsls	r2, r3
1a001a0e:	490b      	ldr	r1, [pc, #44]	; (1a001a3c <xTaskPriorityInherit+0xb8>)
1a001a10:	680b      	ldr	r3, [r1, #0]
1a001a12:	ea23 0302 	bic.w	r3, r3, r2
1a001a16:	600b      	str	r3, [r1, #0]
1a001a18:	e7da      	b.n	1a0019d0 <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001a1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001a1c:	4b05      	ldr	r3, [pc, #20]	; (1a001a34 <xTaskPriorityInherit+0xb0>)
1a001a1e:	681b      	ldr	r3, [r3, #0]
1a001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a22:	429a      	cmp	r2, r3
1a001a24:	d303      	bcc.n	1a001a2e <xTaskPriorityInherit+0xaa>
	BaseType_t xReturn = pdFALSE;
1a001a26:	2000      	movs	r0, #0
1a001a28:	e7cc      	b.n	1a0019c4 <xTaskPriorityInherit+0x40>
1a001a2a:	2000      	movs	r0, #0
	}
1a001a2c:	4770      	bx	lr
					xReturn = pdTRUE;
1a001a2e:	2001      	movs	r0, #1
		return xReturn;
1a001a30:	e7c8      	b.n	1a0019c4 <xTaskPriorityInherit+0x40>
1a001a32:	bf00      	nop
1a001a34:	100020b4 	.word	0x100020b4
1a001a38:	100020c0 	.word	0x100020c0
1a001a3c:	10002160 	.word	0x10002160

1a001a40 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001a40:	2800      	cmp	r0, #0
1a001a42:	d04c      	beq.n	1a001ade <xTaskPriorityDisinherit+0x9e>
	{
1a001a44:	b538      	push	{r3, r4, r5, lr}
1a001a46:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001a48:	4a27      	ldr	r2, [pc, #156]	; (1a001ae8 <xTaskPriorityDisinherit+0xa8>)
1a001a4a:	6812      	ldr	r2, [r2, #0]
1a001a4c:	4282      	cmp	r2, r0
1a001a4e:	d008      	beq.n	1a001a62 <xTaskPriorityDisinherit+0x22>
1a001a50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a54:	f383 8811 	msr	BASEPRI, r3
1a001a58:	f3bf 8f6f 	isb	sy
1a001a5c:	f3bf 8f4f 	dsb	sy
1a001a60:	e7fe      	b.n	1a001a60 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001a62:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001a64:	b942      	cbnz	r2, 1a001a78 <xTaskPriorityDisinherit+0x38>
1a001a66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a6a:	f383 8811 	msr	BASEPRI, r3
1a001a6e:	f3bf 8f6f 	isb	sy
1a001a72:	f3bf 8f4f 	dsb	sy
1a001a76:	e7fe      	b.n	1a001a76 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001a78:	3a01      	subs	r2, #1
1a001a7a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001a7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001a7e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001a80:	4288      	cmp	r0, r1
1a001a82:	d02e      	beq.n	1a001ae2 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001a84:	b10a      	cbz	r2, 1a001a8a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a001a86:	2000      	movs	r0, #0
	}
1a001a88:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001a8a:	1d25      	adds	r5, r4, #4
1a001a8c:	4628      	mov	r0, r5
1a001a8e:	f7ff fac5 	bl	1a00101c <uxListRemove>
1a001a92:	b970      	cbnz	r0, 1a001ab2 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001a94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001a96:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001a9a:	008b      	lsls	r3, r1, #2
1a001a9c:	4913      	ldr	r1, [pc, #76]	; (1a001aec <xTaskPriorityDisinherit+0xac>)
1a001a9e:	58cb      	ldr	r3, [r1, r3]
1a001aa0:	b93b      	cbnz	r3, 1a001ab2 <xTaskPriorityDisinherit+0x72>
1a001aa2:	2301      	movs	r3, #1
1a001aa4:	fa03 f202 	lsl.w	r2, r3, r2
1a001aa8:	4911      	ldr	r1, [pc, #68]	; (1a001af0 <xTaskPriorityDisinherit+0xb0>)
1a001aaa:	680b      	ldr	r3, [r1, #0]
1a001aac:	ea23 0302 	bic.w	r3, r3, r2
1a001ab0:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001ab2:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ab6:	f1c3 0207 	rsb	r2, r3, #7
1a001aba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001abc:	2401      	movs	r4, #1
1a001abe:	fa04 f203 	lsl.w	r2, r4, r3
1a001ac2:	490b      	ldr	r1, [pc, #44]	; (1a001af0 <xTaskPriorityDisinherit+0xb0>)
1a001ac4:	6808      	ldr	r0, [r1, #0]
1a001ac6:	4302      	orrs	r2, r0
1a001ac8:	600a      	str	r2, [r1, #0]
1a001aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ace:	009a      	lsls	r2, r3, #2
1a001ad0:	4629      	mov	r1, r5
1a001ad2:	4806      	ldr	r0, [pc, #24]	; (1a001aec <xTaskPriorityDisinherit+0xac>)
1a001ad4:	4410      	add	r0, r2
1a001ad6:	f7ff fa7c 	bl	1a000fd2 <vListInsertEnd>
					xReturn = pdTRUE;
1a001ada:	4620      	mov	r0, r4
1a001adc:	e7d4      	b.n	1a001a88 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a001ade:	2000      	movs	r0, #0
	}
1a001ae0:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001ae2:	2000      	movs	r0, #0
1a001ae4:	e7d0      	b.n	1a001a88 <xTaskPriorityDisinherit+0x48>
1a001ae6:	bf00      	nop
1a001ae8:	100020b4 	.word	0x100020b4
1a001aec:	100020c0 	.word	0x100020c0
1a001af0:	10002160 	.word	0x10002160

1a001af4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001af4:	2800      	cmp	r0, #0
1a001af6:	d056      	beq.n	1a001ba6 <vTaskPriorityDisinheritAfterTimeout+0xb2>
	{
1a001af8:	b538      	push	{r3, r4, r5, lr}
1a001afa:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001afc:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001afe:	b940      	cbnz	r0, 1a001b12 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001b00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b04:	f383 8811 	msr	BASEPRI, r3
1a001b08:	f3bf 8f6f 	isb	sy
1a001b0c:	f3bf 8f4f 	dsb	sy
1a001b10:	e7fe      	b.n	1a001b10 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001b12:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a001b14:	428a      	cmp	r2, r1
1a001b16:	d200      	bcs.n	1a001b1a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001b18:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001b1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a001b1c:	4291      	cmp	r1, r2
1a001b1e:	d001      	beq.n	1a001b24 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001b20:	2801      	cmp	r0, #1
1a001b22:	d000      	beq.n	1a001b26 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a001b24:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001b26:	4820      	ldr	r0, [pc, #128]	; (1a001ba8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001b28:	6800      	ldr	r0, [r0, #0]
1a001b2a:	42a0      	cmp	r0, r4
1a001b2c:	d032      	beq.n	1a001b94 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					pxTCB->uxPriority = uxPriorityToUse;
1a001b2e:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001b30:	69a0      	ldr	r0, [r4, #24]
1a001b32:	2800      	cmp	r0, #0
1a001b34:	db02      	blt.n	1a001b3c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b36:	f1c2 0207 	rsb	r2, r2, #7
1a001b3a:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001b3c:	6963      	ldr	r3, [r4, #20]
1a001b3e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a001b42:	0088      	lsls	r0, r1, #2
1a001b44:	4a19      	ldr	r2, [pc, #100]	; (1a001bac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001b46:	4402      	add	r2, r0
1a001b48:	4293      	cmp	r3, r2
1a001b4a:	d1eb      	bne.n	1a001b24 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001b4c:	1d25      	adds	r5, r4, #4
1a001b4e:	4628      	mov	r0, r5
1a001b50:	f7ff fa64 	bl	1a00101c <uxListRemove>
1a001b54:	b970      	cbnz	r0, 1a001b74 <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001b56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b58:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001b5c:	008b      	lsls	r3, r1, #2
1a001b5e:	4913      	ldr	r1, [pc, #76]	; (1a001bac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001b60:	58cb      	ldr	r3, [r1, r3]
1a001b62:	b93b      	cbnz	r3, 1a001b74 <vTaskPriorityDisinheritAfterTimeout+0x80>
1a001b64:	2301      	movs	r3, #1
1a001b66:	fa03 f202 	lsl.w	r2, r3, r2
1a001b6a:	4911      	ldr	r1, [pc, #68]	; (1a001bb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001b6c:	680b      	ldr	r3, [r1, #0]
1a001b6e:	ea23 0302 	bic.w	r3, r3, r2
1a001b72:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b76:	2201      	movs	r2, #1
1a001b78:	409a      	lsls	r2, r3
1a001b7a:	490d      	ldr	r1, [pc, #52]	; (1a001bb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001b7c:	6808      	ldr	r0, [r1, #0]
1a001b7e:	4302      	orrs	r2, r0
1a001b80:	600a      	str	r2, [r1, #0]
1a001b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b86:	009a      	lsls	r2, r3, #2
1a001b88:	4629      	mov	r1, r5
1a001b8a:	4808      	ldr	r0, [pc, #32]	; (1a001bac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001b8c:	4410      	add	r0, r2
1a001b8e:	f7ff fa20 	bl	1a000fd2 <vListInsertEnd>
	}
1a001b92:	e7c7      	b.n	1a001b24 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001b94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b98:	f383 8811 	msr	BASEPRI, r3
1a001b9c:	f3bf 8f6f 	isb	sy
1a001ba0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
1a001ba4:	e7fe      	b.n	1a001ba4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
1a001ba6:	4770      	bx	lr
1a001ba8:	100020b4 	.word	0x100020b4
1a001bac:	100020c0 	.word	0x100020c0
1a001bb0:	10002160 	.word	0x10002160

1a001bb4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001bb4:	4b05      	ldr	r3, [pc, #20]	; (1a001bcc <pvTaskIncrementMutexHeldCount+0x18>)
1a001bb6:	681b      	ldr	r3, [r3, #0]
1a001bb8:	b123      	cbz	r3, 1a001bc4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001bba:	4b04      	ldr	r3, [pc, #16]	; (1a001bcc <pvTaskIncrementMutexHeldCount+0x18>)
1a001bbc:	681a      	ldr	r2, [r3, #0]
1a001bbe:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001bc0:	3301      	adds	r3, #1
1a001bc2:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001bc4:	4b01      	ldr	r3, [pc, #4]	; (1a001bcc <pvTaskIncrementMutexHeldCount+0x18>)
1a001bc6:	6818      	ldr	r0, [r3, #0]
	}
1a001bc8:	4770      	bx	lr
1a001bca:	bf00      	nop
1a001bcc:	100020b4 	.word	0x100020b4

1a001bd0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001bd0:	4b06      	ldr	r3, [pc, #24]	; (1a001bec <prvGetNextExpireTime+0x1c>)
1a001bd2:	681a      	ldr	r2, [r3, #0]
1a001bd4:	6813      	ldr	r3, [r2, #0]
1a001bd6:	fab3 f383 	clz	r3, r3
1a001bda:	095b      	lsrs	r3, r3, #5
1a001bdc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001bde:	b913      	cbnz	r3, 1a001be6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001be0:	68d3      	ldr	r3, [r2, #12]
1a001be2:	6818      	ldr	r0, [r3, #0]
1a001be4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001be6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001be8:	4770      	bx	lr
1a001bea:	bf00      	nop
1a001bec:	100021e0 	.word	0x100021e0

1a001bf0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001bf0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001bf2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001bf4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001bf6:	4291      	cmp	r1, r2
1a001bf8:	d80c      	bhi.n	1a001c14 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001bfa:	1ad2      	subs	r2, r2, r3
1a001bfc:	6983      	ldr	r3, [r0, #24]
1a001bfe:	429a      	cmp	r2, r3
1a001c00:	d301      	bcc.n	1a001c06 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001c02:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a001c04:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001c06:	1d01      	adds	r1, r0, #4
1a001c08:	4b09      	ldr	r3, [pc, #36]	; (1a001c30 <prvInsertTimerInActiveList+0x40>)
1a001c0a:	6818      	ldr	r0, [r3, #0]
1a001c0c:	f7ff f9ec 	bl	1a000fe8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001c10:	2000      	movs	r0, #0
1a001c12:	e7f7      	b.n	1a001c04 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001c14:	429a      	cmp	r2, r3
1a001c16:	d201      	bcs.n	1a001c1c <prvInsertTimerInActiveList+0x2c>
1a001c18:	4299      	cmp	r1, r3
1a001c1a:	d206      	bcs.n	1a001c2a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001c1c:	1d01      	adds	r1, r0, #4
1a001c1e:	4b05      	ldr	r3, [pc, #20]	; (1a001c34 <prvInsertTimerInActiveList+0x44>)
1a001c20:	6818      	ldr	r0, [r3, #0]
1a001c22:	f7ff f9e1 	bl	1a000fe8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001c26:	2000      	movs	r0, #0
1a001c28:	e7ec      	b.n	1a001c04 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a001c2a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001c2c:	e7ea      	b.n	1a001c04 <prvInsertTimerInActiveList+0x14>
1a001c2e:	bf00      	nop
1a001c30:	100021e4 	.word	0x100021e4
1a001c34:	100021e0 	.word	0x100021e0

1a001c38 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001c38:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001c3a:	f000 fa33 	bl	1a0020a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001c3e:	4b0f      	ldr	r3, [pc, #60]	; (1a001c7c <prvCheckForValidListAndQueue+0x44>)
1a001c40:	681b      	ldr	r3, [r3, #0]
1a001c42:	b113      	cbz	r3, 1a001c4a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001c44:	f000 fa50 	bl	1a0020e8 <vPortExitCritical>
}
1a001c48:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001c4a:	4d0d      	ldr	r5, [pc, #52]	; (1a001c80 <prvCheckForValidListAndQueue+0x48>)
1a001c4c:	4628      	mov	r0, r5
1a001c4e:	f7ff f9b2 	bl	1a000fb6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001c52:	4c0c      	ldr	r4, [pc, #48]	; (1a001c84 <prvCheckForValidListAndQueue+0x4c>)
1a001c54:	4620      	mov	r0, r4
1a001c56:	f7ff f9ae 	bl	1a000fb6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001c5a:	4b0b      	ldr	r3, [pc, #44]	; (1a001c88 <prvCheckForValidListAndQueue+0x50>)
1a001c5c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001c5e:	4b0b      	ldr	r3, [pc, #44]	; (1a001c8c <prvCheckForValidListAndQueue+0x54>)
1a001c60:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1a001c62:	2200      	movs	r2, #0
1a001c64:	2110      	movs	r1, #16
1a001c66:	200a      	movs	r0, #10
1a001c68:	f7fe fe67 	bl	1a00093a <xQueueGenericCreate>
1a001c6c:	4b03      	ldr	r3, [pc, #12]	; (1a001c7c <prvCheckForValidListAndQueue+0x44>)
1a001c6e:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001c70:	2800      	cmp	r0, #0
1a001c72:	d0e7      	beq.n	1a001c44 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001c74:	4906      	ldr	r1, [pc, #24]	; (1a001c90 <prvCheckForValidListAndQueue+0x58>)
1a001c76:	f7ff f961 	bl	1a000f3c <vQueueAddToRegistry>
1a001c7a:	e7e3      	b.n	1a001c44 <prvCheckForValidListAndQueue+0xc>
1a001c7c:	10002214 	.word	0x10002214
1a001c80:	100021e8 	.word	0x100021e8
1a001c84:	100021fc 	.word	0x100021fc
1a001c88:	100021e0 	.word	0x100021e0
1a001c8c:	100021e4 	.word	0x100021e4
1a001c90:	1a004878 	.word	0x1a004878

1a001c94 <xTimerCreateTimerTask>:
{
1a001c94:	b500      	push	{lr}
1a001c96:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
1a001c98:	f7ff ffce 	bl	1a001c38 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001c9c:	4b0d      	ldr	r3, [pc, #52]	; (1a001cd4 <xTimerCreateTimerTask+0x40>)
1a001c9e:	681b      	ldr	r3, [r3, #0]
1a001ca0:	b15b      	cbz	r3, 1a001cba <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
1a001ca2:	4b0d      	ldr	r3, [pc, #52]	; (1a001cd8 <xTimerCreateTimerTask+0x44>)
1a001ca4:	9301      	str	r3, [sp, #4]
1a001ca6:	2304      	movs	r3, #4
1a001ca8:	9300      	str	r3, [sp, #0]
1a001caa:	2300      	movs	r3, #0
1a001cac:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a001cb0:	490a      	ldr	r1, [pc, #40]	; (1a001cdc <xTimerCreateTimerTask+0x48>)
1a001cb2:	480b      	ldr	r0, [pc, #44]	; (1a001ce0 <xTimerCreateTimerTask+0x4c>)
1a001cb4:	f7ff fb70 	bl	1a001398 <xTaskCreate>
	configASSERT( xReturn );
1a001cb8:	b940      	cbnz	r0, 1a001ccc <xTimerCreateTimerTask+0x38>
1a001cba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cbe:	f383 8811 	msr	BASEPRI, r3
1a001cc2:	f3bf 8f6f 	isb	sy
1a001cc6:	f3bf 8f4f 	dsb	sy
1a001cca:	e7fe      	b.n	1a001cca <xTimerCreateTimerTask+0x36>
}
1a001ccc:	b003      	add	sp, #12
1a001cce:	f85d fb04 	ldr.w	pc, [sp], #4
1a001cd2:	bf00      	nop
1a001cd4:	10002214 	.word	0x10002214
1a001cd8:	10002218 	.word	0x10002218
1a001cdc:	1a004880 	.word	0x1a004880
1a001ce0:	1a001fbd 	.word	0x1a001fbd

1a001ce4 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001ce4:	b1c0      	cbz	r0, 1a001d18 <xTimerGenericCommand+0x34>
{
1a001ce6:	b530      	push	{r4, r5, lr}
1a001ce8:	b085      	sub	sp, #20
1a001cea:	4615      	mov	r5, r2
1a001cec:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001cee:	4a17      	ldr	r2, [pc, #92]	; (1a001d4c <xTimerGenericCommand+0x68>)
1a001cf0:	6810      	ldr	r0, [r2, #0]
1a001cf2:	b340      	cbz	r0, 1a001d46 <xTimerGenericCommand+0x62>
1a001cf4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001cf6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001cf8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001cfa:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001cfc:	2905      	cmp	r1, #5
1a001cfe:	dc1c      	bgt.n	1a001d3a <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001d00:	f7ff fe30 	bl	1a001964 <xTaskGetSchedulerState>
1a001d04:	2802      	cmp	r0, #2
1a001d06:	d010      	beq.n	1a001d2a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001d08:	2300      	movs	r3, #0
1a001d0a:	461a      	mov	r2, r3
1a001d0c:	4669      	mov	r1, sp
1a001d0e:	480f      	ldr	r0, [pc, #60]	; (1a001d4c <xTimerGenericCommand+0x68>)
1a001d10:	6800      	ldr	r0, [r0, #0]
1a001d12:	f7fe fe57 	bl	1a0009c4 <xQueueGenericSend>
1a001d16:	e014      	b.n	1a001d42 <xTimerGenericCommand+0x5e>
1a001d18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d1c:	f383 8811 	msr	BASEPRI, r3
1a001d20:	f3bf 8f6f 	isb	sy
1a001d24:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a001d28:	e7fe      	b.n	1a001d28 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001d2a:	2300      	movs	r3, #0
1a001d2c:	9a08      	ldr	r2, [sp, #32]
1a001d2e:	4669      	mov	r1, sp
1a001d30:	4806      	ldr	r0, [pc, #24]	; (1a001d4c <xTimerGenericCommand+0x68>)
1a001d32:	6800      	ldr	r0, [r0, #0]
1a001d34:	f7fe fe46 	bl	1a0009c4 <xQueueGenericSend>
1a001d38:	e003      	b.n	1a001d42 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001d3a:	2300      	movs	r3, #0
1a001d3c:	4669      	mov	r1, sp
1a001d3e:	f7fe ff01 	bl	1a000b44 <xQueueGenericSendFromISR>
}
1a001d42:	b005      	add	sp, #20
1a001d44:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a001d46:	2000      	movs	r0, #0
	return xReturn;
1a001d48:	e7fb      	b.n	1a001d42 <xTimerGenericCommand+0x5e>
1a001d4a:	bf00      	nop
1a001d4c:	10002214 	.word	0x10002214

1a001d50 <prvSwitchTimerLists>:
{
1a001d50:	b570      	push	{r4, r5, r6, lr}
1a001d52:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001d54:	4b1a      	ldr	r3, [pc, #104]	; (1a001dc0 <prvSwitchTimerLists+0x70>)
1a001d56:	681b      	ldr	r3, [r3, #0]
1a001d58:	681a      	ldr	r2, [r3, #0]
1a001d5a:	b352      	cbz	r2, 1a001db2 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d5c:	68db      	ldr	r3, [r3, #12]
1a001d5e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d60:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d62:	1d25      	adds	r5, r4, #4
1a001d64:	4628      	mov	r0, r5
1a001d66:	f7ff f959 	bl	1a00101c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001d6c:	4620      	mov	r0, r4
1a001d6e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001d70:	69e3      	ldr	r3, [r4, #28]
1a001d72:	2b01      	cmp	r3, #1
1a001d74:	d1ee      	bne.n	1a001d54 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001d76:	69a3      	ldr	r3, [r4, #24]
1a001d78:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001d7a:	429e      	cmp	r6, r3
1a001d7c:	d207      	bcs.n	1a001d8e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001d7e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001d80:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001d82:	4629      	mov	r1, r5
1a001d84:	4b0e      	ldr	r3, [pc, #56]	; (1a001dc0 <prvSwitchTimerLists+0x70>)
1a001d86:	6818      	ldr	r0, [r3, #0]
1a001d88:	f7ff f92e 	bl	1a000fe8 <vListInsert>
1a001d8c:	e7e2      	b.n	1a001d54 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001d8e:	2100      	movs	r1, #0
1a001d90:	9100      	str	r1, [sp, #0]
1a001d92:	460b      	mov	r3, r1
1a001d94:	4632      	mov	r2, r6
1a001d96:	4620      	mov	r0, r4
1a001d98:	f7ff ffa4 	bl	1a001ce4 <xTimerGenericCommand>
				configASSERT( xResult );
1a001d9c:	2800      	cmp	r0, #0
1a001d9e:	d1d9      	bne.n	1a001d54 <prvSwitchTimerLists+0x4>
1a001da0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da4:	f383 8811 	msr	BASEPRI, r3
1a001da8:	f3bf 8f6f 	isb	sy
1a001dac:	f3bf 8f4f 	dsb	sy
1a001db0:	e7fe      	b.n	1a001db0 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001db2:	4a04      	ldr	r2, [pc, #16]	; (1a001dc4 <prvSwitchTimerLists+0x74>)
1a001db4:	6810      	ldr	r0, [r2, #0]
1a001db6:	4902      	ldr	r1, [pc, #8]	; (1a001dc0 <prvSwitchTimerLists+0x70>)
1a001db8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001dba:	6013      	str	r3, [r2, #0]
}
1a001dbc:	b002      	add	sp, #8
1a001dbe:	bd70      	pop	{r4, r5, r6, pc}
1a001dc0:	100021e0 	.word	0x100021e0
1a001dc4:	100021e4 	.word	0x100021e4

1a001dc8 <prvSampleTimeNow>:
{
1a001dc8:	b538      	push	{r3, r4, r5, lr}
1a001dca:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001dcc:	f7ff fb60 	bl	1a001490 <xTaskGetTickCount>
1a001dd0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001dd2:	4b07      	ldr	r3, [pc, #28]	; (1a001df0 <prvSampleTimeNow+0x28>)
1a001dd4:	681b      	ldr	r3, [r3, #0]
1a001dd6:	4283      	cmp	r3, r0
1a001dd8:	d805      	bhi.n	1a001de6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001dda:	2300      	movs	r3, #0
1a001ddc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001dde:	4b04      	ldr	r3, [pc, #16]	; (1a001df0 <prvSampleTimeNow+0x28>)
1a001de0:	601c      	str	r4, [r3, #0]
}
1a001de2:	4620      	mov	r0, r4
1a001de4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001de6:	f7ff ffb3 	bl	1a001d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001dea:	2301      	movs	r3, #1
1a001dec:	602b      	str	r3, [r5, #0]
1a001dee:	e7f6      	b.n	1a001dde <prvSampleTimeNow+0x16>
1a001df0:	10002210 	.word	0x10002210

1a001df4 <prvProcessExpiredTimer>:
{
1a001df4:	b570      	push	{r4, r5, r6, lr}
1a001df6:	b082      	sub	sp, #8
1a001df8:	4605      	mov	r5, r0
1a001dfa:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001dfc:	4b14      	ldr	r3, [pc, #80]	; (1a001e50 <prvProcessExpiredTimer+0x5c>)
1a001dfe:	681b      	ldr	r3, [r3, #0]
1a001e00:	68db      	ldr	r3, [r3, #12]
1a001e02:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001e04:	1d20      	adds	r0, r4, #4
1a001e06:	f7ff f909 	bl	1a00101c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001e0a:	69e3      	ldr	r3, [r4, #28]
1a001e0c:	2b01      	cmp	r3, #1
1a001e0e:	d004      	beq.n	1a001e1a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001e12:	4620      	mov	r0, r4
1a001e14:	4798      	blx	r3
}
1a001e16:	b002      	add	sp, #8
1a001e18:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001e1a:	69a1      	ldr	r1, [r4, #24]
1a001e1c:	462b      	mov	r3, r5
1a001e1e:	4632      	mov	r2, r6
1a001e20:	4429      	add	r1, r5
1a001e22:	4620      	mov	r0, r4
1a001e24:	f7ff fee4 	bl	1a001bf0 <prvInsertTimerInActiveList>
1a001e28:	2800      	cmp	r0, #0
1a001e2a:	d0f1      	beq.n	1a001e10 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001e2c:	2100      	movs	r1, #0
1a001e2e:	9100      	str	r1, [sp, #0]
1a001e30:	460b      	mov	r3, r1
1a001e32:	462a      	mov	r2, r5
1a001e34:	4620      	mov	r0, r4
1a001e36:	f7ff ff55 	bl	1a001ce4 <xTimerGenericCommand>
			configASSERT( xResult );
1a001e3a:	2800      	cmp	r0, #0
1a001e3c:	d1e8      	bne.n	1a001e10 <prvProcessExpiredTimer+0x1c>
1a001e3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e42:	f383 8811 	msr	BASEPRI, r3
1a001e46:	f3bf 8f6f 	isb	sy
1a001e4a:	f3bf 8f4f 	dsb	sy
1a001e4e:	e7fe      	b.n	1a001e4e <prvProcessExpiredTimer+0x5a>
1a001e50:	100021e0 	.word	0x100021e0

1a001e54 <prvProcessTimerOrBlockTask>:
{
1a001e54:	b570      	push	{r4, r5, r6, lr}
1a001e56:	b082      	sub	sp, #8
1a001e58:	4606      	mov	r6, r0
1a001e5a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001e5c:	f7ff fb10 	bl	1a001480 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001e60:	a801      	add	r0, sp, #4
1a001e62:	f7ff ffb1 	bl	1a001dc8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001e66:	9b01      	ldr	r3, [sp, #4]
1a001e68:	bb1b      	cbnz	r3, 1a001eb2 <prvProcessTimerOrBlockTask+0x5e>
1a001e6a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001e6c:	b90c      	cbnz	r4, 1a001e72 <prvProcessTimerOrBlockTask+0x1e>
1a001e6e:	42b0      	cmp	r0, r6
1a001e70:	d218      	bcs.n	1a001ea4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001e72:	b12c      	cbz	r4, 1a001e80 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001e74:	4b11      	ldr	r3, [pc, #68]	; (1a001ebc <prvProcessTimerOrBlockTask+0x68>)
1a001e76:	681b      	ldr	r3, [r3, #0]
1a001e78:	681c      	ldr	r4, [r3, #0]
1a001e7a:	fab4 f484 	clz	r4, r4
1a001e7e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001e80:	4622      	mov	r2, r4
1a001e82:	1b71      	subs	r1, r6, r5
1a001e84:	4b0e      	ldr	r3, [pc, #56]	; (1a001ec0 <prvProcessTimerOrBlockTask+0x6c>)
1a001e86:	6818      	ldr	r0, [r3, #0]
1a001e88:	f7ff f86c 	bl	1a000f64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001e8c:	f7ff fb92 	bl	1a0015b4 <xTaskResumeAll>
1a001e90:	b988      	cbnz	r0, 1a001eb6 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001e92:	4b0c      	ldr	r3, [pc, #48]	; (1a001ec4 <prvProcessTimerOrBlockTask+0x70>)
1a001e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e98:	601a      	str	r2, [r3, #0]
1a001e9a:	f3bf 8f4f 	dsb	sy
1a001e9e:	f3bf 8f6f 	isb	sy
1a001ea2:	e008      	b.n	1a001eb6 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001ea4:	f7ff fb86 	bl	1a0015b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001ea8:	4629      	mov	r1, r5
1a001eaa:	4630      	mov	r0, r6
1a001eac:	f7ff ffa2 	bl	1a001df4 <prvProcessExpiredTimer>
1a001eb0:	e001      	b.n	1a001eb6 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001eb2:	f7ff fb7f 	bl	1a0015b4 <xTaskResumeAll>
}
1a001eb6:	b002      	add	sp, #8
1a001eb8:	bd70      	pop	{r4, r5, r6, pc}
1a001eba:	bf00      	nop
1a001ebc:	100021e4 	.word	0x100021e4
1a001ec0:	10002214 	.word	0x10002214
1a001ec4:	e000ed04 	.word	0xe000ed04

1a001ec8 <prvProcessReceivedCommands>:
{
1a001ec8:	b530      	push	{r4, r5, lr}
1a001eca:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001ecc:	e006      	b.n	1a001edc <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001ece:	9907      	ldr	r1, [sp, #28]
1a001ed0:	9806      	ldr	r0, [sp, #24]
1a001ed2:	9b05      	ldr	r3, [sp, #20]
1a001ed4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001ed6:	9b04      	ldr	r3, [sp, #16]
1a001ed8:	2b00      	cmp	r3, #0
1a001eda:	da0b      	bge.n	1a001ef4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001edc:	2200      	movs	r2, #0
1a001ede:	a904      	add	r1, sp, #16
1a001ee0:	4b35      	ldr	r3, [pc, #212]	; (1a001fb8 <prvProcessReceivedCommands+0xf0>)
1a001ee2:	6818      	ldr	r0, [r3, #0]
1a001ee4:	f7fe fe96 	bl	1a000c14 <xQueueReceive>
1a001ee8:	2800      	cmp	r0, #0
1a001eea:	d062      	beq.n	1a001fb2 <prvProcessReceivedCommands+0xea>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001eec:	9b04      	ldr	r3, [sp, #16]
1a001eee:	2b00      	cmp	r3, #0
1a001ef0:	daf1      	bge.n	1a001ed6 <prvProcessReceivedCommands+0xe>
1a001ef2:	e7ec      	b.n	1a001ece <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001ef4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001ef6:	6963      	ldr	r3, [r4, #20]
1a001ef8:	b113      	cbz	r3, 1a001f00 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001efa:	1d20      	adds	r0, r4, #4
1a001efc:	f7ff f88e 	bl	1a00101c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001f00:	a803      	add	r0, sp, #12
1a001f02:	f7ff ff61 	bl	1a001dc8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001f06:	9b04      	ldr	r3, [sp, #16]
1a001f08:	2b09      	cmp	r3, #9
1a001f0a:	d8e7      	bhi.n	1a001edc <prvProcessReceivedCommands+0x14>
1a001f0c:	a201      	add	r2, pc, #4	; (adr r2, 1a001f14 <prvProcessReceivedCommands+0x4c>)
1a001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001f12:	bf00      	nop
1a001f14:	1a001f3d 	.word	0x1a001f3d
1a001f18:	1a001f3d 	.word	0x1a001f3d
1a001f1c:	1a001f3d 	.word	0x1a001f3d
1a001f20:	1a001edd 	.word	0x1a001edd
1a001f24:	1a001f85 	.word	0x1a001f85
1a001f28:	1a001fab 	.word	0x1a001fab
1a001f2c:	1a001f3d 	.word	0x1a001f3d
1a001f30:	1a001f3d 	.word	0x1a001f3d
1a001f34:	1a001edd 	.word	0x1a001edd
1a001f38:	1a001f85 	.word	0x1a001f85
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001f3c:	9905      	ldr	r1, [sp, #20]
1a001f3e:	69a5      	ldr	r5, [r4, #24]
1a001f40:	460b      	mov	r3, r1
1a001f42:	4602      	mov	r2, r0
1a001f44:	4429      	add	r1, r5
1a001f46:	4620      	mov	r0, r4
1a001f48:	f7ff fe52 	bl	1a001bf0 <prvInsertTimerInActiveList>
1a001f4c:	2800      	cmp	r0, #0
1a001f4e:	d0c5      	beq.n	1a001edc <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001f52:	4620      	mov	r0, r4
1a001f54:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001f56:	69e3      	ldr	r3, [r4, #28]
1a001f58:	2b01      	cmp	r3, #1
1a001f5a:	d1bf      	bne.n	1a001edc <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001f5c:	69a2      	ldr	r2, [r4, #24]
1a001f5e:	2100      	movs	r1, #0
1a001f60:	9100      	str	r1, [sp, #0]
1a001f62:	460b      	mov	r3, r1
1a001f64:	9805      	ldr	r0, [sp, #20]
1a001f66:	4402      	add	r2, r0
1a001f68:	4620      	mov	r0, r4
1a001f6a:	f7ff febb 	bl	1a001ce4 <xTimerGenericCommand>
							configASSERT( xResult );
1a001f6e:	2800      	cmp	r0, #0
1a001f70:	d1b4      	bne.n	1a001edc <prvProcessReceivedCommands+0x14>
1a001f72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f76:	f383 8811 	msr	BASEPRI, r3
1a001f7a:	f3bf 8f6f 	isb	sy
1a001f7e:	f3bf 8f4f 	dsb	sy
1a001f82:	e7fe      	b.n	1a001f82 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001f84:	9905      	ldr	r1, [sp, #20]
1a001f86:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001f88:	b131      	cbz	r1, 1a001f98 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001f8a:	4603      	mov	r3, r0
1a001f8c:	4602      	mov	r2, r0
1a001f8e:	4401      	add	r1, r0
1a001f90:	4620      	mov	r0, r4
1a001f92:	f7ff fe2d 	bl	1a001bf0 <prvInsertTimerInActiveList>
					break;
1a001f96:	e7a1      	b.n	1a001edc <prvProcessReceivedCommands+0x14>
1a001f98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f9c:	f383 8811 	msr	BASEPRI, r3
1a001fa0:	f3bf 8f6f 	isb	sy
1a001fa4:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001fa8:	e7fe      	b.n	1a001fa8 <prvProcessReceivedCommands+0xe0>
						vPortFree( pxTimer );
1a001faa:	4620      	mov	r0, r4
1a001fac:	f7fe fbbe 	bl	1a00072c <vPortFree>
					break;
1a001fb0:	e794      	b.n	1a001edc <prvProcessReceivedCommands+0x14>
}
1a001fb2:	b009      	add	sp, #36	; 0x24
1a001fb4:	bd30      	pop	{r4, r5, pc}
1a001fb6:	bf00      	nop
1a001fb8:	10002214 	.word	0x10002214

1a001fbc <prvTimerTask>:
{
1a001fbc:	b500      	push	{lr}
1a001fbe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001fc0:	a801      	add	r0, sp, #4
1a001fc2:	f7ff fe05 	bl	1a001bd0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001fc6:	9901      	ldr	r1, [sp, #4]
1a001fc8:	f7ff ff44 	bl	1a001e54 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001fcc:	f7ff ff7c 	bl	1a001ec8 <prvProcessReceivedCommands>
1a001fd0:	e7f6      	b.n	1a001fc0 <prvTimerTask+0x4>
1a001fd2:	Address 0x000000001a001fd2 is out of bounds.


1a001fd4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001fd4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001fd6:	2300      	movs	r3, #0
1a001fd8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001fda:	4b0d      	ldr	r3, [pc, #52]	; (1a002010 <prvTaskExitError+0x3c>)
1a001fdc:	681b      	ldr	r3, [r3, #0]
1a001fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001fe2:	d008      	beq.n	1a001ff6 <prvTaskExitError+0x22>
1a001fe4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fe8:	f383 8811 	msr	BASEPRI, r3
1a001fec:	f3bf 8f6f 	isb	sy
1a001ff0:	f3bf 8f4f 	dsb	sy
1a001ff4:	e7fe      	b.n	1a001ff4 <prvTaskExitError+0x20>
1a001ff6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ffa:	f383 8811 	msr	BASEPRI, r3
1a001ffe:	f3bf 8f6f 	isb	sy
1a002002:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002006:	9b01      	ldr	r3, [sp, #4]
1a002008:	2b00      	cmp	r3, #0
1a00200a:	d0fc      	beq.n	1a002006 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a00200c:	b002      	add	sp, #8
1a00200e:	4770      	bx	lr
1a002010:	10000000 	.word	0x10000000

1a002014 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002014:	4808      	ldr	r0, [pc, #32]	; (1a002038 <prvPortStartFirstTask+0x24>)
1a002016:	6800      	ldr	r0, [r0, #0]
1a002018:	6800      	ldr	r0, [r0, #0]
1a00201a:	f380 8808 	msr	MSP, r0
1a00201e:	f04f 0000 	mov.w	r0, #0
1a002022:	f380 8814 	msr	CONTROL, r0
1a002026:	b662      	cpsie	i
1a002028:	b661      	cpsie	f
1a00202a:	f3bf 8f4f 	dsb	sy
1a00202e:	f3bf 8f6f 	isb	sy
1a002032:	df00      	svc	0
1a002034:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a002036:	0000      	.short	0x0000
1a002038:	e000ed08 	.word	0xe000ed08

1a00203c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a00203c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a00204c <vPortEnableVFP+0x10>
1a002040:	6801      	ldr	r1, [r0, #0]
1a002042:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002046:	6001      	str	r1, [r0, #0]
1a002048:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a00204a:	0000      	.short	0x0000
1a00204c:	e000ed88 	.word	0xe000ed88

1a002050 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002054:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002058:	f021 0101 	bic.w	r1, r1, #1
1a00205c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002060:	4b05      	ldr	r3, [pc, #20]	; (1a002078 <pxPortInitialiseStack+0x28>)
1a002062:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002066:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00206a:	f06f 0302 	mvn.w	r3, #2
1a00206e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002072:	3844      	subs	r0, #68	; 0x44
1a002074:	4770      	bx	lr
1a002076:	bf00      	nop
1a002078:	1a001fd5 	.word	0x1a001fd5
1a00207c:	ffffffff 	.word	0xffffffff

1a002080 <SVC_Handler>:
	__asm volatile (
1a002080:	4b07      	ldr	r3, [pc, #28]	; (1a0020a0 <pxCurrentTCBConst2>)
1a002082:	6819      	ldr	r1, [r3, #0]
1a002084:	6808      	ldr	r0, [r1, #0]
1a002086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00208a:	f380 8809 	msr	PSP, r0
1a00208e:	f3bf 8f6f 	isb	sy
1a002092:	f04f 0000 	mov.w	r0, #0
1a002096:	f380 8811 	msr	BASEPRI, r0
1a00209a:	4770      	bx	lr
1a00209c:	f3af 8000 	nop.w

1a0020a0 <pxCurrentTCBConst2>:
1a0020a0:	100020b4 	.word	0x100020b4

1a0020a4 <vPortEnterCritical>:
1a0020a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020a8:	f383 8811 	msr	BASEPRI, r3
1a0020ac:	f3bf 8f6f 	isb	sy
1a0020b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0020b4:	4a0a      	ldr	r2, [pc, #40]	; (1a0020e0 <vPortEnterCritical+0x3c>)
1a0020b6:	6813      	ldr	r3, [r2, #0]
1a0020b8:	3301      	adds	r3, #1
1a0020ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0020bc:	2b01      	cmp	r3, #1
1a0020be:	d000      	beq.n	1a0020c2 <vPortEnterCritical+0x1e>
}
1a0020c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0020c2:	4b08      	ldr	r3, [pc, #32]	; (1a0020e4 <vPortEnterCritical+0x40>)
1a0020c4:	681b      	ldr	r3, [r3, #0]
1a0020c6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0020ca:	d0f9      	beq.n	1a0020c0 <vPortEnterCritical+0x1c>
1a0020cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020d0:	f383 8811 	msr	BASEPRI, r3
1a0020d4:	f3bf 8f6f 	isb	sy
1a0020d8:	f3bf 8f4f 	dsb	sy
1a0020dc:	e7fe      	b.n	1a0020dc <vPortEnterCritical+0x38>
1a0020de:	bf00      	nop
1a0020e0:	10000000 	.word	0x10000000
1a0020e4:	e000ed04 	.word	0xe000ed04

1a0020e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0020e8:	4b09      	ldr	r3, [pc, #36]	; (1a002110 <vPortExitCritical+0x28>)
1a0020ea:	681b      	ldr	r3, [r3, #0]
1a0020ec:	b943      	cbnz	r3, 1a002100 <vPortExitCritical+0x18>
1a0020ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020f2:	f383 8811 	msr	BASEPRI, r3
1a0020f6:	f3bf 8f6f 	isb	sy
1a0020fa:	f3bf 8f4f 	dsb	sy
1a0020fe:	e7fe      	b.n	1a0020fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002100:	3b01      	subs	r3, #1
1a002102:	4a03      	ldr	r2, [pc, #12]	; (1a002110 <vPortExitCritical+0x28>)
1a002104:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002106:	b90b      	cbnz	r3, 1a00210c <vPortExitCritical+0x24>
	__asm volatile
1a002108:	f383 8811 	msr	BASEPRI, r3
}
1a00210c:	4770      	bx	lr
1a00210e:	bf00      	nop
1a002110:	10000000 	.word	0x10000000
1a002114:	ffffffff 	.word	0xffffffff
1a002118:	ffffffff 	.word	0xffffffff
1a00211c:	ffffffff 	.word	0xffffffff

1a002120 <PendSV_Handler>:
	__asm volatile
1a002120:	f3ef 8009 	mrs	r0, PSP
1a002124:	f3bf 8f6f 	isb	sy
1a002128:	4b15      	ldr	r3, [pc, #84]	; (1a002180 <pxCurrentTCBConst>)
1a00212a:	681a      	ldr	r2, [r3, #0]
1a00212c:	f01e 0f10 	tst.w	lr, #16
1a002130:	bf08      	it	eq
1a002132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00213a:	6010      	str	r0, [r2, #0]
1a00213c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002140:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002144:	f380 8811 	msr	BASEPRI, r0
1a002148:	f3bf 8f4f 	dsb	sy
1a00214c:	f3bf 8f6f 	isb	sy
1a002150:	f7ff fad4 	bl	1a0016fc <vTaskSwitchContext>
1a002154:	f04f 0000 	mov.w	r0, #0
1a002158:	f380 8811 	msr	BASEPRI, r0
1a00215c:	bc09      	pop	{r0, r3}
1a00215e:	6819      	ldr	r1, [r3, #0]
1a002160:	6808      	ldr	r0, [r1, #0]
1a002162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002166:	f01e 0f10 	tst.w	lr, #16
1a00216a:	bf08      	it	eq
1a00216c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002170:	f380 8809 	msr	PSP, r0
1a002174:	f3bf 8f6f 	isb	sy
1a002178:	4770      	bx	lr
1a00217a:	bf00      	nop
1a00217c:	f3af 8000 	nop.w

1a002180 <pxCurrentTCBConst>:
1a002180:	100020b4 	.word	0x100020b4

1a002184 <SysTick_Handler>:
{
1a002184:	b508      	push	{r3, lr}
	__asm volatile
1a002186:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00218a:	f383 8811 	msr	BASEPRI, r3
1a00218e:	f3bf 8f6f 	isb	sy
1a002192:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002196:	f7ff f981 	bl	1a00149c <xTaskIncrementTick>
1a00219a:	b118      	cbz	r0, 1a0021a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00219c:	4b03      	ldr	r3, [pc, #12]	; (1a0021ac <SysTick_Handler+0x28>)
1a00219e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0021a2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0021a4:	2300      	movs	r3, #0
1a0021a6:	f383 8811 	msr	BASEPRI, r3
}
1a0021aa:	bd08      	pop	{r3, pc}
1a0021ac:	e000ed04 	.word	0xe000ed04

1a0021b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0021b0:	4a08      	ldr	r2, [pc, #32]	; (1a0021d4 <vPortSetupTimerInterrupt+0x24>)
1a0021b2:	2300      	movs	r3, #0
1a0021b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0021b6:	4908      	ldr	r1, [pc, #32]	; (1a0021d8 <vPortSetupTimerInterrupt+0x28>)
1a0021b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0021ba:	4b08      	ldr	r3, [pc, #32]	; (1a0021dc <vPortSetupTimerInterrupt+0x2c>)
1a0021bc:	681b      	ldr	r3, [r3, #0]
1a0021be:	4908      	ldr	r1, [pc, #32]	; (1a0021e0 <vPortSetupTimerInterrupt+0x30>)
1a0021c0:	fba1 1303 	umull	r1, r3, r1, r3
1a0021c4:	099b      	lsrs	r3, r3, #6
1a0021c6:	3b01      	subs	r3, #1
1a0021c8:	4906      	ldr	r1, [pc, #24]	; (1a0021e4 <vPortSetupTimerInterrupt+0x34>)
1a0021ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0021cc:	2307      	movs	r3, #7
1a0021ce:	6013      	str	r3, [r2, #0]
}
1a0021d0:	4770      	bx	lr
1a0021d2:	bf00      	nop
1a0021d4:	e000e010 	.word	0xe000e010
1a0021d8:	e000e018 	.word	0xe000e018
1a0021dc:	10002290 	.word	0x10002290
1a0021e0:	10624dd3 	.word	0x10624dd3
1a0021e4:	e000e014 	.word	0xe000e014

1a0021e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0021e8:	4b3a      	ldr	r3, [pc, #232]	; (1a0022d4 <xPortStartScheduler+0xec>)
1a0021ea:	681a      	ldr	r2, [r3, #0]
1a0021ec:	4b3a      	ldr	r3, [pc, #232]	; (1a0022d8 <xPortStartScheduler+0xf0>)
1a0021ee:	429a      	cmp	r2, r3
1a0021f0:	d029      	beq.n	1a002246 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0021f2:	4b38      	ldr	r3, [pc, #224]	; (1a0022d4 <xPortStartScheduler+0xec>)
1a0021f4:	681a      	ldr	r2, [r3, #0]
1a0021f6:	4b39      	ldr	r3, [pc, #228]	; (1a0022dc <xPortStartScheduler+0xf4>)
1a0021f8:	429a      	cmp	r2, r3
1a0021fa:	d02d      	beq.n	1a002258 <xPortStartScheduler+0x70>
{
1a0021fc:	b510      	push	{r4, lr}
1a0021fe:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002200:	4b37      	ldr	r3, [pc, #220]	; (1a0022e0 <xPortStartScheduler+0xf8>)
1a002202:	781a      	ldrb	r2, [r3, #0]
1a002204:	b2d2      	uxtb	r2, r2
1a002206:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002208:	22ff      	movs	r2, #255	; 0xff
1a00220a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a00220c:	781b      	ldrb	r3, [r3, #0]
1a00220e:	b2db      	uxtb	r3, r3
1a002210:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002214:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002218:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00221c:	4a31      	ldr	r2, [pc, #196]	; (1a0022e4 <xPortStartScheduler+0xfc>)
1a00221e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002220:	4b31      	ldr	r3, [pc, #196]	; (1a0022e8 <xPortStartScheduler+0x100>)
1a002222:	2207      	movs	r2, #7
1a002224:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002226:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00222a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00222e:	d01c      	beq.n	1a00226a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002230:	4a2d      	ldr	r2, [pc, #180]	; (1a0022e8 <xPortStartScheduler+0x100>)
1a002232:	6813      	ldr	r3, [r2, #0]
1a002234:	3b01      	subs	r3, #1
1a002236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002238:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00223c:	005b      	lsls	r3, r3, #1
1a00223e:	b2db      	uxtb	r3, r3
1a002240:	f88d 3003 	strb.w	r3, [sp, #3]
1a002244:	e7ef      	b.n	1a002226 <xPortStartScheduler+0x3e>
	__asm volatile
1a002246:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00224a:	f383 8811 	msr	BASEPRI, r3
1a00224e:	f3bf 8f6f 	isb	sy
1a002252:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002256:	e7fe      	b.n	1a002256 <xPortStartScheduler+0x6e>
1a002258:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00225c:	f383 8811 	msr	BASEPRI, r3
1a002260:	f3bf 8f6f 	isb	sy
1a002264:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002268:	e7fe      	b.n	1a002268 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00226a:	4b1f      	ldr	r3, [pc, #124]	; (1a0022e8 <xPortStartScheduler+0x100>)
1a00226c:	681b      	ldr	r3, [r3, #0]
1a00226e:	2b04      	cmp	r3, #4
1a002270:	d008      	beq.n	1a002284 <xPortStartScheduler+0x9c>
1a002272:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002276:	f383 8811 	msr	BASEPRI, r3
1a00227a:	f3bf 8f6f 	isb	sy
1a00227e:	f3bf 8f4f 	dsb	sy
1a002282:	e7fe      	b.n	1a002282 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002284:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00228a:	4a17      	ldr	r2, [pc, #92]	; (1a0022e8 <xPortStartScheduler+0x100>)
1a00228c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00228e:	9b01      	ldr	r3, [sp, #4]
1a002290:	b2db      	uxtb	r3, r3
1a002292:	4a13      	ldr	r2, [pc, #76]	; (1a0022e0 <xPortStartScheduler+0xf8>)
1a002294:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002296:	4b15      	ldr	r3, [pc, #84]	; (1a0022ec <xPortStartScheduler+0x104>)
1a002298:	681a      	ldr	r2, [r3, #0]
1a00229a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00229e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0022a0:	681a      	ldr	r2, [r3, #0]
1a0022a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0022a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0022a8:	f7ff ff82 	bl	1a0021b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0022ac:	2400      	movs	r4, #0
1a0022ae:	4b10      	ldr	r3, [pc, #64]	; (1a0022f0 <xPortStartScheduler+0x108>)
1a0022b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0022b2:	f7ff fec3 	bl	1a00203c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0022b6:	4a0f      	ldr	r2, [pc, #60]	; (1a0022f4 <xPortStartScheduler+0x10c>)
1a0022b8:	6813      	ldr	r3, [r2, #0]
1a0022ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0022be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0022c0:	f7ff fea8 	bl	1a002014 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0022c4:	f7ff fa1a 	bl	1a0016fc <vTaskSwitchContext>
	prvTaskExitError();
1a0022c8:	f7ff fe84 	bl	1a001fd4 <prvTaskExitError>
}
1a0022cc:	4620      	mov	r0, r4
1a0022ce:	b002      	add	sp, #8
1a0022d0:	bd10      	pop	{r4, pc}
1a0022d2:	bf00      	nop
1a0022d4:	e000ed00 	.word	0xe000ed00
1a0022d8:	410fc271 	.word	0x410fc271
1a0022dc:	410fc270 	.word	0x410fc270
1a0022e0:	e000e400 	.word	0xe000e400
1a0022e4:	1000221c 	.word	0x1000221c
1a0022e8:	10002220 	.word	0x10002220
1a0022ec:	e000ed20 	.word	0xe000ed20
1a0022f0:	10000000 	.word	0x10000000
1a0022f4:	e000ef34 	.word	0xe000ef34

1a0022f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0022f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0022fc:	2b0f      	cmp	r3, #15
1a0022fe:	d90f      	bls.n	1a002320 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002300:	4a10      	ldr	r2, [pc, #64]	; (1a002344 <vPortValidateInterruptPriority+0x4c>)
1a002302:	5c9b      	ldrb	r3, [r3, r2]
1a002304:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002306:	4a10      	ldr	r2, [pc, #64]	; (1a002348 <vPortValidateInterruptPriority+0x50>)
1a002308:	7812      	ldrb	r2, [r2, #0]
1a00230a:	429a      	cmp	r2, r3
1a00230c:	d908      	bls.n	1a002320 <vPortValidateInterruptPriority+0x28>
1a00230e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002312:	f383 8811 	msr	BASEPRI, r3
1a002316:	f3bf 8f6f 	isb	sy
1a00231a:	f3bf 8f4f 	dsb	sy
1a00231e:	e7fe      	b.n	1a00231e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002320:	4b0a      	ldr	r3, [pc, #40]	; (1a00234c <vPortValidateInterruptPriority+0x54>)
1a002322:	681b      	ldr	r3, [r3, #0]
1a002324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002328:	4a09      	ldr	r2, [pc, #36]	; (1a002350 <vPortValidateInterruptPriority+0x58>)
1a00232a:	6812      	ldr	r2, [r2, #0]
1a00232c:	4293      	cmp	r3, r2
1a00232e:	d908      	bls.n	1a002342 <vPortValidateInterruptPriority+0x4a>
1a002330:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002334:	f383 8811 	msr	BASEPRI, r3
1a002338:	f3bf 8f6f 	isb	sy
1a00233c:	f3bf 8f4f 	dsb	sy
1a002340:	e7fe      	b.n	1a002340 <vPortValidateInterruptPriority+0x48>
	}
1a002342:	4770      	bx	lr
1a002344:	e000e3f0 	.word	0xe000e3f0
1a002348:	1000221c 	.word	0x1000221c
1a00234c:	e000ed0c 	.word	0xe000ed0c
1a002350:	10002220 	.word	0x10002220

1a002354 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002354:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002356:	4b05      	ldr	r3, [pc, #20]	; (1a00236c <DAC_IRQHandler+0x18>)
1a002358:	2201      	movs	r2, #1
1a00235a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00235e:	4b04      	ldr	r3, [pc, #16]	; (1a002370 <DAC_IRQHandler+0x1c>)
1a002360:	681b      	ldr	r3, [r3, #0]
1a002362:	b113      	cbz	r3, 1a00236a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002364:	4b02      	ldr	r3, [pc, #8]	; (1a002370 <DAC_IRQHandler+0x1c>)
1a002366:	681b      	ldr	r3, [r3, #0]
1a002368:	4798      	blx	r3
   }
}
1a00236a:	bd08      	pop	{r3, pc}
1a00236c:	e000e100 	.word	0xe000e100
1a002370:	10002224 	.word	0x10002224

1a002374 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002374:	2200      	movs	r2, #0
1a002376:	2a05      	cmp	r2, #5
1a002378:	d819      	bhi.n	1a0023ae <Board_LED_Init+0x3a>
{
1a00237a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00237c:	490c      	ldr	r1, [pc, #48]	; (1a0023b0 <Board_LED_Init+0x3c>)
1a00237e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002382:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002386:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002388:	4b0a      	ldr	r3, [pc, #40]	; (1a0023b4 <Board_LED_Init+0x40>)
1a00238a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00238e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002392:	2001      	movs	r0, #1
1a002394:	40a0      	lsls	r0, r4
1a002396:	4301      	orrs	r1, r0
1a002398:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00239c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0023a0:	2100      	movs	r1, #0
1a0023a2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0023a4:	3201      	adds	r2, #1
1a0023a6:	2a05      	cmp	r2, #5
1a0023a8:	d9e8      	bls.n	1a00237c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0023aa:	bc70      	pop	{r4, r5, r6}
1a0023ac:	4770      	bx	lr
1a0023ae:	4770      	bx	lr
1a0023b0:	1a004894 	.word	0x1a004894
1a0023b4:	400f4000 	.word	0x400f4000

1a0023b8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0023b8:	2300      	movs	r3, #0
1a0023ba:	2b03      	cmp	r3, #3
1a0023bc:	d816      	bhi.n	1a0023ec <Board_TEC_Init+0x34>
{
1a0023be:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0023c0:	490b      	ldr	r1, [pc, #44]	; (1a0023f0 <Board_TEC_Init+0x38>)
1a0023c2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0023c6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0023ca:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0023cc:	4c09      	ldr	r4, [pc, #36]	; (1a0023f4 <Board_TEC_Init+0x3c>)
1a0023ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0023d2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0023d6:	2001      	movs	r0, #1
1a0023d8:	40a8      	lsls	r0, r5
1a0023da:	ea21 0100 	bic.w	r1, r1, r0
1a0023de:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0023e2:	3301      	adds	r3, #1
1a0023e4:	2b03      	cmp	r3, #3
1a0023e6:	d9eb      	bls.n	1a0023c0 <Board_TEC_Init+0x8>
   }
}
1a0023e8:	bc30      	pop	{r4, r5}
1a0023ea:	4770      	bx	lr
1a0023ec:	4770      	bx	lr
1a0023ee:	bf00      	nop
1a0023f0:	1a00488c 	.word	0x1a00488c
1a0023f4:	400f4000 	.word	0x400f4000

1a0023f8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0023f8:	2300      	movs	r3, #0
1a0023fa:	2b08      	cmp	r3, #8
1a0023fc:	d816      	bhi.n	1a00242c <Board_GPIO_Init+0x34>
{
1a0023fe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002400:	490b      	ldr	r1, [pc, #44]	; (1a002430 <Board_GPIO_Init+0x38>)
1a002402:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002406:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00240a:	784d      	ldrb	r5, [r1, #1]
1a00240c:	4c09      	ldr	r4, [pc, #36]	; (1a002434 <Board_GPIO_Init+0x3c>)
1a00240e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002412:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002416:	2001      	movs	r0, #1
1a002418:	40a8      	lsls	r0, r5
1a00241a:	ea21 0100 	bic.w	r1, r1, r0
1a00241e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002422:	3301      	adds	r3, #1
1a002424:	2b08      	cmp	r3, #8
1a002426:	d9eb      	bls.n	1a002400 <Board_GPIO_Init+0x8>
   }
}
1a002428:	bc30      	pop	{r4, r5}
1a00242a:	4770      	bx	lr
1a00242c:	4770      	bx	lr
1a00242e:	bf00      	nop
1a002430:	1a0048a0 	.word	0x1a0048a0
1a002434:	400f4000 	.word	0x400f4000

1a002438 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002438:	b510      	push	{r4, lr}
1a00243a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00243c:	4c08      	ldr	r4, [pc, #32]	; (1a002460 <Board_ADC_Init+0x28>)
1a00243e:	4669      	mov	r1, sp
1a002440:	4620      	mov	r0, r4
1a002442:	f000 fa17 	bl	1a002874 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002446:	4a07      	ldr	r2, [pc, #28]	; (1a002464 <Board_ADC_Init+0x2c>)
1a002448:	4669      	mov	r1, sp
1a00244a:	4620      	mov	r0, r4
1a00244c:	f000 fa32 	bl	1a0028b4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002450:	2200      	movs	r2, #0
1a002452:	4669      	mov	r1, sp
1a002454:	4620      	mov	r0, r4
1a002456:	f000 fa46 	bl	1a0028e6 <Chip_ADC_SetResolution>
}
1a00245a:	b002      	add	sp, #8
1a00245c:	bd10      	pop	{r4, pc}
1a00245e:	bf00      	nop
1a002460:	400e3000 	.word	0x400e3000
1a002464:	00061a80 	.word	0x00061a80

1a002468 <Board_SPI_Init>:
{
1a002468:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00246a:	4c0b      	ldr	r4, [pc, #44]	; (1a002498 <Board_SPI_Init+0x30>)
1a00246c:	4620      	mov	r0, r4
1a00246e:	f000 fdfd 	bl	1a00306c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002472:	6863      	ldr	r3, [r4, #4]
1a002474:	f023 0304 	bic.w	r3, r3, #4
1a002478:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00247a:	6823      	ldr	r3, [r4, #0]
1a00247c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002480:	f043 0307 	orr.w	r3, r3, #7
1a002484:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002486:	4905      	ldr	r1, [pc, #20]	; (1a00249c <Board_SPI_Init+0x34>)
1a002488:	4620      	mov	r0, r4
1a00248a:	f000 fdd0 	bl	1a00302e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00248e:	6863      	ldr	r3, [r4, #4]
1a002490:	f043 0302 	orr.w	r3, r3, #2
1a002494:	6063      	str	r3, [r4, #4]
}
1a002496:	bd10      	pop	{r4, pc}
1a002498:	400c5000 	.word	0x400c5000
1a00249c:	000186a0 	.word	0x000186a0

1a0024a0 <Board_I2C_Init>:
{
1a0024a0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0024a2:	2000      	movs	r0, #0
1a0024a4:	f000 f8c6 	bl	1a002634 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0024a8:	4b04      	ldr	r3, [pc, #16]	; (1a0024bc <Board_I2C_Init+0x1c>)
1a0024aa:	f640 0208 	movw	r2, #2056	; 0x808
1a0024ae:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0024b2:	4903      	ldr	r1, [pc, #12]	; (1a0024c0 <Board_I2C_Init+0x20>)
1a0024b4:	2000      	movs	r0, #0
1a0024b6:	f000 f8cf 	bl	1a002658 <Chip_I2C_SetClockRate>
}
1a0024ba:	bd08      	pop	{r3, pc}
1a0024bc:	40086000 	.word	0x40086000
1a0024c0:	000f4240 	.word	0x000f4240

1a0024c4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0024c4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0024c6:	4c07      	ldr	r4, [pc, #28]	; (1a0024e4 <Board_Debug_Init+0x20>)
1a0024c8:	4620      	mov	r0, r4
1a0024ca:	f000 f8f7 	bl	1a0026bc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0024ce:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0024d2:	4620      	mov	r0, r4
1a0024d4:	f000 f93c 	bl	1a002750 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0024d8:	2303      	movs	r3, #3
1a0024da:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0024dc:	2301      	movs	r3, #1
1a0024de:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0024e0:	bd10      	pop	{r4, pc}
1a0024e2:	bf00      	nop
1a0024e4:	400c1000 	.word	0x400c1000

1a0024e8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0024e8:	4b03      	ldr	r3, [pc, #12]	; (1a0024f8 <Board_UARTPutChar+0x10>)
1a0024ea:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0024ec:	f013 0f20 	tst.w	r3, #32
1a0024f0:	d0fa      	beq.n	1a0024e8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0024f2:	4b01      	ldr	r3, [pc, #4]	; (1a0024f8 <Board_UARTPutChar+0x10>)
1a0024f4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0024f6:	4770      	bx	lr
1a0024f8:	400c1000 	.word	0x400c1000

1a0024fc <Board_UARTGetChar>:
	return pUART->LSR;
1a0024fc:	4b05      	ldr	r3, [pc, #20]	; (1a002514 <Board_UARTGetChar+0x18>)
1a0024fe:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002500:	f013 0f01 	tst.w	r3, #1
1a002504:	d003      	beq.n	1a00250e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002506:	4b03      	ldr	r3, [pc, #12]	; (1a002514 <Board_UARTGetChar+0x18>)
1a002508:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00250a:	b2c0      	uxtb	r0, r0
1a00250c:	4770      	bx	lr
   }
   return EOF;
1a00250e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002512:	4770      	bx	lr
1a002514:	400c1000 	.word	0x400c1000

1a002518 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002518:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00251a:	f7ff ffd3 	bl	1a0024c4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00251e:	4809      	ldr	r0, [pc, #36]	; (1a002544 <Board_Init+0x2c>)
1a002520:	f000 fcb8 	bl	1a002e94 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002524:	f7ff ff68 	bl	1a0023f8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002528:	f7ff ff86 	bl	1a002438 <Board_ADC_Init>
   Board_SPI_Init();
1a00252c:	f7ff ff9c 	bl	1a002468 <Board_SPI_Init>
   Board_I2C_Init();
1a002530:	f7ff ffb6 	bl	1a0024a0 <Board_I2C_Init>

   Board_LED_Init();
1a002534:	f7ff ff1e 	bl	1a002374 <Board_LED_Init>
   Board_TEC_Init();
1a002538:	f7ff ff3e 	bl	1a0023b8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00253c:	f000 f9da 	bl	1a0028f4 <SystemCoreClockUpdate>
}
1a002540:	bd08      	pop	{r3, pc}
1a002542:	bf00      	nop
1a002544:	400f4000 	.word	0x400f4000

1a002548 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002548:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00254a:	b2c0      	uxtb	r0, r0
1a00254c:	f7ff ffcc 	bl	1a0024e8 <Board_UARTPutChar>
}
1a002550:	bd08      	pop	{r3, pc}

1a002552 <__stdio_getchar>:

int __stdio_getchar()
{
1a002552:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002554:	f7ff ffd2 	bl	1a0024fc <Board_UARTGetChar>
}
1a002558:	bd08      	pop	{r3, pc}

1a00255a <__stdio_init>:

void __stdio_init()
{
1a00255a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00255c:	f7ff ffb2 	bl	1a0024c4 <Board_Debug_Init>
1a002560:	bd08      	pop	{r3, pc}
1a002562:	Address 0x000000001a002562 is out of bounds.


1a002564 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002564:	2300      	movs	r3, #0
1a002566:	2b1c      	cmp	r3, #28
1a002568:	d812      	bhi.n	1a002590 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00256a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00256c:	4a09      	ldr	r2, [pc, #36]	; (1a002594 <Board_SetupMuxing+0x30>)
1a00256e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002572:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002576:	784a      	ldrb	r2, [r1, #1]
1a002578:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00257a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00257e:	4906      	ldr	r1, [pc, #24]	; (1a002598 <Board_SetupMuxing+0x34>)
1a002580:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002584:	3301      	adds	r3, #1
1a002586:	2b1c      	cmp	r3, #28
1a002588:	d9f0      	bls.n	1a00256c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00258a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00258e:	4770      	bx	lr
1a002590:	4770      	bx	lr
1a002592:	bf00      	nop
1a002594:	1a0048bc 	.word	0x1a0048bc
1a002598:	40086000 	.word	0x40086000

1a00259c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00259c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00259e:	4a17      	ldr	r2, [pc, #92]	; (1a0025fc <Board_SetupClocking+0x60>)
1a0025a0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0025a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0025a8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0025ac:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0025b0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0025b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0025b8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0025bc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0025c0:	2201      	movs	r2, #1
1a0025c2:	490f      	ldr	r1, [pc, #60]	; (1a002600 <Board_SetupClocking+0x64>)
1a0025c4:	2006      	movs	r0, #6
1a0025c6:	f000 fc67 	bl	1a002e98 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0025ca:	2400      	movs	r4, #0
1a0025cc:	b14c      	cbz	r4, 1a0025e2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0025ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0025fc <Board_SetupClocking+0x60>)
1a0025d0:	685a      	ldr	r2, [r3, #4]
1a0025d2:	f022 020c 	bic.w	r2, r2, #12
1a0025d6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0025d8:	685a      	ldr	r2, [r3, #4]
1a0025da:	f042 0203 	orr.w	r2, r2, #3
1a0025de:	605a      	str	r2, [r3, #4]
}
1a0025e0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0025e2:	4808      	ldr	r0, [pc, #32]	; (1a002604 <Board_SetupClocking+0x68>)
1a0025e4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0025e8:	2301      	movs	r3, #1
1a0025ea:	788a      	ldrb	r2, [r1, #2]
1a0025ec:	7849      	ldrb	r1, [r1, #1]
1a0025ee:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0025f2:	f000 fbab 	bl	1a002d4c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0025f6:	3401      	adds	r4, #1
1a0025f8:	e7e8      	b.n	1a0025cc <Board_SetupClocking+0x30>
1a0025fa:	bf00      	nop
1a0025fc:	40043000 	.word	0x40043000
1a002600:	0c28cb00 	.word	0x0c28cb00
1a002604:	1a0048b8 	.word	0x1a0048b8

1a002608 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002608:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00260a:	f7ff ffab 	bl	1a002564 <Board_SetupMuxing>
    Board_SetupClocking();
1a00260e:	f7ff ffc5 	bl	1a00259c <Board_SetupClocking>
}
1a002612:	bd08      	pop	{r3, pc}

1a002614 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002614:	2901      	cmp	r1, #1
1a002616:	d109      	bne.n	1a00262c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002618:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00261c:	0082      	lsls	r2, r0, #2
1a00261e:	4b04      	ldr	r3, [pc, #16]	; (1a002630 <Chip_I2C_EventHandler+0x1c>)
1a002620:	4413      	add	r3, r2
1a002622:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002624:	7d13      	ldrb	r3, [r2, #20]
1a002626:	b2db      	uxtb	r3, r3
1a002628:	2b04      	cmp	r3, #4
1a00262a:	d0fb      	beq.n	1a002624 <Chip_I2C_EventHandler+0x10>
}
1a00262c:	4770      	bx	lr
1a00262e:	bf00      	nop
1a002630:	10000004 	.word	0x10000004

1a002634 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002634:	b570      	push	{r4, r5, r6, lr}
1a002636:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002638:	4e06      	ldr	r6, [pc, #24]	; (1a002654 <Chip_I2C_Init+0x20>)
1a00263a:	00c4      	lsls	r4, r0, #3
1a00263c:	1a22      	subs	r2, r4, r0
1a00263e:	0093      	lsls	r3, r2, #2
1a002640:	4433      	add	r3, r6
1a002642:	8898      	ldrh	r0, [r3, #4]
1a002644:	f000 fbe6 	bl	1a002e14 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002648:	1b64      	subs	r4, r4, r5
1a00264a:	00a3      	lsls	r3, r4, #2
1a00264c:	58f3      	ldr	r3, [r6, r3]
1a00264e:	226c      	movs	r2, #108	; 0x6c
1a002650:	619a      	str	r2, [r3, #24]
}
1a002652:	bd70      	pop	{r4, r5, r6, pc}
1a002654:	10000004 	.word	0x10000004

1a002658 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00265c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00265e:	4e0b      	ldr	r6, [pc, #44]	; (1a00268c <Chip_I2C_SetClockRate+0x34>)
1a002660:	00c5      	lsls	r5, r0, #3
1a002662:	1a2b      	subs	r3, r5, r0
1a002664:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002668:	eb06 0308 	add.w	r3, r6, r8
1a00266c:	8898      	ldrh	r0, [r3, #4]
1a00266e:	f000 fbeb 	bl	1a002e48 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002672:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002676:	f856 3008 	ldr.w	r3, [r6, r8]
1a00267a:	0842      	lsrs	r2, r0, #1
1a00267c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00267e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002682:	691a      	ldr	r2, [r3, #16]
1a002684:	1a80      	subs	r0, r0, r2
1a002686:	6158      	str	r0, [r3, #20]
}
1a002688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00268c:	10000004 	.word	0x10000004

1a002690 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002690:	4b09      	ldr	r3, [pc, #36]	; (1a0026b8 <Chip_UART_GetIndex+0x28>)
1a002692:	4298      	cmp	r0, r3
1a002694:	d009      	beq.n	1a0026aa <Chip_UART_GetIndex+0x1a>
1a002696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00269a:	4298      	cmp	r0, r3
1a00269c:	d007      	beq.n	1a0026ae <Chip_UART_GetIndex+0x1e>
1a00269e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0026a2:	4298      	cmp	r0, r3
1a0026a4:	d005      	beq.n	1a0026b2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0026a6:	2000      	movs	r0, #0
1a0026a8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0026aa:	2002      	movs	r0, #2
1a0026ac:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0026ae:	2003      	movs	r0, #3
1a0026b0:	4770      	bx	lr
			return 1;
1a0026b2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0026b4:	4770      	bx	lr
1a0026b6:	bf00      	nop
1a0026b8:	400c1000 	.word	0x400c1000

1a0026bc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0026bc:	b530      	push	{r4, r5, lr}
1a0026be:	b083      	sub	sp, #12
1a0026c0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0026c2:	f7ff ffe5 	bl	1a002690 <Chip_UART_GetIndex>
1a0026c6:	2301      	movs	r3, #1
1a0026c8:	461a      	mov	r2, r3
1a0026ca:	4619      	mov	r1, r3
1a0026cc:	4d0e      	ldr	r5, [pc, #56]	; (1a002708 <Chip_UART_Init+0x4c>)
1a0026ce:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0026d2:	f000 fb81 	bl	1a002dd8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0026d6:	2307      	movs	r3, #7
1a0026d8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0026da:	2300      	movs	r3, #0
1a0026dc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0026de:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0026e0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0026e2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0026e4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0026e6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0026e8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0026ea:	4b08      	ldr	r3, [pc, #32]	; (1a00270c <Chip_UART_Init+0x50>)
1a0026ec:	429c      	cmp	r4, r3
1a0026ee:	d006      	beq.n	1a0026fe <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0026f0:	2303      	movs	r3, #3
1a0026f2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0026f4:	2310      	movs	r3, #16
1a0026f6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0026f8:	9b01      	ldr	r3, [sp, #4]
}
1a0026fa:	b003      	add	sp, #12
1a0026fc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0026fe:	2300      	movs	r3, #0
1a002700:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002702:	69a3      	ldr	r3, [r4, #24]
1a002704:	9301      	str	r3, [sp, #4]
1a002706:	e7f3      	b.n	1a0026f0 <Chip_UART_Init+0x34>
1a002708:	1a004938 	.word	0x1a004938
1a00270c:	40082000 	.word	0x40082000

1a002710 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002710:	b538      	push	{r3, r4, r5, lr}
1a002712:	4605      	mov	r5, r0
1a002714:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002716:	f7ff ffbb 	bl	1a002690 <Chip_UART_GetIndex>
1a00271a:	4b0c      	ldr	r3, [pc, #48]	; (1a00274c <Chip_UART_SetBaud+0x3c>)
1a00271c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002720:	f000 fb92 	bl	1a002e48 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002724:	0123      	lsls	r3, r4, #4
1a002726:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00272a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00272c:	68ea      	ldr	r2, [r5, #12]
1a00272e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002732:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002734:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002736:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00273a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00273c:	68ea      	ldr	r2, [r5, #12]
1a00273e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002742:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002744:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002748:	0900      	lsrs	r0, r0, #4
1a00274a:	bd38      	pop	{r3, r4, r5, pc}
1a00274c:	1a004930 	.word	0x1a004930

1a002750 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002754:	b083      	sub	sp, #12
1a002756:	9001      	str	r0, [sp, #4]
1a002758:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00275a:	f7ff ff99 	bl	1a002690 <Chip_UART_GetIndex>
1a00275e:	4b32      	ldr	r3, [pc, #200]	; (1a002828 <Chip_UART_SetBaudFDR+0xd8>)
1a002760:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002764:	f000 fb70 	bl	1a002e48 <Chip_Clock_GetRate>
1a002768:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00276a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00276e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002770:	f04f 0b00 	mov.w	fp, #0
1a002774:	46a2      	mov	sl, r4
1a002776:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a002778:	e02a      	b.n	1a0027d0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00277a:	4242      	negs	r2, r0
				div ++;
1a00277c:	1c4b      	adds	r3, r1, #1
1a00277e:	e017      	b.n	1a0027b0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002780:	b30a      	cbz	r2, 1a0027c6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002782:	4617      	mov	r7, r2
			sd = d;
1a002784:	46ab      	mov	fp, r5
			sm = m;
1a002786:	46a2      	mov	sl, r4
			sdiv = div;
1a002788:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00278a:	3501      	adds	r5, #1
1a00278c:	42ac      	cmp	r4, r5
1a00278e:	d91e      	bls.n	1a0027ce <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002790:	0933      	lsrs	r3, r6, #4
1a002792:	0730      	lsls	r0, r6, #28
1a002794:	fba4 0100 	umull	r0, r1, r4, r0
1a002798:	fb04 1103 	mla	r1, r4, r3, r1
1a00279c:	1962      	adds	r2, r4, r5
1a00279e:	fb08 f202 	mul.w	r2, r8, r2
1a0027a2:	2300      	movs	r3, #0
1a0027a4:	f000 fe8c 	bl	1a0034c0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0027a8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0027aa:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0027ac:	2800      	cmp	r0, #0
1a0027ae:	dbe4      	blt.n	1a00277a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0027b0:	4297      	cmp	r7, r2
1a0027b2:	d3ea      	bcc.n	1a00278a <Chip_UART_SetBaudFDR+0x3a>
1a0027b4:	2b00      	cmp	r3, #0
1a0027b6:	d0e8      	beq.n	1a00278a <Chip_UART_SetBaudFDR+0x3a>
1a0027b8:	0c19      	lsrs	r1, r3, #16
1a0027ba:	d1e6      	bne.n	1a00278a <Chip_UART_SetBaudFDR+0x3a>
1a0027bc:	2b02      	cmp	r3, #2
1a0027be:	d8df      	bhi.n	1a002780 <Chip_UART_SetBaudFDR+0x30>
1a0027c0:	2d00      	cmp	r5, #0
1a0027c2:	d0dd      	beq.n	1a002780 <Chip_UART_SetBaudFDR+0x30>
1a0027c4:	e7e1      	b.n	1a00278a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0027c6:	4617      	mov	r7, r2
			sd = d;
1a0027c8:	46ab      	mov	fp, r5
			sm = m;
1a0027ca:	46a2      	mov	sl, r4
			sdiv = div;
1a0027cc:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0027ce:	3401      	adds	r4, #1
1a0027d0:	b11f      	cbz	r7, 1a0027da <Chip_UART_SetBaudFDR+0x8a>
1a0027d2:	2c0f      	cmp	r4, #15
1a0027d4:	d801      	bhi.n	1a0027da <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0027d6:	2500      	movs	r5, #0
1a0027d8:	e7d8      	b.n	1a00278c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0027da:	f1b9 0f00 	cmp.w	r9, #0
1a0027de:	d01e      	beq.n	1a00281e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0027e0:	9a01      	ldr	r2, [sp, #4]
1a0027e2:	4611      	mov	r1, r2
1a0027e4:	68d3      	ldr	r3, [r2, #12]
1a0027e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0027ea:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0027ec:	fa5f f389 	uxtb.w	r3, r9
1a0027f0:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0027f2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0027f6:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0027f8:	68d3      	ldr	r3, [r2, #12]
1a0027fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0027fe:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002800:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002804:	b2db      	uxtb	r3, r3
1a002806:	f00b 020f 	and.w	r2, fp, #15
1a00280a:	4313      	orrs	r3, r2
1a00280c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00280e:	0933      	lsrs	r3, r6, #4
1a002810:	fb0a f303 	mul.w	r3, sl, r3
1a002814:	44da      	add	sl, fp
1a002816:	fb09 f90a 	mul.w	r9, r9, sl
1a00281a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00281e:	4648      	mov	r0, r9
1a002820:	b003      	add	sp, #12
1a002822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002826:	bf00      	nop
1a002828:	1a004930 	.word	0x1a004930

1a00282c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00282c:	4b03      	ldr	r3, [pc, #12]	; (1a00283c <Chip_ADC_GetClockIndex+0x10>)
1a00282e:	4298      	cmp	r0, r3
1a002830:	d001      	beq.n	1a002836 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002832:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002834:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002836:	2004      	movs	r0, #4
1a002838:	4770      	bx	lr
1a00283a:	bf00      	nop
1a00283c:	400e4000 	.word	0x400e4000

1a002840 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002840:	b570      	push	{r4, r5, r6, lr}
1a002842:	460d      	mov	r5, r1
1a002844:	4614      	mov	r4, r2
1a002846:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002848:	f7ff fff0 	bl	1a00282c <Chip_ADC_GetClockIndex>
1a00284c:	f000 fafc 	bl	1a002e48 <Chip_Clock_GetRate>
	if (burstMode) {
1a002850:	b155      	cbz	r5, 1a002868 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002852:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002856:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00285a:	0064      	lsls	r4, r4, #1
1a00285c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002860:	b2c0      	uxtb	r0, r0
1a002862:	3801      	subs	r0, #1
	return div;
}
1a002864:	b2c0      	uxtb	r0, r0
1a002866:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a002868:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00286c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002870:	e7f1      	b.n	1a002856 <getClkDiv+0x16>
1a002872:	Address 0x000000001a002872 is out of bounds.


1a002874 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002874:	b538      	push	{r3, r4, r5, lr}
1a002876:	4605      	mov	r5, r0
1a002878:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00287a:	f7ff ffd7 	bl	1a00282c <Chip_ADC_GetClockIndex>
1a00287e:	2301      	movs	r3, #1
1a002880:	461a      	mov	r2, r3
1a002882:	4619      	mov	r1, r3
1a002884:	f000 faa8 	bl	1a002dd8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002888:	2100      	movs	r1, #0
1a00288a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00288c:	4a08      	ldr	r2, [pc, #32]	; (1a0028b0 <Chip_ADC_Init+0x3c>)
1a00288e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002890:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002892:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002894:	230b      	movs	r3, #11
1a002896:	4628      	mov	r0, r5
1a002898:	f7ff ffd2 	bl	1a002840 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00289c:	0200      	lsls	r0, r0, #8
1a00289e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0028a2:	7920      	ldrb	r0, [r4, #4]
1a0028a4:	0440      	lsls	r0, r0, #17
1a0028a6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0028aa:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0028ac:	6028      	str	r0, [r5, #0]
}
1a0028ae:	bd38      	pop	{r3, r4, r5, pc}
1a0028b0:	00061a80 	.word	0x00061a80

1a0028b4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0028b4:	b570      	push	{r4, r5, r6, lr}
1a0028b6:	4605      	mov	r5, r0
1a0028b8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0028ba:	6804      	ldr	r4, [r0, #0]
1a0028bc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0028c0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0028c4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0028c6:	790b      	ldrb	r3, [r1, #4]
1a0028c8:	f1c3 030b 	rsb	r3, r3, #11
1a0028cc:	b2db      	uxtb	r3, r3
1a0028ce:	7949      	ldrb	r1, [r1, #5]
1a0028d0:	f7ff ffb6 	bl	1a002840 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0028d4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0028d8:	7933      	ldrb	r3, [r6, #4]
1a0028da:	045b      	lsls	r3, r3, #17
1a0028dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0028e0:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0028e2:	602b      	str	r3, [r5, #0]
}
1a0028e4:	bd70      	pop	{r4, r5, r6, pc}

1a0028e6 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0028e6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0028e8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0028ea:	680a      	ldr	r2, [r1, #0]
1a0028ec:	f7ff ffe2 	bl	1a0028b4 <Chip_ADC_SetSampleRate>
}
1a0028f0:	bd08      	pop	{r3, pc}
1a0028f2:	Address 0x000000001a0028f2 is out of bounds.


1a0028f4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0028f4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0028f6:	2069      	movs	r0, #105	; 0x69
1a0028f8:	f000 faa6 	bl	1a002e48 <Chip_Clock_GetRate>
1a0028fc:	4b01      	ldr	r3, [pc, #4]	; (1a002904 <SystemCoreClockUpdate+0x10>)
1a0028fe:	6018      	str	r0, [r3, #0]
}
1a002900:	bd08      	pop	{r3, pc}
1a002902:	bf00      	nop
1a002904:	10002290 	.word	0x10002290

1a002908 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002908:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00290a:	680b      	ldr	r3, [r1, #0]
1a00290c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002910:	d002      	beq.n	1a002918 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002916:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002918:	4607      	mov	r7, r0
1a00291a:	2501      	movs	r5, #1
1a00291c:	e03a      	b.n	1a002994 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00291e:	694b      	ldr	r3, [r1, #20]
1a002920:	fb03 f302 	mul.w	r3, r3, r2
1a002924:	fbb3 f3f5 	udiv	r3, r3, r5
1a002928:	e01c      	b.n	1a002964 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00292a:	461c      	mov	r4, r3
	if (val < 0)
1a00292c:	ebb0 0c04 	subs.w	ip, r0, r4
1a002930:	d427      	bmi.n	1a002982 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002932:	4567      	cmp	r7, ip
1a002934:	d906      	bls.n	1a002944 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002936:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002938:	1c77      	adds	r7, r6, #1
1a00293a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00293c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00293e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002940:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002942:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a002944:	3201      	adds	r2, #1
1a002946:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00294a:	dc1d      	bgt.n	1a002988 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a00294c:	680c      	ldr	r4, [r1, #0]
1a00294e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002952:	d0e4      	beq.n	1a00291e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002954:	1c73      	adds	r3, r6, #1
1a002956:	fa02 fc03 	lsl.w	ip, r2, r3
1a00295a:	694b      	ldr	r3, [r1, #20]
1a00295c:	fb03 f30c 	mul.w	r3, r3, ip
1a002960:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002964:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0029a0 <pll_calc_divs+0x98>
1a002968:	4563      	cmp	r3, ip
1a00296a:	d9eb      	bls.n	1a002944 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00296c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0029a4 <pll_calc_divs+0x9c>
1a002970:	4563      	cmp	r3, ip
1a002972:	d809      	bhi.n	1a002988 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a002974:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002978:	d1d7      	bne.n	1a00292a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00297a:	1c74      	adds	r4, r6, #1
1a00297c:	fa23 f404 	lsr.w	r4, r3, r4
1a002980:	e7d4      	b.n	1a00292c <pll_calc_divs+0x24>
		return -val;
1a002982:	f1cc 0c00 	rsb	ip, ip, #0
1a002986:	e7d4      	b.n	1a002932 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a002988:	3601      	adds	r6, #1
1a00298a:	2e03      	cmp	r6, #3
1a00298c:	dc01      	bgt.n	1a002992 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00298e:	2201      	movs	r2, #1
1a002990:	e7d9      	b.n	1a002946 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002992:	3501      	adds	r5, #1
1a002994:	2d04      	cmp	r5, #4
1a002996:	dc01      	bgt.n	1a00299c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a002998:	2600      	movs	r6, #0
1a00299a:	e7f6      	b.n	1a00298a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00299c:	bcf0      	pop	{r4, r5, r6, r7}
1a00299e:	4770      	bx	lr
1a0029a0:	094c5eff 	.word	0x094c5eff
1a0029a4:	1312d000 	.word	0x1312d000

1a0029a8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0029a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0029aa:	b099      	sub	sp, #100	; 0x64
1a0029ac:	4605      	mov	r5, r0
1a0029ae:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0029b0:	225c      	movs	r2, #92	; 0x5c
1a0029b2:	2100      	movs	r1, #0
1a0029b4:	a801      	add	r0, sp, #4
1a0029b6:	f001 f8f0 	bl	1a003b9a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0029ba:	2380      	movs	r3, #128	; 0x80
1a0029bc:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0029be:	6963      	ldr	r3, [r4, #20]
1a0029c0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0029c2:	7923      	ldrb	r3, [r4, #4]
1a0029c4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0029c8:	4669      	mov	r1, sp
1a0029ca:	4628      	mov	r0, r5
1a0029cc:	f7ff ff9c 	bl	1a002908 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0029d0:	9b06      	ldr	r3, [sp, #24]
1a0029d2:	42ab      	cmp	r3, r5
1a0029d4:	d027      	beq.n	1a002a26 <pll_get_frac+0x7e>
	if (val < 0)
1a0029d6:	1aeb      	subs	r3, r5, r3
1a0029d8:	d42e      	bmi.n	1a002a38 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0029da:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0029dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0029de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0029e2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0029e4:	6963      	ldr	r3, [r4, #20]
1a0029e6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0029e8:	7923      	ldrb	r3, [r4, #4]
1a0029ea:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0029ee:	a910      	add	r1, sp, #64	; 0x40
1a0029f0:	4628      	mov	r0, r5
1a0029f2:	f7ff ff89 	bl	1a002908 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0029f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0029f8:	42ab      	cmp	r3, r5
1a0029fa:	d01f      	beq.n	1a002a3c <pll_get_frac+0x94>
	if (val < 0)
1a0029fc:	1aeb      	subs	r3, r5, r3
1a0029fe:	d425      	bmi.n	1a002a4c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002a00:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002a02:	4b2b      	ldr	r3, [pc, #172]	; (1a002ab0 <pll_get_frac+0x108>)
1a002a04:	429d      	cmp	r5, r3
1a002a06:	d923      	bls.n	1a002a50 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002a0a:	1aed      	subs	r5, r5, r3
1a002a0c:	d433      	bmi.n	1a002a76 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002a0e:	42ae      	cmp	r6, r5
1a002a10:	dc3b      	bgt.n	1a002a8a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002a12:	42be      	cmp	r6, r7
1a002a14:	dc31      	bgt.n	1a002a7a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002a16:	466d      	mov	r5, sp
1a002a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a24:	e006      	b.n	1a002a34 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002a26:	466d      	mov	r5, sp
1a002a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002a34:	b019      	add	sp, #100	; 0x64
1a002a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002a38:	425b      	negs	r3, r3
1a002a3a:	e7ce      	b.n	1a0029da <pll_get_frac+0x32>
		*ppll = pll[2];
1a002a3c:	ad10      	add	r5, sp, #64	; 0x40
1a002a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002a4a:	e7f3      	b.n	1a002a34 <pll_get_frac+0x8c>
		return -val;
1a002a4c:	425b      	negs	r3, r3
1a002a4e:	e7d7      	b.n	1a002a00 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002a50:	2340      	movs	r3, #64	; 0x40
1a002a52:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002a54:	6963      	ldr	r3, [r4, #20]
1a002a56:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002a58:	a908      	add	r1, sp, #32
1a002a5a:	4628      	mov	r0, r5
1a002a5c:	f7ff ff54 	bl	1a002908 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002a62:	42ab      	cmp	r3, r5
1a002a64:	d1d0      	bne.n	1a002a08 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002a66:	ad08      	add	r5, sp, #32
1a002a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002a74:	e7de      	b.n	1a002a34 <pll_get_frac+0x8c>
		return -val;
1a002a76:	426d      	negs	r5, r5
1a002a78:	e7c9      	b.n	1a002a0e <pll_get_frac+0x66>
			*ppll = pll[2];
1a002a7a:	ad10      	add	r5, sp, #64	; 0x40
1a002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a88:	e7d4      	b.n	1a002a34 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002a8a:	42af      	cmp	r7, r5
1a002a8c:	db07      	blt.n	1a002a9e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002a8e:	ad08      	add	r5, sp, #32
1a002a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002a9c:	e7ca      	b.n	1a002a34 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002a9e:	ad10      	add	r5, sp, #64	; 0x40
1a002aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002aa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002aac:	e7c2      	b.n	1a002a34 <pll_get_frac+0x8c>
1a002aae:	bf00      	nop
1a002ab0:	068e7780 	.word	0x068e7780

1a002ab4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002ab4:	b430      	push	{r4, r5}
1a002ab6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002ab8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002aba:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002abc:	e000      	b.n	1a002ac0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002abe:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002ac0:	281c      	cmp	r0, #28
1a002ac2:	d118      	bne.n	1a002af6 <Chip_Clock_FindBaseClock+0x42>
1a002ac4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002ac8:	0051      	lsls	r1, r2, #1
1a002aca:	4a0c      	ldr	r2, [pc, #48]	; (1a002afc <Chip_Clock_FindBaseClock+0x48>)
1a002acc:	440a      	add	r2, r1
1a002ace:	7914      	ldrb	r4, [r2, #4]
1a002ad0:	4284      	cmp	r4, r0
1a002ad2:	d010      	beq.n	1a002af6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002ad4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002ad8:	004a      	lsls	r2, r1, #1
1a002ada:	4908      	ldr	r1, [pc, #32]	; (1a002afc <Chip_Clock_FindBaseClock+0x48>)
1a002adc:	5a8a      	ldrh	r2, [r1, r2]
1a002ade:	42aa      	cmp	r2, r5
1a002ae0:	d8ed      	bhi.n	1a002abe <Chip_Clock_FindBaseClock+0xa>
1a002ae2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002ae6:	0051      	lsls	r1, r2, #1
1a002ae8:	4a04      	ldr	r2, [pc, #16]	; (1a002afc <Chip_Clock_FindBaseClock+0x48>)
1a002aea:	440a      	add	r2, r1
1a002aec:	8852      	ldrh	r2, [r2, #2]
1a002aee:	42aa      	cmp	r2, r5
1a002af0:	d3e5      	bcc.n	1a002abe <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002af2:	4620      	mov	r0, r4
1a002af4:	e7e4      	b.n	1a002ac0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002af6:	bc30      	pop	{r4, r5}
1a002af8:	4770      	bx	lr
1a002afa:	bf00      	nop
1a002afc:	1a00494c 	.word	0x1a00494c

1a002b00 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002b00:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002b06:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002b08:	4a0d      	ldr	r2, [pc, #52]	; (1a002b40 <Chip_Clock_EnableCrystal+0x40>)
1a002b0a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002b0c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002b10:	6992      	ldr	r2, [r2, #24]
1a002b12:	428a      	cmp	r2, r1
1a002b14:	d001      	beq.n	1a002b1a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002b16:	4a0a      	ldr	r2, [pc, #40]	; (1a002b40 <Chip_Clock_EnableCrystal+0x40>)
1a002b18:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002b1a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002b1e:	4a09      	ldr	r2, [pc, #36]	; (1a002b44 <Chip_Clock_EnableCrystal+0x44>)
1a002b20:	6811      	ldr	r1, [r2, #0]
1a002b22:	4a09      	ldr	r2, [pc, #36]	; (1a002b48 <Chip_Clock_EnableCrystal+0x48>)
1a002b24:	4291      	cmp	r1, r2
1a002b26:	d901      	bls.n	1a002b2c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002b28:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002b2c:	4a04      	ldr	r2, [pc, #16]	; (1a002b40 <Chip_Clock_EnableCrystal+0x40>)
1a002b2e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002b30:	9b01      	ldr	r3, [sp, #4]
1a002b32:	1e5a      	subs	r2, r3, #1
1a002b34:	9201      	str	r2, [sp, #4]
1a002b36:	2b00      	cmp	r3, #0
1a002b38:	d1fa      	bne.n	1a002b30 <Chip_Clock_EnableCrystal+0x30>
}
1a002b3a:	b002      	add	sp, #8
1a002b3c:	4770      	bx	lr
1a002b3e:	bf00      	nop
1a002b40:	40050000 	.word	0x40050000
1a002b44:	1a0048b4 	.word	0x1a0048b4
1a002b48:	01312cff 	.word	0x01312cff

1a002b4c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002b4c:	3012      	adds	r0, #18
1a002b4e:	4b05      	ldr	r3, [pc, #20]	; (1a002b64 <Chip_Clock_GetDividerSource+0x18>)
1a002b50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002b54:	f010 0f01 	tst.w	r0, #1
1a002b58:	d102      	bne.n	1a002b60 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002b5a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002b5e:	4770      	bx	lr
		return CLKINPUT_PD;
1a002b60:	2011      	movs	r0, #17
}
1a002b62:	4770      	bx	lr
1a002b64:	40050000 	.word	0x40050000

1a002b68 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002b68:	f100 0212 	add.w	r2, r0, #18
1a002b6c:	4b03      	ldr	r3, [pc, #12]	; (1a002b7c <Chip_Clock_GetDividerDivisor+0x14>)
1a002b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002b72:	4b03      	ldr	r3, [pc, #12]	; (1a002b80 <Chip_Clock_GetDividerDivisor+0x18>)
1a002b74:	5c18      	ldrb	r0, [r3, r0]
}
1a002b76:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002b7a:	4770      	bx	lr
1a002b7c:	40050000 	.word	0x40050000
1a002b80:	1a004944 	.word	0x1a004944

1a002b84 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002b84:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002b86:	2810      	cmp	r0, #16
1a002b88:	d80a      	bhi.n	1a002ba0 <Chip_Clock_GetClockInputHz+0x1c>
1a002b8a:	e8df f000 	tbb	[pc, r0]
1a002b8e:	0b44      	.short	0x0b44
1a002b90:	0921180d 	.word	0x0921180d
1a002b94:	2d2a2724 	.word	0x2d2a2724
1a002b98:	34300909 	.word	0x34300909
1a002b9c:	3c38      	.short	0x3c38
1a002b9e:	40          	.byte	0x40
1a002b9f:	00          	.byte	0x00
	uint32_t rate = 0;
1a002ba0:	2000      	movs	r0, #0
1a002ba2:	e03a      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002ba4:	481e      	ldr	r0, [pc, #120]	; (1a002c20 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002ba6:	e038      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002ba8:	4b1e      	ldr	r3, [pc, #120]	; (1a002c24 <Chip_Clock_GetClockInputHz+0xa0>)
1a002baa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002bae:	f003 0307 	and.w	r3, r3, #7
1a002bb2:	2b04      	cmp	r3, #4
1a002bb4:	d001      	beq.n	1a002bba <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002bb6:	481c      	ldr	r0, [pc, #112]	; (1a002c28 <Chip_Clock_GetClockInputHz+0xa4>)
1a002bb8:	e02f      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a002bba:	2000      	movs	r0, #0
1a002bbc:	e02d      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002bbe:	4b19      	ldr	r3, [pc, #100]	; (1a002c24 <Chip_Clock_GetClockInputHz+0xa0>)
1a002bc0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002bc4:	f003 0307 	and.w	r3, r3, #7
1a002bc8:	2b04      	cmp	r3, #4
1a002bca:	d027      	beq.n	1a002c1c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002bcc:	4816      	ldr	r0, [pc, #88]	; (1a002c28 <Chip_Clock_GetClockInputHz+0xa4>)
1a002bce:	e024      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002bd0:	4b16      	ldr	r3, [pc, #88]	; (1a002c2c <Chip_Clock_GetClockInputHz+0xa8>)
1a002bd2:	6818      	ldr	r0, [r3, #0]
		break;
1a002bd4:	e021      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002bd6:	4b16      	ldr	r3, [pc, #88]	; (1a002c30 <Chip_Clock_GetClockInputHz+0xac>)
1a002bd8:	6818      	ldr	r0, [r3, #0]
		break;
1a002bda:	e01e      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002bdc:	4b15      	ldr	r3, [pc, #84]	; (1a002c34 <Chip_Clock_GetClockInputHz+0xb0>)
1a002bde:	6818      	ldr	r0, [r3, #0]
		break;
1a002be0:	e01b      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002be2:	4b14      	ldr	r3, [pc, #80]	; (1a002c34 <Chip_Clock_GetClockInputHz+0xb0>)
1a002be4:	6858      	ldr	r0, [r3, #4]
		break;
1a002be6:	e018      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002be8:	f000 f868 	bl	1a002cbc <Chip_Clock_GetMainPLLHz>
		break;
1a002bec:	e015      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002bee:	2100      	movs	r1, #0
1a002bf0:	f000 f89a 	bl	1a002d28 <Chip_Clock_GetDivRate>
		break;
1a002bf4:	e011      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002bf6:	2101      	movs	r1, #1
1a002bf8:	f000 f896 	bl	1a002d28 <Chip_Clock_GetDivRate>
		break;
1a002bfc:	e00d      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002bfe:	2102      	movs	r1, #2
1a002c00:	f000 f892 	bl	1a002d28 <Chip_Clock_GetDivRate>
		break;
1a002c04:	e009      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002c06:	2103      	movs	r1, #3
1a002c08:	f000 f88e 	bl	1a002d28 <Chip_Clock_GetDivRate>
		break;
1a002c0c:	e005      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002c0e:	2104      	movs	r1, #4
1a002c10:	f000 f88a 	bl	1a002d28 <Chip_Clock_GetDivRate>
		break;
1a002c14:	e001      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002c16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002c1a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002c1c:	4806      	ldr	r0, [pc, #24]	; (1a002c38 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002c1e:	e7fc      	b.n	1a002c1a <Chip_Clock_GetClockInputHz+0x96>
1a002c20:	00b71b00 	.word	0x00b71b00
1a002c24:	40043000 	.word	0x40043000
1a002c28:	017d7840 	.word	0x017d7840
1a002c2c:	1a004888 	.word	0x1a004888
1a002c30:	1a0048b4 	.word	0x1a0048b4
1a002c34:	10002228 	.word	0x10002228
1a002c38:	02faf080 	.word	0x02faf080

1a002c3c <Chip_Clock_CalcMainPLLValue>:
{
1a002c3c:	b538      	push	{r3, r4, r5, lr}
1a002c3e:	4605      	mov	r5, r0
1a002c40:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002c42:	7908      	ldrb	r0, [r1, #4]
1a002c44:	f7ff ff9e 	bl	1a002b84 <Chip_Clock_GetClockInputHz>
1a002c48:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002c4a:	4b19      	ldr	r3, [pc, #100]	; (1a002cb0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002c4c:	442b      	add	r3, r5
1a002c4e:	4a19      	ldr	r2, [pc, #100]	; (1a002cb4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002c50:	4293      	cmp	r3, r2
1a002c52:	d821      	bhi.n	1a002c98 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002c54:	b318      	cbz	r0, 1a002c9e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002c56:	2380      	movs	r3, #128	; 0x80
1a002c58:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002c5a:	2300      	movs	r3, #0
1a002c5c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002c5e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002c60:	fbb5 f3f0 	udiv	r3, r5, r0
1a002c64:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002c66:	4a14      	ldr	r2, [pc, #80]	; (1a002cb8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002c68:	4295      	cmp	r5, r2
1a002c6a:	d903      	bls.n	1a002c74 <Chip_Clock_CalcMainPLLValue+0x38>
1a002c6c:	fb03 f000 	mul.w	r0, r3, r0
1a002c70:	42a8      	cmp	r0, r5
1a002c72:	d007      	beq.n	1a002c84 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002c74:	4621      	mov	r1, r4
1a002c76:	4628      	mov	r0, r5
1a002c78:	f7ff fe96 	bl	1a0029a8 <pll_get_frac>
		if (!ppll->nsel) {
1a002c7c:	68a3      	ldr	r3, [r4, #8]
1a002c7e:	b18b      	cbz	r3, 1a002ca4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002c80:	3b01      	subs	r3, #1
1a002c82:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002c84:	6923      	ldr	r3, [r4, #16]
1a002c86:	b183      	cbz	r3, 1a002caa <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002c88:	68e2      	ldr	r2, [r4, #12]
1a002c8a:	b10a      	cbz	r2, 1a002c90 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002c8c:	3a01      	subs	r2, #1
1a002c8e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002c90:	3b01      	subs	r3, #1
1a002c92:	6123      	str	r3, [r4, #16]
	return 0;
1a002c94:	2000      	movs	r0, #0
}
1a002c96:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c9c:	e7fb      	b.n	1a002c96 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ca2:	e7f8      	b.n	1a002c96 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ca8:	e7f5      	b.n	1a002c96 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002cae:	e7f2      	b.n	1a002c96 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002cb0:	ff6b3a10 	.word	0xff6b3a10
1a002cb4:	0b940510 	.word	0x0b940510
1a002cb8:	094c5eff 	.word	0x094c5eff

1a002cbc <Chip_Clock_GetMainPLLHz>:
{
1a002cbc:	b530      	push	{r4, r5, lr}
1a002cbe:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002cc0:	4d17      	ldr	r5, [pc, #92]	; (1a002d20 <Chip_Clock_GetMainPLLHz+0x64>)
1a002cc2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002cc4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002cc8:	f7ff ff5c 	bl	1a002b84 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002ccc:	4b15      	ldr	r3, [pc, #84]	; (1a002d24 <Chip_Clock_GetMainPLLHz+0x68>)
1a002cce:	681b      	ldr	r3, [r3, #0]
1a002cd0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002cd2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002cd4:	f013 0f01 	tst.w	r3, #1
1a002cd8:	d020      	beq.n	1a002d1c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a002cda:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002cde:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002ce2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002ce6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002cea:	3301      	adds	r3, #1
	n = nsel + 1;
1a002cec:	3201      	adds	r2, #1
	p = ptab[psel];
1a002cee:	f10d 0c08 	add.w	ip, sp, #8
1a002cf2:	4461      	add	r1, ip
1a002cf4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002cf8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002cfc:	d108      	bne.n	1a002d10 <Chip_Clock_GetMainPLLHz+0x54>
1a002cfe:	b93d      	cbnz	r5, 1a002d10 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002d00:	0049      	lsls	r1, r1, #1
1a002d02:	fbb3 f3f1 	udiv	r3, r3, r1
1a002d06:	fbb0 f0f2 	udiv	r0, r0, r2
1a002d0a:	fb00 f003 	mul.w	r0, r0, r3
1a002d0e:	e003      	b.n	1a002d18 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a002d10:	fbb0 f0f2 	udiv	r0, r0, r2
1a002d14:	fb03 f000 	mul.w	r0, r3, r0
}
1a002d18:	b003      	add	sp, #12
1a002d1a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a002d1c:	2000      	movs	r0, #0
1a002d1e:	e7fb      	b.n	1a002d18 <Chip_Clock_GetMainPLLHz+0x5c>
1a002d20:	40050000 	.word	0x40050000
1a002d24:	1a004940 	.word	0x1a004940

1a002d28 <Chip_Clock_GetDivRate>:
{
1a002d28:	b538      	push	{r3, r4, r5, lr}
1a002d2a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002d2c:	4608      	mov	r0, r1
1a002d2e:	f7ff ff0d 	bl	1a002b4c <Chip_Clock_GetDividerSource>
1a002d32:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002d34:	4620      	mov	r0, r4
1a002d36:	f7ff ff17 	bl	1a002b68 <Chip_Clock_GetDividerDivisor>
1a002d3a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002d3c:	4628      	mov	r0, r5
1a002d3e:	f7ff ff21 	bl	1a002b84 <Chip_Clock_GetClockInputHz>
1a002d42:	3401      	adds	r4, #1
}
1a002d44:	fbb0 f0f4 	udiv	r0, r0, r4
1a002d48:	bd38      	pop	{r3, r4, r5, pc}
1a002d4a:	Address 0x000000001a002d4a is out of bounds.


1a002d4c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002d4c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002d4e:	f100 0416 	add.w	r4, r0, #22
1a002d52:	00a4      	lsls	r4, r4, #2
1a002d54:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002d58:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002d5c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002d5e:	281b      	cmp	r0, #27
1a002d60:	d813      	bhi.n	1a002d8a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002d62:	2911      	cmp	r1, #17
1a002d64:	d01a      	beq.n	1a002d9c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002d66:	4d0e      	ldr	r5, [pc, #56]	; (1a002da0 <Chip_Clock_SetBaseClock+0x54>)
1a002d68:	4025      	ands	r5, r4

			if (autoblocken) {
1a002d6a:	b10a      	cbz	r2, 1a002d70 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002d6c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002d70:	b10b      	cbz	r3, 1a002d76 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002d72:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002d76:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002d7a:	3016      	adds	r0, #22
1a002d7c:	0080      	lsls	r0, r0, #2
1a002d7e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002d82:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002d86:	6045      	str	r5, [r0, #4]
1a002d88:	e008      	b.n	1a002d9c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002d8a:	f044 0401 	orr.w	r4, r4, #1
1a002d8e:	3016      	adds	r0, #22
1a002d90:	0080      	lsls	r0, r0, #2
1a002d92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002d96:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002d9a:	6044      	str	r4, [r0, #4]
	}
}
1a002d9c:	bc30      	pop	{r4, r5}
1a002d9e:	4770      	bx	lr
1a002da0:	e0fff7fe 	.word	0xe0fff7fe

1a002da4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002da4:	281b      	cmp	r0, #27
1a002da6:	d80c      	bhi.n	1a002dc2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002da8:	3016      	adds	r0, #22
1a002daa:	0080      	lsls	r0, r0, #2
1a002dac:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002db0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002db4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002db6:	f010 0f01 	tst.w	r0, #1
1a002dba:	d104      	bne.n	1a002dc6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002dbc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002dc0:	4770      	bx	lr
		return CLKINPUT_PD;
1a002dc2:	2011      	movs	r0, #17
1a002dc4:	4770      	bx	lr
		return CLKINPUT_PD;
1a002dc6:	2011      	movs	r0, #17
}
1a002dc8:	4770      	bx	lr

1a002dca <Chip_Clock_GetBaseClocktHz>:
{
1a002dca:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002dcc:	f7ff ffea 	bl	1a002da4 <Chip_Clock_GetBaseClock>
1a002dd0:	f7ff fed8 	bl	1a002b84 <Chip_Clock_GetClockInputHz>
}
1a002dd4:	bd08      	pop	{r3, pc}
1a002dd6:	Address 0x000000001a002dd6 is out of bounds.


1a002dd8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002dd8:	b971      	cbnz	r1, 1a002df8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a002dda:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002ddc:	b10a      	cbz	r2, 1a002de2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002dde:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002de2:	2b02      	cmp	r3, #2
1a002de4:	d00a      	beq.n	1a002dfc <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002de6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002dea:	d30a      	bcc.n	1a002e02 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002dec:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002df0:	4b06      	ldr	r3, [pc, #24]	; (1a002e0c <Chip_Clock_EnableOpts+0x34>)
1a002df2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002df6:	4770      	bx	lr
		reg |= (1 << 1);
1a002df8:	2103      	movs	r1, #3
1a002dfa:	e7ef      	b.n	1a002ddc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002dfc:	f041 0120 	orr.w	r1, r1, #32
1a002e00:	e7f1      	b.n	1a002de6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002e02:	3020      	adds	r0, #32
1a002e04:	4b02      	ldr	r3, [pc, #8]	; (1a002e10 <Chip_Clock_EnableOpts+0x38>)
1a002e06:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002e0a:	4770      	bx	lr
1a002e0c:	40052000 	.word	0x40052000
1a002e10:	40051000 	.word	0x40051000

1a002e14 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002e14:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002e18:	d309      	bcc.n	1a002e2e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002e1a:	4a09      	ldr	r2, [pc, #36]	; (1a002e40 <Chip_Clock_Enable+0x2c>)
1a002e1c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002e20:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002e24:	f043 0301 	orr.w	r3, r3, #1
1a002e28:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002e2c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002e2e:	4a05      	ldr	r2, [pc, #20]	; (1a002e44 <Chip_Clock_Enable+0x30>)
1a002e30:	3020      	adds	r0, #32
1a002e32:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002e36:	f043 0301 	orr.w	r3, r3, #1
1a002e3a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002e3e:	4770      	bx	lr
1a002e40:	40052000 	.word	0x40052000
1a002e44:	40051000 	.word	0x40051000

1a002e48 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002e48:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002e4a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002e4e:	d309      	bcc.n	1a002e64 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002e50:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002e54:	4a0d      	ldr	r2, [pc, #52]	; (1a002e8c <Chip_Clock_GetRate+0x44>)
1a002e56:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002e5a:	f014 0f01 	tst.w	r4, #1
1a002e5e:	d107      	bne.n	1a002e70 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002e60:	2000      	movs	r0, #0
	}

	return rate;
}
1a002e62:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002e64:	f100 0320 	add.w	r3, r0, #32
1a002e68:	4a09      	ldr	r2, [pc, #36]	; (1a002e90 <Chip_Clock_GetRate+0x48>)
1a002e6a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002e6e:	e7f4      	b.n	1a002e5a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002e70:	f7ff fe20 	bl	1a002ab4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002e74:	f7ff ffa9 	bl	1a002dca <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002e78:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002e7c:	d103      	bne.n	1a002e86 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002e7e:	2301      	movs	r3, #1
		rate = rate / div;
1a002e80:	fbb0 f0f3 	udiv	r0, r0, r3
1a002e84:	e7ed      	b.n	1a002e62 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002e86:	2302      	movs	r3, #2
1a002e88:	e7fa      	b.n	1a002e80 <Chip_Clock_GetRate+0x38>
1a002e8a:	bf00      	nop
1a002e8c:	40052000 	.word	0x40052000
1a002e90:	40051000 	.word	0x40051000

1a002e94 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002e94:	4770      	bx	lr
1a002e96:	Address 0x000000001a002e96 is out of bounds.


1a002e98 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002e98:	b570      	push	{r4, r5, r6, lr}
1a002e9a:	b08a      	sub	sp, #40	; 0x28
1a002e9c:	4605      	mov	r5, r0
1a002e9e:	460e      	mov	r6, r1
1a002ea0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002ea2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002ea6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002ea8:	2806      	cmp	r0, #6
1a002eaa:	d018      	beq.n	1a002ede <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002eac:	2300      	movs	r3, #0
1a002eae:	2201      	movs	r2, #1
1a002eb0:	4629      	mov	r1, r5
1a002eb2:	2004      	movs	r0, #4
1a002eb4:	f7ff ff4a 	bl	1a002d4c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002eb8:	4a4a      	ldr	r2, [pc, #296]	; (1a002fe4 <Chip_SetupCoreClock+0x14c>)
1a002eba:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002ebc:	f043 0301 	orr.w	r3, r3, #1
1a002ec0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002ec2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002ec6:	a901      	add	r1, sp, #4
1a002ec8:	4630      	mov	r0, r6
1a002eca:	f7ff feb7 	bl	1a002c3c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002ece:	4b46      	ldr	r3, [pc, #280]	; (1a002fe8 <Chip_SetupCoreClock+0x150>)
1a002ed0:	429e      	cmp	r6, r3
1a002ed2:	d916      	bls.n	1a002f02 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002ed4:	9b01      	ldr	r3, [sp, #4]
1a002ed6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002eda:	d003      	beq.n	1a002ee4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002edc:	e7fe      	b.n	1a002edc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002ede:	f7ff fe0f 	bl	1a002b00 <Chip_Clock_EnableCrystal>
1a002ee2:	e7e3      	b.n	1a002eac <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002ee4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ee8:	d005      	beq.n	1a002ef6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002eee:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002ef0:	2500      	movs	r5, #0
			direct = 1;
1a002ef2:	2601      	movs	r6, #1
1a002ef4:	e007      	b.n	1a002f06 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002ef6:	9b04      	ldr	r3, [sp, #16]
1a002ef8:	3301      	adds	r3, #1
1a002efa:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002efc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002efe:	2600      	movs	r6, #0
1a002f00:	e001      	b.n	1a002f06 <Chip_SetupCoreClock+0x6e>
1a002f02:	2500      	movs	r5, #0
1a002f04:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002f06:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002f0a:	9b01      	ldr	r3, [sp, #4]
1a002f0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002f10:	9a05      	ldr	r2, [sp, #20]
1a002f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002f16:	9a03      	ldr	r2, [sp, #12]
1a002f18:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002f1c:	9a04      	ldr	r2, [sp, #16]
1a002f1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002f22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002f26:	4a2f      	ldr	r2, [pc, #188]	; (1a002fe4 <Chip_SetupCoreClock+0x14c>)
1a002f28:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002f2a:	4b2e      	ldr	r3, [pc, #184]	; (1a002fe4 <Chip_SetupCoreClock+0x14c>)
1a002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002f2e:	f013 0f01 	tst.w	r3, #1
1a002f32:	d0fa      	beq.n	1a002f2a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002f34:	2300      	movs	r3, #0
1a002f36:	2201      	movs	r2, #1
1a002f38:	2109      	movs	r1, #9
1a002f3a:	2004      	movs	r0, #4
1a002f3c:	f7ff ff06 	bl	1a002d4c <Chip_Clock_SetBaseClock>

	if (direct) {
1a002f40:	b306      	cbz	r6, 1a002f84 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002f42:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002f46:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002f4a:	1e5a      	subs	r2, r3, #1
1a002f4c:	9209      	str	r2, [sp, #36]	; 0x24
1a002f4e:	2b00      	cmp	r3, #0
1a002f50:	d1fa      	bne.n	1a002f48 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002f52:	9b01      	ldr	r3, [sp, #4]
1a002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002f58:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002f5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002f5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002f62:	9a05      	ldr	r2, [sp, #20]
1a002f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002f68:	9a03      	ldr	r2, [sp, #12]
1a002f6a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002f6e:	9a04      	ldr	r2, [sp, #16]
1a002f70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002f78:	4a1a      	ldr	r2, [pc, #104]	; (1a002fe4 <Chip_SetupCoreClock+0x14c>)
1a002f7a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002f7c:	2c00      	cmp	r4, #0
1a002f7e:	d12e      	bne.n	1a002fde <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002f80:	b00a      	add	sp, #40	; 0x28
1a002f82:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002f84:	2d00      	cmp	r5, #0
1a002f86:	d0f9      	beq.n	1a002f7c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002f88:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002f8c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002f90:	1e5a      	subs	r2, r3, #1
1a002f92:	9209      	str	r2, [sp, #36]	; 0x24
1a002f94:	2b00      	cmp	r3, #0
1a002f96:	d1fa      	bne.n	1a002f8e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002f98:	9b04      	ldr	r3, [sp, #16]
1a002f9a:	1e5a      	subs	r2, r3, #1
1a002f9c:	9204      	str	r2, [sp, #16]
1a002f9e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002fa2:	9b01      	ldr	r3, [sp, #4]
1a002fa4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002fa8:	9905      	ldr	r1, [sp, #20]
1a002faa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002fae:	9903      	ldr	r1, [sp, #12]
1a002fb0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002fb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002fbc:	4a09      	ldr	r2, [pc, #36]	; (1a002fe4 <Chip_SetupCoreClock+0x14c>)
1a002fbe:	6453      	str	r3, [r2, #68]	; 0x44
1a002fc0:	e7dc      	b.n	1a002f7c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002fc2:	480a      	ldr	r0, [pc, #40]	; (1a002fec <Chip_SetupCoreClock+0x154>)
1a002fc4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002fc8:	78cb      	ldrb	r3, [r1, #3]
1a002fca:	788a      	ldrb	r2, [r1, #2]
1a002fcc:	7849      	ldrb	r1, [r1, #1]
1a002fce:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002fd2:	f7ff febb 	bl	1a002d4c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002fd6:	3401      	adds	r4, #1
1a002fd8:	2c11      	cmp	r4, #17
1a002fda:	d9f2      	bls.n	1a002fc2 <Chip_SetupCoreClock+0x12a>
1a002fdc:	e7d0      	b.n	1a002f80 <Chip_SetupCoreClock+0xe8>
1a002fde:	2400      	movs	r4, #0
1a002fe0:	e7fa      	b.n	1a002fd8 <Chip_SetupCoreClock+0x140>
1a002fe2:	bf00      	nop
1a002fe4:	40050000 	.word	0x40050000
1a002fe8:	068e7780 	.word	0x068e7780
1a002fec:	1a0049b8 	.word	0x1a0049b8

1a002ff0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002ff0:	4b03      	ldr	r3, [pc, #12]	; (1a003000 <Chip_SSP_GetClockIndex+0x10>)
1a002ff2:	4298      	cmp	r0, r3
1a002ff4:	d001      	beq.n	1a002ffa <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002ff6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002ff8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002ffa:	20a5      	movs	r0, #165	; 0xa5
1a002ffc:	4770      	bx	lr
1a002ffe:	bf00      	nop
1a003000:	400c5000 	.word	0x400c5000

1a003004 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003004:	4b04      	ldr	r3, [pc, #16]	; (1a003018 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003006:	4298      	cmp	r0, r3
1a003008:	d002      	beq.n	1a003010 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00300a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00300e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003010:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003014:	4770      	bx	lr
1a003016:	bf00      	nop
1a003018:	400c5000 	.word	0x400c5000

1a00301c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00301c:	6803      	ldr	r3, [r0, #0]
1a00301e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003022:	0209      	lsls	r1, r1, #8
1a003024:	b289      	uxth	r1, r1
1a003026:	4319      	orrs	r1, r3
1a003028:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00302a:	6102      	str	r2, [r0, #16]
}
1a00302c:	4770      	bx	lr

1a00302e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00302e:	b570      	push	{r4, r5, r6, lr}
1a003030:	4606      	mov	r6, r0
1a003032:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003034:	f7ff ffe6 	bl	1a003004 <Chip_SSP_GetPeriphClockIndex>
1a003038:	f7ff ff06 	bl	1a002e48 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00303c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003042:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003044:	e000      	b.n	1a003048 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003046:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003048:	42ab      	cmp	r3, r5
1a00304a:	d90b      	bls.n	1a003064 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00304c:	1c4c      	adds	r4, r1, #1
1a00304e:	fb02 f304 	mul.w	r3, r2, r4
1a003052:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003056:	429d      	cmp	r5, r3
1a003058:	d2f6      	bcs.n	1a003048 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00305a:	2cff      	cmp	r4, #255	; 0xff
1a00305c:	d9f3      	bls.n	1a003046 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00305e:	3202      	adds	r2, #2
				cr0_div = 0;
1a003060:	2100      	movs	r1, #0
1a003062:	e7f1      	b.n	1a003048 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003064:	4630      	mov	r0, r6
1a003066:	f7ff ffd9 	bl	1a00301c <Chip_SSP_SetClockRate>
}
1a00306a:	bd70      	pop	{r4, r5, r6, pc}

1a00306c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00306c:	b510      	push	{r4, lr}
1a00306e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003070:	f7ff ffbe 	bl	1a002ff0 <Chip_SSP_GetClockIndex>
1a003074:	f7ff fece 	bl	1a002e14 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003078:	4620      	mov	r0, r4
1a00307a:	f7ff ffc3 	bl	1a003004 <Chip_SSP_GetPeriphClockIndex>
1a00307e:	f7ff fec9 	bl	1a002e14 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003082:	6863      	ldr	r3, [r4, #4]
1a003084:	f023 0304 	bic.w	r3, r3, #4
1a003088:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00308a:	6823      	ldr	r3, [r4, #0]
1a00308c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003090:	f043 0307 	orr.w	r3, r3, #7
1a003094:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003096:	4902      	ldr	r1, [pc, #8]	; (1a0030a0 <Chip_SSP_Init+0x34>)
1a003098:	4620      	mov	r0, r4
1a00309a:	f7ff ffc8 	bl	1a00302e <Chip_SSP_SetBitRate>
}
1a00309e:	bd10      	pop	{r4, pc}
1a0030a0:	000186a0 	.word	0x000186a0

1a0030a4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0030a4:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0030a6:	4a0b      	ldr	r2, [pc, #44]	; (1a0030d4 <SystemInit+0x30>)
1a0030a8:	4b0b      	ldr	r3, [pc, #44]	; (1a0030d8 <SystemInit+0x34>)
1a0030aa:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0030ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0030b0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0030b2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0030b6:	2b20      	cmp	r3, #32
1a0030b8:	d004      	beq.n	1a0030c4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0030ba:	f7ff faa5 	bl	1a002608 <Board_SystemInit>
   Board_Init();
1a0030be:	f7ff fa2b 	bl	1a002518 <Board_Init>
}
1a0030c2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0030c4:	4a04      	ldr	r2, [pc, #16]	; (1a0030d8 <SystemInit+0x34>)
1a0030c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0030ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0030ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0030d2:	e7f2      	b.n	1a0030ba <SystemInit+0x16>
1a0030d4:	1a000000 	.word	0x1a000000
1a0030d8:	e000ed00 	.word	0xe000ed00

1a0030dc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0030dc:	4b04      	ldr	r3, [pc, #16]	; (1a0030f0 <cyclesCounterInit+0x14>)
1a0030de:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0030e0:	4a04      	ldr	r2, [pc, #16]	; (1a0030f4 <cyclesCounterInit+0x18>)
1a0030e2:	6813      	ldr	r3, [r2, #0]
1a0030e4:	f043 0301 	orr.w	r3, r3, #1
1a0030e8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0030ea:	2001      	movs	r0, #1
1a0030ec:	4770      	bx	lr
1a0030ee:	bf00      	nop
1a0030f0:	1000003c 	.word	0x1000003c
1a0030f4:	e0001000 	.word	0xe0001000

1a0030f8 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0030f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0030fc:	4680      	mov	r8, r0
1a0030fe:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003100:	4c19      	ldr	r4, [pc, #100]	; (1a003168 <uartInit+0x70>)
1a003102:	0045      	lsls	r5, r0, #1
1a003104:	182a      	adds	r2, r5, r0
1a003106:	0093      	lsls	r3, r2, #2
1a003108:	18e6      	adds	r6, r4, r3
1a00310a:	58e7      	ldr	r7, [r4, r3]
1a00310c:	4638      	mov	r0, r7
1a00310e:	f7ff fad5 	bl	1a0026bc <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003112:	4649      	mov	r1, r9
1a003114:	4638      	mov	r0, r7
1a003116:	f7ff fafb 	bl	1a002710 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00311a:	2307      	movs	r3, #7
1a00311c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00311e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003120:	2301      	movs	r3, #1
1a003122:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003124:	7930      	ldrb	r0, [r6, #4]
1a003126:	7973      	ldrb	r3, [r6, #5]
1a003128:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00312a:	f042 0218 	orr.w	r2, r2, #24
1a00312e:	490f      	ldr	r1, [pc, #60]	; (1a00316c <uartInit+0x74>)
1a003130:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003138:	79f0      	ldrb	r0, [r6, #7]
1a00313a:	7a33      	ldrb	r3, [r6, #8]
1a00313c:	7a72      	ldrb	r2, [r6, #9]
1a00313e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003142:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00314a:	f1b8 0f01 	cmp.w	r8, #1
1a00314e:	d001      	beq.n	1a003154 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a003150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003154:	4a06      	ldr	r2, [pc, #24]	; (1a003170 <uartInit+0x78>)
1a003156:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003158:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00315c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00315e:	221a      	movs	r2, #26
1a003160:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003164:	e7f4      	b.n	1a003150 <uartInit+0x58>
1a003166:	bf00      	nop
1a003168:	1a004a00 	.word	0x1a004a00
1a00316c:	40086000 	.word	0x40086000
1a003170:	40081000 	.word	0x40081000

1a003174 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003174:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003176:	4d0b      	ldr	r5, [pc, #44]	; (1a0031a4 <gpioObtainPinInit+0x30>)
1a003178:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00317c:	182c      	adds	r4, r5, r0
1a00317e:	5628      	ldrsb	r0, [r5, r0]
1a003180:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003182:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003186:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003188:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00318c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00318e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003192:	9b02      	ldr	r3, [sp, #8]
1a003194:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003196:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00319a:	9b03      	ldr	r3, [sp, #12]
1a00319c:	701a      	strb	r2, [r3, #0]
}
1a00319e:	bc30      	pop	{r4, r5}
1a0031a0:	4770      	bx	lr
1a0031a2:	bf00      	nop
1a0031a4:	1a004a48 	.word	0x1a004a48

1a0031a8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0031a8:	f110 0f02 	cmn.w	r0, #2
1a0031ac:	f000 80c7 	beq.w	1a00333e <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0031b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0031b4:	f000 80c5 	beq.w	1a003342 <gpioInit+0x19a>
{
1a0031b8:	b570      	push	{r4, r5, r6, lr}
1a0031ba:	b084      	sub	sp, #16
1a0031bc:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0031be:	2300      	movs	r3, #0
1a0031c0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0031c4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0031c8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0031cc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0031d0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0031d4:	f10d 030b 	add.w	r3, sp, #11
1a0031d8:	9301      	str	r3, [sp, #4]
1a0031da:	ab03      	add	r3, sp, #12
1a0031dc:	9300      	str	r3, [sp, #0]
1a0031de:	f10d 030d 	add.w	r3, sp, #13
1a0031e2:	f10d 020e 	add.w	r2, sp, #14
1a0031e6:	f10d 010f 	add.w	r1, sp, #15
1a0031ea:	f7ff ffc3 	bl	1a003174 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0031ee:	2c05      	cmp	r4, #5
1a0031f0:	f200 80a9 	bhi.w	1a003346 <gpioInit+0x19e>
1a0031f4:	e8df f004 	tbb	[pc, r4]
1a0031f8:	45278109 	.word	0x45278109
1a0031fc:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0031fe:	4853      	ldr	r0, [pc, #332]	; (1a00334c <gpioInit+0x1a4>)
1a003200:	f7ff fe48 	bl	1a002e94 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003204:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003206:	b004      	add	sp, #16
1a003208:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00320a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00320e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003212:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003216:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00321a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00321e:	494c      	ldr	r1, [pc, #304]	; (1a003350 <gpioInit+0x1a8>)
1a003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003224:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003228:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00322c:	2001      	movs	r0, #1
1a00322e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003232:	4c46      	ldr	r4, [pc, #280]	; (1a00334c <gpioInit+0x1a4>)
1a003234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003238:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00323c:	ea22 0201 	bic.w	r2, r2, r1
1a003240:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003244:	e7df      	b.n	1a003206 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003246:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00324a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00324e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003252:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003256:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00325a:	493d      	ldr	r1, [pc, #244]	; (1a003350 <gpioInit+0x1a8>)
1a00325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003260:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003264:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003268:	2001      	movs	r0, #1
1a00326a:	fa00 f102 	lsl.w	r1, r0, r2
1a00326e:	4c37      	ldr	r4, [pc, #220]	; (1a00334c <gpioInit+0x1a4>)
1a003270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003274:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003278:	ea22 0201 	bic.w	r2, r2, r1
1a00327c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003280:	e7c1      	b.n	1a003206 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003282:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003286:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00328a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00328e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003292:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003296:	492e      	ldr	r1, [pc, #184]	; (1a003350 <gpioInit+0x1a8>)
1a003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00329c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0032a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0032a4:	2001      	movs	r0, #1
1a0032a6:	fa00 f102 	lsl.w	r1, r0, r2
1a0032aa:	4c28      	ldr	r4, [pc, #160]	; (1a00334c <gpioInit+0x1a4>)
1a0032ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0032b0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0032b4:	ea22 0201 	bic.w	r2, r2, r1
1a0032b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0032bc:	e7a3      	b.n	1a003206 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0032be:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0032c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0032c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0032ca:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0032ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0032d2:	491f      	ldr	r1, [pc, #124]	; (1a003350 <gpioInit+0x1a8>)
1a0032d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0032d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0032dc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0032e0:	2001      	movs	r0, #1
1a0032e2:	fa00 f102 	lsl.w	r1, r0, r2
1a0032e6:	4c19      	ldr	r4, [pc, #100]	; (1a00334c <gpioInit+0x1a4>)
1a0032e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0032ec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0032f0:	ea22 0201 	bic.w	r2, r2, r1
1a0032f4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0032f8:	e785      	b.n	1a003206 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0032fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0032fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003302:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003306:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00330a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00330e:	4910      	ldr	r1, [pc, #64]	; (1a003350 <gpioInit+0x1a8>)
1a003310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003314:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003318:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00331c:	2001      	movs	r0, #1
1a00331e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003322:	4b0a      	ldr	r3, [pc, #40]	; (1a00334c <gpioInit+0x1a4>)
1a003324:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003328:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00332c:	4331      	orrs	r1, r6
1a00332e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003332:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003334:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003338:	2100      	movs	r1, #0
1a00333a:	5499      	strb	r1, [r3, r2]
1a00333c:	e763      	b.n	1a003206 <gpioInit+0x5e>
	  return FALSE;
1a00333e:	2000      	movs	r0, #0
1a003340:	4770      	bx	lr
	  return FALSE;
1a003342:	2000      	movs	r0, #0
}
1a003344:	4770      	bx	lr
      ret_val = 0;
1a003346:	2000      	movs	r0, #0
1a003348:	e75d      	b.n	1a003206 <gpioInit+0x5e>
1a00334a:	bf00      	nop
1a00334c:	400f4000 	.word	0x400f4000
1a003350:	40086000 	.word	0x40086000

1a003354 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003354:	f110 0f02 	cmn.w	r0, #2
1a003358:	d02d      	beq.n	1a0033b6 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00335a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00335e:	d02c      	beq.n	1a0033ba <gpioWrite+0x66>
{
1a003360:	b510      	push	{r4, lr}
1a003362:	b084      	sub	sp, #16
1a003364:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003366:	2300      	movs	r3, #0
1a003368:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00336c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003370:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003374:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003378:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00337c:	f10d 030b 	add.w	r3, sp, #11
1a003380:	9301      	str	r3, [sp, #4]
1a003382:	ab03      	add	r3, sp, #12
1a003384:	9300      	str	r3, [sp, #0]
1a003386:	f10d 030d 	add.w	r3, sp, #13
1a00338a:	f10d 020e 	add.w	r2, sp, #14
1a00338e:	f10d 010f 	add.w	r1, sp, #15
1a003392:	f7ff feef 	bl	1a003174 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003396:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00339a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00339e:	1c21      	adds	r1, r4, #0
1a0033a0:	bf18      	it	ne
1a0033a2:	2101      	movne	r1, #1
1a0033a4:	015b      	lsls	r3, r3, #5
1a0033a6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0033aa:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0033ae:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0033b0:	2001      	movs	r0, #1
}
1a0033b2:	b004      	add	sp, #16
1a0033b4:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0033b6:	2000      	movs	r0, #0
1a0033b8:	4770      	bx	lr
	  return FALSE;
1a0033ba:	2000      	movs	r0, #0
}
1a0033bc:	4770      	bx	lr

1a0033be <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0033be:	f110 0f02 	cmn.w	r0, #2
1a0033c2:	d02c      	beq.n	1a00341e <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0033c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0033c8:	d02b      	beq.n	1a003422 <gpioRead+0x64>
{
1a0033ca:	b500      	push	{lr}
1a0033cc:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0033ce:	2300      	movs	r3, #0
1a0033d0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0033d4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0033d8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0033dc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0033e0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0033e4:	f10d 030b 	add.w	r3, sp, #11
1a0033e8:	9301      	str	r3, [sp, #4]
1a0033ea:	ab03      	add	r3, sp, #12
1a0033ec:	9300      	str	r3, [sp, #0]
1a0033ee:	f10d 030d 	add.w	r3, sp, #13
1a0033f2:	f10d 020e 	add.w	r2, sp, #14
1a0033f6:	f10d 010f 	add.w	r1, sp, #15
1a0033fa:	f7ff febb 	bl	1a003174 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0033fe:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003402:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003406:	015b      	lsls	r3, r3, #5
1a003408:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00340c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003410:	5c98      	ldrb	r0, [r3, r2]
1a003412:	3000      	adds	r0, #0
1a003414:	bf18      	it	ne
1a003416:	2001      	movne	r0, #1

   return ret_val;
}
1a003418:	b005      	add	sp, #20
1a00341a:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00341e:	2001      	movs	r0, #1
1a003420:	4770      	bx	lr
      return FALSE;
1a003422:	2000      	movs	r0, #0
}
1a003424:	4770      	bx	lr
1a003426:	Address 0x000000001a003426 is out of bounds.


1a003428 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003428:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00342a:	4b04      	ldr	r3, [pc, #16]	; (1a00343c <USB0_IRQHandler+0x14>)
1a00342c:	681b      	ldr	r3, [r3, #0]
1a00342e:	681b      	ldr	r3, [r3, #0]
1a003430:	68db      	ldr	r3, [r3, #12]
1a003432:	4a03      	ldr	r2, [pc, #12]	; (1a003440 <USB0_IRQHandler+0x18>)
1a003434:	6810      	ldr	r0, [r2, #0]
1a003436:	4798      	blx	r3
}
1a003438:	bd08      	pop	{r3, pc}
1a00343a:	bf00      	nop
1a00343c:	10002294 	.word	0x10002294
1a003440:	10002230 	.word	0x10002230

1a003444 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003444:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003446:	f7ff fa55 	bl	1a0028f4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00344a:	4b18      	ldr	r3, [pc, #96]	; (1a0034ac <boardInit+0x68>)
1a00344c:	6818      	ldr	r0, [r3, #0]
1a00344e:	f7ff fe45 	bl	1a0030dc <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003452:	2105      	movs	r1, #5
1a003454:	2000      	movs	r0, #0
1a003456:	f7ff fea7 	bl	1a0031a8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00345a:	2100      	movs	r1, #0
1a00345c:	2024      	movs	r0, #36	; 0x24
1a00345e:	f7ff fea3 	bl	1a0031a8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003462:	2100      	movs	r1, #0
1a003464:	2025      	movs	r0, #37	; 0x25
1a003466:	f7ff fe9f 	bl	1a0031a8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00346a:	2100      	movs	r1, #0
1a00346c:	2026      	movs	r0, #38	; 0x26
1a00346e:	f7ff fe9b 	bl	1a0031a8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003472:	2100      	movs	r1, #0
1a003474:	2027      	movs	r0, #39	; 0x27
1a003476:	f7ff fe97 	bl	1a0031a8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00347a:	2101      	movs	r1, #1
1a00347c:	2028      	movs	r0, #40	; 0x28
1a00347e:	f7ff fe93 	bl	1a0031a8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003482:	2101      	movs	r1, #1
1a003484:	2029      	movs	r0, #41	; 0x29
1a003486:	f7ff fe8f 	bl	1a0031a8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00348a:	2101      	movs	r1, #1
1a00348c:	202a      	movs	r0, #42	; 0x2a
1a00348e:	f7ff fe8b 	bl	1a0031a8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003492:	2101      	movs	r1, #1
1a003494:	202b      	movs	r0, #43	; 0x2b
1a003496:	f7ff fe87 	bl	1a0031a8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00349a:	2101      	movs	r1, #1
1a00349c:	202c      	movs	r0, #44	; 0x2c
1a00349e:	f7ff fe83 	bl	1a0031a8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0034a2:	2101      	movs	r1, #1
1a0034a4:	202d      	movs	r0, #45	; 0x2d
1a0034a6:	f7ff fe7f 	bl	1a0031a8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0034aa:	bd08      	pop	{r3, pc}
1a0034ac:	10002290 	.word	0x10002290

1a0034b0 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0034b0:	b508      	push	{r3, lr}
1a0034b2:	460b      	mov	r3, r1
   *printer = uart;
1a0034b4:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a0034b6:	4611      	mov	r1, r2
1a0034b8:	4618      	mov	r0, r3
1a0034ba:	f7ff fe1d 	bl	1a0030f8 <uartInit>
}
1a0034be:	bd08      	pop	{r3, pc}

1a0034c0 <__aeabi_uldivmod>:
1a0034c0:	b953      	cbnz	r3, 1a0034d8 <__aeabi_uldivmod+0x18>
1a0034c2:	b94a      	cbnz	r2, 1a0034d8 <__aeabi_uldivmod+0x18>
1a0034c4:	2900      	cmp	r1, #0
1a0034c6:	bf08      	it	eq
1a0034c8:	2800      	cmpeq	r0, #0
1a0034ca:	bf1c      	itt	ne
1a0034cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0034d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0034d4:	f000 b974 	b.w	1a0037c0 <__aeabi_idiv0>
1a0034d8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0034dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0034e0:	f000 f806 	bl	1a0034f0 <__udivmoddi4>
1a0034e4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0034e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0034ec:	b004      	add	sp, #16
1a0034ee:	4770      	bx	lr

1a0034f0 <__udivmoddi4>:
1a0034f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0034f4:	9e08      	ldr	r6, [sp, #32]
1a0034f6:	4604      	mov	r4, r0
1a0034f8:	4688      	mov	r8, r1
1a0034fa:	2b00      	cmp	r3, #0
1a0034fc:	f040 8085 	bne.w	1a00360a <__udivmoddi4+0x11a>
1a003500:	428a      	cmp	r2, r1
1a003502:	4615      	mov	r5, r2
1a003504:	d948      	bls.n	1a003598 <__udivmoddi4+0xa8>
1a003506:	fab2 f282 	clz	r2, r2
1a00350a:	b14a      	cbz	r2, 1a003520 <__udivmoddi4+0x30>
1a00350c:	f1c2 0720 	rsb	r7, r2, #32
1a003510:	fa01 f302 	lsl.w	r3, r1, r2
1a003514:	fa20 f707 	lsr.w	r7, r0, r7
1a003518:	4095      	lsls	r5, r2
1a00351a:	ea47 0803 	orr.w	r8, r7, r3
1a00351e:	4094      	lsls	r4, r2
1a003520:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003524:	0c23      	lsrs	r3, r4, #16
1a003526:	fbb8 f7fe 	udiv	r7, r8, lr
1a00352a:	fa1f fc85 	uxth.w	ip, r5
1a00352e:	fb0e 8817 	mls	r8, lr, r7, r8
1a003532:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003536:	fb07 f10c 	mul.w	r1, r7, ip
1a00353a:	4299      	cmp	r1, r3
1a00353c:	d909      	bls.n	1a003552 <__udivmoddi4+0x62>
1a00353e:	18eb      	adds	r3, r5, r3
1a003540:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003544:	f080 80e3 	bcs.w	1a00370e <__udivmoddi4+0x21e>
1a003548:	4299      	cmp	r1, r3
1a00354a:	f240 80e0 	bls.w	1a00370e <__udivmoddi4+0x21e>
1a00354e:	3f02      	subs	r7, #2
1a003550:	442b      	add	r3, r5
1a003552:	1a5b      	subs	r3, r3, r1
1a003554:	b2a4      	uxth	r4, r4
1a003556:	fbb3 f0fe 	udiv	r0, r3, lr
1a00355a:	fb0e 3310 	mls	r3, lr, r0, r3
1a00355e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003562:	fb00 fc0c 	mul.w	ip, r0, ip
1a003566:	45a4      	cmp	ip, r4
1a003568:	d909      	bls.n	1a00357e <__udivmoddi4+0x8e>
1a00356a:	192c      	adds	r4, r5, r4
1a00356c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003570:	f080 80cb 	bcs.w	1a00370a <__udivmoddi4+0x21a>
1a003574:	45a4      	cmp	ip, r4
1a003576:	f240 80c8 	bls.w	1a00370a <__udivmoddi4+0x21a>
1a00357a:	3802      	subs	r0, #2
1a00357c:	442c      	add	r4, r5
1a00357e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003582:	eba4 040c 	sub.w	r4, r4, ip
1a003586:	2700      	movs	r7, #0
1a003588:	b11e      	cbz	r6, 1a003592 <__udivmoddi4+0xa2>
1a00358a:	40d4      	lsrs	r4, r2
1a00358c:	2300      	movs	r3, #0
1a00358e:	e9c6 4300 	strd	r4, r3, [r6]
1a003592:	4639      	mov	r1, r7
1a003594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003598:	2a00      	cmp	r2, #0
1a00359a:	d053      	beq.n	1a003644 <__udivmoddi4+0x154>
1a00359c:	fab2 f282 	clz	r2, r2
1a0035a0:	2a00      	cmp	r2, #0
1a0035a2:	f040 80b6 	bne.w	1a003712 <__udivmoddi4+0x222>
1a0035a6:	1b49      	subs	r1, r1, r5
1a0035a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0035ac:	fa1f f885 	uxth.w	r8, r5
1a0035b0:	2701      	movs	r7, #1
1a0035b2:	fbb1 fcfe 	udiv	ip, r1, lr
1a0035b6:	0c23      	lsrs	r3, r4, #16
1a0035b8:	fb0e 111c 	mls	r1, lr, ip, r1
1a0035bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0035c0:	fb08 f10c 	mul.w	r1, r8, ip
1a0035c4:	4299      	cmp	r1, r3
1a0035c6:	d907      	bls.n	1a0035d8 <__udivmoddi4+0xe8>
1a0035c8:	18eb      	adds	r3, r5, r3
1a0035ca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0035ce:	d202      	bcs.n	1a0035d6 <__udivmoddi4+0xe6>
1a0035d0:	4299      	cmp	r1, r3
1a0035d2:	f200 80ec 	bhi.w	1a0037ae <__udivmoddi4+0x2be>
1a0035d6:	4684      	mov	ip, r0
1a0035d8:	1a59      	subs	r1, r3, r1
1a0035da:	b2a3      	uxth	r3, r4
1a0035dc:	fbb1 f0fe 	udiv	r0, r1, lr
1a0035e0:	fb0e 1410 	mls	r4, lr, r0, r1
1a0035e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0035e8:	fb08 f800 	mul.w	r8, r8, r0
1a0035ec:	45a0      	cmp	r8, r4
1a0035ee:	d907      	bls.n	1a003600 <__udivmoddi4+0x110>
1a0035f0:	192c      	adds	r4, r5, r4
1a0035f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0035f6:	d202      	bcs.n	1a0035fe <__udivmoddi4+0x10e>
1a0035f8:	45a0      	cmp	r8, r4
1a0035fa:	f200 80dc 	bhi.w	1a0037b6 <__udivmoddi4+0x2c6>
1a0035fe:	4618      	mov	r0, r3
1a003600:	eba4 0408 	sub.w	r4, r4, r8
1a003604:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003608:	e7be      	b.n	1a003588 <__udivmoddi4+0x98>
1a00360a:	428b      	cmp	r3, r1
1a00360c:	d908      	bls.n	1a003620 <__udivmoddi4+0x130>
1a00360e:	2e00      	cmp	r6, #0
1a003610:	d078      	beq.n	1a003704 <__udivmoddi4+0x214>
1a003612:	2700      	movs	r7, #0
1a003614:	e9c6 0100 	strd	r0, r1, [r6]
1a003618:	4638      	mov	r0, r7
1a00361a:	4639      	mov	r1, r7
1a00361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003620:	fab3 f783 	clz	r7, r3
1a003624:	b97f      	cbnz	r7, 1a003646 <__udivmoddi4+0x156>
1a003626:	428b      	cmp	r3, r1
1a003628:	d302      	bcc.n	1a003630 <__udivmoddi4+0x140>
1a00362a:	4282      	cmp	r2, r0
1a00362c:	f200 80bd 	bhi.w	1a0037aa <__udivmoddi4+0x2ba>
1a003630:	1a84      	subs	r4, r0, r2
1a003632:	eb61 0303 	sbc.w	r3, r1, r3
1a003636:	2001      	movs	r0, #1
1a003638:	4698      	mov	r8, r3
1a00363a:	2e00      	cmp	r6, #0
1a00363c:	d0a9      	beq.n	1a003592 <__udivmoddi4+0xa2>
1a00363e:	e9c6 4800 	strd	r4, r8, [r6]
1a003642:	e7a6      	b.n	1a003592 <__udivmoddi4+0xa2>
1a003644:	deff      	udf	#255	; 0xff
1a003646:	f1c7 0520 	rsb	r5, r7, #32
1a00364a:	40bb      	lsls	r3, r7
1a00364c:	fa22 fc05 	lsr.w	ip, r2, r5
1a003650:	ea4c 0c03 	orr.w	ip, ip, r3
1a003654:	fa01 f407 	lsl.w	r4, r1, r7
1a003658:	fa20 f805 	lsr.w	r8, r0, r5
1a00365c:	fa21 f305 	lsr.w	r3, r1, r5
1a003660:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a003664:	ea48 0404 	orr.w	r4, r8, r4
1a003668:	fbb3 f9fe 	udiv	r9, r3, lr
1a00366c:	0c21      	lsrs	r1, r4, #16
1a00366e:	fb0e 3319 	mls	r3, lr, r9, r3
1a003672:	fa1f f88c 	uxth.w	r8, ip
1a003676:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00367a:	fb09 fa08 	mul.w	sl, r9, r8
1a00367e:	459a      	cmp	sl, r3
1a003680:	fa02 f207 	lsl.w	r2, r2, r7
1a003684:	fa00 f107 	lsl.w	r1, r0, r7
1a003688:	d90b      	bls.n	1a0036a2 <__udivmoddi4+0x1b2>
1a00368a:	eb1c 0303 	adds.w	r3, ip, r3
1a00368e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003692:	f080 8088 	bcs.w	1a0037a6 <__udivmoddi4+0x2b6>
1a003696:	459a      	cmp	sl, r3
1a003698:	f240 8085 	bls.w	1a0037a6 <__udivmoddi4+0x2b6>
1a00369c:	f1a9 0902 	sub.w	r9, r9, #2
1a0036a0:	4463      	add	r3, ip
1a0036a2:	eba3 030a 	sub.w	r3, r3, sl
1a0036a6:	b2a4      	uxth	r4, r4
1a0036a8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0036ac:	fb0e 3310 	mls	r3, lr, r0, r3
1a0036b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0036b4:	fb00 f808 	mul.w	r8, r0, r8
1a0036b8:	45a0      	cmp	r8, r4
1a0036ba:	d908      	bls.n	1a0036ce <__udivmoddi4+0x1de>
1a0036bc:	eb1c 0404 	adds.w	r4, ip, r4
1a0036c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0036c4:	d26b      	bcs.n	1a00379e <__udivmoddi4+0x2ae>
1a0036c6:	45a0      	cmp	r8, r4
1a0036c8:	d969      	bls.n	1a00379e <__udivmoddi4+0x2ae>
1a0036ca:	3802      	subs	r0, #2
1a0036cc:	4464      	add	r4, ip
1a0036ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0036d2:	eba4 0408 	sub.w	r4, r4, r8
1a0036d6:	fba0 8902 	umull	r8, r9, r0, r2
1a0036da:	454c      	cmp	r4, r9
1a0036dc:	46c6      	mov	lr, r8
1a0036de:	464b      	mov	r3, r9
1a0036e0:	d354      	bcc.n	1a00378c <__udivmoddi4+0x29c>
1a0036e2:	d051      	beq.n	1a003788 <__udivmoddi4+0x298>
1a0036e4:	2e00      	cmp	r6, #0
1a0036e6:	d069      	beq.n	1a0037bc <__udivmoddi4+0x2cc>
1a0036e8:	ebb1 020e 	subs.w	r2, r1, lr
1a0036ec:	eb64 0403 	sbc.w	r4, r4, r3
1a0036f0:	fa04 f505 	lsl.w	r5, r4, r5
1a0036f4:	fa22 f307 	lsr.w	r3, r2, r7
1a0036f8:	40fc      	lsrs	r4, r7
1a0036fa:	431d      	orrs	r5, r3
1a0036fc:	e9c6 5400 	strd	r5, r4, [r6]
1a003700:	2700      	movs	r7, #0
1a003702:	e746      	b.n	1a003592 <__udivmoddi4+0xa2>
1a003704:	4637      	mov	r7, r6
1a003706:	4630      	mov	r0, r6
1a003708:	e743      	b.n	1a003592 <__udivmoddi4+0xa2>
1a00370a:	4618      	mov	r0, r3
1a00370c:	e737      	b.n	1a00357e <__udivmoddi4+0x8e>
1a00370e:	4607      	mov	r7, r0
1a003710:	e71f      	b.n	1a003552 <__udivmoddi4+0x62>
1a003712:	f1c2 0320 	rsb	r3, r2, #32
1a003716:	fa20 f703 	lsr.w	r7, r0, r3
1a00371a:	4095      	lsls	r5, r2
1a00371c:	fa01 f002 	lsl.w	r0, r1, r2
1a003720:	fa21 f303 	lsr.w	r3, r1, r3
1a003724:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003728:	4338      	orrs	r0, r7
1a00372a:	0c01      	lsrs	r1, r0, #16
1a00372c:	fbb3 f7fe 	udiv	r7, r3, lr
1a003730:	fa1f f885 	uxth.w	r8, r5
1a003734:	fb0e 3317 	mls	r3, lr, r7, r3
1a003738:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00373c:	fb07 f308 	mul.w	r3, r7, r8
1a003740:	428b      	cmp	r3, r1
1a003742:	fa04 f402 	lsl.w	r4, r4, r2
1a003746:	d907      	bls.n	1a003758 <__udivmoddi4+0x268>
1a003748:	1869      	adds	r1, r5, r1
1a00374a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00374e:	d228      	bcs.n	1a0037a2 <__udivmoddi4+0x2b2>
1a003750:	428b      	cmp	r3, r1
1a003752:	d926      	bls.n	1a0037a2 <__udivmoddi4+0x2b2>
1a003754:	3f02      	subs	r7, #2
1a003756:	4429      	add	r1, r5
1a003758:	1acb      	subs	r3, r1, r3
1a00375a:	b281      	uxth	r1, r0
1a00375c:	fbb3 f0fe 	udiv	r0, r3, lr
1a003760:	fb0e 3310 	mls	r3, lr, r0, r3
1a003764:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003768:	fb00 f308 	mul.w	r3, r0, r8
1a00376c:	428b      	cmp	r3, r1
1a00376e:	d907      	bls.n	1a003780 <__udivmoddi4+0x290>
1a003770:	1869      	adds	r1, r5, r1
1a003772:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003776:	d210      	bcs.n	1a00379a <__udivmoddi4+0x2aa>
1a003778:	428b      	cmp	r3, r1
1a00377a:	d90e      	bls.n	1a00379a <__udivmoddi4+0x2aa>
1a00377c:	3802      	subs	r0, #2
1a00377e:	4429      	add	r1, r5
1a003780:	1ac9      	subs	r1, r1, r3
1a003782:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003786:	e714      	b.n	1a0035b2 <__udivmoddi4+0xc2>
1a003788:	4541      	cmp	r1, r8
1a00378a:	d2ab      	bcs.n	1a0036e4 <__udivmoddi4+0x1f4>
1a00378c:	ebb8 0e02 	subs.w	lr, r8, r2
1a003790:	eb69 020c 	sbc.w	r2, r9, ip
1a003794:	3801      	subs	r0, #1
1a003796:	4613      	mov	r3, r2
1a003798:	e7a4      	b.n	1a0036e4 <__udivmoddi4+0x1f4>
1a00379a:	4660      	mov	r0, ip
1a00379c:	e7f0      	b.n	1a003780 <__udivmoddi4+0x290>
1a00379e:	4618      	mov	r0, r3
1a0037a0:	e795      	b.n	1a0036ce <__udivmoddi4+0x1de>
1a0037a2:	4667      	mov	r7, ip
1a0037a4:	e7d8      	b.n	1a003758 <__udivmoddi4+0x268>
1a0037a6:	4681      	mov	r9, r0
1a0037a8:	e77b      	b.n	1a0036a2 <__udivmoddi4+0x1b2>
1a0037aa:	4638      	mov	r0, r7
1a0037ac:	e745      	b.n	1a00363a <__udivmoddi4+0x14a>
1a0037ae:	f1ac 0c02 	sub.w	ip, ip, #2
1a0037b2:	442b      	add	r3, r5
1a0037b4:	e710      	b.n	1a0035d8 <__udivmoddi4+0xe8>
1a0037b6:	3802      	subs	r0, #2
1a0037b8:	442c      	add	r4, r5
1a0037ba:	e721      	b.n	1a003600 <__udivmoddi4+0x110>
1a0037bc:	4637      	mov	r7, r6
1a0037be:	e6e8      	b.n	1a003592 <__udivmoddi4+0xa2>

1a0037c0 <__aeabi_idiv0>:
1a0037c0:	4770      	bx	lr
1a0037c2:	bf00      	nop

1a0037c4 <__sflush_r>:
1a0037c4:	898a      	ldrh	r2, [r1, #12]
1a0037c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0037ca:	4605      	mov	r5, r0
1a0037cc:	0710      	lsls	r0, r2, #28
1a0037ce:	460c      	mov	r4, r1
1a0037d0:	d458      	bmi.n	1a003884 <__sflush_r+0xc0>
1a0037d2:	684b      	ldr	r3, [r1, #4]
1a0037d4:	2b00      	cmp	r3, #0
1a0037d6:	dc05      	bgt.n	1a0037e4 <__sflush_r+0x20>
1a0037d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0037da:	2b00      	cmp	r3, #0
1a0037dc:	dc02      	bgt.n	1a0037e4 <__sflush_r+0x20>
1a0037de:	2000      	movs	r0, #0
1a0037e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0037e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0037e6:	2e00      	cmp	r6, #0
1a0037e8:	d0f9      	beq.n	1a0037de <__sflush_r+0x1a>
1a0037ea:	2300      	movs	r3, #0
1a0037ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0037f0:	682f      	ldr	r7, [r5, #0]
1a0037f2:	602b      	str	r3, [r5, #0]
1a0037f4:	d032      	beq.n	1a00385c <__sflush_r+0x98>
1a0037f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0037f8:	89a3      	ldrh	r3, [r4, #12]
1a0037fa:	075a      	lsls	r2, r3, #29
1a0037fc:	d505      	bpl.n	1a00380a <__sflush_r+0x46>
1a0037fe:	6863      	ldr	r3, [r4, #4]
1a003800:	1ac0      	subs	r0, r0, r3
1a003802:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003804:	b10b      	cbz	r3, 1a00380a <__sflush_r+0x46>
1a003806:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003808:	1ac0      	subs	r0, r0, r3
1a00380a:	2300      	movs	r3, #0
1a00380c:	4602      	mov	r2, r0
1a00380e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003810:	6a21      	ldr	r1, [r4, #32]
1a003812:	4628      	mov	r0, r5
1a003814:	47b0      	blx	r6
1a003816:	1c43      	adds	r3, r0, #1
1a003818:	89a3      	ldrh	r3, [r4, #12]
1a00381a:	d106      	bne.n	1a00382a <__sflush_r+0x66>
1a00381c:	6829      	ldr	r1, [r5, #0]
1a00381e:	291d      	cmp	r1, #29
1a003820:	d849      	bhi.n	1a0038b6 <__sflush_r+0xf2>
1a003822:	4a2a      	ldr	r2, [pc, #168]	; (1a0038cc <__sflush_r+0x108>)
1a003824:	40ca      	lsrs	r2, r1
1a003826:	07d6      	lsls	r6, r2, #31
1a003828:	d545      	bpl.n	1a0038b6 <__sflush_r+0xf2>
1a00382a:	2200      	movs	r2, #0
1a00382c:	6062      	str	r2, [r4, #4]
1a00382e:	04d9      	lsls	r1, r3, #19
1a003830:	6922      	ldr	r2, [r4, #16]
1a003832:	6022      	str	r2, [r4, #0]
1a003834:	d504      	bpl.n	1a003840 <__sflush_r+0x7c>
1a003836:	1c42      	adds	r2, r0, #1
1a003838:	d101      	bne.n	1a00383e <__sflush_r+0x7a>
1a00383a:	682b      	ldr	r3, [r5, #0]
1a00383c:	b903      	cbnz	r3, 1a003840 <__sflush_r+0x7c>
1a00383e:	6560      	str	r0, [r4, #84]	; 0x54
1a003840:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003842:	602f      	str	r7, [r5, #0]
1a003844:	2900      	cmp	r1, #0
1a003846:	d0ca      	beq.n	1a0037de <__sflush_r+0x1a>
1a003848:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00384c:	4299      	cmp	r1, r3
1a00384e:	d002      	beq.n	1a003856 <__sflush_r+0x92>
1a003850:	4628      	mov	r0, r5
1a003852:	f000 f9ab 	bl	1a003bac <_free_r>
1a003856:	2000      	movs	r0, #0
1a003858:	6360      	str	r0, [r4, #52]	; 0x34
1a00385a:	e7c1      	b.n	1a0037e0 <__sflush_r+0x1c>
1a00385c:	6a21      	ldr	r1, [r4, #32]
1a00385e:	2301      	movs	r3, #1
1a003860:	4628      	mov	r0, r5
1a003862:	47b0      	blx	r6
1a003864:	1c41      	adds	r1, r0, #1
1a003866:	d1c7      	bne.n	1a0037f8 <__sflush_r+0x34>
1a003868:	682b      	ldr	r3, [r5, #0]
1a00386a:	2b00      	cmp	r3, #0
1a00386c:	d0c4      	beq.n	1a0037f8 <__sflush_r+0x34>
1a00386e:	2b1d      	cmp	r3, #29
1a003870:	d001      	beq.n	1a003876 <__sflush_r+0xb2>
1a003872:	2b16      	cmp	r3, #22
1a003874:	d101      	bne.n	1a00387a <__sflush_r+0xb6>
1a003876:	602f      	str	r7, [r5, #0]
1a003878:	e7b1      	b.n	1a0037de <__sflush_r+0x1a>
1a00387a:	89a3      	ldrh	r3, [r4, #12]
1a00387c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003880:	81a3      	strh	r3, [r4, #12]
1a003882:	e7ad      	b.n	1a0037e0 <__sflush_r+0x1c>
1a003884:	690f      	ldr	r7, [r1, #16]
1a003886:	2f00      	cmp	r7, #0
1a003888:	d0a9      	beq.n	1a0037de <__sflush_r+0x1a>
1a00388a:	0793      	lsls	r3, r2, #30
1a00388c:	680e      	ldr	r6, [r1, #0]
1a00388e:	bf08      	it	eq
1a003890:	694b      	ldreq	r3, [r1, #20]
1a003892:	600f      	str	r7, [r1, #0]
1a003894:	bf18      	it	ne
1a003896:	2300      	movne	r3, #0
1a003898:	eba6 0807 	sub.w	r8, r6, r7
1a00389c:	608b      	str	r3, [r1, #8]
1a00389e:	f1b8 0f00 	cmp.w	r8, #0
1a0038a2:	dd9c      	ble.n	1a0037de <__sflush_r+0x1a>
1a0038a4:	4643      	mov	r3, r8
1a0038a6:	463a      	mov	r2, r7
1a0038a8:	6a21      	ldr	r1, [r4, #32]
1a0038aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0038ac:	4628      	mov	r0, r5
1a0038ae:	47b0      	blx	r6
1a0038b0:	2800      	cmp	r0, #0
1a0038b2:	dc06      	bgt.n	1a0038c2 <__sflush_r+0xfe>
1a0038b4:	89a3      	ldrh	r3, [r4, #12]
1a0038b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0038ba:	81a3      	strh	r3, [r4, #12]
1a0038bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0038c0:	e78e      	b.n	1a0037e0 <__sflush_r+0x1c>
1a0038c2:	4407      	add	r7, r0
1a0038c4:	eba8 0800 	sub.w	r8, r8, r0
1a0038c8:	e7e9      	b.n	1a00389e <__sflush_r+0xda>
1a0038ca:	bf00      	nop
1a0038cc:	20400001 	.word	0x20400001

1a0038d0 <_fflush_r>:
1a0038d0:	b538      	push	{r3, r4, r5, lr}
1a0038d2:	690b      	ldr	r3, [r1, #16]
1a0038d4:	4605      	mov	r5, r0
1a0038d6:	460c      	mov	r4, r1
1a0038d8:	b913      	cbnz	r3, 1a0038e0 <_fflush_r+0x10>
1a0038da:	2500      	movs	r5, #0
1a0038dc:	4628      	mov	r0, r5
1a0038de:	bd38      	pop	{r3, r4, r5, pc}
1a0038e0:	b118      	cbz	r0, 1a0038ea <_fflush_r+0x1a>
1a0038e2:	6983      	ldr	r3, [r0, #24]
1a0038e4:	b90b      	cbnz	r3, 1a0038ea <_fflush_r+0x1a>
1a0038e6:	f000 f887 	bl	1a0039f8 <__sinit>
1a0038ea:	4b14      	ldr	r3, [pc, #80]	; (1a00393c <_fflush_r+0x6c>)
1a0038ec:	429c      	cmp	r4, r3
1a0038ee:	d11b      	bne.n	1a003928 <_fflush_r+0x58>
1a0038f0:	686c      	ldr	r4, [r5, #4]
1a0038f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0038f6:	2b00      	cmp	r3, #0
1a0038f8:	d0ef      	beq.n	1a0038da <_fflush_r+0xa>
1a0038fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0038fc:	07d0      	lsls	r0, r2, #31
1a0038fe:	d404      	bmi.n	1a00390a <_fflush_r+0x3a>
1a003900:	0599      	lsls	r1, r3, #22
1a003902:	d402      	bmi.n	1a00390a <_fflush_r+0x3a>
1a003904:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003906:	f000 f938 	bl	1a003b7a <__retarget_lock_acquire_recursive>
1a00390a:	4628      	mov	r0, r5
1a00390c:	4621      	mov	r1, r4
1a00390e:	f7ff ff59 	bl	1a0037c4 <__sflush_r>
1a003912:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003914:	07da      	lsls	r2, r3, #31
1a003916:	4605      	mov	r5, r0
1a003918:	d4e0      	bmi.n	1a0038dc <_fflush_r+0xc>
1a00391a:	89a3      	ldrh	r3, [r4, #12]
1a00391c:	059b      	lsls	r3, r3, #22
1a00391e:	d4dd      	bmi.n	1a0038dc <_fflush_r+0xc>
1a003920:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003922:	f000 f92b 	bl	1a003b7c <__retarget_lock_release_recursive>
1a003926:	e7d9      	b.n	1a0038dc <_fflush_r+0xc>
1a003928:	4b05      	ldr	r3, [pc, #20]	; (1a003940 <_fflush_r+0x70>)
1a00392a:	429c      	cmp	r4, r3
1a00392c:	d101      	bne.n	1a003932 <_fflush_r+0x62>
1a00392e:	68ac      	ldr	r4, [r5, #8]
1a003930:	e7df      	b.n	1a0038f2 <_fflush_r+0x22>
1a003932:	4b04      	ldr	r3, [pc, #16]	; (1a003944 <_fflush_r+0x74>)
1a003934:	429c      	cmp	r4, r3
1a003936:	bf08      	it	eq
1a003938:	68ec      	ldreq	r4, [r5, #12]
1a00393a:	e7da      	b.n	1a0038f2 <_fflush_r+0x22>
1a00393c:	1a004b50 	.word	0x1a004b50
1a003940:	1a004b70 	.word	0x1a004b70
1a003944:	1a004b30 	.word	0x1a004b30

1a003948 <std>:
1a003948:	2300      	movs	r3, #0
1a00394a:	b510      	push	{r4, lr}
1a00394c:	4604      	mov	r4, r0
1a00394e:	e9c0 3300 	strd	r3, r3, [r0]
1a003952:	6083      	str	r3, [r0, #8]
1a003954:	8181      	strh	r1, [r0, #12]
1a003956:	6643      	str	r3, [r0, #100]	; 0x64
1a003958:	81c2      	strh	r2, [r0, #14]
1a00395a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00395e:	6183      	str	r3, [r0, #24]
1a003960:	4619      	mov	r1, r3
1a003962:	2208      	movs	r2, #8
1a003964:	305c      	adds	r0, #92	; 0x5c
1a003966:	f000 f918 	bl	1a003b9a <memset>
1a00396a:	4b05      	ldr	r3, [pc, #20]	; (1a003980 <std+0x38>)
1a00396c:	6263      	str	r3, [r4, #36]	; 0x24
1a00396e:	4b05      	ldr	r3, [pc, #20]	; (1a003984 <std+0x3c>)
1a003970:	62a3      	str	r3, [r4, #40]	; 0x28
1a003972:	4b05      	ldr	r3, [pc, #20]	; (1a003988 <std+0x40>)
1a003974:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003976:	4b05      	ldr	r3, [pc, #20]	; (1a00398c <std+0x44>)
1a003978:	6224      	str	r4, [r4, #32]
1a00397a:	6323      	str	r3, [r4, #48]	; 0x30
1a00397c:	bd10      	pop	{r4, pc}
1a00397e:	bf00      	nop
1a003980:	1a0043d1 	.word	0x1a0043d1
1a003984:	1a0043f3 	.word	0x1a0043f3
1a003988:	1a00442b 	.word	0x1a00442b
1a00398c:	1a00444f 	.word	0x1a00444f

1a003990 <_cleanup_r>:
1a003990:	4901      	ldr	r1, [pc, #4]	; (1a003998 <_cleanup_r+0x8>)
1a003992:	f000 b8af 	b.w	1a003af4 <_fwalk_reent>
1a003996:	bf00      	nop
1a003998:	1a0038d1 	.word	0x1a0038d1

1a00399c <__sfmoreglue>:
1a00399c:	b570      	push	{r4, r5, r6, lr}
1a00399e:	1e4a      	subs	r2, r1, #1
1a0039a0:	2568      	movs	r5, #104	; 0x68
1a0039a2:	4355      	muls	r5, r2
1a0039a4:	460e      	mov	r6, r1
1a0039a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0039aa:	f000 f94d 	bl	1a003c48 <_malloc_r>
1a0039ae:	4604      	mov	r4, r0
1a0039b0:	b140      	cbz	r0, 1a0039c4 <__sfmoreglue+0x28>
1a0039b2:	2100      	movs	r1, #0
1a0039b4:	e9c0 1600 	strd	r1, r6, [r0]
1a0039b8:	300c      	adds	r0, #12
1a0039ba:	60a0      	str	r0, [r4, #8]
1a0039bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0039c0:	f000 f8eb 	bl	1a003b9a <memset>
1a0039c4:	4620      	mov	r0, r4
1a0039c6:	bd70      	pop	{r4, r5, r6, pc}

1a0039c8 <__sfp_lock_acquire>:
1a0039c8:	4801      	ldr	r0, [pc, #4]	; (1a0039d0 <__sfp_lock_acquire+0x8>)
1a0039ca:	f000 b8d6 	b.w	1a003b7a <__retarget_lock_acquire_recursive>
1a0039ce:	bf00      	nop
1a0039d0:	100022a0 	.word	0x100022a0

1a0039d4 <__sfp_lock_release>:
1a0039d4:	4801      	ldr	r0, [pc, #4]	; (1a0039dc <__sfp_lock_release+0x8>)
1a0039d6:	f000 b8d1 	b.w	1a003b7c <__retarget_lock_release_recursive>
1a0039da:	bf00      	nop
1a0039dc:	100022a0 	.word	0x100022a0

1a0039e0 <__sinit_lock_acquire>:
1a0039e0:	4801      	ldr	r0, [pc, #4]	; (1a0039e8 <__sinit_lock_acquire+0x8>)
1a0039e2:	f000 b8ca 	b.w	1a003b7a <__retarget_lock_acquire_recursive>
1a0039e6:	bf00      	nop
1a0039e8:	1000229b 	.word	0x1000229b

1a0039ec <__sinit_lock_release>:
1a0039ec:	4801      	ldr	r0, [pc, #4]	; (1a0039f4 <__sinit_lock_release+0x8>)
1a0039ee:	f000 b8c5 	b.w	1a003b7c <__retarget_lock_release_recursive>
1a0039f2:	bf00      	nop
1a0039f4:	1000229b 	.word	0x1000229b

1a0039f8 <__sinit>:
1a0039f8:	b510      	push	{r4, lr}
1a0039fa:	4604      	mov	r4, r0
1a0039fc:	f7ff fff0 	bl	1a0039e0 <__sinit_lock_acquire>
1a003a00:	69a3      	ldr	r3, [r4, #24]
1a003a02:	b11b      	cbz	r3, 1a003a0c <__sinit+0x14>
1a003a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003a08:	f7ff bff0 	b.w	1a0039ec <__sinit_lock_release>
1a003a0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a003a10:	6523      	str	r3, [r4, #80]	; 0x50
1a003a12:	4b13      	ldr	r3, [pc, #76]	; (1a003a60 <__sinit+0x68>)
1a003a14:	4a13      	ldr	r2, [pc, #76]	; (1a003a64 <__sinit+0x6c>)
1a003a16:	681b      	ldr	r3, [r3, #0]
1a003a18:	62a2      	str	r2, [r4, #40]	; 0x28
1a003a1a:	42a3      	cmp	r3, r4
1a003a1c:	bf04      	itt	eq
1a003a1e:	2301      	moveq	r3, #1
1a003a20:	61a3      	streq	r3, [r4, #24]
1a003a22:	4620      	mov	r0, r4
1a003a24:	f000 f820 	bl	1a003a68 <__sfp>
1a003a28:	6060      	str	r0, [r4, #4]
1a003a2a:	4620      	mov	r0, r4
1a003a2c:	f000 f81c 	bl	1a003a68 <__sfp>
1a003a30:	60a0      	str	r0, [r4, #8]
1a003a32:	4620      	mov	r0, r4
1a003a34:	f000 f818 	bl	1a003a68 <__sfp>
1a003a38:	2200      	movs	r2, #0
1a003a3a:	60e0      	str	r0, [r4, #12]
1a003a3c:	2104      	movs	r1, #4
1a003a3e:	6860      	ldr	r0, [r4, #4]
1a003a40:	f7ff ff82 	bl	1a003948 <std>
1a003a44:	2201      	movs	r2, #1
1a003a46:	2109      	movs	r1, #9
1a003a48:	68a0      	ldr	r0, [r4, #8]
1a003a4a:	f7ff ff7d 	bl	1a003948 <std>
1a003a4e:	2202      	movs	r2, #2
1a003a50:	2112      	movs	r1, #18
1a003a52:	68e0      	ldr	r0, [r4, #12]
1a003a54:	f7ff ff78 	bl	1a003948 <std>
1a003a58:	2301      	movs	r3, #1
1a003a5a:	61a3      	str	r3, [r4, #24]
1a003a5c:	e7d2      	b.n	1a003a04 <__sinit+0xc>
1a003a5e:	bf00      	nop
1a003a60:	1a004b90 	.word	0x1a004b90
1a003a64:	1a003991 	.word	0x1a003991

1a003a68 <__sfp>:
1a003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003a6a:	4607      	mov	r7, r0
1a003a6c:	f7ff ffac 	bl	1a0039c8 <__sfp_lock_acquire>
1a003a70:	4b1e      	ldr	r3, [pc, #120]	; (1a003aec <__sfp+0x84>)
1a003a72:	681e      	ldr	r6, [r3, #0]
1a003a74:	69b3      	ldr	r3, [r6, #24]
1a003a76:	b913      	cbnz	r3, 1a003a7e <__sfp+0x16>
1a003a78:	4630      	mov	r0, r6
1a003a7a:	f7ff ffbd 	bl	1a0039f8 <__sinit>
1a003a7e:	3648      	adds	r6, #72	; 0x48
1a003a80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003a84:	3b01      	subs	r3, #1
1a003a86:	d503      	bpl.n	1a003a90 <__sfp+0x28>
1a003a88:	6833      	ldr	r3, [r6, #0]
1a003a8a:	b30b      	cbz	r3, 1a003ad0 <__sfp+0x68>
1a003a8c:	6836      	ldr	r6, [r6, #0]
1a003a8e:	e7f7      	b.n	1a003a80 <__sfp+0x18>
1a003a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003a94:	b9d5      	cbnz	r5, 1a003acc <__sfp+0x64>
1a003a96:	4b16      	ldr	r3, [pc, #88]	; (1a003af0 <__sfp+0x88>)
1a003a98:	60e3      	str	r3, [r4, #12]
1a003a9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a003a9e:	6665      	str	r5, [r4, #100]	; 0x64
1a003aa0:	f000 f86a 	bl	1a003b78 <__retarget_lock_init_recursive>
1a003aa4:	f7ff ff96 	bl	1a0039d4 <__sfp_lock_release>
1a003aa8:	6025      	str	r5, [r4, #0]
1a003aaa:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a003aae:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a003ab2:	61a5      	str	r5, [r4, #24]
1a003ab4:	2208      	movs	r2, #8
1a003ab6:	4629      	mov	r1, r5
1a003ab8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003abc:	f000 f86d 	bl	1a003b9a <memset>
1a003ac0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003ac4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003ac8:	4620      	mov	r0, r4
1a003aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003acc:	3468      	adds	r4, #104	; 0x68
1a003ace:	e7d9      	b.n	1a003a84 <__sfp+0x1c>
1a003ad0:	2104      	movs	r1, #4
1a003ad2:	4638      	mov	r0, r7
1a003ad4:	f7ff ff62 	bl	1a00399c <__sfmoreglue>
1a003ad8:	4604      	mov	r4, r0
1a003ada:	6030      	str	r0, [r6, #0]
1a003adc:	2800      	cmp	r0, #0
1a003ade:	d1d5      	bne.n	1a003a8c <__sfp+0x24>
1a003ae0:	f7ff ff78 	bl	1a0039d4 <__sfp_lock_release>
1a003ae4:	230c      	movs	r3, #12
1a003ae6:	603b      	str	r3, [r7, #0]
1a003ae8:	e7ee      	b.n	1a003ac8 <__sfp+0x60>
1a003aea:	bf00      	nop
1a003aec:	1a004b90 	.word	0x1a004b90
1a003af0:	ffff0001 	.word	0xffff0001

1a003af4 <_fwalk_reent>:
1a003af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003af8:	4680      	mov	r8, r0
1a003afa:	4689      	mov	r9, r1
1a003afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003b00:	2600      	movs	r6, #0
1a003b02:	b914      	cbnz	r4, 1a003b0a <_fwalk_reent+0x16>
1a003b04:	4630      	mov	r0, r6
1a003b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003b0a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003b0e:	3f01      	subs	r7, #1
1a003b10:	d501      	bpl.n	1a003b16 <_fwalk_reent+0x22>
1a003b12:	6824      	ldr	r4, [r4, #0]
1a003b14:	e7f5      	b.n	1a003b02 <_fwalk_reent+0xe>
1a003b16:	89ab      	ldrh	r3, [r5, #12]
1a003b18:	2b01      	cmp	r3, #1
1a003b1a:	d907      	bls.n	1a003b2c <_fwalk_reent+0x38>
1a003b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003b20:	3301      	adds	r3, #1
1a003b22:	d003      	beq.n	1a003b2c <_fwalk_reent+0x38>
1a003b24:	4629      	mov	r1, r5
1a003b26:	4640      	mov	r0, r8
1a003b28:	47c8      	blx	r9
1a003b2a:	4306      	orrs	r6, r0
1a003b2c:	3568      	adds	r5, #104	; 0x68
1a003b2e:	e7ee      	b.n	1a003b0e <_fwalk_reent+0x1a>

1a003b30 <__libc_init_array>:
1a003b30:	b570      	push	{r4, r5, r6, lr}
1a003b32:	4d0d      	ldr	r5, [pc, #52]	; (1a003b68 <__libc_init_array+0x38>)
1a003b34:	4c0d      	ldr	r4, [pc, #52]	; (1a003b6c <__libc_init_array+0x3c>)
1a003b36:	1b64      	subs	r4, r4, r5
1a003b38:	10a4      	asrs	r4, r4, #2
1a003b3a:	2600      	movs	r6, #0
1a003b3c:	42a6      	cmp	r6, r4
1a003b3e:	d109      	bne.n	1a003b54 <__libc_init_array+0x24>
1a003b40:	4d0b      	ldr	r5, [pc, #44]	; (1a003b70 <__libc_init_array+0x40>)
1a003b42:	4c0c      	ldr	r4, [pc, #48]	; (1a003b74 <__libc_init_array+0x44>)
1a003b44:	f7fc fd55 	bl	1a0005f2 <_init>
1a003b48:	1b64      	subs	r4, r4, r5
1a003b4a:	10a4      	asrs	r4, r4, #2
1a003b4c:	2600      	movs	r6, #0
1a003b4e:	42a6      	cmp	r6, r4
1a003b50:	d105      	bne.n	1a003b5e <__libc_init_array+0x2e>
1a003b52:	bd70      	pop	{r4, r5, r6, pc}
1a003b54:	f855 3b04 	ldr.w	r3, [r5], #4
1a003b58:	4798      	blx	r3
1a003b5a:	3601      	adds	r6, #1
1a003b5c:	e7ee      	b.n	1a003b3c <__libc_init_array+0xc>
1a003b5e:	f855 3b04 	ldr.w	r3, [r5], #4
1a003b62:	4798      	blx	r3
1a003b64:	3601      	adds	r6, #1
1a003b66:	e7f2      	b.n	1a003b4e <__libc_init_array+0x1e>
1a003b68:	1a004bc8 	.word	0x1a004bc8
1a003b6c:	1a004bc8 	.word	0x1a004bc8
1a003b70:	1a004bc8 	.word	0x1a004bc8
1a003b74:	1a004bcc 	.word	0x1a004bcc

1a003b78 <__retarget_lock_init_recursive>:
1a003b78:	4770      	bx	lr

1a003b7a <__retarget_lock_acquire_recursive>:
1a003b7a:	4770      	bx	lr

1a003b7c <__retarget_lock_release_recursive>:
1a003b7c:	4770      	bx	lr

1a003b7e <memcpy>:
1a003b7e:	440a      	add	r2, r1
1a003b80:	4291      	cmp	r1, r2
1a003b82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003b86:	d100      	bne.n	1a003b8a <memcpy+0xc>
1a003b88:	4770      	bx	lr
1a003b8a:	b510      	push	{r4, lr}
1a003b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003b90:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003b94:	4291      	cmp	r1, r2
1a003b96:	d1f9      	bne.n	1a003b8c <memcpy+0xe>
1a003b98:	bd10      	pop	{r4, pc}

1a003b9a <memset>:
1a003b9a:	4402      	add	r2, r0
1a003b9c:	4603      	mov	r3, r0
1a003b9e:	4293      	cmp	r3, r2
1a003ba0:	d100      	bne.n	1a003ba4 <memset+0xa>
1a003ba2:	4770      	bx	lr
1a003ba4:	f803 1b01 	strb.w	r1, [r3], #1
1a003ba8:	e7f9      	b.n	1a003b9e <memset+0x4>
1a003baa:	Address 0x000000001a003baa is out of bounds.


1a003bac <_free_r>:
1a003bac:	b538      	push	{r3, r4, r5, lr}
1a003bae:	4605      	mov	r5, r0
1a003bb0:	2900      	cmp	r1, #0
1a003bb2:	d045      	beq.n	1a003c40 <_free_r+0x94>
1a003bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003bb8:	1f0c      	subs	r4, r1, #4
1a003bba:	2b00      	cmp	r3, #0
1a003bbc:	bfb8      	it	lt
1a003bbe:	18e4      	addlt	r4, r4, r3
1a003bc0:	f000 fdbe 	bl	1a004740 <__malloc_lock>
1a003bc4:	4a1f      	ldr	r2, [pc, #124]	; (1a003c44 <_free_r+0x98>)
1a003bc6:	6813      	ldr	r3, [r2, #0]
1a003bc8:	4610      	mov	r0, r2
1a003bca:	b933      	cbnz	r3, 1a003bda <_free_r+0x2e>
1a003bcc:	6063      	str	r3, [r4, #4]
1a003bce:	6014      	str	r4, [r2, #0]
1a003bd0:	4628      	mov	r0, r5
1a003bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003bd6:	f000 bdb9 	b.w	1a00474c <__malloc_unlock>
1a003bda:	42a3      	cmp	r3, r4
1a003bdc:	d90c      	bls.n	1a003bf8 <_free_r+0x4c>
1a003bde:	6821      	ldr	r1, [r4, #0]
1a003be0:	1862      	adds	r2, r4, r1
1a003be2:	4293      	cmp	r3, r2
1a003be4:	bf04      	itt	eq
1a003be6:	681a      	ldreq	r2, [r3, #0]
1a003be8:	685b      	ldreq	r3, [r3, #4]
1a003bea:	6063      	str	r3, [r4, #4]
1a003bec:	bf04      	itt	eq
1a003bee:	1852      	addeq	r2, r2, r1
1a003bf0:	6022      	streq	r2, [r4, #0]
1a003bf2:	6004      	str	r4, [r0, #0]
1a003bf4:	e7ec      	b.n	1a003bd0 <_free_r+0x24>
1a003bf6:	4613      	mov	r3, r2
1a003bf8:	685a      	ldr	r2, [r3, #4]
1a003bfa:	b10a      	cbz	r2, 1a003c00 <_free_r+0x54>
1a003bfc:	42a2      	cmp	r2, r4
1a003bfe:	d9fa      	bls.n	1a003bf6 <_free_r+0x4a>
1a003c00:	6819      	ldr	r1, [r3, #0]
1a003c02:	1858      	adds	r0, r3, r1
1a003c04:	42a0      	cmp	r0, r4
1a003c06:	d10b      	bne.n	1a003c20 <_free_r+0x74>
1a003c08:	6820      	ldr	r0, [r4, #0]
1a003c0a:	4401      	add	r1, r0
1a003c0c:	1858      	adds	r0, r3, r1
1a003c0e:	4282      	cmp	r2, r0
1a003c10:	6019      	str	r1, [r3, #0]
1a003c12:	d1dd      	bne.n	1a003bd0 <_free_r+0x24>
1a003c14:	6810      	ldr	r0, [r2, #0]
1a003c16:	6852      	ldr	r2, [r2, #4]
1a003c18:	605a      	str	r2, [r3, #4]
1a003c1a:	4401      	add	r1, r0
1a003c1c:	6019      	str	r1, [r3, #0]
1a003c1e:	e7d7      	b.n	1a003bd0 <_free_r+0x24>
1a003c20:	d902      	bls.n	1a003c28 <_free_r+0x7c>
1a003c22:	230c      	movs	r3, #12
1a003c24:	602b      	str	r3, [r5, #0]
1a003c26:	e7d3      	b.n	1a003bd0 <_free_r+0x24>
1a003c28:	6820      	ldr	r0, [r4, #0]
1a003c2a:	1821      	adds	r1, r4, r0
1a003c2c:	428a      	cmp	r2, r1
1a003c2e:	bf04      	itt	eq
1a003c30:	6811      	ldreq	r1, [r2, #0]
1a003c32:	6852      	ldreq	r2, [r2, #4]
1a003c34:	6062      	str	r2, [r4, #4]
1a003c36:	bf04      	itt	eq
1a003c38:	1809      	addeq	r1, r1, r0
1a003c3a:	6021      	streq	r1, [r4, #0]
1a003c3c:	605c      	str	r4, [r3, #4]
1a003c3e:	e7c7      	b.n	1a003bd0 <_free_r+0x24>
1a003c40:	bd38      	pop	{r3, r4, r5, pc}
1a003c42:	bf00      	nop
1a003c44:	10002234 	.word	0x10002234

1a003c48 <_malloc_r>:
1a003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003c4a:	1ccd      	adds	r5, r1, #3
1a003c4c:	f025 0503 	bic.w	r5, r5, #3
1a003c50:	3508      	adds	r5, #8
1a003c52:	2d0c      	cmp	r5, #12
1a003c54:	bf38      	it	cc
1a003c56:	250c      	movcc	r5, #12
1a003c58:	2d00      	cmp	r5, #0
1a003c5a:	4606      	mov	r6, r0
1a003c5c:	db01      	blt.n	1a003c62 <_malloc_r+0x1a>
1a003c5e:	42a9      	cmp	r1, r5
1a003c60:	d903      	bls.n	1a003c6a <_malloc_r+0x22>
1a003c62:	230c      	movs	r3, #12
1a003c64:	6033      	str	r3, [r6, #0]
1a003c66:	2000      	movs	r0, #0
1a003c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c6a:	f000 fd69 	bl	1a004740 <__malloc_lock>
1a003c6e:	4921      	ldr	r1, [pc, #132]	; (1a003cf4 <_malloc_r+0xac>)
1a003c70:	680a      	ldr	r2, [r1, #0]
1a003c72:	4614      	mov	r4, r2
1a003c74:	b99c      	cbnz	r4, 1a003c9e <_malloc_r+0x56>
1a003c76:	4f20      	ldr	r7, [pc, #128]	; (1a003cf8 <_malloc_r+0xb0>)
1a003c78:	683b      	ldr	r3, [r7, #0]
1a003c7a:	b923      	cbnz	r3, 1a003c86 <_malloc_r+0x3e>
1a003c7c:	4621      	mov	r1, r4
1a003c7e:	4630      	mov	r0, r6
1a003c80:	f7fc fd0c 	bl	1a00069c <_sbrk_r>
1a003c84:	6038      	str	r0, [r7, #0]
1a003c86:	4629      	mov	r1, r5
1a003c88:	4630      	mov	r0, r6
1a003c8a:	f7fc fd07 	bl	1a00069c <_sbrk_r>
1a003c8e:	1c43      	adds	r3, r0, #1
1a003c90:	d123      	bne.n	1a003cda <_malloc_r+0x92>
1a003c92:	230c      	movs	r3, #12
1a003c94:	6033      	str	r3, [r6, #0]
1a003c96:	4630      	mov	r0, r6
1a003c98:	f000 fd58 	bl	1a00474c <__malloc_unlock>
1a003c9c:	e7e3      	b.n	1a003c66 <_malloc_r+0x1e>
1a003c9e:	6823      	ldr	r3, [r4, #0]
1a003ca0:	1b5b      	subs	r3, r3, r5
1a003ca2:	d417      	bmi.n	1a003cd4 <_malloc_r+0x8c>
1a003ca4:	2b0b      	cmp	r3, #11
1a003ca6:	d903      	bls.n	1a003cb0 <_malloc_r+0x68>
1a003ca8:	6023      	str	r3, [r4, #0]
1a003caa:	441c      	add	r4, r3
1a003cac:	6025      	str	r5, [r4, #0]
1a003cae:	e004      	b.n	1a003cba <_malloc_r+0x72>
1a003cb0:	6863      	ldr	r3, [r4, #4]
1a003cb2:	42a2      	cmp	r2, r4
1a003cb4:	bf0c      	ite	eq
1a003cb6:	600b      	streq	r3, [r1, #0]
1a003cb8:	6053      	strne	r3, [r2, #4]
1a003cba:	4630      	mov	r0, r6
1a003cbc:	f000 fd46 	bl	1a00474c <__malloc_unlock>
1a003cc0:	f104 000b 	add.w	r0, r4, #11
1a003cc4:	1d23      	adds	r3, r4, #4
1a003cc6:	f020 0007 	bic.w	r0, r0, #7
1a003cca:	1ac2      	subs	r2, r0, r3
1a003ccc:	d0cc      	beq.n	1a003c68 <_malloc_r+0x20>
1a003cce:	1a1b      	subs	r3, r3, r0
1a003cd0:	50a3      	str	r3, [r4, r2]
1a003cd2:	e7c9      	b.n	1a003c68 <_malloc_r+0x20>
1a003cd4:	4622      	mov	r2, r4
1a003cd6:	6864      	ldr	r4, [r4, #4]
1a003cd8:	e7cc      	b.n	1a003c74 <_malloc_r+0x2c>
1a003cda:	1cc4      	adds	r4, r0, #3
1a003cdc:	f024 0403 	bic.w	r4, r4, #3
1a003ce0:	42a0      	cmp	r0, r4
1a003ce2:	d0e3      	beq.n	1a003cac <_malloc_r+0x64>
1a003ce4:	1a21      	subs	r1, r4, r0
1a003ce6:	4630      	mov	r0, r6
1a003ce8:	f7fc fcd8 	bl	1a00069c <_sbrk_r>
1a003cec:	3001      	adds	r0, #1
1a003cee:	d1dd      	bne.n	1a003cac <_malloc_r+0x64>
1a003cf0:	e7cf      	b.n	1a003c92 <_malloc_r+0x4a>
1a003cf2:	bf00      	nop
1a003cf4:	10002234 	.word	0x10002234
1a003cf8:	10002238 	.word	0x10002238

1a003cfc <__sfputc_r>:
1a003cfc:	6893      	ldr	r3, [r2, #8]
1a003cfe:	3b01      	subs	r3, #1
1a003d00:	2b00      	cmp	r3, #0
1a003d02:	b410      	push	{r4}
1a003d04:	6093      	str	r3, [r2, #8]
1a003d06:	da08      	bge.n	1a003d1a <__sfputc_r+0x1e>
1a003d08:	6994      	ldr	r4, [r2, #24]
1a003d0a:	42a3      	cmp	r3, r4
1a003d0c:	db01      	blt.n	1a003d12 <__sfputc_r+0x16>
1a003d0e:	290a      	cmp	r1, #10
1a003d10:	d103      	bne.n	1a003d1a <__sfputc_r+0x1e>
1a003d12:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003d16:	f000 bb9f 	b.w	1a004458 <__swbuf_r>
1a003d1a:	6813      	ldr	r3, [r2, #0]
1a003d1c:	1c58      	adds	r0, r3, #1
1a003d1e:	6010      	str	r0, [r2, #0]
1a003d20:	7019      	strb	r1, [r3, #0]
1a003d22:	4608      	mov	r0, r1
1a003d24:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003d28:	4770      	bx	lr

1a003d2a <__sfputs_r>:
1a003d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003d2c:	4606      	mov	r6, r0
1a003d2e:	460f      	mov	r7, r1
1a003d30:	4614      	mov	r4, r2
1a003d32:	18d5      	adds	r5, r2, r3
1a003d34:	42ac      	cmp	r4, r5
1a003d36:	d101      	bne.n	1a003d3c <__sfputs_r+0x12>
1a003d38:	2000      	movs	r0, #0
1a003d3a:	e007      	b.n	1a003d4c <__sfputs_r+0x22>
1a003d3c:	463a      	mov	r2, r7
1a003d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003d42:	4630      	mov	r0, r6
1a003d44:	f7ff ffda 	bl	1a003cfc <__sfputc_r>
1a003d48:	1c43      	adds	r3, r0, #1
1a003d4a:	d1f3      	bne.n	1a003d34 <__sfputs_r+0xa>
1a003d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d4e:	Address 0x000000001a003d4e is out of bounds.


1a003d50 <_vfiprintf_r>:
1a003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003d54:	460d      	mov	r5, r1
1a003d56:	b09d      	sub	sp, #116	; 0x74
1a003d58:	4614      	mov	r4, r2
1a003d5a:	461e      	mov	r6, r3
1a003d5c:	4607      	mov	r7, r0
1a003d5e:	b118      	cbz	r0, 1a003d68 <_vfiprintf_r+0x18>
1a003d60:	6983      	ldr	r3, [r0, #24]
1a003d62:	b90b      	cbnz	r3, 1a003d68 <_vfiprintf_r+0x18>
1a003d64:	f7ff fe48 	bl	1a0039f8 <__sinit>
1a003d68:	4b85      	ldr	r3, [pc, #532]	; (1a003f80 <_vfiprintf_r+0x230>)
1a003d6a:	429d      	cmp	r5, r3
1a003d6c:	d11b      	bne.n	1a003da6 <_vfiprintf_r+0x56>
1a003d6e:	687d      	ldr	r5, [r7, #4]
1a003d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003d72:	07d9      	lsls	r1, r3, #31
1a003d74:	d405      	bmi.n	1a003d82 <_vfiprintf_r+0x32>
1a003d76:	89ab      	ldrh	r3, [r5, #12]
1a003d78:	059a      	lsls	r2, r3, #22
1a003d7a:	d402      	bmi.n	1a003d82 <_vfiprintf_r+0x32>
1a003d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003d7e:	f7ff fefc 	bl	1a003b7a <__retarget_lock_acquire_recursive>
1a003d82:	89ab      	ldrh	r3, [r5, #12]
1a003d84:	071b      	lsls	r3, r3, #28
1a003d86:	d501      	bpl.n	1a003d8c <_vfiprintf_r+0x3c>
1a003d88:	692b      	ldr	r3, [r5, #16]
1a003d8a:	b9eb      	cbnz	r3, 1a003dc8 <_vfiprintf_r+0x78>
1a003d8c:	4629      	mov	r1, r5
1a003d8e:	4638      	mov	r0, r7
1a003d90:	f000 fbb4 	bl	1a0044fc <__swsetup_r>
1a003d94:	b1c0      	cbz	r0, 1a003dc8 <_vfiprintf_r+0x78>
1a003d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003d98:	07d8      	lsls	r0, r3, #31
1a003d9a:	d50e      	bpl.n	1a003dba <_vfiprintf_r+0x6a>
1a003d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003da0:	b01d      	add	sp, #116	; 0x74
1a003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003da6:	4b77      	ldr	r3, [pc, #476]	; (1a003f84 <_vfiprintf_r+0x234>)
1a003da8:	429d      	cmp	r5, r3
1a003daa:	d101      	bne.n	1a003db0 <_vfiprintf_r+0x60>
1a003dac:	68bd      	ldr	r5, [r7, #8]
1a003dae:	e7df      	b.n	1a003d70 <_vfiprintf_r+0x20>
1a003db0:	4b75      	ldr	r3, [pc, #468]	; (1a003f88 <_vfiprintf_r+0x238>)
1a003db2:	429d      	cmp	r5, r3
1a003db4:	bf08      	it	eq
1a003db6:	68fd      	ldreq	r5, [r7, #12]
1a003db8:	e7da      	b.n	1a003d70 <_vfiprintf_r+0x20>
1a003dba:	89ab      	ldrh	r3, [r5, #12]
1a003dbc:	0599      	lsls	r1, r3, #22
1a003dbe:	d4ed      	bmi.n	1a003d9c <_vfiprintf_r+0x4c>
1a003dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003dc2:	f7ff fedb 	bl	1a003b7c <__retarget_lock_release_recursive>
1a003dc6:	e7e9      	b.n	1a003d9c <_vfiprintf_r+0x4c>
1a003dc8:	2300      	movs	r3, #0
1a003dca:	9309      	str	r3, [sp, #36]	; 0x24
1a003dcc:	2320      	movs	r3, #32
1a003dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a003dd2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a003f8c <_vfiprintf_r+0x23c>
1a003dd6:	9603      	str	r6, [sp, #12]
1a003dd8:	2330      	movs	r3, #48	; 0x30
1a003dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003dde:	f04f 0a01 	mov.w	sl, #1
1a003de2:	4623      	mov	r3, r4
1a003de4:	461e      	mov	r6, r3
1a003de6:	f813 2b01 	ldrb.w	r2, [r3], #1
1a003dea:	b10a      	cbz	r2, 1a003df0 <_vfiprintf_r+0xa0>
1a003dec:	2a25      	cmp	r2, #37	; 0x25
1a003dee:	d1f9      	bne.n	1a003de4 <_vfiprintf_r+0x94>
1a003df0:	ebb6 0b04 	subs.w	fp, r6, r4
1a003df4:	d00b      	beq.n	1a003e0e <_vfiprintf_r+0xbe>
1a003df6:	465b      	mov	r3, fp
1a003df8:	4622      	mov	r2, r4
1a003dfa:	4629      	mov	r1, r5
1a003dfc:	4638      	mov	r0, r7
1a003dfe:	f7ff ff94 	bl	1a003d2a <__sfputs_r>
1a003e02:	3001      	adds	r0, #1
1a003e04:	f000 80a3 	beq.w	1a003f4e <_vfiprintf_r+0x1fe>
1a003e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003e0a:	445b      	add	r3, fp
1a003e0c:	9309      	str	r3, [sp, #36]	; 0x24
1a003e0e:	7833      	ldrb	r3, [r6, #0]
1a003e10:	2b00      	cmp	r3, #0
1a003e12:	f000 809c 	beq.w	1a003f4e <_vfiprintf_r+0x1fe>
1a003e16:	2300      	movs	r3, #0
1a003e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003e20:	3601      	adds	r6, #1
1a003e22:	9304      	str	r3, [sp, #16]
1a003e24:	9307      	str	r3, [sp, #28]
1a003e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a003e2a:	931a      	str	r3, [sp, #104]	; 0x68
1a003e2c:	4634      	mov	r4, r6
1a003e2e:	2205      	movs	r2, #5
1a003e30:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003e34:	4855      	ldr	r0, [pc, #340]	; (1a003f8c <_vfiprintf_r+0x23c>)
1a003e36:	f000 fc33 	bl	1a0046a0 <memchr>
1a003e3a:	9b04      	ldr	r3, [sp, #16]
1a003e3c:	b9c0      	cbnz	r0, 1a003e70 <_vfiprintf_r+0x120>
1a003e3e:	06da      	lsls	r2, r3, #27
1a003e40:	bf44      	itt	mi
1a003e42:	2220      	movmi	r2, #32
1a003e44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003e48:	0718      	lsls	r0, r3, #28
1a003e4a:	bf44      	itt	mi
1a003e4c:	222b      	movmi	r2, #43	; 0x2b
1a003e4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003e52:	7832      	ldrb	r2, [r6, #0]
1a003e54:	2a2a      	cmp	r2, #42	; 0x2a
1a003e56:	d013      	beq.n	1a003e80 <_vfiprintf_r+0x130>
1a003e58:	9a07      	ldr	r2, [sp, #28]
1a003e5a:	4634      	mov	r4, r6
1a003e5c:	2000      	movs	r0, #0
1a003e5e:	260a      	movs	r6, #10
1a003e60:	4621      	mov	r1, r4
1a003e62:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003e66:	3b30      	subs	r3, #48	; 0x30
1a003e68:	2b09      	cmp	r3, #9
1a003e6a:	d94b      	bls.n	1a003f04 <_vfiprintf_r+0x1b4>
1a003e6c:	b970      	cbnz	r0, 1a003e8c <_vfiprintf_r+0x13c>
1a003e6e:	e014      	b.n	1a003e9a <_vfiprintf_r+0x14a>
1a003e70:	eba0 0009 	sub.w	r0, r0, r9
1a003e74:	fa0a f000 	lsl.w	r0, sl, r0
1a003e78:	4318      	orrs	r0, r3
1a003e7a:	9004      	str	r0, [sp, #16]
1a003e7c:	4626      	mov	r6, r4
1a003e7e:	e7d5      	b.n	1a003e2c <_vfiprintf_r+0xdc>
1a003e80:	9a03      	ldr	r2, [sp, #12]
1a003e82:	1d11      	adds	r1, r2, #4
1a003e84:	6812      	ldr	r2, [r2, #0]
1a003e86:	9103      	str	r1, [sp, #12]
1a003e88:	2a00      	cmp	r2, #0
1a003e8a:	db01      	blt.n	1a003e90 <_vfiprintf_r+0x140>
1a003e8c:	9207      	str	r2, [sp, #28]
1a003e8e:	e004      	b.n	1a003e9a <_vfiprintf_r+0x14a>
1a003e90:	4252      	negs	r2, r2
1a003e92:	f043 0302 	orr.w	r3, r3, #2
1a003e96:	9207      	str	r2, [sp, #28]
1a003e98:	9304      	str	r3, [sp, #16]
1a003e9a:	7823      	ldrb	r3, [r4, #0]
1a003e9c:	2b2e      	cmp	r3, #46	; 0x2e
1a003e9e:	d10c      	bne.n	1a003eba <_vfiprintf_r+0x16a>
1a003ea0:	7863      	ldrb	r3, [r4, #1]
1a003ea2:	2b2a      	cmp	r3, #42	; 0x2a
1a003ea4:	d133      	bne.n	1a003f0e <_vfiprintf_r+0x1be>
1a003ea6:	9b03      	ldr	r3, [sp, #12]
1a003ea8:	1d1a      	adds	r2, r3, #4
1a003eaa:	681b      	ldr	r3, [r3, #0]
1a003eac:	9203      	str	r2, [sp, #12]
1a003eae:	2b00      	cmp	r3, #0
1a003eb0:	bfb8      	it	lt
1a003eb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a003eb6:	3402      	adds	r4, #2
1a003eb8:	9305      	str	r3, [sp, #20]
1a003eba:	4e35      	ldr	r6, [pc, #212]	; (1a003f90 <_vfiprintf_r+0x240>)
1a003ebc:	7821      	ldrb	r1, [r4, #0]
1a003ebe:	2203      	movs	r2, #3
1a003ec0:	4630      	mov	r0, r6
1a003ec2:	f000 fbed 	bl	1a0046a0 <memchr>
1a003ec6:	b138      	cbz	r0, 1a003ed8 <_vfiprintf_r+0x188>
1a003ec8:	2340      	movs	r3, #64	; 0x40
1a003eca:	1b80      	subs	r0, r0, r6
1a003ecc:	fa03 f000 	lsl.w	r0, r3, r0
1a003ed0:	9b04      	ldr	r3, [sp, #16]
1a003ed2:	4303      	orrs	r3, r0
1a003ed4:	3401      	adds	r4, #1
1a003ed6:	9304      	str	r3, [sp, #16]
1a003ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
1a003edc:	482d      	ldr	r0, [pc, #180]	; (1a003f94 <_vfiprintf_r+0x244>)
1a003ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a003ee2:	2206      	movs	r2, #6
1a003ee4:	f000 fbdc 	bl	1a0046a0 <memchr>
1a003ee8:	2800      	cmp	r0, #0
1a003eea:	d03f      	beq.n	1a003f6c <_vfiprintf_r+0x21c>
1a003eec:	4b2a      	ldr	r3, [pc, #168]	; (1a003f98 <_vfiprintf_r+0x248>)
1a003eee:	bb13      	cbnz	r3, 1a003f36 <_vfiprintf_r+0x1e6>
1a003ef0:	9b03      	ldr	r3, [sp, #12]
1a003ef2:	3307      	adds	r3, #7
1a003ef4:	f023 0307 	bic.w	r3, r3, #7
1a003ef8:	3308      	adds	r3, #8
1a003efa:	9303      	str	r3, [sp, #12]
1a003efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003efe:	4443      	add	r3, r8
1a003f00:	9309      	str	r3, [sp, #36]	; 0x24
1a003f02:	e76e      	b.n	1a003de2 <_vfiprintf_r+0x92>
1a003f04:	fb06 3202 	mla	r2, r6, r2, r3
1a003f08:	2001      	movs	r0, #1
1a003f0a:	460c      	mov	r4, r1
1a003f0c:	e7a8      	b.n	1a003e60 <_vfiprintf_r+0x110>
1a003f0e:	2300      	movs	r3, #0
1a003f10:	3401      	adds	r4, #1
1a003f12:	9305      	str	r3, [sp, #20]
1a003f14:	4619      	mov	r1, r3
1a003f16:	260a      	movs	r6, #10
1a003f18:	4620      	mov	r0, r4
1a003f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
1a003f1e:	3a30      	subs	r2, #48	; 0x30
1a003f20:	2a09      	cmp	r2, #9
1a003f22:	d903      	bls.n	1a003f2c <_vfiprintf_r+0x1dc>
1a003f24:	2b00      	cmp	r3, #0
1a003f26:	d0c8      	beq.n	1a003eba <_vfiprintf_r+0x16a>
1a003f28:	9105      	str	r1, [sp, #20]
1a003f2a:	e7c6      	b.n	1a003eba <_vfiprintf_r+0x16a>
1a003f2c:	fb06 2101 	mla	r1, r6, r1, r2
1a003f30:	2301      	movs	r3, #1
1a003f32:	4604      	mov	r4, r0
1a003f34:	e7f0      	b.n	1a003f18 <_vfiprintf_r+0x1c8>
1a003f36:	ab03      	add	r3, sp, #12
1a003f38:	9300      	str	r3, [sp, #0]
1a003f3a:	462a      	mov	r2, r5
1a003f3c:	4b17      	ldr	r3, [pc, #92]	; (1a003f9c <_vfiprintf_r+0x24c>)
1a003f3e:	a904      	add	r1, sp, #16
1a003f40:	4638      	mov	r0, r7
1a003f42:	f3af 8000 	nop.w
1a003f46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003f4a:	4680      	mov	r8, r0
1a003f4c:	d1d6      	bne.n	1a003efc <_vfiprintf_r+0x1ac>
1a003f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003f50:	07d9      	lsls	r1, r3, #31
1a003f52:	d405      	bmi.n	1a003f60 <_vfiprintf_r+0x210>
1a003f54:	89ab      	ldrh	r3, [r5, #12]
1a003f56:	059a      	lsls	r2, r3, #22
1a003f58:	d402      	bmi.n	1a003f60 <_vfiprintf_r+0x210>
1a003f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003f5c:	f7ff fe0e 	bl	1a003b7c <__retarget_lock_release_recursive>
1a003f60:	89ab      	ldrh	r3, [r5, #12]
1a003f62:	065b      	lsls	r3, r3, #25
1a003f64:	f53f af1a 	bmi.w	1a003d9c <_vfiprintf_r+0x4c>
1a003f68:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003f6a:	e719      	b.n	1a003da0 <_vfiprintf_r+0x50>
1a003f6c:	ab03      	add	r3, sp, #12
1a003f6e:	9300      	str	r3, [sp, #0]
1a003f70:	462a      	mov	r2, r5
1a003f72:	4b0a      	ldr	r3, [pc, #40]	; (1a003f9c <_vfiprintf_r+0x24c>)
1a003f74:	a904      	add	r1, sp, #16
1a003f76:	4638      	mov	r0, r7
1a003f78:	f000 f888 	bl	1a00408c <_printf_i>
1a003f7c:	e7e3      	b.n	1a003f46 <_vfiprintf_r+0x1f6>
1a003f7e:	bf00      	nop
1a003f80:	1a004b50 	.word	0x1a004b50
1a003f84:	1a004b70 	.word	0x1a004b70
1a003f88:	1a004b30 	.word	0x1a004b30
1a003f8c:	1a004b94 	.word	0x1a004b94
1a003f90:	1a004b9a 	.word	0x1a004b9a
1a003f94:	1a004b9e 	.word	0x1a004b9e
1a003f98:	00000000 	.word	0x00000000
1a003f9c:	1a003d2b 	.word	0x1a003d2b

1a003fa0 <_printf_common>:
1a003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003fa4:	4691      	mov	r9, r2
1a003fa6:	461f      	mov	r7, r3
1a003fa8:	688a      	ldr	r2, [r1, #8]
1a003faa:	690b      	ldr	r3, [r1, #16]
1a003fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a003fb0:	4293      	cmp	r3, r2
1a003fb2:	bfb8      	it	lt
1a003fb4:	4613      	movlt	r3, r2
1a003fb6:	f8c9 3000 	str.w	r3, [r9]
1a003fba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a003fbe:	4606      	mov	r6, r0
1a003fc0:	460c      	mov	r4, r1
1a003fc2:	b112      	cbz	r2, 1a003fca <_printf_common+0x2a>
1a003fc4:	3301      	adds	r3, #1
1a003fc6:	f8c9 3000 	str.w	r3, [r9]
1a003fca:	6823      	ldr	r3, [r4, #0]
1a003fcc:	0699      	lsls	r1, r3, #26
1a003fce:	bf42      	ittt	mi
1a003fd0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a003fd4:	3302      	addmi	r3, #2
1a003fd6:	f8c9 3000 	strmi.w	r3, [r9]
1a003fda:	6825      	ldr	r5, [r4, #0]
1a003fdc:	f015 0506 	ands.w	r5, r5, #6
1a003fe0:	d107      	bne.n	1a003ff2 <_printf_common+0x52>
1a003fe2:	f104 0a19 	add.w	sl, r4, #25
1a003fe6:	68e3      	ldr	r3, [r4, #12]
1a003fe8:	f8d9 2000 	ldr.w	r2, [r9]
1a003fec:	1a9b      	subs	r3, r3, r2
1a003fee:	42ab      	cmp	r3, r5
1a003ff0:	dc28      	bgt.n	1a004044 <_printf_common+0xa4>
1a003ff2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a003ff6:	6822      	ldr	r2, [r4, #0]
1a003ff8:	3300      	adds	r3, #0
1a003ffa:	bf18      	it	ne
1a003ffc:	2301      	movne	r3, #1
1a003ffe:	0692      	lsls	r2, r2, #26
1a004000:	d42d      	bmi.n	1a00405e <_printf_common+0xbe>
1a004002:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004006:	4639      	mov	r1, r7
1a004008:	4630      	mov	r0, r6
1a00400a:	47c0      	blx	r8
1a00400c:	3001      	adds	r0, #1
1a00400e:	d020      	beq.n	1a004052 <_printf_common+0xb2>
1a004010:	6823      	ldr	r3, [r4, #0]
1a004012:	68e5      	ldr	r5, [r4, #12]
1a004014:	f8d9 2000 	ldr.w	r2, [r9]
1a004018:	f003 0306 	and.w	r3, r3, #6
1a00401c:	2b04      	cmp	r3, #4
1a00401e:	bf08      	it	eq
1a004020:	1aad      	subeq	r5, r5, r2
1a004022:	68a3      	ldr	r3, [r4, #8]
1a004024:	6922      	ldr	r2, [r4, #16]
1a004026:	bf0c      	ite	eq
1a004028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00402c:	2500      	movne	r5, #0
1a00402e:	4293      	cmp	r3, r2
1a004030:	bfc4      	itt	gt
1a004032:	1a9b      	subgt	r3, r3, r2
1a004034:	18ed      	addgt	r5, r5, r3
1a004036:	f04f 0900 	mov.w	r9, #0
1a00403a:	341a      	adds	r4, #26
1a00403c:	454d      	cmp	r5, r9
1a00403e:	d11a      	bne.n	1a004076 <_printf_common+0xd6>
1a004040:	2000      	movs	r0, #0
1a004042:	e008      	b.n	1a004056 <_printf_common+0xb6>
1a004044:	2301      	movs	r3, #1
1a004046:	4652      	mov	r2, sl
1a004048:	4639      	mov	r1, r7
1a00404a:	4630      	mov	r0, r6
1a00404c:	47c0      	blx	r8
1a00404e:	3001      	adds	r0, #1
1a004050:	d103      	bne.n	1a00405a <_printf_common+0xba>
1a004052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00405a:	3501      	adds	r5, #1
1a00405c:	e7c3      	b.n	1a003fe6 <_printf_common+0x46>
1a00405e:	18e1      	adds	r1, r4, r3
1a004060:	1c5a      	adds	r2, r3, #1
1a004062:	2030      	movs	r0, #48	; 0x30
1a004064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004068:	4422      	add	r2, r4
1a00406a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00406e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004072:	3302      	adds	r3, #2
1a004074:	e7c5      	b.n	1a004002 <_printf_common+0x62>
1a004076:	2301      	movs	r3, #1
1a004078:	4622      	mov	r2, r4
1a00407a:	4639      	mov	r1, r7
1a00407c:	4630      	mov	r0, r6
1a00407e:	47c0      	blx	r8
1a004080:	3001      	adds	r0, #1
1a004082:	d0e6      	beq.n	1a004052 <_printf_common+0xb2>
1a004084:	f109 0901 	add.w	r9, r9, #1
1a004088:	e7d8      	b.n	1a00403c <_printf_common+0x9c>
1a00408a:	Address 0x000000001a00408a is out of bounds.


1a00408c <_printf_i>:
1a00408c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004090:	4606      	mov	r6, r0
1a004092:	460c      	mov	r4, r1
1a004094:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a004098:	7e09      	ldrb	r1, [r1, #24]
1a00409a:	b085      	sub	sp, #20
1a00409c:	296e      	cmp	r1, #110	; 0x6e
1a00409e:	4698      	mov	r8, r3
1a0040a0:	4617      	mov	r7, r2
1a0040a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0040a4:	f000 80ba 	beq.w	1a00421c <_printf_i+0x190>
1a0040a8:	d824      	bhi.n	1a0040f4 <_printf_i+0x68>
1a0040aa:	2963      	cmp	r1, #99	; 0x63
1a0040ac:	d039      	beq.n	1a004122 <_printf_i+0x96>
1a0040ae:	d80a      	bhi.n	1a0040c6 <_printf_i+0x3a>
1a0040b0:	2900      	cmp	r1, #0
1a0040b2:	f000 80c3 	beq.w	1a00423c <_printf_i+0x1b0>
1a0040b6:	2958      	cmp	r1, #88	; 0x58
1a0040b8:	f000 8091 	beq.w	1a0041de <_printf_i+0x152>
1a0040bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0040c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0040c4:	e035      	b.n	1a004132 <_printf_i+0xa6>
1a0040c6:	2964      	cmp	r1, #100	; 0x64
1a0040c8:	d001      	beq.n	1a0040ce <_printf_i+0x42>
1a0040ca:	2969      	cmp	r1, #105	; 0x69
1a0040cc:	d1f6      	bne.n	1a0040bc <_printf_i+0x30>
1a0040ce:	6825      	ldr	r5, [r4, #0]
1a0040d0:	681a      	ldr	r2, [r3, #0]
1a0040d2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0040d6:	f102 0104 	add.w	r1, r2, #4
1a0040da:	d02c      	beq.n	1a004136 <_printf_i+0xaa>
1a0040dc:	6812      	ldr	r2, [r2, #0]
1a0040de:	6019      	str	r1, [r3, #0]
1a0040e0:	2a00      	cmp	r2, #0
1a0040e2:	da03      	bge.n	1a0040ec <_printf_i+0x60>
1a0040e4:	232d      	movs	r3, #45	; 0x2d
1a0040e6:	4252      	negs	r2, r2
1a0040e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0040ec:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a0042ac <_printf_i+0x220>
1a0040f0:	230a      	movs	r3, #10
1a0040f2:	e03f      	b.n	1a004174 <_printf_i+0xe8>
1a0040f4:	2973      	cmp	r1, #115	; 0x73
1a0040f6:	f000 80a5 	beq.w	1a004244 <_printf_i+0x1b8>
1a0040fa:	d808      	bhi.n	1a00410e <_printf_i+0x82>
1a0040fc:	296f      	cmp	r1, #111	; 0x6f
1a0040fe:	d021      	beq.n	1a004144 <_printf_i+0xb8>
1a004100:	2970      	cmp	r1, #112	; 0x70
1a004102:	d1db      	bne.n	1a0040bc <_printf_i+0x30>
1a004104:	6822      	ldr	r2, [r4, #0]
1a004106:	f042 0220 	orr.w	r2, r2, #32
1a00410a:	6022      	str	r2, [r4, #0]
1a00410c:	e003      	b.n	1a004116 <_printf_i+0x8a>
1a00410e:	2975      	cmp	r1, #117	; 0x75
1a004110:	d018      	beq.n	1a004144 <_printf_i+0xb8>
1a004112:	2978      	cmp	r1, #120	; 0x78
1a004114:	d1d2      	bne.n	1a0040bc <_printf_i+0x30>
1a004116:	2278      	movs	r2, #120	; 0x78
1a004118:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a00411c:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0042b0 <_printf_i+0x224>
1a004120:	e061      	b.n	1a0041e6 <_printf_i+0x15a>
1a004122:	681a      	ldr	r2, [r3, #0]
1a004124:	1d11      	adds	r1, r2, #4
1a004126:	6019      	str	r1, [r3, #0]
1a004128:	6813      	ldr	r3, [r2, #0]
1a00412a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00412e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004132:	2301      	movs	r3, #1
1a004134:	e093      	b.n	1a00425e <_printf_i+0x1d2>
1a004136:	6812      	ldr	r2, [r2, #0]
1a004138:	6019      	str	r1, [r3, #0]
1a00413a:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00413e:	bf18      	it	ne
1a004140:	b212      	sxthne	r2, r2
1a004142:	e7cd      	b.n	1a0040e0 <_printf_i+0x54>
1a004144:	f8d4 c000 	ldr.w	ip, [r4]
1a004148:	681a      	ldr	r2, [r3, #0]
1a00414a:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00414e:	f102 0504 	add.w	r5, r2, #4
1a004152:	601d      	str	r5, [r3, #0]
1a004154:	d001      	beq.n	1a00415a <_printf_i+0xce>
1a004156:	6812      	ldr	r2, [r2, #0]
1a004158:	e003      	b.n	1a004162 <_printf_i+0xd6>
1a00415a:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00415e:	d0fa      	beq.n	1a004156 <_printf_i+0xca>
1a004160:	8812      	ldrh	r2, [r2, #0]
1a004162:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a0042ac <_printf_i+0x220>
1a004166:	296f      	cmp	r1, #111	; 0x6f
1a004168:	bf0c      	ite	eq
1a00416a:	2308      	moveq	r3, #8
1a00416c:	230a      	movne	r3, #10
1a00416e:	2100      	movs	r1, #0
1a004170:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004174:	6865      	ldr	r5, [r4, #4]
1a004176:	60a5      	str	r5, [r4, #8]
1a004178:	2d00      	cmp	r5, #0
1a00417a:	bfa2      	ittt	ge
1a00417c:	6821      	ldrge	r1, [r4, #0]
1a00417e:	f021 0104 	bicge.w	r1, r1, #4
1a004182:	6021      	strge	r1, [r4, #0]
1a004184:	b90a      	cbnz	r2, 1a00418a <_printf_i+0xfe>
1a004186:	2d00      	cmp	r5, #0
1a004188:	d046      	beq.n	1a004218 <_printf_i+0x18c>
1a00418a:	4605      	mov	r5, r0
1a00418c:	fbb2 f1f3 	udiv	r1, r2, r3
1a004190:	fb03 2e11 	mls	lr, r3, r1, r2
1a004194:	4293      	cmp	r3, r2
1a004196:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a00419a:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a00419e:	d939      	bls.n	1a004214 <_printf_i+0x188>
1a0041a0:	2b08      	cmp	r3, #8
1a0041a2:	d10b      	bne.n	1a0041bc <_printf_i+0x130>
1a0041a4:	6823      	ldr	r3, [r4, #0]
1a0041a6:	07da      	lsls	r2, r3, #31
1a0041a8:	d508      	bpl.n	1a0041bc <_printf_i+0x130>
1a0041aa:	6923      	ldr	r3, [r4, #16]
1a0041ac:	6862      	ldr	r2, [r4, #4]
1a0041ae:	429a      	cmp	r2, r3
1a0041b0:	bfde      	ittt	le
1a0041b2:	2330      	movle	r3, #48	; 0x30
1a0041b4:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0041b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0041bc:	1b40      	subs	r0, r0, r5
1a0041be:	6120      	str	r0, [r4, #16]
1a0041c0:	f8cd 8000 	str.w	r8, [sp]
1a0041c4:	463b      	mov	r3, r7
1a0041c6:	aa03      	add	r2, sp, #12
1a0041c8:	4621      	mov	r1, r4
1a0041ca:	4630      	mov	r0, r6
1a0041cc:	f7ff fee8 	bl	1a003fa0 <_printf_common>
1a0041d0:	3001      	adds	r0, #1
1a0041d2:	d149      	bne.n	1a004268 <_printf_i+0x1dc>
1a0041d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0041d8:	b005      	add	sp, #20
1a0041da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0041de:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a0042ac <_printf_i+0x220>
1a0041e2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0041e6:	681d      	ldr	r5, [r3, #0]
1a0041e8:	6821      	ldr	r1, [r4, #0]
1a0041ea:	f855 2b04 	ldr.w	r2, [r5], #4
1a0041ee:	601d      	str	r5, [r3, #0]
1a0041f0:	060d      	lsls	r5, r1, #24
1a0041f2:	d50b      	bpl.n	1a00420c <_printf_i+0x180>
1a0041f4:	07cd      	lsls	r5, r1, #31
1a0041f6:	bf44      	itt	mi
1a0041f8:	f041 0120 	orrmi.w	r1, r1, #32
1a0041fc:	6021      	strmi	r1, [r4, #0]
1a0041fe:	b91a      	cbnz	r2, 1a004208 <_printf_i+0x17c>
1a004200:	6823      	ldr	r3, [r4, #0]
1a004202:	f023 0320 	bic.w	r3, r3, #32
1a004206:	6023      	str	r3, [r4, #0]
1a004208:	2310      	movs	r3, #16
1a00420a:	e7b0      	b.n	1a00416e <_printf_i+0xe2>
1a00420c:	064b      	lsls	r3, r1, #25
1a00420e:	bf48      	it	mi
1a004210:	b292      	uxthmi	r2, r2
1a004212:	e7ef      	b.n	1a0041f4 <_printf_i+0x168>
1a004214:	460a      	mov	r2, r1
1a004216:	e7b9      	b.n	1a00418c <_printf_i+0x100>
1a004218:	4605      	mov	r5, r0
1a00421a:	e7c1      	b.n	1a0041a0 <_printf_i+0x114>
1a00421c:	681a      	ldr	r2, [r3, #0]
1a00421e:	f8d4 c000 	ldr.w	ip, [r4]
1a004222:	6961      	ldr	r1, [r4, #20]
1a004224:	1d15      	adds	r5, r2, #4
1a004226:	601d      	str	r5, [r3, #0]
1a004228:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00422c:	6813      	ldr	r3, [r2, #0]
1a00422e:	d001      	beq.n	1a004234 <_printf_i+0x1a8>
1a004230:	6019      	str	r1, [r3, #0]
1a004232:	e003      	b.n	1a00423c <_printf_i+0x1b0>
1a004234:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a004238:	d0fa      	beq.n	1a004230 <_printf_i+0x1a4>
1a00423a:	8019      	strh	r1, [r3, #0]
1a00423c:	2300      	movs	r3, #0
1a00423e:	6123      	str	r3, [r4, #16]
1a004240:	4605      	mov	r5, r0
1a004242:	e7bd      	b.n	1a0041c0 <_printf_i+0x134>
1a004244:	681a      	ldr	r2, [r3, #0]
1a004246:	1d11      	adds	r1, r2, #4
1a004248:	6019      	str	r1, [r3, #0]
1a00424a:	6815      	ldr	r5, [r2, #0]
1a00424c:	6862      	ldr	r2, [r4, #4]
1a00424e:	2100      	movs	r1, #0
1a004250:	4628      	mov	r0, r5
1a004252:	f000 fa25 	bl	1a0046a0 <memchr>
1a004256:	b108      	cbz	r0, 1a00425c <_printf_i+0x1d0>
1a004258:	1b40      	subs	r0, r0, r5
1a00425a:	6060      	str	r0, [r4, #4]
1a00425c:	6863      	ldr	r3, [r4, #4]
1a00425e:	6123      	str	r3, [r4, #16]
1a004260:	2300      	movs	r3, #0
1a004262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004266:	e7ab      	b.n	1a0041c0 <_printf_i+0x134>
1a004268:	6923      	ldr	r3, [r4, #16]
1a00426a:	462a      	mov	r2, r5
1a00426c:	4639      	mov	r1, r7
1a00426e:	4630      	mov	r0, r6
1a004270:	47c0      	blx	r8
1a004272:	3001      	adds	r0, #1
1a004274:	d0ae      	beq.n	1a0041d4 <_printf_i+0x148>
1a004276:	6823      	ldr	r3, [r4, #0]
1a004278:	079b      	lsls	r3, r3, #30
1a00427a:	d413      	bmi.n	1a0042a4 <_printf_i+0x218>
1a00427c:	68e0      	ldr	r0, [r4, #12]
1a00427e:	9b03      	ldr	r3, [sp, #12]
1a004280:	4298      	cmp	r0, r3
1a004282:	bfb8      	it	lt
1a004284:	4618      	movlt	r0, r3
1a004286:	e7a7      	b.n	1a0041d8 <_printf_i+0x14c>
1a004288:	2301      	movs	r3, #1
1a00428a:	464a      	mov	r2, r9
1a00428c:	4639      	mov	r1, r7
1a00428e:	4630      	mov	r0, r6
1a004290:	47c0      	blx	r8
1a004292:	3001      	adds	r0, #1
1a004294:	d09e      	beq.n	1a0041d4 <_printf_i+0x148>
1a004296:	3501      	adds	r5, #1
1a004298:	68e3      	ldr	r3, [r4, #12]
1a00429a:	9a03      	ldr	r2, [sp, #12]
1a00429c:	1a9b      	subs	r3, r3, r2
1a00429e:	42ab      	cmp	r3, r5
1a0042a0:	dcf2      	bgt.n	1a004288 <_printf_i+0x1fc>
1a0042a2:	e7eb      	b.n	1a00427c <_printf_i+0x1f0>
1a0042a4:	2500      	movs	r5, #0
1a0042a6:	f104 0919 	add.w	r9, r4, #25
1a0042aa:	e7f5      	b.n	1a004298 <_printf_i+0x20c>
1a0042ac:	1a004ba5 	.word	0x1a004ba5
1a0042b0:	1a004bb6 	.word	0x1a004bb6

1a0042b4 <iprintf>:
1a0042b4:	b40f      	push	{r0, r1, r2, r3}
1a0042b6:	4b0a      	ldr	r3, [pc, #40]	; (1a0042e0 <iprintf+0x2c>)
1a0042b8:	b513      	push	{r0, r1, r4, lr}
1a0042ba:	681c      	ldr	r4, [r3, #0]
1a0042bc:	b124      	cbz	r4, 1a0042c8 <iprintf+0x14>
1a0042be:	69a3      	ldr	r3, [r4, #24]
1a0042c0:	b913      	cbnz	r3, 1a0042c8 <iprintf+0x14>
1a0042c2:	4620      	mov	r0, r4
1a0042c4:	f7ff fb98 	bl	1a0039f8 <__sinit>
1a0042c8:	ab05      	add	r3, sp, #20
1a0042ca:	9a04      	ldr	r2, [sp, #16]
1a0042cc:	68a1      	ldr	r1, [r4, #8]
1a0042ce:	9301      	str	r3, [sp, #4]
1a0042d0:	4620      	mov	r0, r4
1a0042d2:	f7ff fd3d 	bl	1a003d50 <_vfiprintf_r>
1a0042d6:	b002      	add	sp, #8
1a0042d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0042dc:	b004      	add	sp, #16
1a0042de:	4770      	bx	lr
1a0042e0:	10000040 	.word	0x10000040

1a0042e4 <_puts_r>:
1a0042e4:	b570      	push	{r4, r5, r6, lr}
1a0042e6:	460e      	mov	r6, r1
1a0042e8:	4605      	mov	r5, r0
1a0042ea:	b118      	cbz	r0, 1a0042f4 <_puts_r+0x10>
1a0042ec:	6983      	ldr	r3, [r0, #24]
1a0042ee:	b90b      	cbnz	r3, 1a0042f4 <_puts_r+0x10>
1a0042f0:	f7ff fb82 	bl	1a0039f8 <__sinit>
1a0042f4:	69ab      	ldr	r3, [r5, #24]
1a0042f6:	68ac      	ldr	r4, [r5, #8]
1a0042f8:	b913      	cbnz	r3, 1a004300 <_puts_r+0x1c>
1a0042fa:	4628      	mov	r0, r5
1a0042fc:	f7ff fb7c 	bl	1a0039f8 <__sinit>
1a004300:	4b2c      	ldr	r3, [pc, #176]	; (1a0043b4 <_puts_r+0xd0>)
1a004302:	429c      	cmp	r4, r3
1a004304:	d120      	bne.n	1a004348 <_puts_r+0x64>
1a004306:	686c      	ldr	r4, [r5, #4]
1a004308:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00430a:	07db      	lsls	r3, r3, #31
1a00430c:	d405      	bmi.n	1a00431a <_puts_r+0x36>
1a00430e:	89a3      	ldrh	r3, [r4, #12]
1a004310:	0598      	lsls	r0, r3, #22
1a004312:	d402      	bmi.n	1a00431a <_puts_r+0x36>
1a004314:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a004316:	f7ff fc30 	bl	1a003b7a <__retarget_lock_acquire_recursive>
1a00431a:	89a3      	ldrh	r3, [r4, #12]
1a00431c:	0719      	lsls	r1, r3, #28
1a00431e:	d51d      	bpl.n	1a00435c <_puts_r+0x78>
1a004320:	6923      	ldr	r3, [r4, #16]
1a004322:	b1db      	cbz	r3, 1a00435c <_puts_r+0x78>
1a004324:	3e01      	subs	r6, #1
1a004326:	68a3      	ldr	r3, [r4, #8]
1a004328:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a00432c:	3b01      	subs	r3, #1
1a00432e:	60a3      	str	r3, [r4, #8]
1a004330:	bb39      	cbnz	r1, 1a004382 <_puts_r+0x9e>
1a004332:	2b00      	cmp	r3, #0
1a004334:	da38      	bge.n	1a0043a8 <_puts_r+0xc4>
1a004336:	4622      	mov	r2, r4
1a004338:	210a      	movs	r1, #10
1a00433a:	4628      	mov	r0, r5
1a00433c:	f000 f88c 	bl	1a004458 <__swbuf_r>
1a004340:	3001      	adds	r0, #1
1a004342:	d011      	beq.n	1a004368 <_puts_r+0x84>
1a004344:	250a      	movs	r5, #10
1a004346:	e011      	b.n	1a00436c <_puts_r+0x88>
1a004348:	4b1b      	ldr	r3, [pc, #108]	; (1a0043b8 <_puts_r+0xd4>)
1a00434a:	429c      	cmp	r4, r3
1a00434c:	d101      	bne.n	1a004352 <_puts_r+0x6e>
1a00434e:	68ac      	ldr	r4, [r5, #8]
1a004350:	e7da      	b.n	1a004308 <_puts_r+0x24>
1a004352:	4b1a      	ldr	r3, [pc, #104]	; (1a0043bc <_puts_r+0xd8>)
1a004354:	429c      	cmp	r4, r3
1a004356:	bf08      	it	eq
1a004358:	68ec      	ldreq	r4, [r5, #12]
1a00435a:	e7d5      	b.n	1a004308 <_puts_r+0x24>
1a00435c:	4621      	mov	r1, r4
1a00435e:	4628      	mov	r0, r5
1a004360:	f000 f8cc 	bl	1a0044fc <__swsetup_r>
1a004364:	2800      	cmp	r0, #0
1a004366:	d0dd      	beq.n	1a004324 <_puts_r+0x40>
1a004368:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a00436c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00436e:	07da      	lsls	r2, r3, #31
1a004370:	d405      	bmi.n	1a00437e <_puts_r+0x9a>
1a004372:	89a3      	ldrh	r3, [r4, #12]
1a004374:	059b      	lsls	r3, r3, #22
1a004376:	d402      	bmi.n	1a00437e <_puts_r+0x9a>
1a004378:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00437a:	f7ff fbff 	bl	1a003b7c <__retarget_lock_release_recursive>
1a00437e:	4628      	mov	r0, r5
1a004380:	bd70      	pop	{r4, r5, r6, pc}
1a004382:	2b00      	cmp	r3, #0
1a004384:	da04      	bge.n	1a004390 <_puts_r+0xac>
1a004386:	69a2      	ldr	r2, [r4, #24]
1a004388:	429a      	cmp	r2, r3
1a00438a:	dc06      	bgt.n	1a00439a <_puts_r+0xb6>
1a00438c:	290a      	cmp	r1, #10
1a00438e:	d004      	beq.n	1a00439a <_puts_r+0xb6>
1a004390:	6823      	ldr	r3, [r4, #0]
1a004392:	1c5a      	adds	r2, r3, #1
1a004394:	6022      	str	r2, [r4, #0]
1a004396:	7019      	strb	r1, [r3, #0]
1a004398:	e7c5      	b.n	1a004326 <_puts_r+0x42>
1a00439a:	4622      	mov	r2, r4
1a00439c:	4628      	mov	r0, r5
1a00439e:	f000 f85b 	bl	1a004458 <__swbuf_r>
1a0043a2:	3001      	adds	r0, #1
1a0043a4:	d1bf      	bne.n	1a004326 <_puts_r+0x42>
1a0043a6:	e7df      	b.n	1a004368 <_puts_r+0x84>
1a0043a8:	6823      	ldr	r3, [r4, #0]
1a0043aa:	250a      	movs	r5, #10
1a0043ac:	1c5a      	adds	r2, r3, #1
1a0043ae:	6022      	str	r2, [r4, #0]
1a0043b0:	701d      	strb	r5, [r3, #0]
1a0043b2:	e7db      	b.n	1a00436c <_puts_r+0x88>
1a0043b4:	1a004b50 	.word	0x1a004b50
1a0043b8:	1a004b70 	.word	0x1a004b70
1a0043bc:	1a004b30 	.word	0x1a004b30

1a0043c0 <puts>:
1a0043c0:	4b02      	ldr	r3, [pc, #8]	; (1a0043cc <puts+0xc>)
1a0043c2:	4601      	mov	r1, r0
1a0043c4:	6818      	ldr	r0, [r3, #0]
1a0043c6:	f7ff bf8d 	b.w	1a0042e4 <_puts_r>
1a0043ca:	bf00      	nop
1a0043cc:	10000040 	.word	0x10000040

1a0043d0 <__sread>:
1a0043d0:	b510      	push	{r4, lr}
1a0043d2:	460c      	mov	r4, r1
1a0043d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0043d8:	f7fc f924 	bl	1a000624 <_read_r>
1a0043dc:	2800      	cmp	r0, #0
1a0043de:	bfab      	itete	ge
1a0043e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0043e2:	89a3      	ldrhlt	r3, [r4, #12]
1a0043e4:	181b      	addge	r3, r3, r0
1a0043e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0043ea:	bfac      	ite	ge
1a0043ec:	6563      	strge	r3, [r4, #84]	; 0x54
1a0043ee:	81a3      	strhlt	r3, [r4, #12]
1a0043f0:	bd10      	pop	{r4, pc}

1a0043f2 <__swrite>:
1a0043f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0043f6:	461f      	mov	r7, r3
1a0043f8:	898b      	ldrh	r3, [r1, #12]
1a0043fa:	05db      	lsls	r3, r3, #23
1a0043fc:	4605      	mov	r5, r0
1a0043fe:	460c      	mov	r4, r1
1a004400:	4616      	mov	r6, r2
1a004402:	d505      	bpl.n	1a004410 <__swrite+0x1e>
1a004404:	2302      	movs	r3, #2
1a004406:	2200      	movs	r2, #0
1a004408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00440c:	f7fc f905 	bl	1a00061a <_lseek_r>
1a004410:	89a3      	ldrh	r3, [r4, #12]
1a004412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00441a:	81a3      	strh	r3, [r4, #12]
1a00441c:	4632      	mov	r2, r6
1a00441e:	463b      	mov	r3, r7
1a004420:	4628      	mov	r0, r5
1a004422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004426:	f7fc b924 	b.w	1a000672 <_write_r>

1a00442a <__sseek>:
1a00442a:	b510      	push	{r4, lr}
1a00442c:	460c      	mov	r4, r1
1a00442e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004432:	f7fc f8f2 	bl	1a00061a <_lseek_r>
1a004436:	1c43      	adds	r3, r0, #1
1a004438:	89a3      	ldrh	r3, [r4, #12]
1a00443a:	bf15      	itete	ne
1a00443c:	6560      	strne	r0, [r4, #84]	; 0x54
1a00443e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004446:	81a3      	strheq	r3, [r4, #12]
1a004448:	bf18      	it	ne
1a00444a:	81a3      	strhne	r3, [r4, #12]
1a00444c:	bd10      	pop	{r4, pc}

1a00444e <__sclose>:
1a00444e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004452:	f7fc b8cf 	b.w	1a0005f4 <_close_r>
1a004456:	Address 0x000000001a004456 is out of bounds.


1a004458 <__swbuf_r>:
1a004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00445a:	460e      	mov	r6, r1
1a00445c:	4614      	mov	r4, r2
1a00445e:	4605      	mov	r5, r0
1a004460:	b118      	cbz	r0, 1a00446a <__swbuf_r+0x12>
1a004462:	6983      	ldr	r3, [r0, #24]
1a004464:	b90b      	cbnz	r3, 1a00446a <__swbuf_r+0x12>
1a004466:	f7ff fac7 	bl	1a0039f8 <__sinit>
1a00446a:	4b21      	ldr	r3, [pc, #132]	; (1a0044f0 <__swbuf_r+0x98>)
1a00446c:	429c      	cmp	r4, r3
1a00446e:	d12b      	bne.n	1a0044c8 <__swbuf_r+0x70>
1a004470:	686c      	ldr	r4, [r5, #4]
1a004472:	69a3      	ldr	r3, [r4, #24]
1a004474:	60a3      	str	r3, [r4, #8]
1a004476:	89a3      	ldrh	r3, [r4, #12]
1a004478:	071a      	lsls	r2, r3, #28
1a00447a:	d52f      	bpl.n	1a0044dc <__swbuf_r+0x84>
1a00447c:	6923      	ldr	r3, [r4, #16]
1a00447e:	b36b      	cbz	r3, 1a0044dc <__swbuf_r+0x84>
1a004480:	6923      	ldr	r3, [r4, #16]
1a004482:	6820      	ldr	r0, [r4, #0]
1a004484:	1ac0      	subs	r0, r0, r3
1a004486:	6963      	ldr	r3, [r4, #20]
1a004488:	b2f6      	uxtb	r6, r6
1a00448a:	4283      	cmp	r3, r0
1a00448c:	4637      	mov	r7, r6
1a00448e:	dc04      	bgt.n	1a00449a <__swbuf_r+0x42>
1a004490:	4621      	mov	r1, r4
1a004492:	4628      	mov	r0, r5
1a004494:	f7ff fa1c 	bl	1a0038d0 <_fflush_r>
1a004498:	bb30      	cbnz	r0, 1a0044e8 <__swbuf_r+0x90>
1a00449a:	68a3      	ldr	r3, [r4, #8]
1a00449c:	3b01      	subs	r3, #1
1a00449e:	60a3      	str	r3, [r4, #8]
1a0044a0:	6823      	ldr	r3, [r4, #0]
1a0044a2:	1c5a      	adds	r2, r3, #1
1a0044a4:	6022      	str	r2, [r4, #0]
1a0044a6:	701e      	strb	r6, [r3, #0]
1a0044a8:	6963      	ldr	r3, [r4, #20]
1a0044aa:	3001      	adds	r0, #1
1a0044ac:	4283      	cmp	r3, r0
1a0044ae:	d004      	beq.n	1a0044ba <__swbuf_r+0x62>
1a0044b0:	89a3      	ldrh	r3, [r4, #12]
1a0044b2:	07db      	lsls	r3, r3, #31
1a0044b4:	d506      	bpl.n	1a0044c4 <__swbuf_r+0x6c>
1a0044b6:	2e0a      	cmp	r6, #10
1a0044b8:	d104      	bne.n	1a0044c4 <__swbuf_r+0x6c>
1a0044ba:	4621      	mov	r1, r4
1a0044bc:	4628      	mov	r0, r5
1a0044be:	f7ff fa07 	bl	1a0038d0 <_fflush_r>
1a0044c2:	b988      	cbnz	r0, 1a0044e8 <__swbuf_r+0x90>
1a0044c4:	4638      	mov	r0, r7
1a0044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0044c8:	4b0a      	ldr	r3, [pc, #40]	; (1a0044f4 <__swbuf_r+0x9c>)
1a0044ca:	429c      	cmp	r4, r3
1a0044cc:	d101      	bne.n	1a0044d2 <__swbuf_r+0x7a>
1a0044ce:	68ac      	ldr	r4, [r5, #8]
1a0044d0:	e7cf      	b.n	1a004472 <__swbuf_r+0x1a>
1a0044d2:	4b09      	ldr	r3, [pc, #36]	; (1a0044f8 <__swbuf_r+0xa0>)
1a0044d4:	429c      	cmp	r4, r3
1a0044d6:	bf08      	it	eq
1a0044d8:	68ec      	ldreq	r4, [r5, #12]
1a0044da:	e7ca      	b.n	1a004472 <__swbuf_r+0x1a>
1a0044dc:	4621      	mov	r1, r4
1a0044de:	4628      	mov	r0, r5
1a0044e0:	f000 f80c 	bl	1a0044fc <__swsetup_r>
1a0044e4:	2800      	cmp	r0, #0
1a0044e6:	d0cb      	beq.n	1a004480 <__swbuf_r+0x28>
1a0044e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0044ec:	e7ea      	b.n	1a0044c4 <__swbuf_r+0x6c>
1a0044ee:	bf00      	nop
1a0044f0:	1a004b50 	.word	0x1a004b50
1a0044f4:	1a004b70 	.word	0x1a004b70
1a0044f8:	1a004b30 	.word	0x1a004b30

1a0044fc <__swsetup_r>:
1a0044fc:	4b32      	ldr	r3, [pc, #200]	; (1a0045c8 <__swsetup_r+0xcc>)
1a0044fe:	b570      	push	{r4, r5, r6, lr}
1a004500:	681d      	ldr	r5, [r3, #0]
1a004502:	4606      	mov	r6, r0
1a004504:	460c      	mov	r4, r1
1a004506:	b125      	cbz	r5, 1a004512 <__swsetup_r+0x16>
1a004508:	69ab      	ldr	r3, [r5, #24]
1a00450a:	b913      	cbnz	r3, 1a004512 <__swsetup_r+0x16>
1a00450c:	4628      	mov	r0, r5
1a00450e:	f7ff fa73 	bl	1a0039f8 <__sinit>
1a004512:	4b2e      	ldr	r3, [pc, #184]	; (1a0045cc <__swsetup_r+0xd0>)
1a004514:	429c      	cmp	r4, r3
1a004516:	d10f      	bne.n	1a004538 <__swsetup_r+0x3c>
1a004518:	686c      	ldr	r4, [r5, #4]
1a00451a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00451e:	b29a      	uxth	r2, r3
1a004520:	0715      	lsls	r5, r2, #28
1a004522:	d42c      	bmi.n	1a00457e <__swsetup_r+0x82>
1a004524:	06d0      	lsls	r0, r2, #27
1a004526:	d411      	bmi.n	1a00454c <__swsetup_r+0x50>
1a004528:	2209      	movs	r2, #9
1a00452a:	6032      	str	r2, [r6, #0]
1a00452c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004530:	81a3      	strh	r3, [r4, #12]
1a004532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004536:	e03e      	b.n	1a0045b6 <__swsetup_r+0xba>
1a004538:	4b25      	ldr	r3, [pc, #148]	; (1a0045d0 <__swsetup_r+0xd4>)
1a00453a:	429c      	cmp	r4, r3
1a00453c:	d101      	bne.n	1a004542 <__swsetup_r+0x46>
1a00453e:	68ac      	ldr	r4, [r5, #8]
1a004540:	e7eb      	b.n	1a00451a <__swsetup_r+0x1e>
1a004542:	4b24      	ldr	r3, [pc, #144]	; (1a0045d4 <__swsetup_r+0xd8>)
1a004544:	429c      	cmp	r4, r3
1a004546:	bf08      	it	eq
1a004548:	68ec      	ldreq	r4, [r5, #12]
1a00454a:	e7e6      	b.n	1a00451a <__swsetup_r+0x1e>
1a00454c:	0751      	lsls	r1, r2, #29
1a00454e:	d512      	bpl.n	1a004576 <__swsetup_r+0x7a>
1a004550:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004552:	b141      	cbz	r1, 1a004566 <__swsetup_r+0x6a>
1a004554:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004558:	4299      	cmp	r1, r3
1a00455a:	d002      	beq.n	1a004562 <__swsetup_r+0x66>
1a00455c:	4630      	mov	r0, r6
1a00455e:	f7ff fb25 	bl	1a003bac <_free_r>
1a004562:	2300      	movs	r3, #0
1a004564:	6363      	str	r3, [r4, #52]	; 0x34
1a004566:	89a3      	ldrh	r3, [r4, #12]
1a004568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a00456c:	81a3      	strh	r3, [r4, #12]
1a00456e:	2300      	movs	r3, #0
1a004570:	6063      	str	r3, [r4, #4]
1a004572:	6923      	ldr	r3, [r4, #16]
1a004574:	6023      	str	r3, [r4, #0]
1a004576:	89a3      	ldrh	r3, [r4, #12]
1a004578:	f043 0308 	orr.w	r3, r3, #8
1a00457c:	81a3      	strh	r3, [r4, #12]
1a00457e:	6923      	ldr	r3, [r4, #16]
1a004580:	b94b      	cbnz	r3, 1a004596 <__swsetup_r+0x9a>
1a004582:	89a3      	ldrh	r3, [r4, #12]
1a004584:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00458c:	d003      	beq.n	1a004596 <__swsetup_r+0x9a>
1a00458e:	4621      	mov	r1, r4
1a004590:	4630      	mov	r0, r6
1a004592:	f000 f845 	bl	1a004620 <__smakebuf_r>
1a004596:	89a2      	ldrh	r2, [r4, #12]
1a004598:	f012 0301 	ands.w	r3, r2, #1
1a00459c:	d00c      	beq.n	1a0045b8 <__swsetup_r+0xbc>
1a00459e:	2300      	movs	r3, #0
1a0045a0:	60a3      	str	r3, [r4, #8]
1a0045a2:	6963      	ldr	r3, [r4, #20]
1a0045a4:	425b      	negs	r3, r3
1a0045a6:	61a3      	str	r3, [r4, #24]
1a0045a8:	6923      	ldr	r3, [r4, #16]
1a0045aa:	b953      	cbnz	r3, 1a0045c2 <__swsetup_r+0xc6>
1a0045ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0045b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0045b4:	d1ba      	bne.n	1a00452c <__swsetup_r+0x30>
1a0045b6:	bd70      	pop	{r4, r5, r6, pc}
1a0045b8:	0792      	lsls	r2, r2, #30
1a0045ba:	bf58      	it	pl
1a0045bc:	6963      	ldrpl	r3, [r4, #20]
1a0045be:	60a3      	str	r3, [r4, #8]
1a0045c0:	e7f2      	b.n	1a0045a8 <__swsetup_r+0xac>
1a0045c2:	2000      	movs	r0, #0
1a0045c4:	e7f7      	b.n	1a0045b6 <__swsetup_r+0xba>
1a0045c6:	bf00      	nop
1a0045c8:	10000040 	.word	0x10000040
1a0045cc:	1a004b50 	.word	0x1a004b50
1a0045d0:	1a004b70 	.word	0x1a004b70
1a0045d4:	1a004b30 	.word	0x1a004b30

1a0045d8 <__swhatbuf_r>:
1a0045d8:	b570      	push	{r4, r5, r6, lr}
1a0045da:	460e      	mov	r6, r1
1a0045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0045e0:	2900      	cmp	r1, #0
1a0045e2:	b096      	sub	sp, #88	; 0x58
1a0045e4:	4614      	mov	r4, r2
1a0045e6:	461d      	mov	r5, r3
1a0045e8:	da07      	bge.n	1a0045fa <__swhatbuf_r+0x22>
1a0045ea:	2300      	movs	r3, #0
1a0045ec:	602b      	str	r3, [r5, #0]
1a0045ee:	89b3      	ldrh	r3, [r6, #12]
1a0045f0:	061a      	lsls	r2, r3, #24
1a0045f2:	d410      	bmi.n	1a004616 <__swhatbuf_r+0x3e>
1a0045f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0045f8:	e00e      	b.n	1a004618 <__swhatbuf_r+0x40>
1a0045fa:	466a      	mov	r2, sp
1a0045fc:	f7fb ffff 	bl	1a0005fe <_fstat_r>
1a004600:	2800      	cmp	r0, #0
1a004602:	dbf2      	blt.n	1a0045ea <__swhatbuf_r+0x12>
1a004604:	9a01      	ldr	r2, [sp, #4]
1a004606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00460a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00460e:	425a      	negs	r2, r3
1a004610:	415a      	adcs	r2, r3
1a004612:	602a      	str	r2, [r5, #0]
1a004614:	e7ee      	b.n	1a0045f4 <__swhatbuf_r+0x1c>
1a004616:	2340      	movs	r3, #64	; 0x40
1a004618:	2000      	movs	r0, #0
1a00461a:	6023      	str	r3, [r4, #0]
1a00461c:	b016      	add	sp, #88	; 0x58
1a00461e:	bd70      	pop	{r4, r5, r6, pc}

1a004620 <__smakebuf_r>:
1a004620:	898b      	ldrh	r3, [r1, #12]
1a004622:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004624:	079d      	lsls	r5, r3, #30
1a004626:	4606      	mov	r6, r0
1a004628:	460c      	mov	r4, r1
1a00462a:	d507      	bpl.n	1a00463c <__smakebuf_r+0x1c>
1a00462c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004630:	6023      	str	r3, [r4, #0]
1a004632:	6123      	str	r3, [r4, #16]
1a004634:	2301      	movs	r3, #1
1a004636:	6163      	str	r3, [r4, #20]
1a004638:	b002      	add	sp, #8
1a00463a:	bd70      	pop	{r4, r5, r6, pc}
1a00463c:	ab01      	add	r3, sp, #4
1a00463e:	466a      	mov	r2, sp
1a004640:	f7ff ffca 	bl	1a0045d8 <__swhatbuf_r>
1a004644:	9900      	ldr	r1, [sp, #0]
1a004646:	4605      	mov	r5, r0
1a004648:	4630      	mov	r0, r6
1a00464a:	f7ff fafd 	bl	1a003c48 <_malloc_r>
1a00464e:	b948      	cbnz	r0, 1a004664 <__smakebuf_r+0x44>
1a004650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004654:	059a      	lsls	r2, r3, #22
1a004656:	d4ef      	bmi.n	1a004638 <__smakebuf_r+0x18>
1a004658:	f023 0303 	bic.w	r3, r3, #3
1a00465c:	f043 0302 	orr.w	r3, r3, #2
1a004660:	81a3      	strh	r3, [r4, #12]
1a004662:	e7e3      	b.n	1a00462c <__smakebuf_r+0xc>
1a004664:	4b0d      	ldr	r3, [pc, #52]	; (1a00469c <__smakebuf_r+0x7c>)
1a004666:	62b3      	str	r3, [r6, #40]	; 0x28
1a004668:	89a3      	ldrh	r3, [r4, #12]
1a00466a:	6020      	str	r0, [r4, #0]
1a00466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004670:	81a3      	strh	r3, [r4, #12]
1a004672:	9b00      	ldr	r3, [sp, #0]
1a004674:	6163      	str	r3, [r4, #20]
1a004676:	9b01      	ldr	r3, [sp, #4]
1a004678:	6120      	str	r0, [r4, #16]
1a00467a:	b15b      	cbz	r3, 1a004694 <__smakebuf_r+0x74>
1a00467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004680:	4630      	mov	r0, r6
1a004682:	f7fb ffc1 	bl	1a000608 <_isatty_r>
1a004686:	b128      	cbz	r0, 1a004694 <__smakebuf_r+0x74>
1a004688:	89a3      	ldrh	r3, [r4, #12]
1a00468a:	f023 0303 	bic.w	r3, r3, #3
1a00468e:	f043 0301 	orr.w	r3, r3, #1
1a004692:	81a3      	strh	r3, [r4, #12]
1a004694:	89a3      	ldrh	r3, [r4, #12]
1a004696:	431d      	orrs	r5, r3
1a004698:	81a5      	strh	r5, [r4, #12]
1a00469a:	e7cd      	b.n	1a004638 <__smakebuf_r+0x18>
1a00469c:	1a003991 	.word	0x1a003991

1a0046a0 <memchr>:
1a0046a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0046a4:	2a10      	cmp	r2, #16
1a0046a6:	db2b      	blt.n	1a004700 <memchr+0x60>
1a0046a8:	f010 0f07 	tst.w	r0, #7
1a0046ac:	d008      	beq.n	1a0046c0 <memchr+0x20>
1a0046ae:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0046b2:	3a01      	subs	r2, #1
1a0046b4:	428b      	cmp	r3, r1
1a0046b6:	d02d      	beq.n	1a004714 <memchr+0x74>
1a0046b8:	f010 0f07 	tst.w	r0, #7
1a0046bc:	b342      	cbz	r2, 1a004710 <memchr+0x70>
1a0046be:	d1f6      	bne.n	1a0046ae <memchr+0xe>
1a0046c0:	b4f0      	push	{r4, r5, r6, r7}
1a0046c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0046c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0046ca:	f022 0407 	bic.w	r4, r2, #7
1a0046ce:	f07f 0700 	mvns.w	r7, #0
1a0046d2:	2300      	movs	r3, #0
1a0046d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0046d8:	3c08      	subs	r4, #8
1a0046da:	ea85 0501 	eor.w	r5, r5, r1
1a0046de:	ea86 0601 	eor.w	r6, r6, r1
1a0046e2:	fa85 f547 	uadd8	r5, r5, r7
1a0046e6:	faa3 f587 	sel	r5, r3, r7
1a0046ea:	fa86 f647 	uadd8	r6, r6, r7
1a0046ee:	faa5 f687 	sel	r6, r5, r7
1a0046f2:	b98e      	cbnz	r6, 1a004718 <memchr+0x78>
1a0046f4:	d1ee      	bne.n	1a0046d4 <memchr+0x34>
1a0046f6:	bcf0      	pop	{r4, r5, r6, r7}
1a0046f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0046fc:	f002 0207 	and.w	r2, r2, #7
1a004700:	b132      	cbz	r2, 1a004710 <memchr+0x70>
1a004702:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004706:	3a01      	subs	r2, #1
1a004708:	ea83 0301 	eor.w	r3, r3, r1
1a00470c:	b113      	cbz	r3, 1a004714 <memchr+0x74>
1a00470e:	d1f8      	bne.n	1a004702 <memchr+0x62>
1a004710:	2000      	movs	r0, #0
1a004712:	4770      	bx	lr
1a004714:	3801      	subs	r0, #1
1a004716:	4770      	bx	lr
1a004718:	2d00      	cmp	r5, #0
1a00471a:	bf06      	itte	eq
1a00471c:	4635      	moveq	r5, r6
1a00471e:	3803      	subeq	r0, #3
1a004720:	3807      	subne	r0, #7
1a004722:	f015 0f01 	tst.w	r5, #1
1a004726:	d107      	bne.n	1a004738 <memchr+0x98>
1a004728:	3001      	adds	r0, #1
1a00472a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00472e:	bf02      	ittt	eq
1a004730:	3001      	addeq	r0, #1
1a004732:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004736:	3001      	addeq	r0, #1
1a004738:	bcf0      	pop	{r4, r5, r6, r7}
1a00473a:	3801      	subs	r0, #1
1a00473c:	4770      	bx	lr
1a00473e:	bf00      	nop

1a004740 <__malloc_lock>:
1a004740:	4801      	ldr	r0, [pc, #4]	; (1a004748 <__malloc_lock+0x8>)
1a004742:	f7ff ba1a 	b.w	1a003b7a <__retarget_lock_acquire_recursive>
1a004746:	bf00      	nop
1a004748:	1000229c 	.word	0x1000229c

1a00474c <__malloc_unlock>:
1a00474c:	4801      	ldr	r0, [pc, #4]	; (1a004754 <__malloc_unlock+0x8>)
1a00474e:	f7ff ba15 	b.w	1a003b7c <__retarget_lock_release_recursive>
1a004752:	bf00      	nop
1a004754:	1000229c 	.word	0x1000229c
1a004758:	72656a45 	.word	0x72656a45
1a00475c:	69636963 	.word	0x69636963
1a004760:	5f43206f 	.word	0x5f43206f
1a004764:	000d2e31 	.word	0x000d2e31
1a004768:	65726174 	.word	0x65726174
1a00476c:	656c5f61 	.word	0x656c5f61
1a004770:	00000064 	.word	0x00000064
1a004774:	65726174 	.word	0x65726174
1a004778:	65745f61 	.word	0x65745f61
1a00477c:	00616c63 	.word	0x00616c63
1a004780:	6f727245 	.word	0x6f727245
1a004784:	6c612072 	.word	0x6c612072
1a004788:	65726320 	.word	0x65726320
1a00478c:	6c207261 	.word	0x6c207261
1a004790:	74207361 	.word	0x74207361
1a004794:	61657261 	.word	0x61657261
1a004798:	000d2e73 	.word	0x000d2e73
1a00479c:	6f727245 	.word	0x6f727245
1a0047a0:	6c612072 	.word	0x6c612072
1a0047a4:	65726320 	.word	0x65726320
1a0047a8:	6c207261 	.word	0x6c207261
1a0047ac:	7320736f 	.word	0x7320736f
1a0047b0:	66616d65 	.word	0x66616d65
1a0047b4:	736f726f 	.word	0x736f726f
1a0047b8:	ff000d2e 	.word	0xff000d2e
1a0047bc:	6c707041 	.word	0x6c707041
1a0047c0:	74616369 	.word	0x74616369
1a0047c4:	206e6f69 	.word	0x206e6f69
1a0047c8:	6c6c614d 	.word	0x6c6c614d
1a0047cc:	4620636f 	.word	0x4620636f
1a0047d0:	656c6961 	.word	0x656c6961
1a0047d4:	6f482064 	.word	0x6f482064
1a0047d8:	0d216b6f 	.word	0x0d216b6f
1a0047dc:	00000000 	.word	0x00000000
1a0047e0:	7362696c 	.word	0x7362696c
1a0047e4:	6572662f 	.word	0x6572662f
1a0047e8:	6f747265 	.word	0x6f747265
1a0047ec:	6f732f73 	.word	0x6f732f73
1a0047f0:	65637275 	.word	0x65637275
1a0047f4:	6f6f682f 	.word	0x6f6f682f
1a0047f8:	632e736b 	.word	0x632e736b
1a0047fc:	ffffff00 	.word	0xffffff00
1a004800:	70410a0d 	.word	0x70410a0d
1a004804:	63696c70 	.word	0x63696c70
1a004808:	6f697461 	.word	0x6f697461
1a00480c:	7453206e 	.word	0x7453206e
1a004810:	206b6361 	.word	0x206b6361
1a004814:	7265764f 	.word	0x7265764f
1a004818:	776f6c66 	.word	0x776f6c66
1a00481c:	6f202121 	.word	0x6f202121
1a004820:	6154206e 	.word	0x6154206e
1a004824:	203a6b73 	.word	0x203a6b73
1a004828:	0a0d7325 	.word	0x0a0d7325
1a00482c:	ffffff00 	.word	0xffffff00
1a004830:	41760a0d 	.word	0x41760a0d
1a004834:	72657373 	.word	0x72657373
1a004838:	6c614374 	.word	0x6c614374
1a00483c:	2864656c 	.word	0x2864656c
1a004840:	200a0d29 	.word	0x200a0d29
1a004844:	4c4c2020 	.word	0x4c4c2020
1a004848:	20656e69 	.word	0x20656e69
1a00484c:	626d754e 	.word	0x626d754e
1a004850:	3d207265 	.word	0x3d207265
1a004854:	0d642520 	.word	0x0d642520
1a004858:	2020200a 	.word	0x2020200a
1a00485c:	656c6946 	.word	0x656c6946
1a004860:	6d614e20 	.word	0x6d614e20
1a004864:	203d2065 	.word	0x203d2065
1a004868:	0a0d7325 	.word	0x0a0d7325
1a00486c:	ff000a0d 	.word	0xff000a0d
1a004870:	454c4449 	.word	0x454c4449
1a004874:	ffffff00 	.word	0xffffff00
1a004878:	51726d54 	.word	0x51726d54
1a00487c:	ffffff00 	.word	0xffffff00
1a004880:	20726d54 	.word	0x20726d54
1a004884:	00637653 	.word	0x00637653

1a004888 <ExtRateIn>:
1a004888:	00000000                                ....

1a00488c <GpioButtons>:
1a00488c:	08000400 09010900                       ........

1a004894 <GpioLeds>:
1a004894:	01050005 0e000205 0c010b01              ............

1a0048a0 <GpioPorts>:
1a0048a0:	03030003 0f050403 05031005 07030603     ................
1a0048b0:	ffff0802                                ....

1a0048b4 <OscRateIn>:
1a0048b4:	00b71b00                                ....

1a0048b8 <InitClkStates>:
1a0048b8:	01010f01                                ....

1a0048bc <pinmuxing>:
1a0048bc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0048cc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0048dc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0048ec:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0048fc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00490c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00491c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00492c:	00570206                                ..W.

1a004930 <UART_BClock>:
1a004930:	01a201c2 01620182                       ......b.

1a004938 <UART_PClock>:
1a004938:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004948:	000000ff                                ....

1a00494c <periph_to_base>:
1a00494c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00495c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00496c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00497c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00498c:	01820013 00120182 01a201a2 01c20011     ................
1a00499c:	001001c2 01e201e2 0202000f 000e0202     ................
1a0049ac:	02220222 0223000d 001c0223              "."...#.#...

1a0049b8 <InitClkStates>:
1a0049b8:	00010100 00010909 0001090a 01010701     ................
1a0049c8:	00010902 00010906 0101090c 0001090d     ................
1a0049d8:	0001090e 0001090f 00010910 00010911     ................
1a0049e8:	00010912 00010913 00011114 00011119     ................
1a0049f8:	0001111a 0001111b                       ........

1a004a00 <lpcUarts>:
1a004a00:	40081000 06020406 00180205 40081000     ...@...........@
1a004a10:	09070509 00180706 40082000 00000000     ......... .@....
1a004a20:	00190000 400c1000 07060107 001a0602     .......@........
1a004a30:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004a40:	02020302 001b0204                       ........

1a004a48 <gpioPinsInit>:
1a004a48:	02000104 00050701 05010d03 04080100     ................
1a004a58:	02020002 02000304 00000403 04070002     ................
1a004a68:	030c0300 09050402 05040103 04030208     ................
1a004a78:	04020305 06040504 0802000c 03000b06     ................
1a004a88:	00090607 07060503 060f0504 03030004     ................
1a004a98:	02000404 00050404 06040502 04060200     ................
1a004aa8:	0c050408 05040a04 0003010e 14010a00     ................
1a004ab8:	010f0000 0d000012 00001101 0010010c     ................
1a004ac8:	07070300 000f0300 01000001 00000000     ................
1a004ad8:	000a0600 08060603 06100504 04030005     ................
1a004ae8:	03000106 04090400 04010d05 010b0000     ................
1a004af8:	0200000f 00000001 00010104 02010800     ................
1a004b08:	01090000 09010006 05040002 04010200     ................
1a004b18:	02020105 02020504 0e00000a 01000b02     ................
1a004b28:	000c020b ffff0c01                       ........

1a004b30 <__sf_fake_stderr>:
	...

1a004b50 <__sf_fake_stdin>:
	...

1a004b70 <__sf_fake_stdout>:
	...

1a004b90 <_global_impure_ptr>:
1a004b90:	10000044 2b302d23 6c680020 6665004c     D...#-0+ .hlL.ef
1a004ba0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004bb0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a004bc0:	64636261 ff006665                       abcdef..
