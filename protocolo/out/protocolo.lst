
projects/protocolo/out/protocolo.elf:     file format elf32-littlearm
projects/protocolo/out/protocolo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0004b1

Program Header:
0x70000001 off    0x00018018 vaddr 0x1a008018 paddr 0x1a008018 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000ea8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00008020 memsz 0x00008020 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a008020 align 2**16
         filesz 0x000009f4 memsz 0x000009f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008014  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009f4  10000000  1a008020  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
  6 .bss          000004b0  100009f8  100009f8  000009f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a008014  1a008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a008018  1a008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 18 .noinit       00000000  10000ea8  10000ea8  000209f4  2**2
                  CONTENTS
 19 .debug_info   0001f3fc  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000476b  00000000  00000000  0003fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009530  00000000  00000000  0004455b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a38  00000000  00000000  0004da8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000b30  00000000  00000000  0004e4c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000057f6  00000000  00000000  0004eff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00010f6c  00000000  00000000  000547e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00029906  00000000  00000000  00065755  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0008f05b  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0008f0c3  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002994  00000000  00000000  0008f0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a008014 l    d  .init_array	00000000 .init_array
1a008018 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000ea8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 i2s.c
1a000330 l     F .text	00000098 App_DMA_Test
100009f8 l     O .bss	00000001 channelTC
00000000 l    df *ABS*	00000000 system.c
100009fc l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a000604 l     F .text	00000044 Board_LED_Init
1a000648 l     F .text	00000040 Board_TEC_Init
1a000688 l     F .text	00000040 Board_GPIO_Init
1a0006c8 l     F .text	00000030 Board_ADC_Init
1a0006f8 l     F .text	00000038 Board_SPI_Init
1a000730 l     F .text	00000024 Board_I2C_Init
1a007a2c l     O .text	00000008 GpioButtons
1a007a34 l     O .text	0000000c GpioLeds
1a007a40 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a007a58 l     O .text	00000004 InitClkStates
1a007a5c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0008a4 l     F .text	0000002c Chip_UART_GetIndex
1a007ad0 l     O .text	00000008 UART_BClock
1a007ad8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000a40 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000a54 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000b1c l     F .text	000000a0 pll_calc_divs
1a000bbc l     F .text	0000010c pll_get_frac
1a000cc8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000f3c l     F .text	00000022 Chip_Clock_GetDivRate
10000a00 l     O .bss	00000008 audio_usb_pll_freq
1a007aec l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007b58 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpdma_18xx_43xx.c
1a001280 l     F .text	00000104 configDMAMux
10000a08 l     O .bss	00000008 ChannelHandlerArray
1a007ba0 l     O .text	00000078 GPDMA_LUTPerAddr
1a007c18 l     O .text	0000001e GPDMA_LUTPerBurst
1a007c38 l     O .text	0000001e GPDMA_LUTPerWid
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001750 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001764 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2s_18xx_43xx.c
1a001804 l     F .text	000000e8 getClkDiv
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a007c58 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000a10 l     O .bss	00000004 callBackFuncParams
10000a18 l     O .bss	00000008 tickCounter
10000a20 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001b24 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000a24 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002ca4 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a0055b4 l     F .text	00000084 __sbprintf
1a007ed4 l     O .text	00000010 blanks.8693
1a007ee4 l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a005708 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a007ff8 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a007660 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000050 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a008018 l       .init_array	00000000 __init_array_end
1a008014 l       .bss_RAM5	00000000 __preinit_array_end
1a008014 l       .init_array	00000000 __init_array_start
1a008014 l       .bss_RAM5	00000000 __preinit_array_start
1a0026ac g     F .text	0000002c .hidden __aeabi_dcmpun
1a000d60 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000550 g     F .text	00000012 _isatty_r
1a002670 g     F .text	00000012 .hidden __aeabi_dcmple
1a003828 g     F .text	0000009c _puts_r
1a0025ac g     F .text	0000007a .hidden __cmpdf2
1a000562 g     F .text	0000000a _lseek_r
1a000130  w    F .text	00000002 DebugMon_Handler
1a001384 g     F .text	000000c8 makeCtrlWord
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0025ac g     F .text	0000007a .hidden __eqdf2
1a0000c0 g       .text	00000000 __section_table_start
1a00211c g     F .text	0000005a .hidden __floatdidf
1a000166  w    F .text	00000002 I2C0_IRQHandler
1a003800 g     F .text	00000028 printf
1a0007ea g     F .text	00000008 __stdio_init
10000e84 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a007938 g     F .text	00000034 _wcrtomb_r
1a003938 g     F .text	00000020 __sseek
1a002d00 g     F .text	00000054 __sinit
1a007888 g     F .text	000000b0 __swbuf_r
1a000126  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000afa g     F .text	0000000c Chip_ADC_SetResolution
1a0037f4 g     F .text	0000000c __malloc_unlock
1a001af8 g     F .text	0000002c SysTick_Handler
1a000924 g     F .text	00000040 Chip_UART_SetBaud
1a000166  w    F .text	00000002 SPIFI_ADCHS_IRQHandler
10000e88 g     O .bss	00000001 __lock___arc4random_mutex
1a0004ac  w    F .text	00000002 initialise_monitor_handles
1a000166  w    F .text	00000002 SDIO_IRQHandler
1a00078c g     F .text	0000001c Board_UARTGetChar
1a006b30 g     F .text	000000ce memmove
1a000132  w    F .text	00000002 PendSV_Handler
1a000124  w    F .text	00000002 NMI_Handler
1a006c00 g     F .text	0000004c _Balloc
1a008020 g       .ARM.exidx	00000000 __exidx_end
1a0000fc g       .text	00000000 __data_section_table_end
1a000166  w    F .text	00000002 UART1_IRQHandler
1a00259c g     F .text	0000008a .hidden __gtdf2
1a00196a g     F .text	00000028 Chip_I2S_DMA_TxCmd
1a000546 g     F .text	0000000a _fstat_r
53ff7582 g       *ABS*	00000000 __valid_user_code_checksum
1a008020 g       .ARM.exidx	00000000 _etext
1a002638 g     F .text	00000010 .hidden __aeabi_cdcmple
1a000166  w    F .text	00000002 USB1_IRQHandler
1a0015f4 g     F .text	0000004c Chip_GPDMA_Interrupt
1a0018f6 g     F .text	00000074 Chip_I2S_TxConfig
1a001510 g     F .text	0000006c Chip_GPDMA_InitChannelCfg
1a000166  w    F .text	00000002 TIMER3_IRQHandler
1a000fde g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000166  w    F .text	00000002 UART0_IRQHandler
1a000154 g     F .text	00000012 bss_init
1a003614 g     F .text	00000134 memcpy
1a002628 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a000166  w    F .text	00000002 SGPIO_IRQHandler
1a002cf4 g     F .text	0000000c _cleanup_r
1a0020a4 g     F .text	00000022 .hidden __floatsidf
1a0025a4 g     F .text	00000082 .hidden __ltdf2
1a002728 g     F .text	00000000 .hidden __aeabi_uldivmod
10000ea8 g       .noinit	00000000 _noinit
1a0038c4 g     F .text	00000010 puts
10000e7c g     O .bss	00000004 SystemCoreClock
1a0008d0 g     F .text	00000054 Chip_UART_Init
1a000166  w    F .text	00000002 ADC0_IRQHandler
1a007f30 g     O .text	000000c8 __mprec_tens
1a00012c  w    F .text	00000002 UsageFault_Handler
1a00105c g     F .text	0000004c Chip_Clock_GetRate
10000a58 g     O .bss	00000004 __malloc_top_pad
1a00082c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002084 g     F .text	0000001e .hidden __aeabi_ui2d
1a00698c g     F .text	00000008 _localeconv_r
1a006d8c g     F .text	00000012 __i2b
1a006684 g     F .text	00000308 __sfvwrite_r
1a002758 g     F .text	000002d0 .hidden __udivmoddi4
1a001e00 g     F .text	00000000 .hidden __aeabi_drsub
1a0005e4 g     F .text	00000020 _sbrk_r
1a007a28 g     O .text	00000004 ExtRateIn
1a000166  w    F .text	00000002 IntDefaultHandler
1a000166  w    F .text	00000002 SSP0_SSP1_IRQHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00056c g     F .text	0000004e _read_r
1a00265c g     F .text	00000012 .hidden __aeabi_dcmplt
1a002a2c g     F .text	000000ce _fclose_r
10000a50 g     O .bss	00000004 __malloc_max_sbrked_mem
1a0020c8 g     F .text	00000042 .hidden __extendsfdf2
1a0023cc g     F .text	000001d0 .hidden __aeabi_ddiv
1a001e0c g     F .text	00000276 .hidden __adddf3
1a008018 g       .ARM.exidx	00000000 __exidx_start
10000e8c g     O .bss	00000001 __lock___env_recursive_mutex
1a002178 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000e90 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a007214 g     F .text	0000036c _realloc_r
1a00304c g     F .text	00000048 __libc_init_array
1a0077ec g     F .text	00000064 _fputwc_r
1a007f08 g     O .text	00000028 __mprec_bigtens
1a002084 g     F .text	0000001e .hidden __floatunsidf
1a000166  w    F .text	00000002 ADC1_IRQHandler
1a007024 g     F .text	00000038 __mcmp
1a000166  w    F .text	00000002 RIT_WDT_IRQHandler
1a000166  w    F .text	00000002 FLASH_EEPROM_ATIMER_IRQHandler
1a0007a8 g     F .text	00000030 Board_Init
1a00053a  w    F .text	00000002 _init
1a0000c0 g       .text	00000000 __data_section_table
1a000166  w    F .text	00000002 RTC_IRQHandler
10000ea8 g       .bss	00000000 _ebss
1a000166  w    F .text	00000002 TIMER0_IRQHandler
1a0004b0 g     F .text	00000088 Reset_Handler
1a001a7c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a006cec g     F .text	00000040 __hi0bits
1a001248 g     F .text	00000038 Chip_I2C_SetClockRate
1a0026d8 g     F .text	0000004e .hidden __fixdfsi
1a000166  w    F .text	00000002 LCD_IRQHandler
1a000d14 g     F .text	0000004c Chip_Clock_EnableCrystal
10000e94 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a000166  w    F .text	00000002 M4_IRQHandler
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001e0c g     F .text	00000276 .hidden __aeabi_dadd
1a000136 g     F .text	0000001e data_init
1a0025a4 g     F .text	00000082 .hidden __ledf2
1a006ed0 g     F .text	000000a0 __pow5mult
1a00210c g     F .text	0000006a .hidden __aeabi_ul2d
1a0018ec g     F .text	0000000a Chip_I2S_Init
1a001224 g     F .text	00000024 Chip_I2C_Init
1a0030a0 g     F .text	00000002 __retarget_lock_release_recursive
1a000ed0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a007ca0 g     O .text	000000e6 gpioPinsInit
1a00177c g     F .text	00000012 Chip_SSP_SetClockRate
1a002698 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a002d54 g     F .text	0000000c __sfp_lock_acquire
1a006a90 g     F .text	00000000 memchr
1a002e0c g     F .text	000001ec _free_r
1a000fb8 g     F .text	00000026 Chip_Clock_GetBaseClock
1a007850 g     F .text	0000000c __locale_mb_cur_max
1a002684 g     F .text	00000012 .hidden __aeabi_dcmpge
100009f8 g       .bss	00000000 _bss
1a000ac8 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001e08 g     F .text	0000027a .hidden __aeabi_dsub
10000880 g     O .data	00000004 __malloc_sbrk_base
1a00210c g     F .text	0000006a .hidden __floatundidf
1a006f70 g     F .text	000000b2 __lshift
1a00178e g     F .text	0000003e Chip_SSP_SetBitRate
1a00041c g     F .text	0000001c I2S0_I2S1_QEI_IRQHandler
10000a5c g     O .bss	00000400 buffer
1a001200 g     F .text	00000002 Chip_GPIO_Init
1a007a54 g     O .text	00000004 OscRateIn
1a0019e8 g     F .text	0000007c uartInit
1a006da0 g     F .text	00000130 __multiply
1a0014cc g     F .text	00000044 Chip_GPDMA_Init
10000ea8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0075ec g     F .text	00000072 strncpy
10000a28 g     O .bss	00000028 __malloc_current_mallinfo
1a0016b0 g     F .text	000000a0 Chip_GPDMA_Transfer
1a007154 g     F .text	000000be __d2b
1a00144c g     F .text	0000007e setupChannel
1a000124 g       .text	00000000 __bss_section_table_end
1a00053c g     F .text	0000000a _close_r
1a0020a4 g     F .text	00000022 .hidden __aeabi_i2d
1a00157c g     F .text	00000062 Chip_GPDMA_IntGetStatus
1a001b58 g     F .text	000001ac gpioInit
1a003098 g     F .text	00000002 __retarget_lock_close_recursive
1a005638 g     F .text	000000d0 __swsetup_r
1a002a28  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0023cc g     F .text	000001d0 .hidden __divdf3
10000478 g     O .data	00000408 __malloc_av_
1a002178 g     F .text	00000254 .hidden __muldf3
1a0038d4 g     F .text	00000022 __sread
1a001d70 g     F .text	0000001c USB0_IRQHandler
1a0037e8 g     F .text	0000000c __malloc_lock
1a001668 g     F .text	00000048 Chip_GPDMA_Stop
1a000778 g     F .text	00000014 Board_UARTPutChar
1a000166  w    F .text	00000002 SCT_IRQHandler
1a002c48 g     F .text	0000005a _fflush_r
1a0076ec g     F .text	0000005e _calloc_r
1a000d7c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00309c g     F .text	00000002 __retarget_lock_acquire_recursive
1a003748 g     F .text	000000a0 memset
1a000128  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000030 main
10000a54 g     O .bss	00000004 __malloc_max_total_mem
1a003094 g     F .text	00000002 __retarget_lock_init_recursive
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00012e  w    F .text	00000002 SVC_Handler
1a003958 g     F .text	00000008 __sclose
1a005830 g     F .text	00000e54 _dtoa_r
1a0030a4 g     F .text	00000570 _malloc_r
1a00796c g     F .text	0000001a __ascii_wctomb
1a00211c g     F .text	0000005a .hidden __aeabi_l2d
1a000fec g     F .text	0000003c Chip_Clock_EnableOpts
1a0007e2 g     F .text	00000008 __stdio_getchar
1a002d6c g     F .text	000000a0 _malloc_trim_r
1a000d98 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000e50 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001994 g     F .text	00000038 SystemInit
1a0000fc g       .text	00000000 __bss_section_table
1a0025ac g     F .text	0000007a .hidden __nedf2
1a001d04 g     F .text	0000006a gpioWrite
1a000538  w    F .text	00000002 _fini
1a000a88 g     F .text	00000040 Chip_ADC_Init
10000e80 g     O .bss	00000004 g_pUsbApi
1a0007f4 g     F .text	00000038 Board_SetupMuxing
1a000964 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0005ba g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a000166  w    F .text	00000002 SPI_DAC_IRQHandler
1a000166  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
1a002afc g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
10000e5c g     O .bss	00000020 buf
1a000166  w    F .text	00000002 CAN0_IRQHandler
1a00785c g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10000ea8 g       .bss	00000000 _pvHeapStart
1a000166  w    F .text	00000002 UART2_CAN1_IRQHandler
1a000124 g       .text	00000000 __section_table_end
1a0017cc g     F .text	00000038 Chip_SSP_Init
1a000438 g     F .text	00000074 init_i2s
1a006994 g     F .text	0000005c __swhatbuf_r
1a000754 g     F .text	00000024 Board_Debug_Init
1a002648 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a0007d8 g     F .text	0000000a __stdio_putchar
100009f4 g       .data	00000000 _edata
1a001204 g     F .text	00000020 Chip_I2C_EventHandler
1a000166  w    F .text	00000002 M0SUB_IRQHandler
1a00774c g     F .text	0000009e __fputwc
10000e98 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0010a8 g     F .text	00000158 Chip_SetupCoreClock
1a0038f8 g     F .text	0000003e __swrite
10000884 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a002ff8 g     F .text	00000052 _fwalk_reent
1a000b08 g     F .text	00000014 SystemCoreClockUpdate
1a00705c g     F .text	000000f8 __mdiff
1a0026d8 g     F .text	0000004e .hidden __aeabi_d2iz
1a0003c8 g     F .text	00000054 DMA_IRQHandler
1a0015de g     F .text	00000016 Chip_GPDMA_ClearIntPending
1a000166  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002d60 g     F .text	0000000c __sfp_lock_release
1a007d88 g     O .text	00000101 _ctype_
1a002a28  w    F .text	00000002 .hidden __aeabi_idiv0
1a0026ac g     F .text	0000002c .hidden __unorddf2
1a00012a  w    F .text	00000002 BusFault_Handler
10000e9c g     O .bss	00000001 __lock___dd_hash_mutex
1a0069f0 g     F .text	00000094 __smakebuf_r
10000ea0 g     O .bss	00000001 __lock___tz_mutex
1a003980 g     F .text	000000dc strlen
1a001028 g     F .text	00000034 Chip_Clock_Enable
1a002638 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a00259c g     F .text	0000008a .hidden __gedf2
1a001640 g     F .text	00000028 Chip_GPDMA_ChannelCmd
1a000166  w    F .text	00000002 UART3_IRQHandler
1a000166  w    F .text	00000002 MCPWM_IRQHandler
1a0076d8 g     F .text	00000014 __sprint_r
1a0020c8 g     F .text	00000042 .hidden __aeabi_f2d
1a001d8c g     F .text	00000074 boardInit
1a000040 g     O .text	00000080 g_pfnVendorVectors
1a001e08 g     F .text	0000027a .hidden __subdf3
1a003a60 g     F .text	00001b54 _vfprintf_r
1a000166  w    F .text	00000002 GINT1_IRQHandler
1a006d2c g     F .text	00000060 __lo0bits
1a001a64 g     F .text	00000018 tickPowerSet
1a007580 g     F .text	0000006c frexp
10000888 g     O .data	0000016c __global_locale
1a000f60 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0019cc g     F .text	0000001c cyclesCounterInit
1a000166  w    F .text	00000002 GPIO4_IRQHandler
10000ea4 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a000898 g     F .text	0000000c Board_SystemInit
1a006c60 g     F .text	0000008a __multadd
1a006c4c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b1 04 00 1a 25 01 00 1a 27 01 00 1a     ........%...'...
1a000010:	29 01 00 1a 2b 01 00 1a 2d 01 00 1a 82 75 ff 53     )...+...-....u.S
	...
1a00002c:	2f 01 00 1a 31 01 00 1a 00 00 00 00 33 01 00 1a     /...1.......3...
1a00003c:	f9 1a 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	67 01 00 1a 67 01 00 1a c9 03 00 1a 00 00 00 00     g...g...........
1a000050:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000060:	71 1d 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     q...g...g...g...
1a000070:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000080:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000090:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000a0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000b0:	1d 04 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     ....g...g...g...

1a0000c0 <__data_section_table>:
1a0000c0:	1a008020 	.word	0x1a008020
1a0000c4:	10000000 	.word	0x10000000
1a0000c8:	000009f4 	.word	0x000009f4
1a0000cc:	1a008020 	.word	0x1a008020
1a0000d0:	10080000 	.word	0x10080000
1a0000d4:	00000000 	.word	0x00000000
1a0000d8:	1a008020 	.word	0x1a008020
1a0000dc:	20000000 	.word	0x20000000
1a0000e0:	00000000 	.word	0x00000000
1a0000e4:	1a008020 	.word	0x1a008020
1a0000e8:	20008000 	.word	0x20008000
1a0000ec:	00000000 	.word	0x00000000
1a0000f0:	1a008020 	.word	0x1a008020
1a0000f4:	2000c000 	.word	0x2000c000
1a0000f8:	00000000 	.word	0x00000000

1a0000fc <__bss_section_table>:
1a0000fc:	100009f8 	.word	0x100009f8
1a000100:	000004b0 	.word	0x000004b0
1a000104:	10080000 	.word	0x10080000
1a000108:	00000000 	.word	0x00000000
1a00010c:	20000000 	.word	0x20000000
1a000110:	00000000 	.word	0x00000000
1a000114:	20008000 	.word	0x20008000
1a000118:	00000000 	.word	0x00000000
1a00011c:	2000c000 	.word	0x2000c000
1a000120:	00000000 	.word	0x00000000

1a000124 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000124:	e7fe      	b.n	1a000124 <NMI_Handler>

1a000126 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000126:	e7fe      	b.n	1a000126 <HardFault_Handler>

1a000128 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000128:	e7fe      	b.n	1a000128 <MemManage_Handler>

1a00012a <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00012a:	e7fe      	b.n	1a00012a <BusFault_Handler>

1a00012c <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a00012c:	e7fe      	b.n	1a00012c <UsageFault_Handler>

1a00012e <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00012e:	e7fe      	b.n	1a00012e <SVC_Handler>

1a000130 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000130:	e7fe      	b.n	1a000130 <DebugMon_Handler>

1a000132 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000132:	e7fe      	b.n	1a000132 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000134:	e7fe      	b.n	1a000134 <PendSV_Handler+0x2>

1a000136 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000136:	2300      	movs	r3, #0
1a000138:	4293      	cmp	r3, r2
1a00013a:	d20a      	bcs.n	1a000152 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00013c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00013e:	f850 4b04 	ldr.w	r4, [r0], #4
1a000142:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000146:	3304      	adds	r3, #4
1a000148:	4293      	cmp	r3, r2
1a00014a:	d3f8      	bcc.n	1a00013e <data_init+0x8>
}
1a00014c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000150:	4770      	bx	lr
1a000152:	4770      	bx	lr

1a000154 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000154:	2300      	movs	r3, #0
1a000156:	428b      	cmp	r3, r1
1a000158:	d204      	bcs.n	1a000164 <bss_init+0x10>
        *pulDest++ = 0;
1a00015a:	2200      	movs	r2, #0
1a00015c:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000160:	3304      	adds	r3, #4
1a000162:	e7f8      	b.n	1a000156 <bss_init+0x2>
}
1a000164:	4770      	bx	lr

1a000166 <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000166:	e7fe      	b.n	1a000166 <ADC0_IRQHandler>
1a000168:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00016c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00017c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00018c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00019c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
#include "wave.h"
#include "i2s.h"
//chip.h
#include "scu_18xx_43xx.h"
int main( void )
{
1a000300:	b508      	push	{r3, lr}
    // Inicializar y configurar la plataforma
    boardConfig();
1a000302:	f001 fd43 	bl	1a001d8c <boardInit>
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000306:	4b09      	ldr	r3, [pc, #36]	; (1a00032c <main+0x2c>)
1a000308:	2297      	movs	r2, #151	; 0x97
1a00030a:	601a      	str	r2, [r3, #0]
1a00030c:	605a      	str	r2, [r3, #4]
1a00030e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        19,
		SCU_MODE_INACT | SCU_MODE_ZIF_DIS,
        FUNC7
    );
    // Inicializar UART_USB a 115200 baudios
    uartConfig( UART_USB, 115200 );
1a000312:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000316:	2003      	movs	r0, #3
1a000318:	f001 fb66 	bl	1a0019e8 <uartInit>

  //  init_parse();
  //  parse_header();
    gpioWrite( LED3, ON );
1a00031c:	2101      	movs	r1, #1
1a00031e:	202d      	movs	r0, #45	; 0x2d
1a000320:	f001 fcf0 	bl	1a001d04 <gpioWrite>
    init_i2s();
1a000324:	f000 f888 	bl	1a000438 <init_i2s>


    while( 1 );
1a000328:	e7fe      	b.n	1a000328 <main+0x28>
1a00032a:	bf00      	nop
1a00032c:	40086000 	.word	0x40086000

1a000330 <App_DMA_Test>:



/* DMA routine for I2S example */
static void App_DMA_Test(void)
{
1a000330:	b510      	push	{r4, lr}
1a000332:	b082      	sub	sp, #8
	uint8_t status;


	Chip_I2S_DMA_TxCmd(SOUND_I2S_PORT, I2S_DMA_REQUEST_CHANNEL_1, ENABLE, 4);
1a000334:	2304      	movs	r3, #4
1a000336:	2201      	movs	r2, #1
1a000338:	2100      	movs	r1, #0
1a00033a:	481d      	ldr	r0, [pc, #116]	; (1a0003b0 <App_DMA_Test+0x80>)
1a00033c:	f001 fb15 	bl	1a00196a <Chip_I2S_DMA_TxCmd>
	/* Initialize GPDMA controller */
	Chip_GPDMA_Init(LPC_GPDMA);
1a000340:	4c1c      	ldr	r4, [pc, #112]	; (1a0003b4 <App_DMA_Test+0x84>)
1a000342:	4620      	mov	r0, r4
1a000344:	f001 f8c2 	bl	1a0014cc <Chip_GPDMA_Init>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000348:	4b1b      	ldr	r3, [pc, #108]	; (1a0003b8 <App_DMA_Test+0x88>)
1a00034a:	2204      	movs	r2, #4
1a00034c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a000350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a000354:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000358:	2160      	movs	r1, #96	; 0x60
1a00035a:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00035e:	601a      	str	r2, [r3, #0]
	/* Get the free channel for DMA transfer */
	//dmaChannelNum = Chip_GPDMA_GetFreeChannel(LPC_GPDMA, GPDMA_CONN_I2S1_Tx_Channel_0);//I2S1

	NVIC_EnableIRQ(DMA_IRQn);

	memset(buf,16777215,BUF_SIZE);
1a000360:	4a16      	ldr	r2, [pc, #88]	; (1a0003bc <App_DMA_Test+0x8c>)
1a000362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000366:	6013      	str	r3, [r2, #0]
1a000368:	6053      	str	r3, [r2, #4]

	channelTC=0;
1a00036a:	4b15      	ldr	r3, [pc, #84]	; (1a0003c0 <App_DMA_Test+0x90>)
1a00036c:	2100      	movs	r1, #0
1a00036e:	7019      	strb	r1, [r3, #0]


	status=Chip_GPDMA_Transfer(LPC_GPDMA, CHANEL,
1a000370:	2302      	movs	r3, #2
1a000372:	9301      	str	r3, [sp, #4]
1a000374:	2305      	movs	r3, #5
1a000376:	9300      	str	r3, [sp, #0]
1a000378:	231c      	movs	r3, #28
1a00037a:	2107      	movs	r1, #7
1a00037c:	4620      	mov	r0, r4
1a00037e:	f001 f997 	bl	1a0016b0 <Chip_GPDMA_Transfer>
				   (uint32_t) &buf[0],
					GPDMA_CONN_I2S1_Tx_Channel_0,
					GPDMA_TRANSFERTYPE_M2P_CONTROLLER_PERIPHERAL,
					GPDMA_WIDTH_WORD);
	printf("App_DMA_Test status: %d\n",status);
1a000382:	4601      	mov	r1, r0
1a000384:	480f      	ldr	r0, [pc, #60]	; (1a0003c4 <App_DMA_Test+0x94>)
1a000386:	f003 fa3b 	bl	1a003800 <printf>
	while(channelTC==0){}
1a00038a:	4b0d      	ldr	r3, [pc, #52]	; (1a0003c0 <App_DMA_Test+0x90>)
1a00038c:	781b      	ldrb	r3, [r3, #0]
1a00038e:	2b00      	cmp	r3, #0
1a000390:	d0fb      	beq.n	1a00038a <App_DMA_Test+0x5a>

	/* Disable interrupts, release DMA channel */
	Chip_GPDMA_Stop(LPC_GPDMA, dmaChannelNum);
1a000392:	2100      	movs	r1, #0
1a000394:	4807      	ldr	r0, [pc, #28]	; (1a0003b4 <App_DMA_Test+0x84>)
1a000396:	f001 f967 	bl	1a001668 <Chip_GPDMA_Stop>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00039a:	4b07      	ldr	r3, [pc, #28]	; (1a0003b8 <App_DMA_Test+0x88>)
1a00039c:	2204      	movs	r2, #4
1a00039e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
1a0003a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0003a6:	f3bf 8f6f 	isb	sy

	NVIC_DisableIRQ(DMA_IRQn);

}
1a0003aa:	b002      	add	sp, #8
1a0003ac:	bd10      	pop	{r4, pc}
1a0003ae:	bf00      	nop
1a0003b0:	400a3000 	.word	0x400a3000
1a0003b4:	40002000 	.word	0x40002000
1a0003b8:	e000e100 	.word	0xe000e100
1a0003bc:	10000e5c 	.word	0x10000e5c
1a0003c0:	100009f8 	.word	0x100009f8
1a0003c4:	1a007988 	.word	0x1a007988

1a0003c8 <DMA_IRQHandler>:
{
1a0003c8:	b508      	push	{r3, lr}
1a0003ca:	4b0e      	ldr	r3, [pc, #56]	; (1a000404 <DMA_IRQHandler+0x3c>)
1a0003cc:	2204      	movs	r2, #4
1a0003ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
1a0003d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0003d6:	f3bf 8f6f 	isb	sy
		printf("entro a DMA_IRQHandler\n");
1a0003da:	480b      	ldr	r0, [pc, #44]	; (1a000408 <DMA_IRQHandler+0x40>)
1a0003dc:	f003 fa72 	bl	1a0038c4 <puts>
		if (Chip_GPDMA_Interrupt(LPC_GPDMA, CHANEL) == SUCCESS) {
1a0003e0:	2107      	movs	r1, #7
1a0003e2:	480a      	ldr	r0, [pc, #40]	; (1a00040c <DMA_IRQHandler+0x44>)
1a0003e4:	f001 f906 	bl	1a0015f4 <Chip_GPDMA_Interrupt>
1a0003e8:	2801      	cmp	r0, #1
1a0003ea:	d003      	beq.n	1a0003f4 <DMA_IRQHandler+0x2c>
			printf("DMA_IRQHandler Error\n");
1a0003ec:	4808      	ldr	r0, [pc, #32]	; (1a000410 <DMA_IRQHandler+0x48>)
1a0003ee:	f003 fa69 	bl	1a0038c4 <puts>
}
1a0003f2:	bd08      	pop	{r3, pc}
			channelTC++;
1a0003f4:	4a07      	ldr	r2, [pc, #28]	; (1a000414 <DMA_IRQHandler+0x4c>)
1a0003f6:	7813      	ldrb	r3, [r2, #0]
1a0003f8:	3301      	adds	r3, #1
1a0003fa:	7013      	strb	r3, [r2, #0]
			printf("DMA_IRQHandler Success \n");
1a0003fc:	4806      	ldr	r0, [pc, #24]	; (1a000418 <DMA_IRQHandler+0x50>)
1a0003fe:	f003 fa61 	bl	1a0038c4 <puts>
1a000402:	e7f6      	b.n	1a0003f2 <DMA_IRQHandler+0x2a>
1a000404:	e000e100 	.word	0xe000e100
1a000408:	1a0079a4 	.word	0x1a0079a4
1a00040c:	40002000 	.word	0x40002000
1a000410:	1a0079d4 	.word	0x1a0079d4
1a000414:	100009f8 	.word	0x100009f8
1a000418:	1a0079bc 	.word	0x1a0079bc

1a00041c <I2S0_I2S1_QEI_IRQHandler>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00041c:	4b04      	ldr	r3, [pc, #16]	; (1a000430 <I2S0_I2S1_QEI_IRQHandler+0x14>)
1a00041e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000422:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	channelTC++;
1a000426:	4a03      	ldr	r2, [pc, #12]	; (1a000434 <I2S0_I2S1_QEI_IRQHandler+0x18>)
1a000428:	7813      	ldrb	r3, [r2, #0]
1a00042a:	3301      	adds	r3, #1
1a00042c:	7013      	strb	r3, [r2, #0]
}
1a00042e:	4770      	bx	lr
1a000430:	e000e100 	.word	0xe000e100
1a000434:	100009f8 	.word	0x100009f8

1a000438 <init_i2s>:
/**
 * @brief  Main routine for I2S example
 * @return Nothing
 */
int init_i2s(void)
{
1a000438:	b510      	push	{r4, lr}
1a00043a:	b082      	sub	sp, #8
	int status=0;
	I2S_AUDIO_FORMAT_T audio_Confg;

	audio_Confg.SampleRate = SOUND_MIXER_SAMPLE_RATE;
1a00043c:	f64a 4344 	movw	r3, #44100	; 0xac44
1a000440:	9300      	str	r3, [sp, #0]
	/* Select audio data is 2 channels (1 is mono, 2 is stereo) */
	audio_Confg.ChannelNumber = SOUND_MIXER_CHANNELS;
1a000442:	2302      	movs	r3, #2
1a000444:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Select audio data is 16 bits */
	audio_Confg.WordWidth = SOUND_MIXER_BITS;
1a000448:	2310      	movs	r3, #16
1a00044a:	f88d 3005 	strb.w	r3, [sp, #5]


	printf("Init I2S\r\n");
1a00044e:	4814      	ldr	r0, [pc, #80]	; (1a0004a0 <init_i2s+0x68>)
1a000450:	f003 fa38 	bl	1a0038c4 <puts>
	Chip_I2S_Init(SOUND_I2S_PORT);
1a000454:	4c13      	ldr	r4, [pc, #76]	; (1a0004a4 <init_i2s+0x6c>)
1a000456:	4620      	mov	r0, r4
1a000458:	f001 fa48 	bl	1a0018ec <Chip_I2S_Init>

	status=Chip_I2S_TxConfig(SOUND_I2S_PORT, &audio_Confg);
1a00045c:	4669      	mov	r1, sp
1a00045e:	4620      	mov	r0, r4
1a000460:	f001 fa49 	bl	1a0018f6 <Chip_I2S_TxConfig>
	if(status==SUCCESS){
1a000464:	2801      	cmp	r0, #1
1a000466:	d006      	beq.n	1a000476 <init_i2s+0x3e>
		Chip_I2S_TxStart(SOUND_I2S_PORT);
		//App_Polling_Test();
		App_DMA_Test();
		//App_Interrupt_Test();
	}else{
		printf("Error init_i2s: Chip_I2S_TxConfig status %d\n",status);
1a000468:	4601      	mov	r1, r0
1a00046a:	480f      	ldr	r0, [pc, #60]	; (1a0004a8 <init_i2s+0x70>)
1a00046c:	f003 f9c8 	bl	1a003800 <printf>
	}

	return 0;
}
1a000470:	2000      	movs	r0, #0
1a000472:	b002      	add	sp, #8
1a000474:	bd10      	pop	{r4, pc}
 * @return	Nothing
 * @note	Pause, resets the transmit channel and FIFO asynchronously
 */
STATIC INLINE void Chip_I2S_TxStop(LPC_I2S_T *pI2S)
{
	pI2S->DAO &= ~I2S_DAO_MUTE;
1a000476:	6822      	ldr	r2, [r4, #0]
1a000478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
1a00047c:	6022      	str	r2, [r4, #0]
	pI2S->DAO |= I2S_DAO_STOP | I2S_DAO_RESET;
1a00047e:	6822      	ldr	r2, [r4, #0]
1a000480:	f042 0218 	orr.w	r2, r2, #24
1a000484:	6022      	str	r2, [r4, #0]
	pI2S->DAO &= ~I2S_DAO_MUTE;
1a000486:	6822      	ldr	r2, [r4, #0]
1a000488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
1a00048c:	6022      	str	r2, [r4, #0]
	pI2S->DAO &= ~(I2S_DAO_RESET | I2S_DAO_STOP | I2S_DAO_MUTE);
1a00048e:	6822      	ldr	r2, [r4, #0]
1a000490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
1a000494:	f022 0218 	bic.w	r2, r2, #24
1a000498:	6022      	str	r2, [r4, #0]
		App_DMA_Test();
1a00049a:	f7ff ff49 	bl	1a000330 <App_DMA_Test>
1a00049e:	e7e7      	b.n	1a000470 <init_i2s+0x38>
1a0004a0:	1a0079ec 	.word	0x1a0079ec
1a0004a4:	400a3000 	.word	0x400a3000
1a0004a8:	1a0079f8 	.word	0x1a0079f8

1a0004ac <initialise_monitor_handles>:
}
1a0004ac:	4770      	bx	lr
1a0004ae:	Address 0x000000001a0004ae is out of bounds.


1a0004b0 <Reset_Handler>:
void Reset_Handler(void) {
1a0004b0:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0004b2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0004b4:	4b19      	ldr	r3, [pc, #100]	; (1a00051c <Reset_Handler+0x6c>)
1a0004b6:	4a1a      	ldr	r2, [pc, #104]	; (1a000520 <Reset_Handler+0x70>)
1a0004b8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0004ba:	3304      	adds	r3, #4
1a0004bc:	4a19      	ldr	r2, [pc, #100]	; (1a000524 <Reset_Handler+0x74>)
1a0004be:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0004c0:	2300      	movs	r3, #0
1a0004c2:	e005      	b.n	1a0004d0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0004c4:	4a18      	ldr	r2, [pc, #96]	; (1a000528 <Reset_Handler+0x78>)
1a0004c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0004ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0004ce:	3301      	adds	r3, #1
1a0004d0:	2b07      	cmp	r3, #7
1a0004d2:	d9f7      	bls.n	1a0004c4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0004d4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0004d6:	4b15      	ldr	r3, [pc, #84]	; (1a00052c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0004d8:	e007      	b.n	1a0004ea <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0004da:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0004de:	689a      	ldr	r2, [r3, #8]
1a0004e0:	6859      	ldr	r1, [r3, #4]
1a0004e2:	6818      	ldr	r0, [r3, #0]
1a0004e4:	f7ff fe27 	bl	1a000136 <data_init>
        SectionLen = *SectionTableAddr++;
1a0004e8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0004ea:	4a11      	ldr	r2, [pc, #68]	; (1a000530 <Reset_Handler+0x80>)
1a0004ec:	4293      	cmp	r3, r2
1a0004ee:	d3f4      	bcc.n	1a0004da <Reset_Handler+0x2a>
1a0004f0:	e006      	b.n	1a000500 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0004f2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0004f4:	6859      	ldr	r1, [r3, #4]
1a0004f6:	f854 0b08 	ldr.w	r0, [r4], #8
1a0004fa:	f7ff fe2b 	bl	1a000154 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0004fe:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000500:	4a0c      	ldr	r2, [pc, #48]	; (1a000534 <Reset_Handler+0x84>)
1a000502:	4293      	cmp	r3, r2
1a000504:	d3f5      	bcc.n	1a0004f2 <Reset_Handler+0x42>
    SystemInit();
1a000506:	f001 fa45 	bl	1a001994 <SystemInit>
    __libc_init_array();
1a00050a:	f002 fd9f 	bl	1a00304c <__libc_init_array>
    initialise_monitor_handles();
1a00050e:	f7ff ffcd 	bl	1a0004ac <initialise_monitor_handles>
    main();
1a000512:	f7ff fef5 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a000516:	bf30      	wfi
1a000518:	e7fd      	b.n	1a000516 <Reset_Handler+0x66>
1a00051a:	bf00      	nop
1a00051c:	40053100 	.word	0x40053100
1a000520:	10df1000 	.word	0x10df1000
1a000524:	01dff7ff 	.word	0x01dff7ff
1a000528:	e000e280 	.word	0xe000e280
1a00052c:	1a0000c0 	.word	0x1a0000c0
1a000530:	1a0000fc 	.word	0x1a0000fc
1a000534:	1a000124 	.word	0x1a000124

1a000538 <_fini>:
void _fini(void) {}
1a000538:	4770      	bx	lr

1a00053a <_init>:
void _init(void) {}
1a00053a:	4770      	bx	lr

1a00053c <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00053c:	2309      	movs	r3, #9
1a00053e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000544:	4770      	bx	lr

1a000546 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000546:	2358      	movs	r3, #88	; 0x58
1a000548:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00054a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00054e:	4770      	bx	lr

1a000550 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000550:	2902      	cmp	r1, #2
1a000552:	d904      	bls.n	1a00055e <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000554:	2309      	movs	r3, #9
1a000556:	6003      	str	r3, [r0, #0]
       return -1;
1a000558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00055c:	4770      	bx	lr
       return 1;
1a00055e:	2001      	movs	r0, #1
   }
}
1a000560:	4770      	bx	lr

1a000562 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000562:	2358      	movs	r3, #88	; 0x58
1a000564:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00056a:	4770      	bx	lr

1a00056c <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00056c:	2902      	cmp	r1, #2
1a00056e:	d81f      	bhi.n	1a0005b0 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000574:	461d      	mov	r5, r3
1a000576:	4617      	mov	r7, r2
1a000578:	4606      	mov	r6, r0
  size_t i = 0;
1a00057a:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00057c:	42ac      	cmp	r4, r5
1a00057e:	d211      	bcs.n	1a0005a4 <_read_r+0x38>
         int c = __stdio_getchar();
1a000580:	f000 f92f 	bl	1a0007e2 <__stdio_getchar>
         if( c != -1 ){
1a000584:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000588:	d0f8      	beq.n	1a00057c <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00058a:	f104 0801 	add.w	r8, r4, #1
1a00058e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000590:	280d      	cmp	r0, #13
1a000592:	d003      	beq.n	1a00059c <_read_r+0x30>
1a000594:	280a      	cmp	r0, #10
1a000596:	d001      	beq.n	1a00059c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000598:	4644      	mov	r4, r8
1a00059a:	e7ef      	b.n	1a00057c <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a00059c:	f000 f921 	bl	1a0007e2 <__stdio_getchar>
               return i;
1a0005a0:	4640      	mov	r0, r8
1a0005a2:	e003      	b.n	1a0005ac <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0005a4:	2313      	movs	r3, #19
1a0005a6:	6033      	str	r3, [r6, #0]
      return -1;
1a0005a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0005ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0005b0:	2313      	movs	r3, #19
1a0005b2:	6003      	str	r3, [r0, #0]
      return -1;
1a0005b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0005b8:	4770      	bx	lr

1a0005ba <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0005ba:	2902      	cmp	r1, #2
1a0005bc:	d80c      	bhi.n	1a0005d8 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0005be:	b570      	push	{r4, r5, r6, lr}
1a0005c0:	461d      	mov	r5, r3
1a0005c2:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0005c4:	2400      	movs	r4, #0
1a0005c6:	42ac      	cmp	r4, r5
1a0005c8:	d204      	bcs.n	1a0005d4 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a0005ca:	5d30      	ldrb	r0, [r6, r4]
1a0005cc:	f000 f904 	bl	1a0007d8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0005d0:	3401      	adds	r4, #1
1a0005d2:	e7f8      	b.n	1a0005c6 <_write_r+0xc>
       return n;
1a0005d4:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0005d6:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0005d8:	2313      	movs	r3, #19
1a0005da:	6003      	str	r3, [r0, #0]
       return -1;
1a0005dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0005e0:	4770      	bx	lr
1a0005e2:	Address 0x000000001a0005e2 is out of bounds.


1a0005e4 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0005e4:	4b05      	ldr	r3, [pc, #20]	; (1a0005fc <_sbrk_r+0x18>)
1a0005e6:	681b      	ldr	r3, [r3, #0]
1a0005e8:	b123      	cbz	r3, 1a0005f4 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0005ea:	4b04      	ldr	r3, [pc, #16]	; (1a0005fc <_sbrk_r+0x18>)
1a0005ec:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0005ee:	4401      	add	r1, r0
1a0005f0:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0005f2:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0005f4:	4b01      	ldr	r3, [pc, #4]	; (1a0005fc <_sbrk_r+0x18>)
1a0005f6:	4a02      	ldr	r2, [pc, #8]	; (1a000600 <_sbrk_r+0x1c>)
1a0005f8:	601a      	str	r2, [r3, #0]
1a0005fa:	e7f6      	b.n	1a0005ea <_sbrk_r+0x6>
1a0005fc:	100009fc 	.word	0x100009fc
1a000600:	10000ea8 	.word	0x10000ea8

1a000604 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000604:	2200      	movs	r2, #0
1a000606:	2a05      	cmp	r2, #5
1a000608:	d819      	bhi.n	1a00063e <Board_LED_Init+0x3a>
{
1a00060a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00060c:	490c      	ldr	r1, [pc, #48]	; (1a000640 <Board_LED_Init+0x3c>)
1a00060e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000612:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000616:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000618:	4b0a      	ldr	r3, [pc, #40]	; (1a000644 <Board_LED_Init+0x40>)
1a00061a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00061e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000622:	2001      	movs	r0, #1
1a000624:	40a0      	lsls	r0, r4
1a000626:	4301      	orrs	r1, r0
1a000628:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00062c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000630:	2100      	movs	r1, #0
1a000632:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000634:	3201      	adds	r2, #1
1a000636:	2a05      	cmp	r2, #5
1a000638:	d9e8      	bls.n	1a00060c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00063a:	bc70      	pop	{r4, r5, r6}
1a00063c:	4770      	bx	lr
1a00063e:	4770      	bx	lr
1a000640:	1a007a34 	.word	0x1a007a34
1a000644:	400f4000 	.word	0x400f4000

1a000648 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000648:	2300      	movs	r3, #0
1a00064a:	2b03      	cmp	r3, #3
1a00064c:	d816      	bhi.n	1a00067c <Board_TEC_Init+0x34>
{
1a00064e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000650:	490b      	ldr	r1, [pc, #44]	; (1a000680 <Board_TEC_Init+0x38>)
1a000652:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000656:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00065a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00065c:	4c09      	ldr	r4, [pc, #36]	; (1a000684 <Board_TEC_Init+0x3c>)
1a00065e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000662:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000666:	2001      	movs	r0, #1
1a000668:	40a8      	lsls	r0, r5
1a00066a:	ea21 0100 	bic.w	r1, r1, r0
1a00066e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000672:	3301      	adds	r3, #1
1a000674:	2b03      	cmp	r3, #3
1a000676:	d9eb      	bls.n	1a000650 <Board_TEC_Init+0x8>
   }
}
1a000678:	bc30      	pop	{r4, r5}
1a00067a:	4770      	bx	lr
1a00067c:	4770      	bx	lr
1a00067e:	bf00      	nop
1a000680:	1a007a2c 	.word	0x1a007a2c
1a000684:	400f4000 	.word	0x400f4000

1a000688 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000688:	2300      	movs	r3, #0
1a00068a:	2b08      	cmp	r3, #8
1a00068c:	d816      	bhi.n	1a0006bc <Board_GPIO_Init+0x34>
{
1a00068e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000690:	490b      	ldr	r1, [pc, #44]	; (1a0006c0 <Board_GPIO_Init+0x38>)
1a000692:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000696:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00069a:	784d      	ldrb	r5, [r1, #1]
1a00069c:	4c09      	ldr	r4, [pc, #36]	; (1a0006c4 <Board_GPIO_Init+0x3c>)
1a00069e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0006a2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0006a6:	2001      	movs	r0, #1
1a0006a8:	40a8      	lsls	r0, r5
1a0006aa:	ea21 0100 	bic.w	r1, r1, r0
1a0006ae:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0006b2:	3301      	adds	r3, #1
1a0006b4:	2b08      	cmp	r3, #8
1a0006b6:	d9eb      	bls.n	1a000690 <Board_GPIO_Init+0x8>
   }
}
1a0006b8:	bc30      	pop	{r4, r5}
1a0006ba:	4770      	bx	lr
1a0006bc:	4770      	bx	lr
1a0006be:	bf00      	nop
1a0006c0:	1a007a40 	.word	0x1a007a40
1a0006c4:	400f4000 	.word	0x400f4000

1a0006c8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0006c8:	b510      	push	{r4, lr}
1a0006ca:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0006cc:	4c08      	ldr	r4, [pc, #32]	; (1a0006f0 <Board_ADC_Init+0x28>)
1a0006ce:	4669      	mov	r1, sp
1a0006d0:	4620      	mov	r0, r4
1a0006d2:	f000 f9d9 	bl	1a000a88 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0006d6:	4a07      	ldr	r2, [pc, #28]	; (1a0006f4 <Board_ADC_Init+0x2c>)
1a0006d8:	4669      	mov	r1, sp
1a0006da:	4620      	mov	r0, r4
1a0006dc:	f000 f9f4 	bl	1a000ac8 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0006e0:	2200      	movs	r2, #0
1a0006e2:	4669      	mov	r1, sp
1a0006e4:	4620      	mov	r0, r4
1a0006e6:	f000 fa08 	bl	1a000afa <Chip_ADC_SetResolution>
}
1a0006ea:	b002      	add	sp, #8
1a0006ec:	bd10      	pop	{r4, pc}
1a0006ee:	bf00      	nop
1a0006f0:	400e3000 	.word	0x400e3000
1a0006f4:	00061a80 	.word	0x00061a80

1a0006f8 <Board_SPI_Init>:
{
1a0006f8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0006fa:	4c0b      	ldr	r4, [pc, #44]	; (1a000728 <Board_SPI_Init+0x30>)
1a0006fc:	4620      	mov	r0, r4
1a0006fe:	f001 f865 	bl	1a0017cc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000702:	6863      	ldr	r3, [r4, #4]
1a000704:	f023 0304 	bic.w	r3, r3, #4
1a000708:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00070a:	6823      	ldr	r3, [r4, #0]
1a00070c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000710:	f043 0307 	orr.w	r3, r3, #7
1a000714:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000716:	4905      	ldr	r1, [pc, #20]	; (1a00072c <Board_SPI_Init+0x34>)
1a000718:	4620      	mov	r0, r4
1a00071a:	f001 f838 	bl	1a00178e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00071e:	6863      	ldr	r3, [r4, #4]
1a000720:	f043 0302 	orr.w	r3, r3, #2
1a000724:	6063      	str	r3, [r4, #4]
}
1a000726:	bd10      	pop	{r4, pc}
1a000728:	400c5000 	.word	0x400c5000
1a00072c:	000186a0 	.word	0x000186a0

1a000730 <Board_I2C_Init>:
{
1a000730:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000732:	2000      	movs	r0, #0
1a000734:	f000 fd76 	bl	1a001224 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000738:	4b04      	ldr	r3, [pc, #16]	; (1a00074c <Board_I2C_Init+0x1c>)
1a00073a:	f640 0208 	movw	r2, #2056	; 0x808
1a00073e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000742:	4903      	ldr	r1, [pc, #12]	; (1a000750 <Board_I2C_Init+0x20>)
1a000744:	2000      	movs	r0, #0
1a000746:	f000 fd7f 	bl	1a001248 <Chip_I2C_SetClockRate>
}
1a00074a:	bd08      	pop	{r3, pc}
1a00074c:	40086000 	.word	0x40086000
1a000750:	000f4240 	.word	0x000f4240

1a000754 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000754:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000756:	4c07      	ldr	r4, [pc, #28]	; (1a000774 <Board_Debug_Init+0x20>)
1a000758:	4620      	mov	r0, r4
1a00075a:	f000 f8b9 	bl	1a0008d0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00075e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000762:	4620      	mov	r0, r4
1a000764:	f000 f8fe 	bl	1a000964 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000768:	2303      	movs	r3, #3
1a00076a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00076c:	2301      	movs	r3, #1
1a00076e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000770:	bd10      	pop	{r4, pc}
1a000772:	bf00      	nop
1a000774:	400c1000 	.word	0x400c1000

1a000778 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000778:	4b03      	ldr	r3, [pc, #12]	; (1a000788 <Board_UARTPutChar+0x10>)
1a00077a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00077c:	f013 0f20 	tst.w	r3, #32
1a000780:	d0fa      	beq.n	1a000778 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a000782:	4b01      	ldr	r3, [pc, #4]	; (1a000788 <Board_UARTPutChar+0x10>)
1a000784:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a000786:	4770      	bx	lr
1a000788:	400c1000 	.word	0x400c1000

1a00078c <Board_UARTGetChar>:
	return pUART->LSR;
1a00078c:	4b05      	ldr	r3, [pc, #20]	; (1a0007a4 <Board_UARTGetChar+0x18>)
1a00078e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000790:	f013 0f01 	tst.w	r3, #1
1a000794:	d003      	beq.n	1a00079e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000796:	4b03      	ldr	r3, [pc, #12]	; (1a0007a4 <Board_UARTGetChar+0x18>)
1a000798:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00079a:	b2c0      	uxtb	r0, r0
1a00079c:	4770      	bx	lr
   }
   return EOF;
1a00079e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0007a2:	4770      	bx	lr
1a0007a4:	400c1000 	.word	0x400c1000

1a0007a8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0007a8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0007aa:	f7ff ffd3 	bl	1a000754 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0007ae:	4809      	ldr	r0, [pc, #36]	; (1a0007d4 <Board_Init+0x2c>)
1a0007b0:	f000 fd26 	bl	1a001200 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0007b4:	f7ff ff68 	bl	1a000688 <Board_GPIO_Init>
   Board_ADC_Init();
1a0007b8:	f7ff ff86 	bl	1a0006c8 <Board_ADC_Init>
   Board_SPI_Init();
1a0007bc:	f7ff ff9c 	bl	1a0006f8 <Board_SPI_Init>
   Board_I2C_Init();
1a0007c0:	f7ff ffb6 	bl	1a000730 <Board_I2C_Init>

   Board_LED_Init();
1a0007c4:	f7ff ff1e 	bl	1a000604 <Board_LED_Init>
   Board_TEC_Init();
1a0007c8:	f7ff ff3e 	bl	1a000648 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0007cc:	f000 f99c 	bl	1a000b08 <SystemCoreClockUpdate>
}
1a0007d0:	bd08      	pop	{r3, pc}
1a0007d2:	bf00      	nop
1a0007d4:	400f4000 	.word	0x400f4000

1a0007d8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0007d8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0007da:	b2c0      	uxtb	r0, r0
1a0007dc:	f7ff ffcc 	bl	1a000778 <Board_UARTPutChar>
}
1a0007e0:	bd08      	pop	{r3, pc}

1a0007e2 <__stdio_getchar>:

int __stdio_getchar()
{
1a0007e2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0007e4:	f7ff ffd2 	bl	1a00078c <Board_UARTGetChar>
}
1a0007e8:	bd08      	pop	{r3, pc}

1a0007ea <__stdio_init>:

void __stdio_init()
{
1a0007ea:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0007ec:	f7ff ffb2 	bl	1a000754 <Board_Debug_Init>
1a0007f0:	bd08      	pop	{r3, pc}
1a0007f2:	Address 0x000000001a0007f2 is out of bounds.


1a0007f4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0007f4:	2300      	movs	r3, #0
1a0007f6:	2b1c      	cmp	r3, #28
1a0007f8:	d812      	bhi.n	1a000820 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0007fa:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0007fc:	4a09      	ldr	r2, [pc, #36]	; (1a000824 <Board_SetupMuxing+0x30>)
1a0007fe:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000802:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000806:	784a      	ldrb	r2, [r1, #1]
1a000808:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00080a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00080e:	4906      	ldr	r1, [pc, #24]	; (1a000828 <Board_SetupMuxing+0x34>)
1a000810:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000814:	3301      	adds	r3, #1
1a000816:	2b1c      	cmp	r3, #28
1a000818:	d9f0      	bls.n	1a0007fc <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00081a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00081e:	4770      	bx	lr
1a000820:	4770      	bx	lr
1a000822:	bf00      	nop
1a000824:	1a007a5c 	.word	0x1a007a5c
1a000828:	40086000 	.word	0x40086000

1a00082c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00082c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00082e:	4a17      	ldr	r2, [pc, #92]	; (1a00088c <Board_SetupClocking+0x60>)
1a000830:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000838:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00083c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000840:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000848:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00084c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000850:	2201      	movs	r2, #1
1a000852:	490f      	ldr	r1, [pc, #60]	; (1a000890 <Board_SetupClocking+0x64>)
1a000854:	2006      	movs	r0, #6
1a000856:	f000 fc27 	bl	1a0010a8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00085a:	2400      	movs	r4, #0
1a00085c:	b14c      	cbz	r4, 1a000872 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00085e:	4b0b      	ldr	r3, [pc, #44]	; (1a00088c <Board_SetupClocking+0x60>)
1a000860:	685a      	ldr	r2, [r3, #4]
1a000862:	f022 020c 	bic.w	r2, r2, #12
1a000866:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000868:	685a      	ldr	r2, [r3, #4]
1a00086a:	f042 0203 	orr.w	r2, r2, #3
1a00086e:	605a      	str	r2, [r3, #4]
}
1a000870:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000872:	4808      	ldr	r0, [pc, #32]	; (1a000894 <Board_SetupClocking+0x68>)
1a000874:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000878:	2301      	movs	r3, #1
1a00087a:	788a      	ldrb	r2, [r1, #2]
1a00087c:	7849      	ldrb	r1, [r1, #1]
1a00087e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000882:	f000 fb6d 	bl	1a000f60 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000886:	3401      	adds	r4, #1
1a000888:	e7e8      	b.n	1a00085c <Board_SetupClocking+0x30>
1a00088a:	bf00      	nop
1a00088c:	40043000 	.word	0x40043000
1a000890:	0c28cb00 	.word	0x0c28cb00
1a000894:	1a007a58 	.word	0x1a007a58

1a000898 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000898:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00089a:	f7ff ffab 	bl	1a0007f4 <Board_SetupMuxing>
    Board_SetupClocking();
1a00089e:	f7ff ffc5 	bl	1a00082c <Board_SetupClocking>
}
1a0008a2:	bd08      	pop	{r3, pc}

1a0008a4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0008a4:	4b09      	ldr	r3, [pc, #36]	; (1a0008cc <Chip_UART_GetIndex+0x28>)
1a0008a6:	4298      	cmp	r0, r3
1a0008a8:	d009      	beq.n	1a0008be <Chip_UART_GetIndex+0x1a>
1a0008aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0008ae:	4298      	cmp	r0, r3
1a0008b0:	d007      	beq.n	1a0008c2 <Chip_UART_GetIndex+0x1e>
1a0008b2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0008b6:	4298      	cmp	r0, r3
1a0008b8:	d005      	beq.n	1a0008c6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0008ba:	2000      	movs	r0, #0
1a0008bc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0008be:	2002      	movs	r0, #2
1a0008c0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0008c2:	2003      	movs	r0, #3
1a0008c4:	4770      	bx	lr
			return 1;
1a0008c6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0008c8:	4770      	bx	lr
1a0008ca:	bf00      	nop
1a0008cc:	400c1000 	.word	0x400c1000

1a0008d0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0008d0:	b530      	push	{r4, r5, lr}
1a0008d2:	b083      	sub	sp, #12
1a0008d4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0008d6:	f7ff ffe5 	bl	1a0008a4 <Chip_UART_GetIndex>
1a0008da:	2301      	movs	r3, #1
1a0008dc:	461a      	mov	r2, r3
1a0008de:	4619      	mov	r1, r3
1a0008e0:	4d0e      	ldr	r5, [pc, #56]	; (1a00091c <Chip_UART_Init+0x4c>)
1a0008e2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0008e6:	f000 fb81 	bl	1a000fec <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0008ea:	2307      	movs	r3, #7
1a0008ec:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0008ee:	2300      	movs	r3, #0
1a0008f0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0008f2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0008f4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0008f6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0008f8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0008fa:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0008fc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0008fe:	4b08      	ldr	r3, [pc, #32]	; (1a000920 <Chip_UART_Init+0x50>)
1a000900:	429c      	cmp	r4, r3
1a000902:	d006      	beq.n	1a000912 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000904:	2303      	movs	r3, #3
1a000906:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000908:	2310      	movs	r3, #16
1a00090a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00090c:	9b01      	ldr	r3, [sp, #4]
}
1a00090e:	b003      	add	sp, #12
1a000910:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000912:	2300      	movs	r3, #0
1a000914:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000916:	69a3      	ldr	r3, [r4, #24]
1a000918:	9301      	str	r3, [sp, #4]
1a00091a:	e7f3      	b.n	1a000904 <Chip_UART_Init+0x34>
1a00091c:	1a007ad8 	.word	0x1a007ad8
1a000920:	40082000 	.word	0x40082000

1a000924 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000924:	b538      	push	{r3, r4, r5, lr}
1a000926:	4605      	mov	r5, r0
1a000928:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00092a:	f7ff ffbb 	bl	1a0008a4 <Chip_UART_GetIndex>
1a00092e:	4b0c      	ldr	r3, [pc, #48]	; (1a000960 <Chip_UART_SetBaud+0x3c>)
1a000930:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000934:	f000 fb92 	bl	1a00105c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000938:	0123      	lsls	r3, r4, #4
1a00093a:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00093e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000940:	68ea      	ldr	r2, [r5, #12]
1a000942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000946:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a000948:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00094a:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00094e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000950:	68ea      	ldr	r2, [r5, #12]
1a000952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000956:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000958:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00095c:	0900      	lsrs	r0, r0, #4
1a00095e:	bd38      	pop	{r3, r4, r5, pc}
1a000960:	1a007ad0 	.word	0x1a007ad0

1a000964 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000968:	b083      	sub	sp, #12
1a00096a:	9001      	str	r0, [sp, #4]
1a00096c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00096e:	f7ff ff99 	bl	1a0008a4 <Chip_UART_GetIndex>
1a000972:	4b32      	ldr	r3, [pc, #200]	; (1a000a3c <Chip_UART_SetBaudFDR+0xd8>)
1a000974:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000978:	f000 fb70 	bl	1a00105c <Chip_Clock_GetRate>
1a00097c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00097e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000982:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000984:	f04f 0b00 	mov.w	fp, #0
1a000988:	46a2      	mov	sl, r4
1a00098a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00098c:	e02a      	b.n	1a0009e4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00098e:	4242      	negs	r2, r0
				div ++;
1a000990:	1c4b      	adds	r3, r1, #1
1a000992:	e017      	b.n	1a0009c4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000994:	b30a      	cbz	r2, 1a0009da <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000996:	4617      	mov	r7, r2
			sd = d;
1a000998:	46ab      	mov	fp, r5
			sm = m;
1a00099a:	46a2      	mov	sl, r4
			sdiv = div;
1a00099c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00099e:	3501      	adds	r5, #1
1a0009a0:	42ac      	cmp	r4, r5
1a0009a2:	d91e      	bls.n	1a0009e2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0009a4:	0933      	lsrs	r3, r6, #4
1a0009a6:	0730      	lsls	r0, r6, #28
1a0009a8:	fba4 0100 	umull	r0, r1, r4, r0
1a0009ac:	fb04 1103 	mla	r1, r4, r3, r1
1a0009b0:	1962      	adds	r2, r4, r5
1a0009b2:	fb08 f202 	mul.w	r2, r8, r2
1a0009b6:	2300      	movs	r3, #0
1a0009b8:	f001 feb6 	bl	1a002728 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0009bc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0009be:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0009c0:	2800      	cmp	r0, #0
1a0009c2:	dbe4      	blt.n	1a00098e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0009c4:	4297      	cmp	r7, r2
1a0009c6:	d3ea      	bcc.n	1a00099e <Chip_UART_SetBaudFDR+0x3a>
1a0009c8:	2b00      	cmp	r3, #0
1a0009ca:	d0e8      	beq.n	1a00099e <Chip_UART_SetBaudFDR+0x3a>
1a0009cc:	0c19      	lsrs	r1, r3, #16
1a0009ce:	d1e6      	bne.n	1a00099e <Chip_UART_SetBaudFDR+0x3a>
1a0009d0:	2b02      	cmp	r3, #2
1a0009d2:	d8df      	bhi.n	1a000994 <Chip_UART_SetBaudFDR+0x30>
1a0009d4:	2d00      	cmp	r5, #0
1a0009d6:	d0dd      	beq.n	1a000994 <Chip_UART_SetBaudFDR+0x30>
1a0009d8:	e7e1      	b.n	1a00099e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0009da:	4617      	mov	r7, r2
			sd = d;
1a0009dc:	46ab      	mov	fp, r5
			sm = m;
1a0009de:	46a2      	mov	sl, r4
			sdiv = div;
1a0009e0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0009e2:	3401      	adds	r4, #1
1a0009e4:	b11f      	cbz	r7, 1a0009ee <Chip_UART_SetBaudFDR+0x8a>
1a0009e6:	2c0f      	cmp	r4, #15
1a0009e8:	d801      	bhi.n	1a0009ee <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0009ea:	2500      	movs	r5, #0
1a0009ec:	e7d8      	b.n	1a0009a0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0009ee:	f1b9 0f00 	cmp.w	r9, #0
1a0009f2:	d01e      	beq.n	1a000a32 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0009f4:	9a01      	ldr	r2, [sp, #4]
1a0009f6:	4611      	mov	r1, r2
1a0009f8:	68d3      	ldr	r3, [r2, #12]
1a0009fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0009fe:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a000a00:	fa5f f389 	uxtb.w	r3, r9
1a000a04:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000a06:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000a0a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000a0c:	68d3      	ldr	r3, [r2, #12]
1a000a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000a12:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000a14:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000a18:	b2db      	uxtb	r3, r3
1a000a1a:	f00b 020f 	and.w	r2, fp, #15
1a000a1e:	4313      	orrs	r3, r2
1a000a20:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000a22:	0933      	lsrs	r3, r6, #4
1a000a24:	fb0a f303 	mul.w	r3, sl, r3
1a000a28:	44da      	add	sl, fp
1a000a2a:	fb09 f90a 	mul.w	r9, r9, sl
1a000a2e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000a32:	4648      	mov	r0, r9
1a000a34:	b003      	add	sp, #12
1a000a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000a3a:	bf00      	nop
1a000a3c:	1a007ad0 	.word	0x1a007ad0

1a000a40 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000a40:	4b03      	ldr	r3, [pc, #12]	; (1a000a50 <Chip_ADC_GetClockIndex+0x10>)
1a000a42:	4298      	cmp	r0, r3
1a000a44:	d001      	beq.n	1a000a4a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000a46:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000a48:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000a4a:	2004      	movs	r0, #4
1a000a4c:	4770      	bx	lr
1a000a4e:	bf00      	nop
1a000a50:	400e4000 	.word	0x400e4000

1a000a54 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000a54:	b570      	push	{r4, r5, r6, lr}
1a000a56:	460d      	mov	r5, r1
1a000a58:	4614      	mov	r4, r2
1a000a5a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000a5c:	f7ff fff0 	bl	1a000a40 <Chip_ADC_GetClockIndex>
1a000a60:	f000 fafc 	bl	1a00105c <Chip_Clock_GetRate>
	if (burstMode) {
1a000a64:	b155      	cbz	r5, 1a000a7c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000a66:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000a6a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000a6e:	0064      	lsls	r4, r4, #1
1a000a70:	fbb0 f0f4 	udiv	r0, r0, r4
1a000a74:	b2c0      	uxtb	r0, r0
1a000a76:	3801      	subs	r0, #1
	return div;
}
1a000a78:	b2c0      	uxtb	r0, r0
1a000a7a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000a7c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000a80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000a84:	e7f1      	b.n	1a000a6a <getClkDiv+0x16>
1a000a86:	Address 0x000000001a000a86 is out of bounds.


1a000a88 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000a88:	b538      	push	{r3, r4, r5, lr}
1a000a8a:	4605      	mov	r5, r0
1a000a8c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000a8e:	f7ff ffd7 	bl	1a000a40 <Chip_ADC_GetClockIndex>
1a000a92:	2301      	movs	r3, #1
1a000a94:	461a      	mov	r2, r3
1a000a96:	4619      	mov	r1, r3
1a000a98:	f000 faa8 	bl	1a000fec <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000a9c:	2100      	movs	r1, #0
1a000a9e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000aa0:	4a08      	ldr	r2, [pc, #32]	; (1a000ac4 <Chip_ADC_Init+0x3c>)
1a000aa2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000aa4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000aa6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000aa8:	230b      	movs	r3, #11
1a000aaa:	4628      	mov	r0, r5
1a000aac:	f7ff ffd2 	bl	1a000a54 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000ab0:	0200      	lsls	r0, r0, #8
1a000ab2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000ab6:	7920      	ldrb	r0, [r4, #4]
1a000ab8:	0440      	lsls	r0, r0, #17
1a000aba:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000abe:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000ac0:	6028      	str	r0, [r5, #0]
}
1a000ac2:	bd38      	pop	{r3, r4, r5, pc}
1a000ac4:	00061a80 	.word	0x00061a80

1a000ac8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000ac8:	b570      	push	{r4, r5, r6, lr}
1a000aca:	4605      	mov	r5, r0
1a000acc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000ace:	6804      	ldr	r4, [r0, #0]
1a000ad0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000ad4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000ad8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000ada:	790b      	ldrb	r3, [r1, #4]
1a000adc:	f1c3 030b 	rsb	r3, r3, #11
1a000ae0:	b2db      	uxtb	r3, r3
1a000ae2:	7949      	ldrb	r1, [r1, #5]
1a000ae4:	f7ff ffb6 	bl	1a000a54 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000ae8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000aec:	7933      	ldrb	r3, [r6, #4]
1a000aee:	045b      	lsls	r3, r3, #17
1a000af0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000af4:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000af6:	602b      	str	r3, [r5, #0]
}
1a000af8:	bd70      	pop	{r4, r5, r6, pc}

1a000afa <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000afa:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000afc:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000afe:	680a      	ldr	r2, [r1, #0]
1a000b00:	f7ff ffe2 	bl	1a000ac8 <Chip_ADC_SetSampleRate>
}
1a000b04:	bd08      	pop	{r3, pc}
1a000b06:	Address 0x000000001a000b06 is out of bounds.


1a000b08 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000b08:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000b0a:	2069      	movs	r0, #105	; 0x69
1a000b0c:	f000 faa6 	bl	1a00105c <Chip_Clock_GetRate>
1a000b10:	4b01      	ldr	r3, [pc, #4]	; (1a000b18 <SystemCoreClockUpdate+0x10>)
1a000b12:	6018      	str	r0, [r3, #0]
}
1a000b14:	bd08      	pop	{r3, pc}
1a000b16:	bf00      	nop
1a000b18:	10000e7c 	.word	0x10000e7c

1a000b1c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b1c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000b1e:	680b      	ldr	r3, [r1, #0]
1a000b20:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000b24:	d002      	beq.n	1a000b2c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000b2a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000b2c:	4607      	mov	r7, r0
1a000b2e:	2501      	movs	r5, #1
1a000b30:	e03a      	b.n	1a000ba8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000b32:	694b      	ldr	r3, [r1, #20]
1a000b34:	fb03 f302 	mul.w	r3, r3, r2
1a000b38:	fbb3 f3f5 	udiv	r3, r3, r5
1a000b3c:	e01c      	b.n	1a000b78 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000b3e:	461c      	mov	r4, r3
	if (val < 0)
1a000b40:	ebb0 0c04 	subs.w	ip, r0, r4
1a000b44:	d427      	bmi.n	1a000b96 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000b46:	4567      	cmp	r7, ip
1a000b48:	d906      	bls.n	1a000b58 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000b4a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000b4c:	1c77      	adds	r7, r6, #1
1a000b4e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000b50:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000b52:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000b54:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000b56:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000b58:	3201      	adds	r2, #1
1a000b5a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000b5e:	dc1d      	bgt.n	1a000b9c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000b60:	680c      	ldr	r4, [r1, #0]
1a000b62:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000b66:	d0e4      	beq.n	1a000b32 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000b68:	1c73      	adds	r3, r6, #1
1a000b6a:	fa02 fc03 	lsl.w	ip, r2, r3
1a000b6e:	694b      	ldr	r3, [r1, #20]
1a000b70:	fb03 f30c 	mul.w	r3, r3, ip
1a000b74:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b78:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000bb4 <pll_calc_divs+0x98>
1a000b7c:	4563      	cmp	r3, ip
1a000b7e:	d9eb      	bls.n	1a000b58 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b80:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000bb8 <pll_calc_divs+0x9c>
1a000b84:	4563      	cmp	r3, ip
1a000b86:	d809      	bhi.n	1a000b9c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000b88:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b8c:	d1d7      	bne.n	1a000b3e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000b8e:	1c74      	adds	r4, r6, #1
1a000b90:	fa23 f404 	lsr.w	r4, r3, r4
1a000b94:	e7d4      	b.n	1a000b40 <pll_calc_divs+0x24>
		return -val;
1a000b96:	f1cc 0c00 	rsb	ip, ip, #0
1a000b9a:	e7d4      	b.n	1a000b46 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000b9c:	3601      	adds	r6, #1
1a000b9e:	2e03      	cmp	r6, #3
1a000ba0:	dc01      	bgt.n	1a000ba6 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000ba2:	2201      	movs	r2, #1
1a000ba4:	e7d9      	b.n	1a000b5a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000ba6:	3501      	adds	r5, #1
1a000ba8:	2d04      	cmp	r5, #4
1a000baa:	dc01      	bgt.n	1a000bb0 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000bac:	2600      	movs	r6, #0
1a000bae:	e7f6      	b.n	1a000b9e <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000bb0:	bcf0      	pop	{r4, r5, r6, r7}
1a000bb2:	4770      	bx	lr
1a000bb4:	094c5eff 	.word	0x094c5eff
1a000bb8:	1312d000 	.word	0x1312d000

1a000bbc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000bbe:	b099      	sub	sp, #100	; 0x64
1a000bc0:	4605      	mov	r5, r0
1a000bc2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000bc4:	225c      	movs	r2, #92	; 0x5c
1a000bc6:	2100      	movs	r1, #0
1a000bc8:	a801      	add	r0, sp, #4
1a000bca:	f002 fdbd 	bl	1a003748 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000bce:	2380      	movs	r3, #128	; 0x80
1a000bd0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000bd2:	6963      	ldr	r3, [r4, #20]
1a000bd4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000bd6:	7923      	ldrb	r3, [r4, #4]
1a000bd8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000bdc:	4669      	mov	r1, sp
1a000bde:	4628      	mov	r0, r5
1a000be0:	f7ff ff9c 	bl	1a000b1c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000be4:	9b06      	ldr	r3, [sp, #24]
1a000be6:	42ab      	cmp	r3, r5
1a000be8:	d027      	beq.n	1a000c3a <pll_get_frac+0x7e>
	if (val < 0)
1a000bea:	1aeb      	subs	r3, r5, r3
1a000bec:	d42e      	bmi.n	1a000c4c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000bee:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000bf6:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000bf8:	6963      	ldr	r3, [r4, #20]
1a000bfa:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000bfc:	7923      	ldrb	r3, [r4, #4]
1a000bfe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000c02:	a910      	add	r1, sp, #64	; 0x40
1a000c04:	4628      	mov	r0, r5
1a000c06:	f7ff ff89 	bl	1a000b1c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000c0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000c0c:	42ab      	cmp	r3, r5
1a000c0e:	d01f      	beq.n	1a000c50 <pll_get_frac+0x94>
	if (val < 0)
1a000c10:	1aeb      	subs	r3, r5, r3
1a000c12:	d425      	bmi.n	1a000c60 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000c14:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000c16:	4b2b      	ldr	r3, [pc, #172]	; (1a000cc4 <pll_get_frac+0x108>)
1a000c18:	429d      	cmp	r5, r3
1a000c1a:	d923      	bls.n	1a000c64 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000c1e:	1aed      	subs	r5, r5, r3
1a000c20:	d433      	bmi.n	1a000c8a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000c22:	42ae      	cmp	r6, r5
1a000c24:	dc3b      	bgt.n	1a000c9e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000c26:	42be      	cmp	r6, r7
1a000c28:	dc31      	bgt.n	1a000c8e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000c2a:	466d      	mov	r5, sp
1a000c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c38:	e006      	b.n	1a000c48 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000c3a:	466d      	mov	r5, sp
1a000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000c48:	b019      	add	sp, #100	; 0x64
1a000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000c4c:	425b      	negs	r3, r3
1a000c4e:	e7ce      	b.n	1a000bee <pll_get_frac+0x32>
		*ppll = pll[2];
1a000c50:	ad10      	add	r5, sp, #64	; 0x40
1a000c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000c5e:	e7f3      	b.n	1a000c48 <pll_get_frac+0x8c>
		return -val;
1a000c60:	425b      	negs	r3, r3
1a000c62:	e7d7      	b.n	1a000c14 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000c64:	2340      	movs	r3, #64	; 0x40
1a000c66:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000c68:	6963      	ldr	r3, [r4, #20]
1a000c6a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000c6c:	a908      	add	r1, sp, #32
1a000c6e:	4628      	mov	r0, r5
1a000c70:	f7ff ff54 	bl	1a000b1c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000c76:	42ab      	cmp	r3, r5
1a000c78:	d1d0      	bne.n	1a000c1c <pll_get_frac+0x60>
			*ppll = pll[1];
1a000c7a:	ad08      	add	r5, sp, #32
1a000c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000c88:	e7de      	b.n	1a000c48 <pll_get_frac+0x8c>
		return -val;
1a000c8a:	426d      	negs	r5, r5
1a000c8c:	e7c9      	b.n	1a000c22 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000c8e:	ad10      	add	r5, sp, #64	; 0x40
1a000c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c9c:	e7d4      	b.n	1a000c48 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000c9e:	42af      	cmp	r7, r5
1a000ca0:	db07      	blt.n	1a000cb2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000ca2:	ad08      	add	r5, sp, #32
1a000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ca8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cb0:	e7ca      	b.n	1a000c48 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000cb2:	ad10      	add	r5, sp, #64	; 0x40
1a000cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cc0:	e7c2      	b.n	1a000c48 <pll_get_frac+0x8c>
1a000cc2:	bf00      	nop
1a000cc4:	068e7780 	.word	0x068e7780

1a000cc8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000cc8:	b430      	push	{r4, r5}
1a000cca:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000ccc:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000cce:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000cd0:	e000      	b.n	1a000cd4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000cd2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000cd4:	281c      	cmp	r0, #28
1a000cd6:	d118      	bne.n	1a000d0a <Chip_Clock_FindBaseClock+0x42>
1a000cd8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000cdc:	0051      	lsls	r1, r2, #1
1a000cde:	4a0c      	ldr	r2, [pc, #48]	; (1a000d10 <Chip_Clock_FindBaseClock+0x48>)
1a000ce0:	440a      	add	r2, r1
1a000ce2:	7914      	ldrb	r4, [r2, #4]
1a000ce4:	4284      	cmp	r4, r0
1a000ce6:	d010      	beq.n	1a000d0a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000ce8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000cec:	004a      	lsls	r2, r1, #1
1a000cee:	4908      	ldr	r1, [pc, #32]	; (1a000d10 <Chip_Clock_FindBaseClock+0x48>)
1a000cf0:	5a8a      	ldrh	r2, [r1, r2]
1a000cf2:	42aa      	cmp	r2, r5
1a000cf4:	d8ed      	bhi.n	1a000cd2 <Chip_Clock_FindBaseClock+0xa>
1a000cf6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000cfa:	0051      	lsls	r1, r2, #1
1a000cfc:	4a04      	ldr	r2, [pc, #16]	; (1a000d10 <Chip_Clock_FindBaseClock+0x48>)
1a000cfe:	440a      	add	r2, r1
1a000d00:	8852      	ldrh	r2, [r2, #2]
1a000d02:	42aa      	cmp	r2, r5
1a000d04:	d3e5      	bcc.n	1a000cd2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000d06:	4620      	mov	r0, r4
1a000d08:	e7e4      	b.n	1a000cd4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000d0a:	bc30      	pop	{r4, r5}
1a000d0c:	4770      	bx	lr
1a000d0e:	bf00      	nop
1a000d10:	1a007aec 	.word	0x1a007aec

1a000d14 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000d14:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000d1a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000d1c:	4a0d      	ldr	r2, [pc, #52]	; (1a000d54 <Chip_Clock_EnableCrystal+0x40>)
1a000d1e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000d20:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000d24:	6992      	ldr	r2, [r2, #24]
1a000d26:	428a      	cmp	r2, r1
1a000d28:	d001      	beq.n	1a000d2e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d2a:	4a0a      	ldr	r2, [pc, #40]	; (1a000d54 <Chip_Clock_EnableCrystal+0x40>)
1a000d2c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000d2e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000d32:	4a09      	ldr	r2, [pc, #36]	; (1a000d58 <Chip_Clock_EnableCrystal+0x44>)
1a000d34:	6811      	ldr	r1, [r2, #0]
1a000d36:	4a09      	ldr	r2, [pc, #36]	; (1a000d5c <Chip_Clock_EnableCrystal+0x48>)
1a000d38:	4291      	cmp	r1, r2
1a000d3a:	d901      	bls.n	1a000d40 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000d3c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d40:	4a04      	ldr	r2, [pc, #16]	; (1a000d54 <Chip_Clock_EnableCrystal+0x40>)
1a000d42:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000d44:	9b01      	ldr	r3, [sp, #4]
1a000d46:	1e5a      	subs	r2, r3, #1
1a000d48:	9201      	str	r2, [sp, #4]
1a000d4a:	2b00      	cmp	r3, #0
1a000d4c:	d1fa      	bne.n	1a000d44 <Chip_Clock_EnableCrystal+0x30>
}
1a000d4e:	b002      	add	sp, #8
1a000d50:	4770      	bx	lr
1a000d52:	bf00      	nop
1a000d54:	40050000 	.word	0x40050000
1a000d58:	1a007a54 	.word	0x1a007a54
1a000d5c:	01312cff 	.word	0x01312cff

1a000d60 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000d60:	3012      	adds	r0, #18
1a000d62:	4b05      	ldr	r3, [pc, #20]	; (1a000d78 <Chip_Clock_GetDividerSource+0x18>)
1a000d64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000d68:	f010 0f01 	tst.w	r0, #1
1a000d6c:	d102      	bne.n	1a000d74 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d6e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d72:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d74:	2011      	movs	r0, #17
}
1a000d76:	4770      	bx	lr
1a000d78:	40050000 	.word	0x40050000

1a000d7c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000d7c:	f100 0212 	add.w	r2, r0, #18
1a000d80:	4b03      	ldr	r3, [pc, #12]	; (1a000d90 <Chip_Clock_GetDividerDivisor+0x14>)
1a000d82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000d86:	4b03      	ldr	r3, [pc, #12]	; (1a000d94 <Chip_Clock_GetDividerDivisor+0x18>)
1a000d88:	5c18      	ldrb	r0, [r3, r0]
}
1a000d8a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000d8e:	4770      	bx	lr
1a000d90:	40050000 	.word	0x40050000
1a000d94:	1a007ae4 	.word	0x1a007ae4

1a000d98 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000d98:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000d9a:	2810      	cmp	r0, #16
1a000d9c:	d80a      	bhi.n	1a000db4 <Chip_Clock_GetClockInputHz+0x1c>
1a000d9e:	e8df f000 	tbb	[pc, r0]
1a000da2:	0b44      	.short	0x0b44
1a000da4:	0921180d 	.word	0x0921180d
1a000da8:	2d2a2724 	.word	0x2d2a2724
1a000dac:	34300909 	.word	0x34300909
1a000db0:	3c38      	.short	0x3c38
1a000db2:	40          	.byte	0x40
1a000db3:	00          	.byte	0x00
	uint32_t rate = 0;
1a000db4:	2000      	movs	r0, #0
1a000db6:	e03a      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000db8:	481e      	ldr	r0, [pc, #120]	; (1a000e34 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000dba:	e038      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000dbc:	4b1e      	ldr	r3, [pc, #120]	; (1a000e38 <Chip_Clock_GetClockInputHz+0xa0>)
1a000dbe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000dc2:	f003 0307 	and.w	r3, r3, #7
1a000dc6:	2b04      	cmp	r3, #4
1a000dc8:	d001      	beq.n	1a000dce <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000dca:	481c      	ldr	r0, [pc, #112]	; (1a000e3c <Chip_Clock_GetClockInputHz+0xa4>)
1a000dcc:	e02f      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000dce:	2000      	movs	r0, #0
1a000dd0:	e02d      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000dd2:	4b19      	ldr	r3, [pc, #100]	; (1a000e38 <Chip_Clock_GetClockInputHz+0xa0>)
1a000dd4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000dd8:	f003 0307 	and.w	r3, r3, #7
1a000ddc:	2b04      	cmp	r3, #4
1a000dde:	d027      	beq.n	1a000e30 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000de0:	4816      	ldr	r0, [pc, #88]	; (1a000e3c <Chip_Clock_GetClockInputHz+0xa4>)
1a000de2:	e024      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000de4:	4b16      	ldr	r3, [pc, #88]	; (1a000e40 <Chip_Clock_GetClockInputHz+0xa8>)
1a000de6:	6818      	ldr	r0, [r3, #0]
		break;
1a000de8:	e021      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000dea:	4b16      	ldr	r3, [pc, #88]	; (1a000e44 <Chip_Clock_GetClockInputHz+0xac>)
1a000dec:	6818      	ldr	r0, [r3, #0]
		break;
1a000dee:	e01e      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000df0:	4b15      	ldr	r3, [pc, #84]	; (1a000e48 <Chip_Clock_GetClockInputHz+0xb0>)
1a000df2:	6818      	ldr	r0, [r3, #0]
		break;
1a000df4:	e01b      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000df6:	4b14      	ldr	r3, [pc, #80]	; (1a000e48 <Chip_Clock_GetClockInputHz+0xb0>)
1a000df8:	6858      	ldr	r0, [r3, #4]
		break;
1a000dfa:	e018      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000dfc:	f000 f868 	bl	1a000ed0 <Chip_Clock_GetMainPLLHz>
		break;
1a000e00:	e015      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000e02:	2100      	movs	r1, #0
1a000e04:	f000 f89a 	bl	1a000f3c <Chip_Clock_GetDivRate>
		break;
1a000e08:	e011      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000e0a:	2101      	movs	r1, #1
1a000e0c:	f000 f896 	bl	1a000f3c <Chip_Clock_GetDivRate>
		break;
1a000e10:	e00d      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000e12:	2102      	movs	r1, #2
1a000e14:	f000 f892 	bl	1a000f3c <Chip_Clock_GetDivRate>
		break;
1a000e18:	e009      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000e1a:	2103      	movs	r1, #3
1a000e1c:	f000 f88e 	bl	1a000f3c <Chip_Clock_GetDivRate>
		break;
1a000e20:	e005      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000e22:	2104      	movs	r1, #4
1a000e24:	f000 f88a 	bl	1a000f3c <Chip_Clock_GetDivRate>
		break;
1a000e28:	e001      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000e2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000e2e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000e30:	4806      	ldr	r0, [pc, #24]	; (1a000e4c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000e32:	e7fc      	b.n	1a000e2e <Chip_Clock_GetClockInputHz+0x96>
1a000e34:	00b71b00 	.word	0x00b71b00
1a000e38:	40043000 	.word	0x40043000
1a000e3c:	017d7840 	.word	0x017d7840
1a000e40:	1a007a28 	.word	0x1a007a28
1a000e44:	1a007a54 	.word	0x1a007a54
1a000e48:	10000a00 	.word	0x10000a00
1a000e4c:	02faf080 	.word	0x02faf080

1a000e50 <Chip_Clock_CalcMainPLLValue>:
{
1a000e50:	b538      	push	{r3, r4, r5, lr}
1a000e52:	4605      	mov	r5, r0
1a000e54:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000e56:	7908      	ldrb	r0, [r1, #4]
1a000e58:	f7ff ff9e 	bl	1a000d98 <Chip_Clock_GetClockInputHz>
1a000e5c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000e5e:	4b19      	ldr	r3, [pc, #100]	; (1a000ec4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000e60:	442b      	add	r3, r5
1a000e62:	4a19      	ldr	r2, [pc, #100]	; (1a000ec8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000e64:	4293      	cmp	r3, r2
1a000e66:	d821      	bhi.n	1a000eac <Chip_Clock_CalcMainPLLValue+0x5c>
1a000e68:	b318      	cbz	r0, 1a000eb2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000e6a:	2380      	movs	r3, #128	; 0x80
1a000e6c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000e6e:	2300      	movs	r3, #0
1a000e70:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000e72:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000e74:	fbb5 f3f0 	udiv	r3, r5, r0
1a000e78:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000e7a:	4a14      	ldr	r2, [pc, #80]	; (1a000ecc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000e7c:	4295      	cmp	r5, r2
1a000e7e:	d903      	bls.n	1a000e88 <Chip_Clock_CalcMainPLLValue+0x38>
1a000e80:	fb03 f000 	mul.w	r0, r3, r0
1a000e84:	42a8      	cmp	r0, r5
1a000e86:	d007      	beq.n	1a000e98 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000e88:	4621      	mov	r1, r4
1a000e8a:	4628      	mov	r0, r5
1a000e8c:	f7ff fe96 	bl	1a000bbc <pll_get_frac>
		if (!ppll->nsel) {
1a000e90:	68a3      	ldr	r3, [r4, #8]
1a000e92:	b18b      	cbz	r3, 1a000eb8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000e94:	3b01      	subs	r3, #1
1a000e96:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000e98:	6923      	ldr	r3, [r4, #16]
1a000e9a:	b183      	cbz	r3, 1a000ebe <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000e9c:	68e2      	ldr	r2, [r4, #12]
1a000e9e:	b10a      	cbz	r2, 1a000ea4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000ea0:	3a01      	subs	r2, #1
1a000ea2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000ea4:	3b01      	subs	r3, #1
1a000ea6:	6123      	str	r3, [r4, #16]
	return 0;
1a000ea8:	2000      	movs	r0, #0
}
1a000eaa:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000eb0:	e7fb      	b.n	1a000eaa <Chip_Clock_CalcMainPLLValue+0x5a>
1a000eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000eb6:	e7f8      	b.n	1a000eaa <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ebc:	e7f5      	b.n	1a000eaa <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ec2:	e7f2      	b.n	1a000eaa <Chip_Clock_CalcMainPLLValue+0x5a>
1a000ec4:	ff6b3a10 	.word	0xff6b3a10
1a000ec8:	0b940510 	.word	0x0b940510
1a000ecc:	094c5eff 	.word	0x094c5eff

1a000ed0 <Chip_Clock_GetMainPLLHz>:
{
1a000ed0:	b530      	push	{r4, r5, lr}
1a000ed2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000ed4:	4d17      	ldr	r5, [pc, #92]	; (1a000f34 <Chip_Clock_GetMainPLLHz+0x64>)
1a000ed6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000ed8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000edc:	f7ff ff5c 	bl	1a000d98 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000ee0:	4b15      	ldr	r3, [pc, #84]	; (1a000f38 <Chip_Clock_GetMainPLLHz+0x68>)
1a000ee2:	681b      	ldr	r3, [r3, #0]
1a000ee4:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000ee6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000ee8:	f013 0f01 	tst.w	r3, #1
1a000eec:	d020      	beq.n	1a000f30 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000eee:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000ef2:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000ef6:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000efa:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000efe:	3301      	adds	r3, #1
	n = nsel + 1;
1a000f00:	3201      	adds	r2, #1
	p = ptab[psel];
1a000f02:	f10d 0c08 	add.w	ip, sp, #8
1a000f06:	4461      	add	r1, ip
1a000f08:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000f0c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000f10:	d108      	bne.n	1a000f24 <Chip_Clock_GetMainPLLHz+0x54>
1a000f12:	b93d      	cbnz	r5, 1a000f24 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000f14:	0049      	lsls	r1, r1, #1
1a000f16:	fbb3 f3f1 	udiv	r3, r3, r1
1a000f1a:	fbb0 f0f2 	udiv	r0, r0, r2
1a000f1e:	fb00 f003 	mul.w	r0, r0, r3
1a000f22:	e003      	b.n	1a000f2c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000f24:	fbb0 f0f2 	udiv	r0, r0, r2
1a000f28:	fb03 f000 	mul.w	r0, r3, r0
}
1a000f2c:	b003      	add	sp, #12
1a000f2e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a000f30:	2000      	movs	r0, #0
1a000f32:	e7fb      	b.n	1a000f2c <Chip_Clock_GetMainPLLHz+0x5c>
1a000f34:	40050000 	.word	0x40050000
1a000f38:	1a007ae0 	.word	0x1a007ae0

1a000f3c <Chip_Clock_GetDivRate>:
{
1a000f3c:	b538      	push	{r3, r4, r5, lr}
1a000f3e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000f40:	4608      	mov	r0, r1
1a000f42:	f7ff ff0d 	bl	1a000d60 <Chip_Clock_GetDividerSource>
1a000f46:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000f48:	4620      	mov	r0, r4
1a000f4a:	f7ff ff17 	bl	1a000d7c <Chip_Clock_GetDividerDivisor>
1a000f4e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000f50:	4628      	mov	r0, r5
1a000f52:	f7ff ff21 	bl	1a000d98 <Chip_Clock_GetClockInputHz>
1a000f56:	3401      	adds	r4, #1
}
1a000f58:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f5c:	bd38      	pop	{r3, r4, r5, pc}
1a000f5e:	Address 0x000000001a000f5e is out of bounds.


1a000f60 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000f60:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f62:	f100 0416 	add.w	r4, r0, #22
1a000f66:	00a4      	lsls	r4, r4, #2
1a000f68:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000f6c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000f70:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000f72:	281b      	cmp	r0, #27
1a000f74:	d813      	bhi.n	1a000f9e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000f76:	2911      	cmp	r1, #17
1a000f78:	d01a      	beq.n	1a000fb0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000f7a:	4d0e      	ldr	r5, [pc, #56]	; (1a000fb4 <Chip_Clock_SetBaseClock+0x54>)
1a000f7c:	4025      	ands	r5, r4

			if (autoblocken) {
1a000f7e:	b10a      	cbz	r2, 1a000f84 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000f80:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000f84:	b10b      	cbz	r3, 1a000f8a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000f86:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000f8a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000f8e:	3016      	adds	r0, #22
1a000f90:	0080      	lsls	r0, r0, #2
1a000f92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f96:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f9a:	6045      	str	r5, [r0, #4]
1a000f9c:	e008      	b.n	1a000fb0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000f9e:	f044 0401 	orr.w	r4, r4, #1
1a000fa2:	3016      	adds	r0, #22
1a000fa4:	0080      	lsls	r0, r0, #2
1a000fa6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000faa:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fae:	6044      	str	r4, [r0, #4]
	}
}
1a000fb0:	bc30      	pop	{r4, r5}
1a000fb2:	4770      	bx	lr
1a000fb4:	e0fff7fe 	.word	0xe0fff7fe

1a000fb8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000fb8:	281b      	cmp	r0, #27
1a000fba:	d80c      	bhi.n	1a000fd6 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000fbc:	3016      	adds	r0, #22
1a000fbe:	0080      	lsls	r0, r0, #2
1a000fc0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000fc4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000fc8:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000fca:	f010 0f01 	tst.w	r0, #1
1a000fce:	d104      	bne.n	1a000fda <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000fd0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000fd4:	4770      	bx	lr
		return CLKINPUT_PD;
1a000fd6:	2011      	movs	r0, #17
1a000fd8:	4770      	bx	lr
		return CLKINPUT_PD;
1a000fda:	2011      	movs	r0, #17
}
1a000fdc:	4770      	bx	lr

1a000fde <Chip_Clock_GetBaseClocktHz>:
{
1a000fde:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000fe0:	f7ff ffea 	bl	1a000fb8 <Chip_Clock_GetBaseClock>
1a000fe4:	f7ff fed8 	bl	1a000d98 <Chip_Clock_GetClockInputHz>
}
1a000fe8:	bd08      	pop	{r3, pc}
1a000fea:	Address 0x000000001a000fea is out of bounds.


1a000fec <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000fec:	b971      	cbnz	r1, 1a00100c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000fee:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000ff0:	b10a      	cbz	r2, 1a000ff6 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000ff2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000ff6:	2b02      	cmp	r3, #2
1a000ff8:	d00a      	beq.n	1a001010 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000ffa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ffe:	d30a      	bcc.n	1a001016 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001000:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001004:	4b06      	ldr	r3, [pc, #24]	; (1a001020 <Chip_Clock_EnableOpts+0x34>)
1a001006:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00100a:	4770      	bx	lr
		reg |= (1 << 1);
1a00100c:	2103      	movs	r1, #3
1a00100e:	e7ef      	b.n	1a000ff0 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001010:	f041 0120 	orr.w	r1, r1, #32
1a001014:	e7f1      	b.n	1a000ffa <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001016:	3020      	adds	r0, #32
1a001018:	4b02      	ldr	r3, [pc, #8]	; (1a001024 <Chip_Clock_EnableOpts+0x38>)
1a00101a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00101e:	4770      	bx	lr
1a001020:	40052000 	.word	0x40052000
1a001024:	40051000 	.word	0x40051000

1a001028 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001028:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00102c:	d309      	bcc.n	1a001042 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00102e:	4a09      	ldr	r2, [pc, #36]	; (1a001054 <Chip_Clock_Enable+0x2c>)
1a001030:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001034:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001038:	f043 0301 	orr.w	r3, r3, #1
1a00103c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001040:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001042:	4a05      	ldr	r2, [pc, #20]	; (1a001058 <Chip_Clock_Enable+0x30>)
1a001044:	3020      	adds	r0, #32
1a001046:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00104a:	f043 0301 	orr.w	r3, r3, #1
1a00104e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001052:	4770      	bx	lr
1a001054:	40052000 	.word	0x40052000
1a001058:	40051000 	.word	0x40051000

1a00105c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00105c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00105e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001062:	d309      	bcc.n	1a001078 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001064:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001068:	4a0d      	ldr	r2, [pc, #52]	; (1a0010a0 <Chip_Clock_GetRate+0x44>)
1a00106a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00106e:	f014 0f01 	tst.w	r4, #1
1a001072:	d107      	bne.n	1a001084 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001074:	2000      	movs	r0, #0
	}

	return rate;
}
1a001076:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001078:	f100 0320 	add.w	r3, r0, #32
1a00107c:	4a09      	ldr	r2, [pc, #36]	; (1a0010a4 <Chip_Clock_GetRate+0x48>)
1a00107e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001082:	e7f4      	b.n	1a00106e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001084:	f7ff fe20 	bl	1a000cc8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001088:	f7ff ffa9 	bl	1a000fde <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00108c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001090:	d103      	bne.n	1a00109a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001092:	2301      	movs	r3, #1
		rate = rate / div;
1a001094:	fbb0 f0f3 	udiv	r0, r0, r3
1a001098:	e7ed      	b.n	1a001076 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00109a:	2302      	movs	r3, #2
1a00109c:	e7fa      	b.n	1a001094 <Chip_Clock_GetRate+0x38>
1a00109e:	bf00      	nop
1a0010a0:	40052000 	.word	0x40052000
1a0010a4:	40051000 	.word	0x40051000

1a0010a8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0010a8:	b570      	push	{r4, r5, r6, lr}
1a0010aa:	b08a      	sub	sp, #40	; 0x28
1a0010ac:	4605      	mov	r5, r0
1a0010ae:	460e      	mov	r6, r1
1a0010b0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0010b2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0010b6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0010b8:	2806      	cmp	r0, #6
1a0010ba:	d018      	beq.n	1a0010ee <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0010bc:	2300      	movs	r3, #0
1a0010be:	2201      	movs	r2, #1
1a0010c0:	4629      	mov	r1, r5
1a0010c2:	2004      	movs	r0, #4
1a0010c4:	f7ff ff4c 	bl	1a000f60 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0010c8:	4a4a      	ldr	r2, [pc, #296]	; (1a0011f4 <Chip_SetupCoreClock+0x14c>)
1a0010ca:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0010cc:	f043 0301 	orr.w	r3, r3, #1
1a0010d0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0010d2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0010d6:	a901      	add	r1, sp, #4
1a0010d8:	4630      	mov	r0, r6
1a0010da:	f7ff feb9 	bl	1a000e50 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0010de:	4b46      	ldr	r3, [pc, #280]	; (1a0011f8 <Chip_SetupCoreClock+0x150>)
1a0010e0:	429e      	cmp	r6, r3
1a0010e2:	d916      	bls.n	1a001112 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0010e4:	9b01      	ldr	r3, [sp, #4]
1a0010e6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0010ea:	d003      	beq.n	1a0010f4 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0010ec:	e7fe      	b.n	1a0010ec <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0010ee:	f7ff fe11 	bl	1a000d14 <Chip_Clock_EnableCrystal>
1a0010f2:	e7e3      	b.n	1a0010bc <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0010f4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0010f8:	d005      	beq.n	1a001106 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0010fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0010fe:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001100:	2500      	movs	r5, #0
			direct = 1;
1a001102:	2601      	movs	r6, #1
1a001104:	e007      	b.n	1a001116 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001106:	9b04      	ldr	r3, [sp, #16]
1a001108:	3301      	adds	r3, #1
1a00110a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00110c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00110e:	2600      	movs	r6, #0
1a001110:	e001      	b.n	1a001116 <Chip_SetupCoreClock+0x6e>
1a001112:	2500      	movs	r5, #0
1a001114:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001116:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00111a:	9b01      	ldr	r3, [sp, #4]
1a00111c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001120:	9a05      	ldr	r2, [sp, #20]
1a001122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001126:	9a03      	ldr	r2, [sp, #12]
1a001128:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00112c:	9a04      	ldr	r2, [sp, #16]
1a00112e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001132:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001136:	4a2f      	ldr	r2, [pc, #188]	; (1a0011f4 <Chip_SetupCoreClock+0x14c>)
1a001138:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00113a:	4b2e      	ldr	r3, [pc, #184]	; (1a0011f4 <Chip_SetupCoreClock+0x14c>)
1a00113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00113e:	f013 0f01 	tst.w	r3, #1
1a001142:	d0fa      	beq.n	1a00113a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001144:	2300      	movs	r3, #0
1a001146:	2201      	movs	r2, #1
1a001148:	2109      	movs	r1, #9
1a00114a:	2004      	movs	r0, #4
1a00114c:	f7ff ff08 	bl	1a000f60 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001150:	b306      	cbz	r6, 1a001194 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001152:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001156:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001158:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00115a:	1e5a      	subs	r2, r3, #1
1a00115c:	9209      	str	r2, [sp, #36]	; 0x24
1a00115e:	2b00      	cmp	r3, #0
1a001160:	d1fa      	bne.n	1a001158 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001162:	9b01      	ldr	r3, [sp, #4]
1a001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001168:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00116a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00116e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001172:	9a05      	ldr	r2, [sp, #20]
1a001174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001178:	9a03      	ldr	r2, [sp, #12]
1a00117a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00117e:	9a04      	ldr	r2, [sp, #16]
1a001180:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001188:	4a1a      	ldr	r2, [pc, #104]	; (1a0011f4 <Chip_SetupCoreClock+0x14c>)
1a00118a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00118c:	2c00      	cmp	r4, #0
1a00118e:	d12e      	bne.n	1a0011ee <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001190:	b00a      	add	sp, #40	; 0x28
1a001192:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001194:	2d00      	cmp	r5, #0
1a001196:	d0f9      	beq.n	1a00118c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001198:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00119c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00119e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0011a0:	1e5a      	subs	r2, r3, #1
1a0011a2:	9209      	str	r2, [sp, #36]	; 0x24
1a0011a4:	2b00      	cmp	r3, #0
1a0011a6:	d1fa      	bne.n	1a00119e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0011a8:	9b04      	ldr	r3, [sp, #16]
1a0011aa:	1e5a      	subs	r2, r3, #1
1a0011ac:	9204      	str	r2, [sp, #16]
1a0011ae:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0011b2:	9b01      	ldr	r3, [sp, #4]
1a0011b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0011b8:	9905      	ldr	r1, [sp, #20]
1a0011ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0011be:	9903      	ldr	r1, [sp, #12]
1a0011c0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0011c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011cc:	4a09      	ldr	r2, [pc, #36]	; (1a0011f4 <Chip_SetupCoreClock+0x14c>)
1a0011ce:	6453      	str	r3, [r2, #68]	; 0x44
1a0011d0:	e7dc      	b.n	1a00118c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0011d2:	480a      	ldr	r0, [pc, #40]	; (1a0011fc <Chip_SetupCoreClock+0x154>)
1a0011d4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0011d8:	78cb      	ldrb	r3, [r1, #3]
1a0011da:	788a      	ldrb	r2, [r1, #2]
1a0011dc:	7849      	ldrb	r1, [r1, #1]
1a0011de:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0011e2:	f7ff febd 	bl	1a000f60 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0011e6:	3401      	adds	r4, #1
1a0011e8:	2c11      	cmp	r4, #17
1a0011ea:	d9f2      	bls.n	1a0011d2 <Chip_SetupCoreClock+0x12a>
1a0011ec:	e7d0      	b.n	1a001190 <Chip_SetupCoreClock+0xe8>
1a0011ee:	2400      	movs	r4, #0
1a0011f0:	e7fa      	b.n	1a0011e8 <Chip_SetupCoreClock+0x140>
1a0011f2:	bf00      	nop
1a0011f4:	40050000 	.word	0x40050000
1a0011f8:	068e7780 	.word	0x068e7780
1a0011fc:	1a007b58 	.word	0x1a007b58

1a001200 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001200:	4770      	bx	lr
1a001202:	Address 0x000000001a001202 is out of bounds.


1a001204 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001204:	2901      	cmp	r1, #1
1a001206:	d109      	bne.n	1a00121c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001208:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00120c:	0082      	lsls	r2, r0, #2
1a00120e:	4b04      	ldr	r3, [pc, #16]	; (1a001220 <Chip_I2C_EventHandler+0x1c>)
1a001210:	4413      	add	r3, r2
1a001212:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001214:	7d13      	ldrb	r3, [r2, #20]
1a001216:	b2db      	uxtb	r3, r3
1a001218:	2b04      	cmp	r3, #4
1a00121a:	d0fb      	beq.n	1a001214 <Chip_I2C_EventHandler+0x10>
}
1a00121c:	4770      	bx	lr
1a00121e:	bf00      	nop
1a001220:	10000000 	.word	0x10000000

1a001224 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001224:	b570      	push	{r4, r5, r6, lr}
1a001226:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001228:	4e06      	ldr	r6, [pc, #24]	; (1a001244 <Chip_I2C_Init+0x20>)
1a00122a:	00c4      	lsls	r4, r0, #3
1a00122c:	1a22      	subs	r2, r4, r0
1a00122e:	0093      	lsls	r3, r2, #2
1a001230:	4433      	add	r3, r6
1a001232:	8898      	ldrh	r0, [r3, #4]
1a001234:	f7ff fef8 	bl	1a001028 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001238:	1b64      	subs	r4, r4, r5
1a00123a:	00a3      	lsls	r3, r4, #2
1a00123c:	58f3      	ldr	r3, [r6, r3]
1a00123e:	226c      	movs	r2, #108	; 0x6c
1a001240:	619a      	str	r2, [r3, #24]
}
1a001242:	bd70      	pop	{r4, r5, r6, pc}
1a001244:	10000000 	.word	0x10000000

1a001248 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00124c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00124e:	4e0b      	ldr	r6, [pc, #44]	; (1a00127c <Chip_I2C_SetClockRate+0x34>)
1a001250:	00c5      	lsls	r5, r0, #3
1a001252:	1a2b      	subs	r3, r5, r0
1a001254:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001258:	eb06 0308 	add.w	r3, r6, r8
1a00125c:	8898      	ldrh	r0, [r3, #4]
1a00125e:	f7ff fefd 	bl	1a00105c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001262:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001266:	f856 3008 	ldr.w	r3, [r6, r8]
1a00126a:	0842      	lsrs	r2, r0, #1
1a00126c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00126e:	f856 3008 	ldr.w	r3, [r6, r8]
1a001272:	691a      	ldr	r2, [r3, #16]
1a001274:	1a80      	subs	r0, r0, r2
1a001276:	6158      	str	r0, [r3, #20]
}
1a001278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00127c:	10000000 	.word	0x10000000

1a001280 <configDMAMux>:
/* Control which set of peripherals is connected to the DMA controller */
STATIC uint8_t configDMAMux(uint32_t gpdma_peripheral_connection_number)
{
	uint8_t function, channel;

	switch (gpdma_peripheral_connection_number) {
1a001280:	1e43      	subs	r3, r0, #1
1a001282:	2b1c      	cmp	r3, #28
1a001284:	d864      	bhi.n	1a001350 <configDMAMux+0xd0>
1a001286:	e8df f003 	tbb	[pc, r3]
1a00128a:	660f      	.short	0x660f
1a00128c:	1b181512 	.word	0x1b181512
1a001290:	2d2a2421 	.word	0x2d2a2421
1a001294:	39363330 	.word	0x39363330
1a001298:	45423f3c 	.word	0x45423f3c
1a00129c:	514e4b48 	.word	0x514e4b48
1a0012a0:	5d5a5754 	.word	0x5d5a5754
1a0012a4:	1e60      	.short	0x1e60
1a0012a6:	27          	.byte	0x27
1a0012a7:	00          	.byte	0x00
	case GPDMA_CONN_MAT0_0:
		function = 0;
		channel = 1;
1a0012a8:	2201      	movs	r2, #1
		function = 0;
1a0012aa:	2300      	movs	r3, #0
1a0012ac:	e055      	b.n	1a00135a <configDMAMux+0xda>
		channel = 1;
		break;

	case GPDMA_CONN_MAT0_1:
		function = 0;
		channel = 2;
1a0012ae:	2202      	movs	r2, #2
		function = 0;
1a0012b0:	2300      	movs	r3, #0
		break;
1a0012b2:	e052      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_UART0_Rx:
		function = 1;
		channel = 2;
1a0012b4:	2202      	movs	r2, #2
		function = 1;
1a0012b6:	2301      	movs	r3, #1
		break;
1a0012b8:	e04f      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_MAT1_0:
		function = 0;
		channel = 3;
1a0012ba:	2203      	movs	r2, #3
		function = 0;
1a0012bc:	2300      	movs	r3, #0
		break;
1a0012be:	e04c      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_UART1_Tx:
		function = 1;
		channel = 3;
1a0012c0:	2203      	movs	r2, #3
		function = 1;
1a0012c2:	2301      	movs	r3, #1
		break;
1a0012c4:	e049      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_I2S1_Tx_Channel_0:
		function = 2;
		channel = 3;
1a0012c6:	2203      	movs	r2, #3
		function = 2;
1a0012c8:	2302      	movs	r3, #2
		break;
1a0012ca:	e046      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_MAT1_1:
		function = 0;
		channel = 4;
1a0012cc:	2204      	movs	r2, #4
		function = 0;
1a0012ce:	2300      	movs	r3, #0
		break;
1a0012d0:	e043      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_UART1_Rx:
		function = 1;
		channel = 4;
1a0012d2:	2204      	movs	r2, #4
		function = 1;
1a0012d4:	2301      	movs	r3, #1
		break;
1a0012d6:	e040      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_I2S1_Rx_Channel_1:
		function = 2;
		channel =  4;
1a0012d8:	2204      	movs	r2, #4
		function = 2;
1a0012da:	2302      	movs	r3, #2
		break;
1a0012dc:	e03d      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_MAT2_0:
		function = 0;
		channel = 5;
1a0012de:	2205      	movs	r2, #5
		function = 0;
1a0012e0:	2300      	movs	r3, #0
		break;
1a0012e2:	e03a      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_UART2_Tx:
		function = 1;
		channel = 5;
1a0012e4:	2205      	movs	r2, #5
		function = 1;
1a0012e6:	2301      	movs	r3, #1
		break;
1a0012e8:	e037      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_MAT2_1:
		function = 0;
		channel = 6;
1a0012ea:	2206      	movs	r2, #6
		function = 0;
1a0012ec:	2300      	movs	r3, #0
		break;
1a0012ee:	e034      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_UART2_Rx:
		function = 1;
		channel = 6;
1a0012f0:	2206      	movs	r2, #6
		function = 1;
1a0012f2:	2301      	movs	r3, #1
		break;
1a0012f4:	e031      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_MAT3_0:
		function = 0;
		channel = 7;
1a0012f6:	2207      	movs	r2, #7
		function = 0;
1a0012f8:	2300      	movs	r3, #0
		break;
1a0012fa:	e02e      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_UART3_Tx:
		function = 1;
		channel = 7;
1a0012fc:	2207      	movs	r2, #7
		function = 1;
1a0012fe:	2301      	movs	r3, #1
		break;
1a001300:	e02b      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_SCT_0:
		function = 2;
		channel = 7;
1a001302:	2207      	movs	r2, #7
		function = 2;
1a001304:	2302      	movs	r3, #2
		break;
1a001306:	e028      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_MAT3_1:
		function = 0;
		channel = 8;
1a001308:	2208      	movs	r2, #8
		function = 0;
1a00130a:	2300      	movs	r3, #0
		break;
1a00130c:	e025      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_UART3_Rx:
		function = 1;
		channel = 8;
1a00130e:	2208      	movs	r2, #8
		function = 1;
1a001310:	2301      	movs	r3, #1
		break;
1a001312:	e022      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_SCT_1:
		function = 2;
		channel = 8;
1a001314:	2208      	movs	r2, #8
		function = 2;
1a001316:	2302      	movs	r3, #2
		break;
1a001318:	e01f      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_SSP0_Rx:
		function = 0;
		channel = 9;
1a00131a:	2209      	movs	r2, #9
		function = 0;
1a00131c:	2300      	movs	r3, #0
		break;
1a00131e:	e01c      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_I2S_Tx_Channel_0:
		function = 1;
		channel = 9;
1a001320:	2209      	movs	r2, #9
		function = 1;
1a001322:	2301      	movs	r3, #1
		break;
1a001324:	e019      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_SSP0_Tx:
		function = 0;
		channel = 10;
1a001326:	220a      	movs	r2, #10
		function = 0;
1a001328:	2300      	movs	r3, #0
		break;
1a00132a:	e016      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_I2S_Rx_Channel_1:
		function = 1;
		channel = 10;
1a00132c:	220a      	movs	r2, #10
		function = 1;
1a00132e:	2301      	movs	r3, #1
		break;
1a001330:	e013      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_SSP1_Rx:
		function = 0;
		channel = 11;
1a001332:	220b      	movs	r2, #11
		function = 0;
1a001334:	2300      	movs	r3, #0
		break;
1a001336:	e010      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_SSP1_Tx:
		function = 0;
		channel = 12;
1a001338:	220c      	movs	r2, #12
		function = 0;
1a00133a:	2300      	movs	r3, #0
		break;
1a00133c:	e00d      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_ADC_0:
		function = 0;
		channel = 13;
1a00133e:	220d      	movs	r2, #13
		function = 0;
1a001340:	2300      	movs	r3, #0
		break;
1a001342:	e00a      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_ADC_1:
		function = 0;
		channel = 14;
1a001344:	220e      	movs	r2, #14
		function = 0;
1a001346:	2300      	movs	r3, #0
		break;
1a001348:	e007      	b.n	1a00135a <configDMAMux+0xda>

	case GPDMA_CONN_DAC:
		function = 0;
		channel = 15;
1a00134a:	220f      	movs	r2, #15
		function = 0;
1a00134c:	2300      	movs	r3, #0
		break;
1a00134e:	e004      	b.n	1a00135a <configDMAMux+0xda>

	default:
		function = 3;
		channel = 15;
1a001350:	220f      	movs	r2, #15
		function = 3;
1a001352:	2303      	movs	r3, #3
		break;
1a001354:	e001      	b.n	1a00135a <configDMAMux+0xda>
		channel = 1;
1a001356:	2201      	movs	r2, #1
		function = 1;
1a001358:	4613      	mov	r3, r2
	}
	/* Set select function to dmamux register */
	if (0 != gpdma_peripheral_connection_number) {
1a00135a:	b178      	cbz	r0, 1a00137c <configDMAMux+0xfc>
{
1a00135c:	b430      	push	{r4, r5}
		uint32_t temp;
		temp = LPC_CREG->DMAMUX & (~(0x03 << (2 * channel)));
1a00135e:	4c08      	ldr	r4, [pc, #32]	; (1a001380 <configDMAMux+0x100>)
1a001360:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
1a001364:	0055      	lsls	r5, r2, #1
1a001366:	2003      	movs	r0, #3
1a001368:	40a8      	lsls	r0, r5
1a00136a:	ea21 0100 	bic.w	r1, r1, r0
		LPC_CREG->DMAMUX = temp | (function << (2 * channel));
1a00136e:	40ab      	lsls	r3, r5
1a001370:	430b      	orrs	r3, r1
1a001372:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	}
	return channel;
}
1a001376:	4610      	mov	r0, r2
1a001378:	bc30      	pop	{r4, r5}
1a00137a:	4770      	bx	lr
1a00137c:	4610      	mov	r0, r2
1a00137e:	4770      	bx	lr
1a001380:	40043000 	.word	0x40043000

1a001384 <makeCtrlWord>:
uint32_t makeCtrlWord(const GPDMA_CH_CFG_T *GPDMAChannelConfig,
					  uint32_t GPDMA_LUTPerBurstSrcConn,
					  uint32_t GPDMA_LUTPerBurstDstConn,
					  uint32_t GPDMA_LUTPerWidSrcConn,
					  uint32_t GPDMA_LUTPerWidDstConn)
{
1a001384:	b410      	push	{r4}
	uint32_t ctrl_word = 0;

	switch (GPDMAChannelConfig->TransferType) {
1a001386:	6944      	ldr	r4, [r0, #20]
1a001388:	2c07      	cmp	r4, #7
1a00138a:	d85d      	bhi.n	1a001448 <makeCtrlWord+0xc4>
1a00138c:	e8df f004 	tbb	[pc, r4]
1a001390:	452f1704 	.word	0x452f1704
1a001394:	452f1745 	.word	0x452f1745
	/* Memory to memory */
	case GPDMA_TRANSFERTYPE_M2M_CONTROLLER_DMA:
		ctrl_word = GPDMA_DMACCxControl_TransferSize(GPDMAChannelConfig->TransferSize)
1a001398:	6843      	ldr	r3, [r0, #4]
1a00139a:	f3c3 030b 	ubfx	r3, r3, #0, #12
					| GPDMA_DMACCxControl_SBSize((4UL))				/**< Burst size = 32 */
					| GPDMA_DMACCxControl_DBSize((4UL))				/**< Burst size = 32 */
					| GPDMA_DMACCxControl_SWidth(GPDMAChannelConfig->TransferWidth)
1a00139e:	6882      	ldr	r2, [r0, #8]
1a0013a0:	0490      	lsls	r0, r2, #18
1a0013a2:	f400 10e0 	and.w	r0, r0, #1835008	; 0x1c0000
1a0013a6:	4303      	orrs	r3, r0
					| GPDMA_DMACCxControl_DWidth(GPDMAChannelConfig->TransferWidth)
1a0013a8:	0550      	lsls	r0, r2, #21
1a0013aa:	f400 0060 	and.w	r0, r0, #14680064	; 0xe00000
1a0013ae:	4318      	orrs	r0, r3
		ctrl_word = GPDMA_DMACCxControl_TransferSize(GPDMAChannelConfig->TransferSize)
1a0013b0:	f040 400c 	orr.w	r0, r0, #2348810240	; 0x8c000000
1a0013b4:	f440 3010 	orr.w	r0, r0, #147456	; 0x24000
	/* Do not support any more transfer type, return ERROR */
	default:
		return ERROR;
	}
	return ctrl_word;
}
1a0013b8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0013bc:	4770      	bx	lr
		ctrl_word = GPDMA_DMACCxControl_TransferSize((uint32_t) GPDMAChannelConfig->TransferSize)
1a0013be:	6843      	ldr	r3, [r0, #4]
1a0013c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
					| GPDMA_DMACCxControl_SBSize(GPDMA_LUTPerBurstDstConn)
1a0013c4:	0311      	lsls	r1, r2, #12
1a0013c6:	f401 41e0 	and.w	r1, r1, #28672	; 0x7000
1a0013ca:	430b      	orrs	r3, r1
					| GPDMA_DMACCxControl_DBSize(GPDMA_LUTPerBurstDstConn)
1a0013cc:	03d0      	lsls	r0, r2, #15
1a0013ce:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
1a0013d2:	4318      	orrs	r0, r3
					| GPDMA_DMACCxControl_SWidth(GPDMA_LUTPerWidDstConn)
1a0013d4:	9b01      	ldr	r3, [sp, #4]
1a0013d6:	049b      	lsls	r3, r3, #18
1a0013d8:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
1a0013dc:	4318      	orrs	r0, r3
					| GPDMA_DMACCxControl_DWidth(GPDMA_LUTPerWidDstConn)
1a0013de:	9b01      	ldr	r3, [sp, #4]
1a0013e0:	055b      	lsls	r3, r3, #21
1a0013e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
1a0013e6:	4318      	orrs	r0, r3
		ctrl_word = GPDMA_DMACCxControl_TransferSize((uint32_t) GPDMAChannelConfig->TransferSize)
1a0013e8:	f040 4006 	orr.w	r0, r0, #2248146944	; 0x86000000
		break;
1a0013ec:	e7e4      	b.n	1a0013b8 <makeCtrlWord+0x34>
		ctrl_word = GPDMA_DMACCxControl_TransferSize((uint32_t) GPDMAChannelConfig->TransferSize)
1a0013ee:	6842      	ldr	r2, [r0, #4]
1a0013f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
					| GPDMA_DMACCxControl_SBSize(GPDMA_LUTPerBurstSrcConn)
1a0013f4:	0308      	lsls	r0, r1, #12
1a0013f6:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
1a0013fa:	4302      	orrs	r2, r0
					| GPDMA_DMACCxControl_DBSize(GPDMA_LUTPerBurstSrcConn)
1a0013fc:	03c9      	lsls	r1, r1, #15
1a0013fe:	f401 3160 	and.w	r1, r1, #229376	; 0x38000
1a001402:	430a      	orrs	r2, r1
					| GPDMA_DMACCxControl_SWidth(GPDMA_LUTPerWidSrcConn)
1a001404:	0498      	lsls	r0, r3, #18
1a001406:	f400 10e0 	and.w	r0, r0, #1835008	; 0x1c0000
1a00140a:	4302      	orrs	r2, r0
					| GPDMA_DMACCxControl_DWidth(GPDMA_LUTPerWidSrcConn)
1a00140c:	0558      	lsls	r0, r3, #21
1a00140e:	f400 0060 	and.w	r0, r0, #14680064	; 0xe00000
1a001412:	4310      	orrs	r0, r2
		ctrl_word = GPDMA_DMACCxControl_TransferSize((uint32_t) GPDMAChannelConfig->TransferSize)
1a001414:	f040 4009 	orr.w	r0, r0, #2298478592	; 0x89000000
		break;
1a001418:	e7ce      	b.n	1a0013b8 <makeCtrlWord+0x34>
		ctrl_word = GPDMA_DMACCxControl_TransferSize((uint32_t) GPDMAChannelConfig->TransferSize)
1a00141a:	6840      	ldr	r0, [r0, #4]
1a00141c:	f3c0 000b 	ubfx	r0, r0, #0, #12
					| GPDMA_DMACCxControl_SBSize(GPDMA_LUTPerBurstSrcConn)
1a001420:	0309      	lsls	r1, r1, #12
1a001422:	f401 41e0 	and.w	r1, r1, #28672	; 0x7000
1a001426:	4308      	orrs	r0, r1
					| GPDMA_DMACCxControl_DBSize(GPDMA_LUTPerBurstDstConn)
1a001428:	03d2      	lsls	r2, r2, #15
1a00142a:	f402 3260 	and.w	r2, r2, #229376	; 0x38000
1a00142e:	4310      	orrs	r0, r2
					| GPDMA_DMACCxControl_SWidth(GPDMA_LUTPerWidSrcConn)
1a001430:	049b      	lsls	r3, r3, #18
1a001432:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
1a001436:	4318      	orrs	r0, r3
					| GPDMA_DMACCxControl_DWidth(GPDMA_LUTPerWidDstConn)
1a001438:	9b01      	ldr	r3, [sp, #4]
1a00143a:	055b      	lsls	r3, r3, #21
1a00143c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
1a001440:	4318      	orrs	r0, r3
		ctrl_word = GPDMA_DMACCxControl_TransferSize((uint32_t) GPDMAChannelConfig->TransferSize)
1a001442:	f040 4003 	orr.w	r0, r0, #2197815296	; 0x83000000
		break;
1a001446:	e7b7      	b.n	1a0013b8 <makeCtrlWord+0x34>
		return ERROR;
1a001448:	2000      	movs	r0, #0
1a00144a:	e7b5      	b.n	1a0013b8 <makeCtrlWord+0x34>

1a00144c <setupChannel>:
					GPDMA_CH_CFG_T *GPDMAChannelConfig,
					uint32_t CtrlWord,
					uint32_t LinkListItem,
					uint8_t SrcPeripheral,
					uint8_t DstPeripheral)
{
1a00144c:	b470      	push	{r4, r5, r6}
	GPDMA_CH_T *pDMAch;

	if (pGPDMA->ENBLDCHNS & ((((1UL << (GPDMAChannelConfig->ChannelNum)) & 0xFF)))) {
1a00144e:	69c6      	ldr	r6, [r0, #28]
1a001450:	680d      	ldr	r5, [r1, #0]
1a001452:	2401      	movs	r4, #1
1a001454:	40ac      	lsls	r4, r5
1a001456:	4026      	ands	r6, r4
1a001458:	f016 0fff 	tst.w	r6, #255	; 0xff
1a00145c:	d133      	bne.n	1a0014c6 <setupChannel+0x7a>

	/* Get Channel pointer */
	pDMAch = (GPDMA_CH_T *) &(pGPDMA->CH[GPDMAChannelConfig->ChannelNum]);

	/* Reset the Interrupt status */
	pGPDMA->INTTCCLEAR = (((1UL << (GPDMAChannelConfig->ChannelNum)) & 0xFF));
1a00145e:	b2e4      	uxtb	r4, r4
1a001460:	6084      	str	r4, [r0, #8]
	pGPDMA->INTERRCLR = (((1UL << (GPDMAChannelConfig->ChannelNum)) & 0xFF));
1a001462:	680c      	ldr	r4, [r1, #0]
1a001464:	2601      	movs	r6, #1
1a001466:	fa06 f404 	lsl.w	r4, r6, r4
1a00146a:	b2e4      	uxtb	r4, r4
1a00146c:	6104      	str	r4, [r0, #16]

	/* Assign Linker List Item value */
	pDMAch->LLI = LinkListItem;
1a00146e:	eb00 1445 	add.w	r4, r0, r5, lsl #5
1a001472:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	/* Enable DMA channels, little endian */
	pGPDMA->CONFIG = GPDMA_DMACConfig_E;
1a001476:	6306      	str	r6, [r0, #48]	; 0x30
	while (!(pGPDMA->CONFIG & GPDMA_DMACConfig_E)) {}
1a001478:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00147a:	f013 0f01 	tst.w	r3, #1
1a00147e:	d0fb      	beq.n	1a001478 <setupChannel+0x2c>

	pDMAch->SRCADDR = GPDMAChannelConfig->SrcAddr;
1a001480:	68ce      	ldr	r6, [r1, #12]
1a001482:	f105 0308 	add.w	r3, r5, #8
1a001486:	015b      	lsls	r3, r3, #5
1a001488:	18c4      	adds	r4, r0, r3
1a00148a:	50c6      	str	r6, [r0, r3]
	pDMAch->DESTADDR = GPDMAChannelConfig->DstAddr;
1a00148c:	690b      	ldr	r3, [r1, #16]
1a00148e:	6063      	str	r3, [r4, #4]

	/* Configure DMA Channel, enable Error Counter and Terminate counter */
	pDMAch->CONFIG = GPDMA_DMACCxConfig_IE
					 | GPDMA_DMACCxConfig_ITC		/*| GPDMA_DMACCxConfig_E*/
					 | GPDMA_DMACCxConfig_TransferType((uint32_t) GPDMAChannelConfig->TransferType)
1a001490:	694b      	ldr	r3, [r1, #20]
1a001492:	02db      	lsls	r3, r3, #11
1a001494:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
					 | GPDMA_DMACCxConfig_SrcPeripheral(SrcPeripheral)
1a001498:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00149c:	0049      	lsls	r1, r1, #1
1a00149e:	f001 013e 	and.w	r1, r1, #62	; 0x3e
1a0014a2:	430b      	orrs	r3, r1
					 | GPDMA_DMACCxConfig_DestPeripheral(DstPeripheral);
1a0014a4:	f89d 1010 	ldrb.w	r1, [sp, #16]
1a0014a8:	0189      	lsls	r1, r1, #6
1a0014aa:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
1a0014ae:	430b      	orrs	r3, r1
1a0014b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
	pDMAch->CONFIG = GPDMA_DMACCxConfig_IE
1a0014b4:	eb00 1045 	add.w	r0, r0, r5, lsl #5
1a0014b8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110

	pDMAch->CONTROL = CtrlWord;
1a0014bc:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c

	return SUCCESS;
1a0014c0:	2001      	movs	r0, #1
}
1a0014c2:	bc70      	pop	{r4, r5, r6}
1a0014c4:	4770      	bx	lr
		return ERROR;
1a0014c6:	2000      	movs	r0, #0
1a0014c8:	e7fb      	b.n	1a0014c2 <setupChannel+0x76>
1a0014ca:	Address 0x000000001a0014ca is out of bounds.


1a0014cc <Chip_GPDMA_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the GPDMA */
void Chip_GPDMA_Init(LPC_GPDMA_T *pGPDMA)
{
1a0014cc:	b510      	push	{r4, lr}
1a0014ce:	4604      	mov	r4, r0
	uint8_t i;

	Chip_Clock_EnableOpts(CLK_MX_DMA, true, true, 1);
1a0014d0:	2301      	movs	r3, #1
1a0014d2:	461a      	mov	r2, r3
1a0014d4:	4619      	mov	r1, r3
1a0014d6:	2068      	movs	r0, #104	; 0x68
1a0014d8:	f7ff fd88 	bl	1a000fec <Chip_Clock_EnableOpts>

	/* Reset all channel configuration register */
	for (i = 8; i > 0; i--) {
1a0014dc:	2308      	movs	r3, #8
1a0014de:	e006      	b.n	1a0014ee <Chip_GPDMA_Init+0x22>
		pGPDMA->CH[i - 1].CONFIG = 0;
1a0014e0:	3b01      	subs	r3, #1
1a0014e2:	eb04 1243 	add.w	r2, r4, r3, lsl #5
1a0014e6:	2100      	movs	r1, #0
1a0014e8:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
	for (i = 8; i > 0; i--) {
1a0014ec:	b2db      	uxtb	r3, r3
1a0014ee:	2b00      	cmp	r3, #0
1a0014f0:	d1f6      	bne.n	1a0014e0 <Chip_GPDMA_Init+0x14>
	}

	/* Clear all DMA interrupt and error flag */
	pGPDMA->INTTCCLEAR = 0xFF;
1a0014f2:	22ff      	movs	r2, #255	; 0xff
1a0014f4:	60a2      	str	r2, [r4, #8]
	pGPDMA->INTERRCLR = 0xFF;
1a0014f6:	6122      	str	r2, [r4, #16]

	/* Reset all channels are free */
	for (i = 0; i < GPDMA_NUMBER_CHANNELS; i++) {
1a0014f8:	e004      	b.n	1a001504 <Chip_GPDMA_Init+0x38>
		ChannelHandlerArray[i].ChannelStatus = DISABLE;
1a0014fa:	4a04      	ldr	r2, [pc, #16]	; (1a00150c <Chip_GPDMA_Init+0x40>)
1a0014fc:	2100      	movs	r1, #0
1a0014fe:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < GPDMA_NUMBER_CHANNELS; i++) {
1a001500:	3301      	adds	r3, #1
1a001502:	b2db      	uxtb	r3, r3
1a001504:	2b07      	cmp	r3, #7
1a001506:	d9f8      	bls.n	1a0014fa <Chip_GPDMA_Init+0x2e>
	}
}
1a001508:	bd10      	pop	{r4, pc}
1a00150a:	bf00      	nop
1a00150c:	10000a08 	.word	0x10000a08

1a001510 <Chip_GPDMA_InitChannelCfg>:
							  uint8_t  ChannelNum,
							  uint32_t src,
							  uint32_t dst,
							  uint32_t Size,
							  GPDMA_FLOW_CONTROL_T TransferType)
{
1a001510:	b430      	push	{r4, r5}
1a001512:	9d02      	ldr	r5, [sp, #8]
1a001514:	9c03      	ldr	r4, [sp, #12]
1a001516:	f89d 0010 	ldrb.w	r0, [sp, #16]
	int rval = -1;
	GPDMACfg->ChannelNum = ChannelNum;
1a00151a:	600a      	str	r2, [r1, #0]
	GPDMACfg->TransferType = TransferType;
1a00151c:	6148      	str	r0, [r1, #20]
	GPDMACfg->TransferSize = Size;
1a00151e:	604c      	str	r4, [r1, #4]

	switch (TransferType) {
1a001520:	2807      	cmp	r0, #7
1a001522:	d825      	bhi.n	1a001570 <Chip_GPDMA_InitChannelCfg+0x60>
1a001524:	e8df f000 	tbb	[pc, r0]
1a001528:	1b140d04 	.word	0x1b140d04
1a00152c:	1b140d1b 	.word	0x1b140d1b
	case GPDMA_TRANSFERTYPE_M2M_CONTROLLER_DMA:
		GPDMACfg->SrcAddr = (uint32_t) src;
1a001530:	60cb      	str	r3, [r1, #12]
		GPDMACfg->DstAddr = (uint32_t) dst;
1a001532:	610d      	str	r5, [r1, #16]
		rval = 3;
		GPDMACfg->TransferWidth = GPDMA_WIDTH_WORD;
1a001534:	2302      	movs	r3, #2
1a001536:	608b      	str	r3, [r1, #8]
		GPDMACfg->TransferSize = Size / 4;
1a001538:	40dc      	lsrs	r4, r3
1a00153a:	604c      	str	r4, [r1, #4]
		rval = 3;
1a00153c:	2003      	movs	r0, #3

	default:
		break;
	}
	return rval;
}
1a00153e:	bc30      	pop	{r4, r5}
1a001540:	4770      	bx	lr
		GPDMACfg->SrcAddr = (uint32_t) src;
1a001542:	60cb      	str	r3, [r1, #12]
		GPDMACfg->DstAddr = (uint32_t) GPDMA_LUTPerAddr[dst];
1a001544:	4b0c      	ldr	r3, [pc, #48]	; (1a001578 <Chip_GPDMA_InitChannelCfg+0x68>)
1a001546:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
1a00154a:	610b      	str	r3, [r1, #16]
		rval = 1;
1a00154c:	2001      	movs	r0, #1
		break;
1a00154e:	e7f6      	b.n	1a00153e <Chip_GPDMA_InitChannelCfg+0x2e>
		GPDMACfg->SrcAddr = (uint32_t) GPDMA_LUTPerAddr[src];
1a001550:	4a09      	ldr	r2, [pc, #36]	; (1a001578 <Chip_GPDMA_InitChannelCfg+0x68>)
1a001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001556:	60cb      	str	r3, [r1, #12]
		GPDMACfg->DstAddr = (uint32_t) dst;
1a001558:	610d      	str	r5, [r1, #16]
		rval = 2;
1a00155a:	2002      	movs	r0, #2
		break;
1a00155c:	e7ef      	b.n	1a00153e <Chip_GPDMA_InitChannelCfg+0x2e>
		GPDMACfg->SrcAddr = (uint32_t) GPDMA_LUTPerAddr[src];
1a00155e:	4a06      	ldr	r2, [pc, #24]	; (1a001578 <Chip_GPDMA_InitChannelCfg+0x68>)
1a001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001564:	60cb      	str	r3, [r1, #12]
		GPDMACfg->DstAddr = (uint32_t) GPDMA_LUTPerAddr[dst];
1a001566:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
1a00156a:	610b      	str	r3, [r1, #16]
		rval = 0;
1a00156c:	2000      	movs	r0, #0
		break;
1a00156e:	e7e6      	b.n	1a00153e <Chip_GPDMA_InitChannelCfg+0x2e>
	int rval = -1;
1a001570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return rval;
1a001574:	e7e3      	b.n	1a00153e <Chip_GPDMA_InitChannelCfg+0x2e>
1a001576:	bf00      	nop
1a001578:	1a007ba0 	.word	0x1a007ba0

1a00157c <Chip_GPDMA_IntGetStatus>:
IntStatus Chip_GPDMA_IntGetStatus(LPC_GPDMA_T *pGPDMA, GPDMA_STATUS_T type, uint8_t channel)
{
	/**
	 * TODO check the channel <=8 type is exited
	 */
	switch (type) {
1a00157c:	2904      	cmp	r1, #4
1a00157e:	d827      	bhi.n	1a0015d0 <Chip_GPDMA_IntGetStatus+0x54>
1a001580:	e8df f001 	tbb	[pc, r1]
1a001584:	18110a03 	.word	0x18110a03
1a001588:	1f          	.byte	0x1f
1a001589:	00          	.byte	0x00
	case GPDMA_STAT_INT:/* check status of DMA channel interrupts */
		return (IntStatus) (pGPDMA->INTSTAT & (((1UL << channel) & 0xFF)));
1a00158a:	6800      	ldr	r0, [r0, #0]
1a00158c:	2301      	movs	r3, #1
1a00158e:	fa03 f202 	lsl.w	r2, r3, r2
1a001592:	4010      	ands	r0, r2
1a001594:	b2c0      	uxtb	r0, r0
1a001596:	4770      	bx	lr

	case GPDMA_STAT_INTTC:	/* check terminal count interrupt request status for DMA */
		return (IntStatus) (pGPDMA->INTTCSTAT & (((1UL << channel) & 0xFF)));
1a001598:	6840      	ldr	r0, [r0, #4]
1a00159a:	2301      	movs	r3, #1
1a00159c:	fa03 f202 	lsl.w	r2, r3, r2
1a0015a0:	4010      	ands	r0, r2
1a0015a2:	b2c0      	uxtb	r0, r0
1a0015a4:	4770      	bx	lr

	case GPDMA_STAT_INTERR:	/* check interrupt status for DMA channels */
		return (IntStatus) (pGPDMA->INTERRSTAT & (((1UL << channel) & 0xFF)));
1a0015a6:	68c0      	ldr	r0, [r0, #12]
1a0015a8:	2301      	movs	r3, #1
1a0015aa:	fa03 f202 	lsl.w	r2, r3, r2
1a0015ae:	4010      	ands	r0, r2
1a0015b0:	b2c0      	uxtb	r0, r0
1a0015b2:	4770      	bx	lr

	case GPDMA_STAT_RAWINTTC:	/* check status of the terminal count interrupt for DMA channels */
		return (IntStatus) (pGPDMA->RAWINTTCSTAT & (((1UL << channel) & 0xFF)));
1a0015b4:	6940      	ldr	r0, [r0, #20]
1a0015b6:	2301      	movs	r3, #1
1a0015b8:	fa03 f202 	lsl.w	r2, r3, r2
1a0015bc:	4010      	ands	r0, r2
1a0015be:	b2c0      	uxtb	r0, r0
1a0015c0:	4770      	bx	lr

	case GPDMA_STAT_RAWINTERR:	/* check status of the error interrupt for DMA channels */
		return (IntStatus) (pGPDMA->RAWINTERRSTAT & (((1UL << channel) & 0xFF)));
1a0015c2:	6980      	ldr	r0, [r0, #24]
1a0015c4:	2301      	movs	r3, #1
1a0015c6:	fa03 f202 	lsl.w	r2, r3, r2
1a0015ca:	4010      	ands	r0, r2
1a0015cc:	b2c0      	uxtb	r0, r0
1a0015ce:	4770      	bx	lr

	default:/* check enable status for DMA channels */
		return (IntStatus) (pGPDMA->ENBLDCHNS & (((1UL << channel) & 0xFF)));
1a0015d0:	69c3      	ldr	r3, [r0, #28]
1a0015d2:	2101      	movs	r1, #1
1a0015d4:	fa01 f202 	lsl.w	r2, r1, r2
1a0015d8:	4013      	ands	r3, r2
1a0015da:	b2d8      	uxtb	r0, r3
	}
}
1a0015dc:	4770      	bx	lr

1a0015de <Chip_GPDMA_ClearIntPending>:

/* Clear the Interrupt Flag from different registers according to the type */
void Chip_GPDMA_ClearIntPending(LPC_GPDMA_T *pGPDMA, GPDMA_STATECLEAR_T type, uint8_t channel)
{
	if (type == GPDMA_STATCLR_INTTC) {
1a0015de:	b921      	cbnz	r1, 1a0015ea <Chip_GPDMA_ClearIntPending+0xc>
		/* clears the terminal count interrupt request on DMA channel */
		pGPDMA->INTTCCLEAR = (((1UL << (channel)) & 0xFF));
1a0015e0:	2101      	movs	r1, #1
1a0015e2:	4091      	lsls	r1, r2
1a0015e4:	b2c9      	uxtb	r1, r1
1a0015e6:	6081      	str	r1, [r0, #8]
1a0015e8:	4770      	bx	lr
	}
	else {
		/* clear the error interrupt request */
		pGPDMA->INTERRCLR = (((1UL << (channel)) & 0xFF));
1a0015ea:	2301      	movs	r3, #1
1a0015ec:	4093      	lsls	r3, r2
1a0015ee:	b2db      	uxtb	r3, r3
1a0015f0:	6103      	str	r3, [r0, #16]
	}
}
1a0015f2:	4770      	bx	lr

1a0015f4 <Chip_GPDMA_Interrupt>:
{
1a0015f4:	b538      	push	{r3, r4, r5, lr}
1a0015f6:	4605      	mov	r5, r0
1a0015f8:	460c      	mov	r4, r1
	if (Chip_GPDMA_IntGetStatus(pGPDMA, GPDMA_STAT_INT, ChannelNum)) {
1a0015fa:	460a      	mov	r2, r1
1a0015fc:	2100      	movs	r1, #0
1a0015fe:	f7ff ffbd 	bl	1a00157c <Chip_GPDMA_IntGetStatus>
1a001602:	b908      	cbnz	r0, 1a001608 <Chip_GPDMA_Interrupt+0x14>
	return ERROR;
1a001604:	2000      	movs	r0, #0
}
1a001606:	bd38      	pop	{r3, r4, r5, pc}
		if (Chip_GPDMA_IntGetStatus(pGPDMA, GPDMA_STAT_INTTC, ChannelNum)) {
1a001608:	4622      	mov	r2, r4
1a00160a:	2101      	movs	r1, #1
1a00160c:	4628      	mov	r0, r5
1a00160e:	f7ff ffb5 	bl	1a00157c <Chip_GPDMA_IntGetStatus>
1a001612:	b938      	cbnz	r0, 1a001624 <Chip_GPDMA_Interrupt+0x30>
		if (Chip_GPDMA_IntGetStatus(pGPDMA, GPDMA_STAT_INTERR, ChannelNum)) {
1a001614:	4622      	mov	r2, r4
1a001616:	2102      	movs	r1, #2
1a001618:	4628      	mov	r0, r5
1a00161a:	f7ff ffaf 	bl	1a00157c <Chip_GPDMA_IntGetStatus>
1a00161e:	b940      	cbnz	r0, 1a001632 <Chip_GPDMA_Interrupt+0x3e>
	return ERROR;
1a001620:	2000      	movs	r0, #0
1a001622:	e7f0      	b.n	1a001606 <Chip_GPDMA_Interrupt+0x12>
			Chip_GPDMA_ClearIntPending(pGPDMA, GPDMA_STATCLR_INTTC, ChannelNum);
1a001624:	4622      	mov	r2, r4
1a001626:	2100      	movs	r1, #0
1a001628:	4628      	mov	r0, r5
1a00162a:	f7ff ffd8 	bl	1a0015de <Chip_GPDMA_ClearIntPending>
			return SUCCESS;
1a00162e:	2001      	movs	r0, #1
1a001630:	e7e9      	b.n	1a001606 <Chip_GPDMA_Interrupt+0x12>
			Chip_GPDMA_ClearIntPending(pGPDMA, GPDMA_STATCLR_INTERR, ChannelNum);
1a001632:	4622      	mov	r2, r4
1a001634:	2101      	movs	r1, #1
1a001636:	4628      	mov	r0, r5
1a001638:	f7ff ffd1 	bl	1a0015de <Chip_GPDMA_ClearIntPending>
			return ERROR;
1a00163c:	2000      	movs	r0, #0
1a00163e:	e7e2      	b.n	1a001606 <Chip_GPDMA_Interrupt+0x12>

1a001640 <Chip_GPDMA_ChannelCmd>:
	GPDMA_CH_T *pDMAch;

	/* Get Channel pointer */
	pDMAch = (GPDMA_CH_T *) &(pGPDMA->CH[channelNum]);

	if (NewState == ENABLE) {
1a001640:	2a01      	cmp	r2, #1
1a001642:	d008      	beq.n	1a001656 <Chip_GPDMA_ChannelCmd+0x16>
		pDMAch->CONFIG |= GPDMA_DMACCxConfig_E;
	}
	else {
		pDMAch->CONFIG &= ~GPDMA_DMACCxConfig_E;
1a001644:	eb00 1041 	add.w	r0, r0, r1, lsl #5
1a001648:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
1a00164c:	f023 0301 	bic.w	r3, r3, #1
1a001650:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	}
}
1a001654:	4770      	bx	lr
		pDMAch->CONFIG |= GPDMA_DMACCxConfig_E;
1a001656:	eb00 1041 	add.w	r0, r0, r1, lsl #5
1a00165a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
1a00165e:	f043 0301 	orr.w	r3, r3, #1
1a001662:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
1a001666:	4770      	bx	lr

1a001668 <Chip_GPDMA_Stop>:
{
1a001668:	b538      	push	{r3, r4, r5, lr}
1a00166a:	4605      	mov	r5, r0
1a00166c:	460c      	mov	r4, r1
	Chip_GPDMA_ChannelCmd(pGPDMA, (ChannelNum), DISABLE);
1a00166e:	2200      	movs	r2, #0
1a001670:	f7ff ffe6 	bl	1a001640 <Chip_GPDMA_ChannelCmd>
	if (Chip_GPDMA_IntGetStatus(pGPDMA, GPDMA_STAT_INTTC, ChannelNum)) {
1a001674:	4622      	mov	r2, r4
1a001676:	2101      	movs	r1, #1
1a001678:	4628      	mov	r0, r5
1a00167a:	f7ff ff7f 	bl	1a00157c <Chip_GPDMA_IntGetStatus>
1a00167e:	b948      	cbnz	r0, 1a001694 <Chip_GPDMA_Stop+0x2c>
	if (Chip_GPDMA_IntGetStatus(pGPDMA, GPDMA_STAT_INTERR, ChannelNum)) {
1a001680:	4622      	mov	r2, r4
1a001682:	2102      	movs	r1, #2
1a001684:	4628      	mov	r0, r5
1a001686:	f7ff ff79 	bl	1a00157c <Chip_GPDMA_IntGetStatus>
1a00168a:	b948      	cbnz	r0, 1a0016a0 <Chip_GPDMA_Stop+0x38>
	ChannelHandlerArray[ChannelNum].ChannelStatus = DISABLE;
1a00168c:	4b07      	ldr	r3, [pc, #28]	; (1a0016ac <Chip_GPDMA_Stop+0x44>)
1a00168e:	2200      	movs	r2, #0
1a001690:	551a      	strb	r2, [r3, r4]
}
1a001692:	bd38      	pop	{r3, r4, r5, pc}
		Chip_GPDMA_ClearIntPending(pGPDMA, GPDMA_STATCLR_INTTC, ChannelNum);
1a001694:	4622      	mov	r2, r4
1a001696:	2100      	movs	r1, #0
1a001698:	4628      	mov	r0, r5
1a00169a:	f7ff ffa0 	bl	1a0015de <Chip_GPDMA_ClearIntPending>
1a00169e:	e7ef      	b.n	1a001680 <Chip_GPDMA_Stop+0x18>
		Chip_GPDMA_ClearIntPending(pGPDMA, GPDMA_STATCLR_INTERR, ChannelNum);
1a0016a0:	4622      	mov	r2, r4
1a0016a2:	2101      	movs	r1, #1
1a0016a4:	4628      	mov	r0, r5
1a0016a6:	f7ff ff9a 	bl	1a0015de <Chip_GPDMA_ClearIntPending>
1a0016aa:	e7ef      	b.n	1a00168c <Chip_GPDMA_Stop+0x24>
1a0016ac:	10000a08 	.word	0x10000a08

1a0016b0 <Chip_GPDMA_Transfer>:
						   uint8_t ChannelNum,
						   uint32_t src,
						   uint32_t dst,
						   GPDMA_FLOW_CONTROL_T TransferType,
						   uint32_t Size)
{
1a0016b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0016b4:	b08b      	sub	sp, #44	; 0x2c
1a0016b6:	4680      	mov	r8, r0
1a0016b8:	460f      	mov	r7, r1
1a0016ba:	4614      	mov	r4, r2
1a0016bc:	461d      	mov	r5, r3
	GPDMA_CH_CFG_T GPDMACfg;
	uint8_t SrcPeripheral = 0, DstPeripheral = 0;
	uint32_t cwrd;
	int ret;

	ret = Chip_GPDMA_InitChannelCfg(pGPDMA, &GPDMACfg, ChannelNum, src, dst, Size, TransferType);
1a0016be:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
1a0016c2:	9302      	str	r3, [sp, #8]
1a0016c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0016c6:	9301      	str	r3, [sp, #4]
1a0016c8:	9500      	str	r5, [sp, #0]
1a0016ca:	4613      	mov	r3, r2
1a0016cc:	460a      	mov	r2, r1
1a0016ce:	a904      	add	r1, sp, #16
1a0016d0:	f7ff ff1e 	bl	1a001510 <Chip_GPDMA_InitChannelCfg>
	if (ret < 0) {
1a0016d4:	1e06      	subs	r6, r0, #0
1a0016d6:	db34      	blt.n	1a001742 <Chip_GPDMA_Transfer+0x92>
		return ERROR;
	}

	/* Adjust src/dst index if they are memory */
	if (ret & 1) {
1a0016d8:	f016 0f01 	tst.w	r6, #1
1a0016dc:	d020      	beq.n	1a001720 <Chip_GPDMA_Transfer+0x70>
	uint8_t SrcPeripheral = 0, DstPeripheral = 0;
1a0016de:	f04f 0900 	mov.w	r9, #0
		src = 0;
1a0016e2:	464c      	mov	r4, r9
	}
	else {
		SrcPeripheral = configDMAMux(src);
	}

	if (ret & 2) {
1a0016e4:	f016 0f02 	tst.w	r6, #2
1a0016e8:	d01f      	beq.n	1a00172a <Chip_GPDMA_Transfer+0x7a>
	uint8_t SrcPeripheral = 0, DstPeripheral = 0;
1a0016ea:	2600      	movs	r6, #0
		dst = 0;
1a0016ec:	4635      	mov	r5, r6
	else {
		DstPeripheral = configDMAMux(dst);
	}

	cwrd = makeCtrlWord(&GPDMACfg,
						(uint32_t) GPDMA_LUTPerBurst[src],
1a0016ee:	4916      	ldr	r1, [pc, #88]	; (1a001748 <Chip_GPDMA_Transfer+0x98>)
						(uint32_t) GPDMA_LUTPerBurst[dst],
						(uint32_t) GPDMA_LUTPerWid[src],
1a0016f0:	4b16      	ldr	r3, [pc, #88]	; (1a00174c <Chip_GPDMA_Transfer+0x9c>)
						(uint32_t) GPDMA_LUTPerWid[dst]);
1a0016f2:	5d5a      	ldrb	r2, [r3, r5]
	cwrd = makeCtrlWord(&GPDMACfg,
1a0016f4:	9200      	str	r2, [sp, #0]
1a0016f6:	5d1b      	ldrb	r3, [r3, r4]
1a0016f8:	5d4a      	ldrb	r2, [r1, r5]
1a0016fa:	5d09      	ldrb	r1, [r1, r4]
1a0016fc:	a804      	add	r0, sp, #16
1a0016fe:	f7ff fe41 	bl	1a001384 <makeCtrlWord>
	if (setupChannel(pGPDMA, &GPDMACfg, cwrd, 0, SrcPeripheral, DstPeripheral) == ERROR) {
1a001702:	9601      	str	r6, [sp, #4]
1a001704:	f8cd 9000 	str.w	r9, [sp]
1a001708:	2300      	movs	r3, #0
1a00170a:	4602      	mov	r2, r0
1a00170c:	a904      	add	r1, sp, #16
1a00170e:	4640      	mov	r0, r8
1a001710:	f7ff fe9c 	bl	1a00144c <setupChannel>
1a001714:	4603      	mov	r3, r0
1a001716:	b968      	cbnz	r0, 1a001734 <Chip_GPDMA_Transfer+0x84>
	}

	/* Start the Channel */
	Chip_GPDMA_ChannelCmd(pGPDMA, ChannelNum, ENABLE);
	return SUCCESS;
}
1a001718:	4618      	mov	r0, r3
1a00171a:	b00b      	add	sp, #44	; 0x2c
1a00171c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		SrcPeripheral = configDMAMux(src);
1a001720:	4620      	mov	r0, r4
1a001722:	f7ff fdad 	bl	1a001280 <configDMAMux>
1a001726:	4681      	mov	r9, r0
1a001728:	e7dc      	b.n	1a0016e4 <Chip_GPDMA_Transfer+0x34>
		DstPeripheral = configDMAMux(dst);
1a00172a:	4628      	mov	r0, r5
1a00172c:	f7ff fda8 	bl	1a001280 <configDMAMux>
1a001730:	4606      	mov	r6, r0
1a001732:	e7dc      	b.n	1a0016ee <Chip_GPDMA_Transfer+0x3e>
	Chip_GPDMA_ChannelCmd(pGPDMA, ChannelNum, ENABLE);
1a001734:	2201      	movs	r2, #1
1a001736:	4639      	mov	r1, r7
1a001738:	4640      	mov	r0, r8
1a00173a:	f7ff ff81 	bl	1a001640 <Chip_GPDMA_ChannelCmd>
	return SUCCESS;
1a00173e:	2301      	movs	r3, #1
1a001740:	e7ea      	b.n	1a001718 <Chip_GPDMA_Transfer+0x68>
		return ERROR;
1a001742:	2300      	movs	r3, #0
1a001744:	e7e8      	b.n	1a001718 <Chip_GPDMA_Transfer+0x68>
1a001746:	bf00      	nop
1a001748:	1a007c18 	.word	0x1a007c18
1a00174c:	1a007c38 	.word	0x1a007c38

1a001750 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001750:	4b03      	ldr	r3, [pc, #12]	; (1a001760 <Chip_SSP_GetClockIndex+0x10>)
1a001752:	4298      	cmp	r0, r3
1a001754:	d001      	beq.n	1a00175a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001756:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001758:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00175a:	20a5      	movs	r0, #165	; 0xa5
1a00175c:	4770      	bx	lr
1a00175e:	bf00      	nop
1a001760:	400c5000 	.word	0x400c5000

1a001764 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001764:	4b04      	ldr	r3, [pc, #16]	; (1a001778 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001766:	4298      	cmp	r0, r3
1a001768:	d002      	beq.n	1a001770 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00176a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00176e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001770:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001774:	4770      	bx	lr
1a001776:	bf00      	nop
1a001778:	400c5000 	.word	0x400c5000

1a00177c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00177c:	6803      	ldr	r3, [r0, #0]
1a00177e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001782:	0209      	lsls	r1, r1, #8
1a001784:	b289      	uxth	r1, r1
1a001786:	4319      	orrs	r1, r3
1a001788:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00178a:	6102      	str	r2, [r0, #16]
}
1a00178c:	4770      	bx	lr

1a00178e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00178e:	b570      	push	{r4, r5, r6, lr}
1a001790:	4606      	mov	r6, r0
1a001792:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001794:	f7ff ffe6 	bl	1a001764 <Chip_SSP_GetPeriphClockIndex>
1a001798:	f7ff fc60 	bl	1a00105c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00179c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00179e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0017a2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0017a4:	e000      	b.n	1a0017a8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0017a6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0017a8:	42ab      	cmp	r3, r5
1a0017aa:	d90b      	bls.n	1a0017c4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0017ac:	1c4c      	adds	r4, r1, #1
1a0017ae:	fb02 f304 	mul.w	r3, r2, r4
1a0017b2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0017b6:	429d      	cmp	r5, r3
1a0017b8:	d2f6      	bcs.n	1a0017a8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0017ba:	2cff      	cmp	r4, #255	; 0xff
1a0017bc:	d9f3      	bls.n	1a0017a6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0017be:	3202      	adds	r2, #2
				cr0_div = 0;
1a0017c0:	2100      	movs	r1, #0
1a0017c2:	e7f1      	b.n	1a0017a8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0017c4:	4630      	mov	r0, r6
1a0017c6:	f7ff ffd9 	bl	1a00177c <Chip_SSP_SetClockRate>
}
1a0017ca:	bd70      	pop	{r4, r5, r6, pc}

1a0017cc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0017cc:	b510      	push	{r4, lr}
1a0017ce:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0017d0:	f7ff ffbe 	bl	1a001750 <Chip_SSP_GetClockIndex>
1a0017d4:	f7ff fc28 	bl	1a001028 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0017d8:	4620      	mov	r0, r4
1a0017da:	f7ff ffc3 	bl	1a001764 <Chip_SSP_GetPeriphClockIndex>
1a0017de:	f7ff fc23 	bl	1a001028 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0017e2:	6863      	ldr	r3, [r4, #4]
1a0017e4:	f023 0304 	bic.w	r3, r3, #4
1a0017e8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0017ea:	6823      	ldr	r3, [r4, #0]
1a0017ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0017f0:	f043 0307 	orr.w	r3, r3, #7
1a0017f4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0017f6:	4902      	ldr	r1, [pc, #8]	; (1a001800 <Chip_SSP_Init+0x34>)
1a0017f8:	4620      	mov	r0, r4
1a0017fa:	f7ff ffc8 	bl	1a00178e <Chip_SSP_SetBitRate>
}
1a0017fe:	bd10      	pop	{r4, pc}
1a001800:	000186a0 	.word	0x000186a0

1a001804 <getClkDiv>:
 * Private functions
 ****************************************************************************/

/* Get divider value */
STATIC Status getClkDiv(LPC_I2S_T *pI2S, I2S_AUDIO_FORMAT_T *format, uint16_t *pxDiv, uint16_t *pyDiv, uint32_t *pN)
{
1a001804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001808:	b085      	sub	sp, #20
1a00180a:	460c      	mov	r4, r1
1a00180c:	4693      	mov	fp, r2
1a00180e:	469a      	mov	sl, r3
	uint16_t dif;
	uint16_t xDiv = 0, yDiv = 0;
	uint32_t N;
	uint16_t err, ErrorOptimal = 0xFFFF;

	pClk = Chip_Clock_GetRate(CLK_APB1_I2S);
1a001810:	2023      	movs	r0, #35	; 0x23
1a001812:	f7ff fc23 	bl	1a00105c <Chip_Clock_GetRate>
1a001816:	4602      	mov	r2, r0
1a001818:	9003      	str	r0, [sp, #12]

	/* divider is a fixed point number with 16 fractional bits */
	divider = (((uint64_t) (format->SampleRate) * 2 * (format->WordWidth) * 2) << 16) / pClk;
1a00181a:	6826      	ldr	r6, [r4, #0]
1a00181c:	2700      	movs	r7, #0
1a00181e:	f894 8005 	ldrb.w	r8, [r4, #5]
1a001822:	fba6 4508 	umull	r4, r5, r6, r8
1a001826:	00ab      	lsls	r3, r5, #2
1a001828:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1a00182c:	e9cd 4500 	strd	r4, r5, [sp]
1a001830:	00a4      	lsls	r4, r4, #2
1a001832:	0419      	lsls	r1, r3, #16
1a001834:	463b      	mov	r3, r7
1a001836:	9800      	ldr	r0, [sp, #0]
1a001838:	0480      	lsls	r0, r0, #18
1a00183a:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
1a00183e:	f000 ff73 	bl	1a002728 <__aeabi_uldivmod>
1a001842:	4605      	mov	r5, r0
	/* find N that make x/y <= 1 -> divider <= 2^16 */
	for (N = 64; N > 0; N--) {
1a001844:	2440      	movs	r4, #64	; 0x40
1a001846:	b154      	cbz	r4, 1a00185e <getClkDiv+0x5a>
		if ((divider * N) < (1 << 16)) {
1a001848:	fba4 2305 	umull	r2, r3, r4, r5
1a00184c:	fb04 3301 	mla	r3, r4, r1, r3
1a001850:	2b00      	cmp	r3, #0
1a001852:	bf08      	it	eq
1a001854:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
1a001858:	d301      	bcc.n	1a00185e <getClkDiv+0x5a>
	for (N = 64; N > 0; N--) {
1a00185a:	3c01      	subs	r4, #1
1a00185c:	e7f3      	b.n	1a001846 <getClkDiv+0x42>
			break;
		}
	}
	if (N == 0) {
1a00185e:	2c00      	cmp	r4, #0
1a001860:	d042      	beq.n	1a0018e8 <getClkDiv+0xe4>
		return ERROR;
	}
	divider *= N;
1a001862:	46a4      	mov	ip, r4
1a001864:	fba4 0100 	umull	r0, r1, r4, r0
	uint16_t err, ErrorOptimal = 0xFFFF;
1a001868:	f64f 7eff 	movw	lr, #65535	; 0xffff
	uint16_t xDiv = 0, yDiv = 0;
1a00186c:	2500      	movs	r5, #0
	for (y = 255; y > 0; y--) {
1a00186e:	22ff      	movs	r2, #255	; 0xff
1a001870:	e01b      	b.n	1a0018aa <getClkDiv+0xa6>
		}
		else {
			err = dif;
		}
		if (err == 0) {
			yDiv = y;
1a001872:	b295      	uxth	r5, r2
		else if (err < ErrorOptimal) {
			ErrorOptimal = err;
			yDiv = y;
		}
	}
	xDiv = ((uint64_t) yDiv * (format->SampleRate) * 2 * (format->WordWidth) * N * 2) / pClk;
1a001874:	fba6 0105 	umull	r0, r1, r6, r5
1a001878:	fba8 2300 	umull	r2, r3, r8, r0
1a00187c:	fb08 3301 	mla	r3, r8, r1, r3
1a001880:	fbac 8902 	umull	r8, r9, ip, r2
1a001884:	fb0c 9903 	mla	r9, ip, r3, r9
1a001888:	ea4f 0189 	mov.w	r1, r9, lsl #2
1a00188c:	9a03      	ldr	r2, [sp, #12]
1a00188e:	463b      	mov	r3, r7
1a001890:	ea4f 0088 	mov.w	r0, r8, lsl #2
1a001894:	ea41 7198 	orr.w	r1, r1, r8, lsr #30
1a001898:	f000 ff46 	bl	1a002728 <__aeabi_uldivmod>
1a00189c:	b280      	uxth	r0, r0
	if (xDiv >= 256) {
1a00189e:	28ff      	cmp	r0, #255	; 0xff
1a0018a0:	d817      	bhi.n	1a0018d2 <getClkDiv+0xce>
		xDiv = 0xFF;
	}
	if (xDiv == 0) {
1a0018a2:	b9b8      	cbnz	r0, 1a0018d4 <getClkDiv+0xd0>
		xDiv = 1;
1a0018a4:	2001      	movs	r0, #1
1a0018a6:	e015      	b.n	1a0018d4 <getClkDiv+0xd0>
	for (y = 255; y > 0; y--) {
1a0018a8:	3a01      	subs	r2, #1
1a0018aa:	2a00      	cmp	r2, #0
1a0018ac:	d0e2      	beq.n	1a001874 <getClkDiv+0x70>
		x = y * divider;
1a0018ae:	fb00 f302 	mul.w	r3, r0, r2
		if (x & (0xFF000000)) {
1a0018b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a0018b6:	d1f7      	bne.n	1a0018a8 <getClkDiv+0xa4>
		dif = x & 0xFFFF;
1a0018b8:	b29b      	uxth	r3, r3
		if (dif > 0x8000) {
1a0018ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
1a0018be:	d901      	bls.n	1a0018c4 <getClkDiv+0xc0>
			err = 0x10000 - dif;
1a0018c0:	425b      	negs	r3, r3
1a0018c2:	b29b      	uxth	r3, r3
		if (err == 0) {
1a0018c4:	2b00      	cmp	r3, #0
1a0018c6:	d0d4      	beq.n	1a001872 <getClkDiv+0x6e>
		else if (err < ErrorOptimal) {
1a0018c8:	4573      	cmp	r3, lr
1a0018ca:	d2ed      	bcs.n	1a0018a8 <getClkDiv+0xa4>
			yDiv = y;
1a0018cc:	b295      	uxth	r5, r2
			ErrorOptimal = err;
1a0018ce:	469e      	mov	lr, r3
1a0018d0:	e7ea      	b.n	1a0018a8 <getClkDiv+0xa4>
		xDiv = 0xFF;
1a0018d2:	20ff      	movs	r0, #255	; 0xff
	}

	*pxDiv = xDiv;
1a0018d4:	f8ab 0000 	strh.w	r0, [fp]
	*pyDiv = yDiv;
1a0018d8:	f8aa 5000 	strh.w	r5, [sl]
	*pN = N;
1a0018dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0018de:	601c      	str	r4, [r3, #0]
	return SUCCESS;
1a0018e0:	2001      	movs	r0, #1
}
1a0018e2:	b005      	add	sp, #20
1a0018e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERROR;
1a0018e8:	2000      	movs	r0, #0
1a0018ea:	e7fa      	b.n	1a0018e2 <getClkDiv+0xde>

1a0018ec <Chip_I2S_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the I2S interface */
void Chip_I2S_Init(LPC_I2S_T *pI2S)
{
1a0018ec:	b508      	push	{r3, lr}
	Chip_Clock_Enable(CLK_APB1_I2S);
1a0018ee:	2023      	movs	r0, #35	; 0x23
1a0018f0:	f7ff fb9a 	bl	1a001028 <Chip_Clock_Enable>
}
1a0018f4:	bd08      	pop	{r3, pc}

1a0018f6 <Chip_I2S_TxConfig>:
	Chip_Clock_Disable(CLK_APB1_I2S);
}

/* Configure I2S for Audio Format input */
Status Chip_I2S_TxConfig(LPC_I2S_T *pI2S, I2S_AUDIO_FORMAT_T *format)
{
1a0018f6:	b530      	push	{r4, r5, lr}
1a0018f8:	b085      	sub	sp, #20
1a0018fa:	4604      	mov	r4, r0
1a0018fc:	460d      	mov	r5, r1
	uint32_t temp;
	uint16_t xDiv, yDiv;
	uint32_t N;

	if (getClkDiv(pI2S, format, &xDiv, &yDiv, &N) == ERROR) {
1a0018fe:	ab02      	add	r3, sp, #8
1a001900:	9300      	str	r3, [sp, #0]
1a001902:	ab03      	add	r3, sp, #12
1a001904:	f10d 020e 	add.w	r2, sp, #14
1a001908:	f7ff ff7c 	bl	1a001804 <getClkDiv>
1a00190c:	4603      	mov	r3, r0
1a00190e:	b320      	cbz	r0, 1a00195a <Chip_I2S_TxConfig+0x64>
		return ERROR;
	}

	temp = pI2S->DAO & (~(I2S_DAO_WORDWIDTH_MASK | I2S_DAO_MONO | I2S_DAO_SLAVE | I2S_DAO_WS_HALFPERIOD_MASK));
1a001910:	6823      	ldr	r3, [r4, #0]
1a001912:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
1a001916:	f023 0367 	bic.w	r3, r3, #103	; 0x67
	if (format->WordWidth <= 8) {
1a00191a:	796a      	ldrb	r2, [r5, #5]
1a00191c:	2a08      	cmp	r2, #8
1a00191e:	d903      	bls.n	1a001928 <Chip_I2S_TxConfig+0x32>
		temp |= I2S_WORDWIDTH_8;
	}
	else if (format->WordWidth <= 16) {
1a001920:	2a10      	cmp	r2, #16
1a001922:	d81d      	bhi.n	1a001960 <Chip_I2S_TxConfig+0x6a>
		temp |= I2S_WORDWIDTH_16;
1a001924:	f043 0301 	orr.w	r3, r3, #1
	}
	else {
		temp |= I2S_WORDWIDTH_32;
	}

	temp |= (format->ChannelNumber) == 1 ? I2S_MONO : I2S_STEREO;
1a001928:	7929      	ldrb	r1, [r5, #4]
1a00192a:	2901      	cmp	r1, #1
1a00192c:	d01b      	beq.n	1a001966 <Chip_I2S_TxConfig+0x70>
1a00192e:	2100      	movs	r1, #0
1a001930:	430b      	orrs	r3, r1
	temp |= I2S_MASTER_MODE;
	temp |= I2S_DAO_WS_HALFPERIOD(format->WordWidth - 1);
1a001932:	1e51      	subs	r1, r2, #1
1a001934:	f647 72c0 	movw	r2, #32704	; 0x7fc0
1a001938:	ea02 1281 	and.w	r2, r2, r1, lsl #6
1a00193c:	4313      	orrs	r3, r2
	pI2S->DAO = temp;
1a00193e:	6023      	str	r3, [r4, #0]
	pI2S->TXMODE = I2S_TXMODE_CLKSEL(0);
1a001940:	2300      	movs	r3, #0
1a001942:	6323      	str	r3, [r4, #48]	; 0x30
	pI2S->TXBITRATE = N - 1;
1a001944:	9b02      	ldr	r3, [sp, #8]
1a001946:	3b01      	subs	r3, #1
1a001948:	62a3      	str	r3, [r4, #40]	; 0x28
	pI2S->TXRATE = yDiv | (xDiv << 8);
1a00194a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
1a00194e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a001952:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001956:	6223      	str	r3, [r4, #32]
	return SUCCESS;
1a001958:	2301      	movs	r3, #1
}
1a00195a:	4618      	mov	r0, r3
1a00195c:	b005      	add	sp, #20
1a00195e:	bd30      	pop	{r4, r5, pc}
		temp |= I2S_WORDWIDTH_32;
1a001960:	f043 0303 	orr.w	r3, r3, #3
1a001964:	e7e0      	b.n	1a001928 <Chip_I2S_TxConfig+0x32>
	temp |= (format->ChannelNumber) == 1 ? I2S_MONO : I2S_STEREO;
1a001966:	2104      	movs	r1, #4
1a001968:	e7e2      	b.n	1a001930 <Chip_I2S_TxConfig+0x3a>

1a00196a <Chip_I2S_DMA_TxCmd>:
						I2S_DMA_CHANNEL_T dmaNum,
						FunctionalState newState,
						uint8_t depth)
{
	/* Enable/Disable I2S transmit*/
	if (newState == ENABLE) {
1a00196a:	2a01      	cmp	r2, #1
1a00196c:	d004      	beq.n	1a001978 <Chip_I2S_DMA_TxCmd+0xe>
	    pI2S->DMA[I2S_DMA_REQUEST_CHANNEL_1] &= ~(0x0F << 16);
	    pI2S->DMA[I2S_DMA_REQUEST_CHANNEL_1] |= depth << 16;
		pI2S->DMA[I2S_DMA_REQUEST_CHANNEL_1] |= 0x02;
	}
	else {
		pI2S->DMA[I2S_DMA_REQUEST_CHANNEL_1] &= ~0x02;
1a00196e:	6943      	ldr	r3, [r0, #20]
1a001970:	f023 0302 	bic.w	r3, r3, #2
1a001974:	6143      	str	r3, [r0, #20]
	}
}
1a001976:	4770      	bx	lr
	    pI2S->DMA[I2S_DMA_REQUEST_CHANNEL_1] &= ~(0x0F << 16);
1a001978:	6942      	ldr	r2, [r0, #20]
1a00197a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
1a00197e:	6142      	str	r2, [r0, #20]
	    pI2S->DMA[I2S_DMA_REQUEST_CHANNEL_1] |= depth << 16;
1a001980:	6942      	ldr	r2, [r0, #20]
1a001982:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a001986:	6142      	str	r2, [r0, #20]
		pI2S->DMA[I2S_DMA_REQUEST_CHANNEL_1] |= 0x02;
1a001988:	6943      	ldr	r3, [r0, #20]
1a00198a:	f043 0302 	orr.w	r3, r3, #2
1a00198e:	6143      	str	r3, [r0, #20]
1a001990:	4770      	bx	lr
1a001992:	Address 0x000000001a001992 is out of bounds.


1a001994 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001994:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001996:	4a0b      	ldr	r2, [pc, #44]	; (1a0019c4 <SystemInit+0x30>)
1a001998:	4b0b      	ldr	r3, [pc, #44]	; (1a0019c8 <SystemInit+0x34>)
1a00199a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00199c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0019a0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0019a2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0019a6:	2b20      	cmp	r3, #32
1a0019a8:	d004      	beq.n	1a0019b4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0019aa:	f7fe ff75 	bl	1a000898 <Board_SystemInit>
   Board_Init();
1a0019ae:	f7fe fefb 	bl	1a0007a8 <Board_Init>
#endif
}
1a0019b2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0019b4:	4a04      	ldr	r2, [pc, #16]	; (1a0019c8 <SystemInit+0x34>)
1a0019b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0019ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0019be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0019c2:	e7f2      	b.n	1a0019aa <SystemInit+0x16>
1a0019c4:	1a000000 	.word	0x1a000000
1a0019c8:	e000ed00 	.word	0xe000ed00

1a0019cc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0019cc:	4b04      	ldr	r3, [pc, #16]	; (1a0019e0 <cyclesCounterInit+0x14>)
1a0019ce:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0019d0:	4a04      	ldr	r2, [pc, #16]	; (1a0019e4 <cyclesCounterInit+0x18>)
1a0019d2:	6813      	ldr	r3, [r2, #0]
1a0019d4:	f043 0301 	orr.w	r3, r3, #1
1a0019d8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0019da:	2001      	movs	r0, #1
1a0019dc:	4770      	bx	lr
1a0019de:	bf00      	nop
1a0019e0:	10000038 	.word	0x10000038
1a0019e4:	e0001000 	.word	0xe0001000

1a0019e8 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0019e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0019ec:	4680      	mov	r8, r0
1a0019ee:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0019f0:	4c19      	ldr	r4, [pc, #100]	; (1a001a58 <uartInit+0x70>)
1a0019f2:	0045      	lsls	r5, r0, #1
1a0019f4:	182a      	adds	r2, r5, r0
1a0019f6:	0093      	lsls	r3, r2, #2
1a0019f8:	18e6      	adds	r6, r4, r3
1a0019fa:	58e7      	ldr	r7, [r4, r3]
1a0019fc:	4638      	mov	r0, r7
1a0019fe:	f7fe ff67 	bl	1a0008d0 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001a02:	4649      	mov	r1, r9
1a001a04:	4638      	mov	r0, r7
1a001a06:	f7fe ff8d 	bl	1a000924 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001a0a:	2307      	movs	r3, #7
1a001a0c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001a0e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001a10:	2301      	movs	r3, #1
1a001a12:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001a14:	7930      	ldrb	r0, [r6, #4]
1a001a16:	7973      	ldrb	r3, [r6, #5]
1a001a18:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001a1a:	f042 0218 	orr.w	r2, r2, #24
1a001a1e:	490f      	ldr	r1, [pc, #60]	; (1a001a5c <uartInit+0x74>)
1a001a20:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001a28:	79f0      	ldrb	r0, [r6, #7]
1a001a2a:	7a33      	ldrb	r3, [r6, #8]
1a001a2c:	7a72      	ldrb	r2, [r6, #9]
1a001a2e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001a32:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001a3a:	f1b8 0f01 	cmp.w	r8, #1
1a001a3e:	d001      	beq.n	1a001a44 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001a44:	4a06      	ldr	r2, [pc, #24]	; (1a001a60 <uartInit+0x78>)
1a001a46:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001a48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001a4e:	221a      	movs	r2, #26
1a001a50:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001a54:	e7f4      	b.n	1a001a40 <uartInit+0x58>
1a001a56:	bf00      	nop
1a001a58:	1a007c58 	.word	0x1a007c58
1a001a5c:	40086000 	.word	0x40086000
1a001a60:	40081000 	.word	0x40081000

1a001a64 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001a64:	b118      	cbz	r0, 1a001a6e <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001a66:	4b04      	ldr	r3, [pc, #16]	; (1a001a78 <tickPowerSet+0x14>)
1a001a68:	2207      	movs	r2, #7
1a001a6a:	601a      	str	r2, [r3, #0]
1a001a6c:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001a6e:	4b02      	ldr	r3, [pc, #8]	; (1a001a78 <tickPowerSet+0x14>)
1a001a70:	2200      	movs	r2, #0
1a001a72:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001a74:	4770      	bx	lr
1a001a76:	bf00      	nop
1a001a78:	e000e010 	.word	0xe000e010

1a001a7c <tickInit>:
{
1a001a7c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001a7e:	ea50 0401 	orrs.w	r4, r0, r1
1a001a82:	d02a      	beq.n	1a001ada <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001a84:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001a88:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001a8c:	2b00      	cmp	r3, #0
1a001a8e:	bf08      	it	eq
1a001a90:	2a32      	cmpeq	r2, #50	; 0x32
1a001a92:	d227      	bcs.n	1a001ae4 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001a94:	4b14      	ldr	r3, [pc, #80]	; (1a001ae8 <tickInit+0x6c>)
1a001a96:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001a9a:	4b14      	ldr	r3, [pc, #80]	; (1a001aec <tickInit+0x70>)
1a001a9c:	681b      	ldr	r3, [r3, #0]
1a001a9e:	fba3 4500 	umull	r4, r5, r3, r0
1a001aa2:	fb03 5501 	mla	r5, r3, r1, r5
1a001aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001aaa:	2300      	movs	r3, #0
1a001aac:	4620      	mov	r0, r4
1a001aae:	4629      	mov	r1, r5
1a001ab0:	f000 fe3a 	bl	1a002728 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001ab4:	3801      	subs	r0, #1
1a001ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001aba:	d209      	bcs.n	1a001ad0 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001abc:	4b0c      	ldr	r3, [pc, #48]	; (1a001af0 <tickInit+0x74>)
1a001abe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001ac0:	4a0c      	ldr	r2, [pc, #48]	; (1a001af4 <tickInit+0x78>)
1a001ac2:	21e0      	movs	r1, #224	; 0xe0
1a001ac4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001ac8:	2200      	movs	r2, #0
1a001aca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001acc:	2207      	movs	r2, #7
1a001ace:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001ad0:	2001      	movs	r0, #1
1a001ad2:	f7ff ffc7 	bl	1a001a64 <tickPowerSet>
      bool_t ret_val = 1;
1a001ad6:	2001      	movs	r0, #1
}
1a001ad8:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001ada:	2000      	movs	r0, #0
1a001adc:	f7ff ffc2 	bl	1a001a64 <tickPowerSet>
         ret_val = 0;
1a001ae0:	2000      	movs	r0, #0
1a001ae2:	e7f9      	b.n	1a001ad8 <tickInit+0x5c>
            ret_val = 0;
1a001ae4:	2000      	movs	r0, #0
1a001ae6:	e7f7      	b.n	1a001ad8 <tickInit+0x5c>
1a001ae8:	10000040 	.word	0x10000040
1a001aec:	10000e7c 	.word	0x10000e7c
1a001af0:	e000e010 	.word	0xe000e010
1a001af4:	e000ed00 	.word	0xe000ed00

1a001af8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001af8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001afa:	4a07      	ldr	r2, [pc, #28]	; (1a001b18 <SysTick_Handler+0x20>)
1a001afc:	6813      	ldr	r3, [r2, #0]
1a001afe:	6851      	ldr	r1, [r2, #4]
1a001b00:	3301      	adds	r3, #1
1a001b02:	f141 0100 	adc.w	r1, r1, #0
1a001b06:	6013      	str	r3, [r2, #0]
1a001b08:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001b0a:	4b04      	ldr	r3, [pc, #16]	; (1a001b1c <SysTick_Handler+0x24>)
1a001b0c:	681b      	ldr	r3, [r3, #0]
1a001b0e:	b113      	cbz	r3, 1a001b16 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001b10:	4a03      	ldr	r2, [pc, #12]	; (1a001b20 <SysTick_Handler+0x28>)
1a001b12:	6810      	ldr	r0, [r2, #0]
1a001b14:	4798      	blx	r3
   }
}
1a001b16:	bd08      	pop	{r3, pc}
1a001b18:	10000a18 	.word	0x10000a18
1a001b1c:	10000a20 	.word	0x10000a20
1a001b20:	10000a10 	.word	0x10000a10

1a001b24 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001b24:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001b26:	4d0b      	ldr	r5, [pc, #44]	; (1a001b54 <gpioObtainPinInit+0x30>)
1a001b28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001b2c:	182c      	adds	r4, r5, r0
1a001b2e:	5628      	ldrsb	r0, [r5, r0]
1a001b30:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001b32:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001b36:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001b38:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001b3c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001b3e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001b42:	9b02      	ldr	r3, [sp, #8]
1a001b44:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001b46:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001b4a:	9b03      	ldr	r3, [sp, #12]
1a001b4c:	701a      	strb	r2, [r3, #0]
}
1a001b4e:	bc30      	pop	{r4, r5}
1a001b50:	4770      	bx	lr
1a001b52:	bf00      	nop
1a001b54:	1a007ca0 	.word	0x1a007ca0

1a001b58 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001b58:	f110 0f02 	cmn.w	r0, #2
1a001b5c:	f000 80c7 	beq.w	1a001cee <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001b60:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b64:	f000 80c5 	beq.w	1a001cf2 <gpioInit+0x19a>
{
1a001b68:	b570      	push	{r4, r5, r6, lr}
1a001b6a:	b084      	sub	sp, #16
1a001b6c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001b6e:	2300      	movs	r3, #0
1a001b70:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001b74:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001b78:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001b7c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001b80:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001b84:	f10d 030b 	add.w	r3, sp, #11
1a001b88:	9301      	str	r3, [sp, #4]
1a001b8a:	ab03      	add	r3, sp, #12
1a001b8c:	9300      	str	r3, [sp, #0]
1a001b8e:	f10d 030d 	add.w	r3, sp, #13
1a001b92:	f10d 020e 	add.w	r2, sp, #14
1a001b96:	f10d 010f 	add.w	r1, sp, #15
1a001b9a:	f7ff ffc3 	bl	1a001b24 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001b9e:	2c05      	cmp	r4, #5
1a001ba0:	f200 80a9 	bhi.w	1a001cf6 <gpioInit+0x19e>
1a001ba4:	e8df f004 	tbb	[pc, r4]
1a001ba8:	45278109 	.word	0x45278109
1a001bac:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001bae:	4853      	ldr	r0, [pc, #332]	; (1a001cfc <gpioInit+0x1a4>)
1a001bb0:	f7ff fb26 	bl	1a001200 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001bb4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001bb6:	b004      	add	sp, #16
1a001bb8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001bba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001bbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001bc6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001bca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bce:	494c      	ldr	r1, [pc, #304]	; (1a001d00 <gpioInit+0x1a8>)
1a001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001bd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001bd8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001bdc:	2001      	movs	r0, #1
1a001bde:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001be2:	4c46      	ldr	r4, [pc, #280]	; (1a001cfc <gpioInit+0x1a4>)
1a001be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001be8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001bec:	ea22 0201 	bic.w	r2, r2, r1
1a001bf0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001bf4:	e7df      	b.n	1a001bb6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001bf6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001bfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c02:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001c06:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c0a:	493d      	ldr	r1, [pc, #244]	; (1a001d00 <gpioInit+0x1a8>)
1a001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c10:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c14:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c18:	2001      	movs	r0, #1
1a001c1a:	fa00 f102 	lsl.w	r1, r0, r2
1a001c1e:	4c37      	ldr	r4, [pc, #220]	; (1a001cfc <gpioInit+0x1a4>)
1a001c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c24:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c28:	ea22 0201 	bic.w	r2, r2, r1
1a001c2c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c30:	e7c1      	b.n	1a001bb6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c32:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c36:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c3a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c3e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001c42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c46:	492e      	ldr	r1, [pc, #184]	; (1a001d00 <gpioInit+0x1a8>)
1a001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c50:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c54:	2001      	movs	r0, #1
1a001c56:	fa00 f102 	lsl.w	r1, r0, r2
1a001c5a:	4c28      	ldr	r4, [pc, #160]	; (1a001cfc <gpioInit+0x1a4>)
1a001c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c60:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c64:	ea22 0201 	bic.w	r2, r2, r1
1a001c68:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c6c:	e7a3      	b.n	1a001bb6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c72:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c76:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c7a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001c7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c82:	491f      	ldr	r1, [pc, #124]	; (1a001d00 <gpioInit+0x1a8>)
1a001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c88:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c8c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c90:	2001      	movs	r0, #1
1a001c92:	fa00 f102 	lsl.w	r1, r0, r2
1a001c96:	4c19      	ldr	r4, [pc, #100]	; (1a001cfc <gpioInit+0x1a4>)
1a001c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c9c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001ca0:	ea22 0201 	bic.w	r2, r2, r1
1a001ca4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001ca8:	e785      	b.n	1a001bb6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001caa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001cae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001cb2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001cb6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001cba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001cbe:	4910      	ldr	r1, [pc, #64]	; (1a001d00 <gpioInit+0x1a8>)
1a001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001cc4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001cc8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ccc:	2001      	movs	r0, #1
1a001cce:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001cd2:	4b0a      	ldr	r3, [pc, #40]	; (1a001cfc <gpioInit+0x1a4>)
1a001cd4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001cd8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001cdc:	4331      	orrs	r1, r6
1a001cde:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001ce2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001ce4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001ce8:	2100      	movs	r1, #0
1a001cea:	5499      	strb	r1, [r3, r2]
1a001cec:	e763      	b.n	1a001bb6 <gpioInit+0x5e>
	  return FALSE;
1a001cee:	2000      	movs	r0, #0
1a001cf0:	4770      	bx	lr
	  return FALSE;
1a001cf2:	2000      	movs	r0, #0
}
1a001cf4:	4770      	bx	lr
      ret_val = 0;
1a001cf6:	2000      	movs	r0, #0
1a001cf8:	e75d      	b.n	1a001bb6 <gpioInit+0x5e>
1a001cfa:	bf00      	nop
1a001cfc:	400f4000 	.word	0x400f4000
1a001d00:	40086000 	.word	0x40086000

1a001d04 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001d04:	f110 0f02 	cmn.w	r0, #2
1a001d08:	d02d      	beq.n	1a001d66 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001d0a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001d0e:	d02c      	beq.n	1a001d6a <gpioWrite+0x66>
{
1a001d10:	b510      	push	{r4, lr}
1a001d12:	b084      	sub	sp, #16
1a001d14:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001d16:	2300      	movs	r3, #0
1a001d18:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001d1c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001d20:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001d24:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001d28:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001d2c:	f10d 030b 	add.w	r3, sp, #11
1a001d30:	9301      	str	r3, [sp, #4]
1a001d32:	ab03      	add	r3, sp, #12
1a001d34:	9300      	str	r3, [sp, #0]
1a001d36:	f10d 030d 	add.w	r3, sp, #13
1a001d3a:	f10d 020e 	add.w	r2, sp, #14
1a001d3e:	f10d 010f 	add.w	r1, sp, #15
1a001d42:	f7ff feef 	bl	1a001b24 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001d46:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001d4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001d4e:	1c21      	adds	r1, r4, #0
1a001d50:	bf18      	it	ne
1a001d52:	2101      	movne	r1, #1
1a001d54:	015b      	lsls	r3, r3, #5
1a001d56:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001d5a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001d5e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001d60:	2001      	movs	r0, #1
}
1a001d62:	b004      	add	sp, #16
1a001d64:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001d66:	2000      	movs	r0, #0
1a001d68:	4770      	bx	lr
	  return FALSE;
1a001d6a:	2000      	movs	r0, #0
}
1a001d6c:	4770      	bx	lr
1a001d6e:	Address 0x000000001a001d6e is out of bounds.


1a001d70 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001d70:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001d72:	4b04      	ldr	r3, [pc, #16]	; (1a001d84 <USB0_IRQHandler+0x14>)
1a001d74:	681b      	ldr	r3, [r3, #0]
1a001d76:	681b      	ldr	r3, [r3, #0]
1a001d78:	68db      	ldr	r3, [r3, #12]
1a001d7a:	4a03      	ldr	r2, [pc, #12]	; (1a001d88 <USB0_IRQHandler+0x18>)
1a001d7c:	6810      	ldr	r0, [r2, #0]
1a001d7e:	4798      	blx	r3
}
1a001d80:	bd08      	pop	{r3, pc}
1a001d82:	bf00      	nop
1a001d84:	10000e80 	.word	0x10000e80
1a001d88:	10000a24 	.word	0x10000a24

1a001d8c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001d8c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001d8e:	f7fe febb 	bl	1a000b08 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001d92:	4b1a      	ldr	r3, [pc, #104]	; (1a001dfc <boardInit+0x70>)
1a001d94:	6818      	ldr	r0, [r3, #0]
1a001d96:	f7ff fe19 	bl	1a0019cc <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001d9a:	2001      	movs	r0, #1
1a001d9c:	2100      	movs	r1, #0
1a001d9e:	f7ff fe6d 	bl	1a001a7c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001da2:	2105      	movs	r1, #5
1a001da4:	2000      	movs	r0, #0
1a001da6:	f7ff fed7 	bl	1a001b58 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001daa:	2100      	movs	r1, #0
1a001dac:	2024      	movs	r0, #36	; 0x24
1a001dae:	f7ff fed3 	bl	1a001b58 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001db2:	2100      	movs	r1, #0
1a001db4:	2025      	movs	r0, #37	; 0x25
1a001db6:	f7ff fecf 	bl	1a001b58 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001dba:	2100      	movs	r1, #0
1a001dbc:	2026      	movs	r0, #38	; 0x26
1a001dbe:	f7ff fecb 	bl	1a001b58 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001dc2:	2100      	movs	r1, #0
1a001dc4:	2027      	movs	r0, #39	; 0x27
1a001dc6:	f7ff fec7 	bl	1a001b58 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001dca:	2101      	movs	r1, #1
1a001dcc:	2028      	movs	r0, #40	; 0x28
1a001dce:	f7ff fec3 	bl	1a001b58 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001dd2:	2101      	movs	r1, #1
1a001dd4:	2029      	movs	r0, #41	; 0x29
1a001dd6:	f7ff febf 	bl	1a001b58 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001dda:	2101      	movs	r1, #1
1a001ddc:	202a      	movs	r0, #42	; 0x2a
1a001dde:	f7ff febb 	bl	1a001b58 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001de2:	2101      	movs	r1, #1
1a001de4:	202b      	movs	r0, #43	; 0x2b
1a001de6:	f7ff feb7 	bl	1a001b58 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001dea:	2101      	movs	r1, #1
1a001dec:	202c      	movs	r0, #44	; 0x2c
1a001dee:	f7ff feb3 	bl	1a001b58 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001df2:	2101      	movs	r1, #1
1a001df4:	202d      	movs	r0, #45	; 0x2d
1a001df6:	f7ff feaf 	bl	1a001b58 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001dfa:	bd08      	pop	{r3, pc}
1a001dfc:	10000e7c 	.word	0x10000e7c

1a001e00 <__aeabi_drsub>:
1a001e00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a001e04:	e002      	b.n	1a001e0c <__adddf3>
1a001e06:	bf00      	nop

1a001e08 <__aeabi_dsub>:
1a001e08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a001e0c <__adddf3>:
1a001e0c:	b530      	push	{r4, r5, lr}
1a001e0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a001e12:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a001e16:	ea94 0f05 	teq	r4, r5
1a001e1a:	bf08      	it	eq
1a001e1c:	ea90 0f02 	teqeq	r0, r2
1a001e20:	bf1f      	itttt	ne
1a001e22:	ea54 0c00 	orrsne.w	ip, r4, r0
1a001e26:	ea55 0c02 	orrsne.w	ip, r5, r2
1a001e2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a001e2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001e32:	f000 80e2 	beq.w	1a001ffa <__adddf3+0x1ee>
1a001e36:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a001e3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a001e3e:	bfb8      	it	lt
1a001e40:	426d      	neglt	r5, r5
1a001e42:	dd0c      	ble.n	1a001e5e <__adddf3+0x52>
1a001e44:	442c      	add	r4, r5
1a001e46:	ea80 0202 	eor.w	r2, r0, r2
1a001e4a:	ea81 0303 	eor.w	r3, r1, r3
1a001e4e:	ea82 0000 	eor.w	r0, r2, r0
1a001e52:	ea83 0101 	eor.w	r1, r3, r1
1a001e56:	ea80 0202 	eor.w	r2, r0, r2
1a001e5a:	ea81 0303 	eor.w	r3, r1, r3
1a001e5e:	2d36      	cmp	r5, #54	; 0x36
1a001e60:	bf88      	it	hi
1a001e62:	bd30      	pophi	{r4, r5, pc}
1a001e64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a001e68:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a001e6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a001e70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a001e74:	d002      	beq.n	1a001e7c <__adddf3+0x70>
1a001e76:	4240      	negs	r0, r0
1a001e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001e7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a001e80:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a001e84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a001e88:	d002      	beq.n	1a001e90 <__adddf3+0x84>
1a001e8a:	4252      	negs	r2, r2
1a001e8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a001e90:	ea94 0f05 	teq	r4, r5
1a001e94:	f000 80a7 	beq.w	1a001fe6 <__adddf3+0x1da>
1a001e98:	f1a4 0401 	sub.w	r4, r4, #1
1a001e9c:	f1d5 0e20 	rsbs	lr, r5, #32
1a001ea0:	db0d      	blt.n	1a001ebe <__adddf3+0xb2>
1a001ea2:	fa02 fc0e 	lsl.w	ip, r2, lr
1a001ea6:	fa22 f205 	lsr.w	r2, r2, r5
1a001eaa:	1880      	adds	r0, r0, r2
1a001eac:	f141 0100 	adc.w	r1, r1, #0
1a001eb0:	fa03 f20e 	lsl.w	r2, r3, lr
1a001eb4:	1880      	adds	r0, r0, r2
1a001eb6:	fa43 f305 	asr.w	r3, r3, r5
1a001eba:	4159      	adcs	r1, r3
1a001ebc:	e00e      	b.n	1a001edc <__adddf3+0xd0>
1a001ebe:	f1a5 0520 	sub.w	r5, r5, #32
1a001ec2:	f10e 0e20 	add.w	lr, lr, #32
1a001ec6:	2a01      	cmp	r2, #1
1a001ec8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a001ecc:	bf28      	it	cs
1a001ece:	f04c 0c02 	orrcs.w	ip, ip, #2
1a001ed2:	fa43 f305 	asr.w	r3, r3, r5
1a001ed6:	18c0      	adds	r0, r0, r3
1a001ed8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a001edc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001ee0:	d507      	bpl.n	1a001ef2 <__adddf3+0xe6>
1a001ee2:	f04f 0e00 	mov.w	lr, #0
1a001ee6:	f1dc 0c00 	rsbs	ip, ip, #0
1a001eea:	eb7e 0000 	sbcs.w	r0, lr, r0
1a001eee:	eb6e 0101 	sbc.w	r1, lr, r1
1a001ef2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a001ef6:	d31b      	bcc.n	1a001f30 <__adddf3+0x124>
1a001ef8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a001efc:	d30c      	bcc.n	1a001f18 <__adddf3+0x10c>
1a001efe:	0849      	lsrs	r1, r1, #1
1a001f00:	ea5f 0030 	movs.w	r0, r0, rrx
1a001f04:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a001f08:	f104 0401 	add.w	r4, r4, #1
1a001f0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a001f10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a001f14:	f080 809a 	bcs.w	1a00204c <__adddf3+0x240>
1a001f18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a001f1c:	bf08      	it	eq
1a001f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a001f22:	f150 0000 	adcs.w	r0, r0, #0
1a001f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001f2a:	ea41 0105 	orr.w	r1, r1, r5
1a001f2e:	bd30      	pop	{r4, r5, pc}
1a001f30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a001f34:	4140      	adcs	r0, r0
1a001f36:	eb41 0101 	adc.w	r1, r1, r1
1a001f3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001f3e:	f1a4 0401 	sub.w	r4, r4, #1
1a001f42:	d1e9      	bne.n	1a001f18 <__adddf3+0x10c>
1a001f44:	f091 0f00 	teq	r1, #0
1a001f48:	bf04      	itt	eq
1a001f4a:	4601      	moveq	r1, r0
1a001f4c:	2000      	moveq	r0, #0
1a001f4e:	fab1 f381 	clz	r3, r1
1a001f52:	bf08      	it	eq
1a001f54:	3320      	addeq	r3, #32
1a001f56:	f1a3 030b 	sub.w	r3, r3, #11
1a001f5a:	f1b3 0220 	subs.w	r2, r3, #32
1a001f5e:	da0c      	bge.n	1a001f7a <__adddf3+0x16e>
1a001f60:	320c      	adds	r2, #12
1a001f62:	dd08      	ble.n	1a001f76 <__adddf3+0x16a>
1a001f64:	f102 0c14 	add.w	ip, r2, #20
1a001f68:	f1c2 020c 	rsb	r2, r2, #12
1a001f6c:	fa01 f00c 	lsl.w	r0, r1, ip
1a001f70:	fa21 f102 	lsr.w	r1, r1, r2
1a001f74:	e00c      	b.n	1a001f90 <__adddf3+0x184>
1a001f76:	f102 0214 	add.w	r2, r2, #20
1a001f7a:	bfd8      	it	le
1a001f7c:	f1c2 0c20 	rsble	ip, r2, #32
1a001f80:	fa01 f102 	lsl.w	r1, r1, r2
1a001f84:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001f88:	bfdc      	itt	le
1a001f8a:	ea41 010c 	orrle.w	r1, r1, ip
1a001f8e:	4090      	lslle	r0, r2
1a001f90:	1ae4      	subs	r4, r4, r3
1a001f92:	bfa2      	ittt	ge
1a001f94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a001f98:	4329      	orrge	r1, r5
1a001f9a:	bd30      	popge	{r4, r5, pc}
1a001f9c:	ea6f 0404 	mvn.w	r4, r4
1a001fa0:	3c1f      	subs	r4, #31
1a001fa2:	da1c      	bge.n	1a001fde <__adddf3+0x1d2>
1a001fa4:	340c      	adds	r4, #12
1a001fa6:	dc0e      	bgt.n	1a001fc6 <__adddf3+0x1ba>
1a001fa8:	f104 0414 	add.w	r4, r4, #20
1a001fac:	f1c4 0220 	rsb	r2, r4, #32
1a001fb0:	fa20 f004 	lsr.w	r0, r0, r4
1a001fb4:	fa01 f302 	lsl.w	r3, r1, r2
1a001fb8:	ea40 0003 	orr.w	r0, r0, r3
1a001fbc:	fa21 f304 	lsr.w	r3, r1, r4
1a001fc0:	ea45 0103 	orr.w	r1, r5, r3
1a001fc4:	bd30      	pop	{r4, r5, pc}
1a001fc6:	f1c4 040c 	rsb	r4, r4, #12
1a001fca:	f1c4 0220 	rsb	r2, r4, #32
1a001fce:	fa20 f002 	lsr.w	r0, r0, r2
1a001fd2:	fa01 f304 	lsl.w	r3, r1, r4
1a001fd6:	ea40 0003 	orr.w	r0, r0, r3
1a001fda:	4629      	mov	r1, r5
1a001fdc:	bd30      	pop	{r4, r5, pc}
1a001fde:	fa21 f004 	lsr.w	r0, r1, r4
1a001fe2:	4629      	mov	r1, r5
1a001fe4:	bd30      	pop	{r4, r5, pc}
1a001fe6:	f094 0f00 	teq	r4, #0
1a001fea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a001fee:	bf06      	itte	eq
1a001ff0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a001ff4:	3401      	addeq	r4, #1
1a001ff6:	3d01      	subne	r5, #1
1a001ff8:	e74e      	b.n	1a001e98 <__adddf3+0x8c>
1a001ffa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001ffe:	bf18      	it	ne
1a002000:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002004:	d029      	beq.n	1a00205a <__adddf3+0x24e>
1a002006:	ea94 0f05 	teq	r4, r5
1a00200a:	bf08      	it	eq
1a00200c:	ea90 0f02 	teqeq	r0, r2
1a002010:	d005      	beq.n	1a00201e <__adddf3+0x212>
1a002012:	ea54 0c00 	orrs.w	ip, r4, r0
1a002016:	bf04      	itt	eq
1a002018:	4619      	moveq	r1, r3
1a00201a:	4610      	moveq	r0, r2
1a00201c:	bd30      	pop	{r4, r5, pc}
1a00201e:	ea91 0f03 	teq	r1, r3
1a002022:	bf1e      	ittt	ne
1a002024:	2100      	movne	r1, #0
1a002026:	2000      	movne	r0, #0
1a002028:	bd30      	popne	{r4, r5, pc}
1a00202a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00202e:	d105      	bne.n	1a00203c <__adddf3+0x230>
1a002030:	0040      	lsls	r0, r0, #1
1a002032:	4149      	adcs	r1, r1
1a002034:	bf28      	it	cs
1a002036:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00203a:	bd30      	pop	{r4, r5, pc}
1a00203c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002040:	bf3c      	itt	cc
1a002042:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002046:	bd30      	popcc	{r4, r5, pc}
1a002048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00204c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002054:	f04f 0000 	mov.w	r0, #0
1a002058:	bd30      	pop	{r4, r5, pc}
1a00205a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00205e:	bf1a      	itte	ne
1a002060:	4619      	movne	r1, r3
1a002062:	4610      	movne	r0, r2
1a002064:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002068:	bf1c      	itt	ne
1a00206a:	460b      	movne	r3, r1
1a00206c:	4602      	movne	r2, r0
1a00206e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002072:	bf06      	itte	eq
1a002074:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002078:	ea91 0f03 	teqeq	r1, r3
1a00207c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002080:	bd30      	pop	{r4, r5, pc}
1a002082:	bf00      	nop

1a002084 <__aeabi_ui2d>:
1a002084:	f090 0f00 	teq	r0, #0
1a002088:	bf04      	itt	eq
1a00208a:	2100      	moveq	r1, #0
1a00208c:	4770      	bxeq	lr
1a00208e:	b530      	push	{r4, r5, lr}
1a002090:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002094:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002098:	f04f 0500 	mov.w	r5, #0
1a00209c:	f04f 0100 	mov.w	r1, #0
1a0020a0:	e750      	b.n	1a001f44 <__adddf3+0x138>
1a0020a2:	bf00      	nop

1a0020a4 <__aeabi_i2d>:
1a0020a4:	f090 0f00 	teq	r0, #0
1a0020a8:	bf04      	itt	eq
1a0020aa:	2100      	moveq	r1, #0
1a0020ac:	4770      	bxeq	lr
1a0020ae:	b530      	push	{r4, r5, lr}
1a0020b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0020b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0020b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0020bc:	bf48      	it	mi
1a0020be:	4240      	negmi	r0, r0
1a0020c0:	f04f 0100 	mov.w	r1, #0
1a0020c4:	e73e      	b.n	1a001f44 <__adddf3+0x138>
1a0020c6:	bf00      	nop

1a0020c8 <__aeabi_f2d>:
1a0020c8:	0042      	lsls	r2, r0, #1
1a0020ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0020ce:	ea4f 0131 	mov.w	r1, r1, rrx
1a0020d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0020d6:	bf1f      	itttt	ne
1a0020d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0020dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0020e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0020e4:	4770      	bxne	lr
1a0020e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0020ea:	bf08      	it	eq
1a0020ec:	4770      	bxeq	lr
1a0020ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0020f2:	bf04      	itt	eq
1a0020f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0020f8:	4770      	bxeq	lr
1a0020fa:	b530      	push	{r4, r5, lr}
1a0020fc:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002100:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002104:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002108:	e71c      	b.n	1a001f44 <__adddf3+0x138>
1a00210a:	bf00      	nop

1a00210c <__aeabi_ul2d>:
1a00210c:	ea50 0201 	orrs.w	r2, r0, r1
1a002110:	bf08      	it	eq
1a002112:	4770      	bxeq	lr
1a002114:	b530      	push	{r4, r5, lr}
1a002116:	f04f 0500 	mov.w	r5, #0
1a00211a:	e00a      	b.n	1a002132 <__aeabi_l2d+0x16>

1a00211c <__aeabi_l2d>:
1a00211c:	ea50 0201 	orrs.w	r2, r0, r1
1a002120:	bf08      	it	eq
1a002122:	4770      	bxeq	lr
1a002124:	b530      	push	{r4, r5, lr}
1a002126:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00212a:	d502      	bpl.n	1a002132 <__aeabi_l2d+0x16>
1a00212c:	4240      	negs	r0, r0
1a00212e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002132:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002136:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00213a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00213e:	f43f aed8 	beq.w	1a001ef2 <__adddf3+0xe6>
1a002142:	f04f 0203 	mov.w	r2, #3
1a002146:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00214a:	bf18      	it	ne
1a00214c:	3203      	addne	r2, #3
1a00214e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002152:	bf18      	it	ne
1a002154:	3203      	addne	r2, #3
1a002156:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a00215a:	f1c2 0320 	rsb	r3, r2, #32
1a00215e:	fa00 fc03 	lsl.w	ip, r0, r3
1a002162:	fa20 f002 	lsr.w	r0, r0, r2
1a002166:	fa01 fe03 	lsl.w	lr, r1, r3
1a00216a:	ea40 000e 	orr.w	r0, r0, lr
1a00216e:	fa21 f102 	lsr.w	r1, r1, r2
1a002172:	4414      	add	r4, r2
1a002174:	e6bd      	b.n	1a001ef2 <__adddf3+0xe6>
1a002176:	bf00      	nop

1a002178 <__aeabi_dmul>:
1a002178:	b570      	push	{r4, r5, r6, lr}
1a00217a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00217e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002182:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002186:	bf1d      	ittte	ne
1a002188:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00218c:	ea94 0f0c 	teqne	r4, ip
1a002190:	ea95 0f0c 	teqne	r5, ip
1a002194:	f000 f8de 	bleq	1a002354 <__aeabi_dmul+0x1dc>
1a002198:	442c      	add	r4, r5
1a00219a:	ea81 0603 	eor.w	r6, r1, r3
1a00219e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a0021a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a0021a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a0021aa:	bf18      	it	ne
1a0021ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0021b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0021b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0021b8:	d038      	beq.n	1a00222c <__aeabi_dmul+0xb4>
1a0021ba:	fba0 ce02 	umull	ip, lr, r0, r2
1a0021be:	f04f 0500 	mov.w	r5, #0
1a0021c2:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0021c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0021ca:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0021ce:	f04f 0600 	mov.w	r6, #0
1a0021d2:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0021d6:	f09c 0f00 	teq	ip, #0
1a0021da:	bf18      	it	ne
1a0021dc:	f04e 0e01 	orrne.w	lr, lr, #1
1a0021e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0021e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0021e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0021ec:	d204      	bcs.n	1a0021f8 <__aeabi_dmul+0x80>
1a0021ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0021f2:	416d      	adcs	r5, r5
1a0021f4:	eb46 0606 	adc.w	r6, r6, r6
1a0021f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0021fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002200:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002204:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002208:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a00220c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002210:	bf88      	it	hi
1a002212:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002216:	d81e      	bhi.n	1a002256 <__aeabi_dmul+0xde>
1a002218:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a00221c:	bf08      	it	eq
1a00221e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002222:	f150 0000 	adcs.w	r0, r0, #0
1a002226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00222a:	bd70      	pop	{r4, r5, r6, pc}
1a00222c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002230:	ea46 0101 	orr.w	r1, r6, r1
1a002234:	ea40 0002 	orr.w	r0, r0, r2
1a002238:	ea81 0103 	eor.w	r1, r1, r3
1a00223c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002240:	bfc2      	ittt	gt
1a002242:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002246:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00224a:	bd70      	popgt	{r4, r5, r6, pc}
1a00224c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002250:	f04f 0e00 	mov.w	lr, #0
1a002254:	3c01      	subs	r4, #1
1a002256:	f300 80ab 	bgt.w	1a0023b0 <__aeabi_dmul+0x238>
1a00225a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00225e:	bfde      	ittt	le
1a002260:	2000      	movle	r0, #0
1a002262:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002266:	bd70      	pople	{r4, r5, r6, pc}
1a002268:	f1c4 0400 	rsb	r4, r4, #0
1a00226c:	3c20      	subs	r4, #32
1a00226e:	da35      	bge.n	1a0022dc <__aeabi_dmul+0x164>
1a002270:	340c      	adds	r4, #12
1a002272:	dc1b      	bgt.n	1a0022ac <__aeabi_dmul+0x134>
1a002274:	f104 0414 	add.w	r4, r4, #20
1a002278:	f1c4 0520 	rsb	r5, r4, #32
1a00227c:	fa00 f305 	lsl.w	r3, r0, r5
1a002280:	fa20 f004 	lsr.w	r0, r0, r4
1a002284:	fa01 f205 	lsl.w	r2, r1, r5
1a002288:	ea40 0002 	orr.w	r0, r0, r2
1a00228c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002290:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002294:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002298:	fa21 f604 	lsr.w	r6, r1, r4
1a00229c:	eb42 0106 	adc.w	r1, r2, r6
1a0022a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0022a4:	bf08      	it	eq
1a0022a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0022aa:	bd70      	pop	{r4, r5, r6, pc}
1a0022ac:	f1c4 040c 	rsb	r4, r4, #12
1a0022b0:	f1c4 0520 	rsb	r5, r4, #32
1a0022b4:	fa00 f304 	lsl.w	r3, r0, r4
1a0022b8:	fa20 f005 	lsr.w	r0, r0, r5
1a0022bc:	fa01 f204 	lsl.w	r2, r1, r4
1a0022c0:	ea40 0002 	orr.w	r0, r0, r2
1a0022c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0022c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0022cc:	f141 0100 	adc.w	r1, r1, #0
1a0022d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0022d4:	bf08      	it	eq
1a0022d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0022da:	bd70      	pop	{r4, r5, r6, pc}
1a0022dc:	f1c4 0520 	rsb	r5, r4, #32
1a0022e0:	fa00 f205 	lsl.w	r2, r0, r5
1a0022e4:	ea4e 0e02 	orr.w	lr, lr, r2
1a0022e8:	fa20 f304 	lsr.w	r3, r0, r4
1a0022ec:	fa01 f205 	lsl.w	r2, r1, r5
1a0022f0:	ea43 0302 	orr.w	r3, r3, r2
1a0022f4:	fa21 f004 	lsr.w	r0, r1, r4
1a0022f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0022fc:	fa21 f204 	lsr.w	r2, r1, r4
1a002300:	ea20 0002 	bic.w	r0, r0, r2
1a002304:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00230c:	bf08      	it	eq
1a00230e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002312:	bd70      	pop	{r4, r5, r6, pc}
1a002314:	f094 0f00 	teq	r4, #0
1a002318:	d10f      	bne.n	1a00233a <__aeabi_dmul+0x1c2>
1a00231a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00231e:	0040      	lsls	r0, r0, #1
1a002320:	eb41 0101 	adc.w	r1, r1, r1
1a002324:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002328:	bf08      	it	eq
1a00232a:	3c01      	subeq	r4, #1
1a00232c:	d0f7      	beq.n	1a00231e <__aeabi_dmul+0x1a6>
1a00232e:	ea41 0106 	orr.w	r1, r1, r6
1a002332:	f095 0f00 	teq	r5, #0
1a002336:	bf18      	it	ne
1a002338:	4770      	bxne	lr
1a00233a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00233e:	0052      	lsls	r2, r2, #1
1a002340:	eb43 0303 	adc.w	r3, r3, r3
1a002344:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002348:	bf08      	it	eq
1a00234a:	3d01      	subeq	r5, #1
1a00234c:	d0f7      	beq.n	1a00233e <__aeabi_dmul+0x1c6>
1a00234e:	ea43 0306 	orr.w	r3, r3, r6
1a002352:	4770      	bx	lr
1a002354:	ea94 0f0c 	teq	r4, ip
1a002358:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00235c:	bf18      	it	ne
1a00235e:	ea95 0f0c 	teqne	r5, ip
1a002362:	d00c      	beq.n	1a00237e <__aeabi_dmul+0x206>
1a002364:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002368:	bf18      	it	ne
1a00236a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00236e:	d1d1      	bne.n	1a002314 <__aeabi_dmul+0x19c>
1a002370:	ea81 0103 	eor.w	r1, r1, r3
1a002374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002378:	f04f 0000 	mov.w	r0, #0
1a00237c:	bd70      	pop	{r4, r5, r6, pc}
1a00237e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002382:	bf06      	itte	eq
1a002384:	4610      	moveq	r0, r2
1a002386:	4619      	moveq	r1, r3
1a002388:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00238c:	d019      	beq.n	1a0023c2 <__aeabi_dmul+0x24a>
1a00238e:	ea94 0f0c 	teq	r4, ip
1a002392:	d102      	bne.n	1a00239a <__aeabi_dmul+0x222>
1a002394:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002398:	d113      	bne.n	1a0023c2 <__aeabi_dmul+0x24a>
1a00239a:	ea95 0f0c 	teq	r5, ip
1a00239e:	d105      	bne.n	1a0023ac <__aeabi_dmul+0x234>
1a0023a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0023a4:	bf1c      	itt	ne
1a0023a6:	4610      	movne	r0, r2
1a0023a8:	4619      	movne	r1, r3
1a0023aa:	d10a      	bne.n	1a0023c2 <__aeabi_dmul+0x24a>
1a0023ac:	ea81 0103 	eor.w	r1, r1, r3
1a0023b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0023b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0023b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0023bc:	f04f 0000 	mov.w	r0, #0
1a0023c0:	bd70      	pop	{r4, r5, r6, pc}
1a0023c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0023c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0023ca:	bd70      	pop	{r4, r5, r6, pc}

1a0023cc <__aeabi_ddiv>:
1a0023cc:	b570      	push	{r4, r5, r6, lr}
1a0023ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0023d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0023d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0023da:	bf1d      	ittte	ne
1a0023dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0023e0:	ea94 0f0c 	teqne	r4, ip
1a0023e4:	ea95 0f0c 	teqne	r5, ip
1a0023e8:	f000 f8a7 	bleq	1a00253a <__aeabi_ddiv+0x16e>
1a0023ec:	eba4 0405 	sub.w	r4, r4, r5
1a0023f0:	ea81 0e03 	eor.w	lr, r1, r3
1a0023f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0023f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0023fc:	f000 8088 	beq.w	1a002510 <__aeabi_ddiv+0x144>
1a002400:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002404:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002408:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a00240c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002410:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002414:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002418:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a00241c:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002420:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002424:	429d      	cmp	r5, r3
1a002426:	bf08      	it	eq
1a002428:	4296      	cmpeq	r6, r2
1a00242a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00242e:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002432:	d202      	bcs.n	1a00243a <__aeabi_ddiv+0x6e>
1a002434:	085b      	lsrs	r3, r3, #1
1a002436:	ea4f 0232 	mov.w	r2, r2, rrx
1a00243a:	1ab6      	subs	r6, r6, r2
1a00243c:	eb65 0503 	sbc.w	r5, r5, r3
1a002440:	085b      	lsrs	r3, r3, #1
1a002442:	ea4f 0232 	mov.w	r2, r2, rrx
1a002446:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a00244a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00244e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002452:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002456:	bf22      	ittt	cs
1a002458:	1ab6      	subcs	r6, r6, r2
1a00245a:	4675      	movcs	r5, lr
1a00245c:	ea40 000c 	orrcs.w	r0, r0, ip
1a002460:	085b      	lsrs	r3, r3, #1
1a002462:	ea4f 0232 	mov.w	r2, r2, rrx
1a002466:	ebb6 0e02 	subs.w	lr, r6, r2
1a00246a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00246e:	bf22      	ittt	cs
1a002470:	1ab6      	subcs	r6, r6, r2
1a002472:	4675      	movcs	r5, lr
1a002474:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002478:	085b      	lsrs	r3, r3, #1
1a00247a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00247e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002482:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002486:	bf22      	ittt	cs
1a002488:	1ab6      	subcs	r6, r6, r2
1a00248a:	4675      	movcs	r5, lr
1a00248c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002490:	085b      	lsrs	r3, r3, #1
1a002492:	ea4f 0232 	mov.w	r2, r2, rrx
1a002496:	ebb6 0e02 	subs.w	lr, r6, r2
1a00249a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00249e:	bf22      	ittt	cs
1a0024a0:	1ab6      	subcs	r6, r6, r2
1a0024a2:	4675      	movcs	r5, lr
1a0024a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0024a8:	ea55 0e06 	orrs.w	lr, r5, r6
1a0024ac:	d018      	beq.n	1a0024e0 <__aeabi_ddiv+0x114>
1a0024ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0024b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0024b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0024ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0024be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0024c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0024c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a0024ca:	d1c0      	bne.n	1a00244e <__aeabi_ddiv+0x82>
1a0024cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0024d0:	d10b      	bne.n	1a0024ea <__aeabi_ddiv+0x11e>
1a0024d2:	ea41 0100 	orr.w	r1, r1, r0
1a0024d6:	f04f 0000 	mov.w	r0, #0
1a0024da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a0024de:	e7b6      	b.n	1a00244e <__aeabi_ddiv+0x82>
1a0024e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0024e4:	bf04      	itt	eq
1a0024e6:	4301      	orreq	r1, r0
1a0024e8:	2000      	moveq	r0, #0
1a0024ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0024ee:	bf88      	it	hi
1a0024f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0024f4:	f63f aeaf 	bhi.w	1a002256 <__aeabi_dmul+0xde>
1a0024f8:	ebb5 0c03 	subs.w	ip, r5, r3
1a0024fc:	bf04      	itt	eq
1a0024fe:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002502:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002506:	f150 0000 	adcs.w	r0, r0, #0
1a00250a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00250e:	bd70      	pop	{r4, r5, r6, pc}
1a002510:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002514:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002518:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a00251c:	bfc2      	ittt	gt
1a00251e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002522:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002526:	bd70      	popgt	{r4, r5, r6, pc}
1a002528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00252c:	f04f 0e00 	mov.w	lr, #0
1a002530:	3c01      	subs	r4, #1
1a002532:	e690      	b.n	1a002256 <__aeabi_dmul+0xde>
1a002534:	ea45 0e06 	orr.w	lr, r5, r6
1a002538:	e68d      	b.n	1a002256 <__aeabi_dmul+0xde>
1a00253a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00253e:	ea94 0f0c 	teq	r4, ip
1a002542:	bf08      	it	eq
1a002544:	ea95 0f0c 	teqeq	r5, ip
1a002548:	f43f af3b 	beq.w	1a0023c2 <__aeabi_dmul+0x24a>
1a00254c:	ea94 0f0c 	teq	r4, ip
1a002550:	d10a      	bne.n	1a002568 <__aeabi_ddiv+0x19c>
1a002552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002556:	f47f af34 	bne.w	1a0023c2 <__aeabi_dmul+0x24a>
1a00255a:	ea95 0f0c 	teq	r5, ip
1a00255e:	f47f af25 	bne.w	1a0023ac <__aeabi_dmul+0x234>
1a002562:	4610      	mov	r0, r2
1a002564:	4619      	mov	r1, r3
1a002566:	e72c      	b.n	1a0023c2 <__aeabi_dmul+0x24a>
1a002568:	ea95 0f0c 	teq	r5, ip
1a00256c:	d106      	bne.n	1a00257c <__aeabi_ddiv+0x1b0>
1a00256e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002572:	f43f aefd 	beq.w	1a002370 <__aeabi_dmul+0x1f8>
1a002576:	4610      	mov	r0, r2
1a002578:	4619      	mov	r1, r3
1a00257a:	e722      	b.n	1a0023c2 <__aeabi_dmul+0x24a>
1a00257c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002580:	bf18      	it	ne
1a002582:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002586:	f47f aec5 	bne.w	1a002314 <__aeabi_dmul+0x19c>
1a00258a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00258e:	f47f af0d 	bne.w	1a0023ac <__aeabi_dmul+0x234>
1a002592:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002596:	f47f aeeb 	bne.w	1a002370 <__aeabi_dmul+0x1f8>
1a00259a:	e712      	b.n	1a0023c2 <__aeabi_dmul+0x24a>

1a00259c <__gedf2>:
1a00259c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a0025a0:	e006      	b.n	1a0025b0 <__cmpdf2+0x4>
1a0025a2:	bf00      	nop

1a0025a4 <__ledf2>:
1a0025a4:	f04f 0c01 	mov.w	ip, #1
1a0025a8:	e002      	b.n	1a0025b0 <__cmpdf2+0x4>
1a0025aa:	bf00      	nop

1a0025ac <__cmpdf2>:
1a0025ac:	f04f 0c01 	mov.w	ip, #1
1a0025b0:	f84d cd04 	str.w	ip, [sp, #-4]!
1a0025b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0025b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0025bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0025c0:	bf18      	it	ne
1a0025c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a0025c6:	d01b      	beq.n	1a002600 <__cmpdf2+0x54>
1a0025c8:	b001      	add	sp, #4
1a0025ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a0025ce:	bf0c      	ite	eq
1a0025d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a0025d4:	ea91 0f03 	teqne	r1, r3
1a0025d8:	bf02      	ittt	eq
1a0025da:	ea90 0f02 	teqeq	r0, r2
1a0025de:	2000      	moveq	r0, #0
1a0025e0:	4770      	bxeq	lr
1a0025e2:	f110 0f00 	cmn.w	r0, #0
1a0025e6:	ea91 0f03 	teq	r1, r3
1a0025ea:	bf58      	it	pl
1a0025ec:	4299      	cmppl	r1, r3
1a0025ee:	bf08      	it	eq
1a0025f0:	4290      	cmpeq	r0, r2
1a0025f2:	bf2c      	ite	cs
1a0025f4:	17d8      	asrcs	r0, r3, #31
1a0025f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a0025fa:	f040 0001 	orr.w	r0, r0, #1
1a0025fe:	4770      	bx	lr
1a002600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002608:	d102      	bne.n	1a002610 <__cmpdf2+0x64>
1a00260a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00260e:	d107      	bne.n	1a002620 <__cmpdf2+0x74>
1a002610:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002618:	d1d6      	bne.n	1a0025c8 <__cmpdf2+0x1c>
1a00261a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00261e:	d0d3      	beq.n	1a0025c8 <__cmpdf2+0x1c>
1a002620:	f85d 0b04 	ldr.w	r0, [sp], #4
1a002624:	4770      	bx	lr
1a002626:	bf00      	nop

1a002628 <__aeabi_cdrcmple>:
1a002628:	4684      	mov	ip, r0
1a00262a:	4610      	mov	r0, r2
1a00262c:	4662      	mov	r2, ip
1a00262e:	468c      	mov	ip, r1
1a002630:	4619      	mov	r1, r3
1a002632:	4663      	mov	r3, ip
1a002634:	e000      	b.n	1a002638 <__aeabi_cdcmpeq>
1a002636:	bf00      	nop

1a002638 <__aeabi_cdcmpeq>:
1a002638:	b501      	push	{r0, lr}
1a00263a:	f7ff ffb7 	bl	1a0025ac <__cmpdf2>
1a00263e:	2800      	cmp	r0, #0
1a002640:	bf48      	it	mi
1a002642:	f110 0f00 	cmnmi.w	r0, #0
1a002646:	bd01      	pop	{r0, pc}

1a002648 <__aeabi_dcmpeq>:
1a002648:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00264c:	f7ff fff4 	bl	1a002638 <__aeabi_cdcmpeq>
1a002650:	bf0c      	ite	eq
1a002652:	2001      	moveq	r0, #1
1a002654:	2000      	movne	r0, #0
1a002656:	f85d fb08 	ldr.w	pc, [sp], #8
1a00265a:	bf00      	nop

1a00265c <__aeabi_dcmplt>:
1a00265c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002660:	f7ff ffea 	bl	1a002638 <__aeabi_cdcmpeq>
1a002664:	bf34      	ite	cc
1a002666:	2001      	movcc	r0, #1
1a002668:	2000      	movcs	r0, #0
1a00266a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00266e:	bf00      	nop

1a002670 <__aeabi_dcmple>:
1a002670:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002674:	f7ff ffe0 	bl	1a002638 <__aeabi_cdcmpeq>
1a002678:	bf94      	ite	ls
1a00267a:	2001      	movls	r0, #1
1a00267c:	2000      	movhi	r0, #0
1a00267e:	f85d fb08 	ldr.w	pc, [sp], #8
1a002682:	bf00      	nop

1a002684 <__aeabi_dcmpge>:
1a002684:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002688:	f7ff ffce 	bl	1a002628 <__aeabi_cdrcmple>
1a00268c:	bf94      	ite	ls
1a00268e:	2001      	movls	r0, #1
1a002690:	2000      	movhi	r0, #0
1a002692:	f85d fb08 	ldr.w	pc, [sp], #8
1a002696:	bf00      	nop

1a002698 <__aeabi_dcmpgt>:
1a002698:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00269c:	f7ff ffc4 	bl	1a002628 <__aeabi_cdrcmple>
1a0026a0:	bf34      	ite	cc
1a0026a2:	2001      	movcc	r0, #1
1a0026a4:	2000      	movcs	r0, #0
1a0026a6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0026aa:	bf00      	nop

1a0026ac <__aeabi_dcmpun>:
1a0026ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0026b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0026b4:	d102      	bne.n	1a0026bc <__aeabi_dcmpun+0x10>
1a0026b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a0026ba:	d10a      	bne.n	1a0026d2 <__aeabi_dcmpun+0x26>
1a0026bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0026c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0026c4:	d102      	bne.n	1a0026cc <__aeabi_dcmpun+0x20>
1a0026c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0026ca:	d102      	bne.n	1a0026d2 <__aeabi_dcmpun+0x26>
1a0026cc:	f04f 0000 	mov.w	r0, #0
1a0026d0:	4770      	bx	lr
1a0026d2:	f04f 0001 	mov.w	r0, #1
1a0026d6:	4770      	bx	lr

1a0026d8 <__aeabi_d2iz>:
1a0026d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0026dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a0026e0:	d215      	bcs.n	1a00270e <__aeabi_d2iz+0x36>
1a0026e2:	d511      	bpl.n	1a002708 <__aeabi_d2iz+0x30>
1a0026e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a0026e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a0026ec:	d912      	bls.n	1a002714 <__aeabi_d2iz+0x3c>
1a0026ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0026f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0026f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a0026fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0026fe:	fa23 f002 	lsr.w	r0, r3, r2
1a002702:	bf18      	it	ne
1a002704:	4240      	negne	r0, r0
1a002706:	4770      	bx	lr
1a002708:	f04f 0000 	mov.w	r0, #0
1a00270c:	4770      	bx	lr
1a00270e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a002712:	d105      	bne.n	1a002720 <__aeabi_d2iz+0x48>
1a002714:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a002718:	bf08      	it	eq
1a00271a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00271e:	4770      	bx	lr
1a002720:	f04f 0000 	mov.w	r0, #0
1a002724:	4770      	bx	lr
1a002726:	bf00      	nop

1a002728 <__aeabi_uldivmod>:
1a002728:	b953      	cbnz	r3, 1a002740 <__aeabi_uldivmod+0x18>
1a00272a:	b94a      	cbnz	r2, 1a002740 <__aeabi_uldivmod+0x18>
1a00272c:	2900      	cmp	r1, #0
1a00272e:	bf08      	it	eq
1a002730:	2800      	cmpeq	r0, #0
1a002732:	bf1c      	itt	ne
1a002734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00273c:	f000 b974 	b.w	1a002a28 <__aeabi_idiv0>
1a002740:	f1ad 0c08 	sub.w	ip, sp, #8
1a002744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002748:	f000 f806 	bl	1a002758 <__udivmoddi4>
1a00274c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002754:	b004      	add	sp, #16
1a002756:	4770      	bx	lr

1a002758 <__udivmoddi4>:
1a002758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00275c:	9e08      	ldr	r6, [sp, #32]
1a00275e:	4604      	mov	r4, r0
1a002760:	4688      	mov	r8, r1
1a002762:	2b00      	cmp	r3, #0
1a002764:	f040 8085 	bne.w	1a002872 <__udivmoddi4+0x11a>
1a002768:	428a      	cmp	r2, r1
1a00276a:	4615      	mov	r5, r2
1a00276c:	d948      	bls.n	1a002800 <__udivmoddi4+0xa8>
1a00276e:	fab2 f282 	clz	r2, r2
1a002772:	b14a      	cbz	r2, 1a002788 <__udivmoddi4+0x30>
1a002774:	f1c2 0720 	rsb	r7, r2, #32
1a002778:	fa01 f302 	lsl.w	r3, r1, r2
1a00277c:	fa20 f707 	lsr.w	r7, r0, r7
1a002780:	4095      	lsls	r5, r2
1a002782:	ea47 0803 	orr.w	r8, r7, r3
1a002786:	4094      	lsls	r4, r2
1a002788:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00278c:	0c23      	lsrs	r3, r4, #16
1a00278e:	fbb8 f7fe 	udiv	r7, r8, lr
1a002792:	fa1f fc85 	uxth.w	ip, r5
1a002796:	fb0e 8817 	mls	r8, lr, r7, r8
1a00279a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00279e:	fb07 f10c 	mul.w	r1, r7, ip
1a0027a2:	4299      	cmp	r1, r3
1a0027a4:	d909      	bls.n	1a0027ba <__udivmoddi4+0x62>
1a0027a6:	18eb      	adds	r3, r5, r3
1a0027a8:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0027ac:	f080 80e3 	bcs.w	1a002976 <__udivmoddi4+0x21e>
1a0027b0:	4299      	cmp	r1, r3
1a0027b2:	f240 80e0 	bls.w	1a002976 <__udivmoddi4+0x21e>
1a0027b6:	3f02      	subs	r7, #2
1a0027b8:	442b      	add	r3, r5
1a0027ba:	1a5b      	subs	r3, r3, r1
1a0027bc:	b2a4      	uxth	r4, r4
1a0027be:	fbb3 f0fe 	udiv	r0, r3, lr
1a0027c2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0027c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0027ca:	fb00 fc0c 	mul.w	ip, r0, ip
1a0027ce:	45a4      	cmp	ip, r4
1a0027d0:	d909      	bls.n	1a0027e6 <__udivmoddi4+0x8e>
1a0027d2:	192c      	adds	r4, r5, r4
1a0027d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0027d8:	f080 80cb 	bcs.w	1a002972 <__udivmoddi4+0x21a>
1a0027dc:	45a4      	cmp	ip, r4
1a0027de:	f240 80c8 	bls.w	1a002972 <__udivmoddi4+0x21a>
1a0027e2:	3802      	subs	r0, #2
1a0027e4:	442c      	add	r4, r5
1a0027e6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0027ea:	eba4 040c 	sub.w	r4, r4, ip
1a0027ee:	2700      	movs	r7, #0
1a0027f0:	b11e      	cbz	r6, 1a0027fa <__udivmoddi4+0xa2>
1a0027f2:	40d4      	lsrs	r4, r2
1a0027f4:	2300      	movs	r3, #0
1a0027f6:	e9c6 4300 	strd	r4, r3, [r6]
1a0027fa:	4639      	mov	r1, r7
1a0027fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002800:	2a00      	cmp	r2, #0
1a002802:	d053      	beq.n	1a0028ac <__udivmoddi4+0x154>
1a002804:	fab2 f282 	clz	r2, r2
1a002808:	2a00      	cmp	r2, #0
1a00280a:	f040 80b6 	bne.w	1a00297a <__udivmoddi4+0x222>
1a00280e:	1b49      	subs	r1, r1, r5
1a002810:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002814:	fa1f f885 	uxth.w	r8, r5
1a002818:	2701      	movs	r7, #1
1a00281a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00281e:	0c23      	lsrs	r3, r4, #16
1a002820:	fb0e 111c 	mls	r1, lr, ip, r1
1a002824:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002828:	fb08 f10c 	mul.w	r1, r8, ip
1a00282c:	4299      	cmp	r1, r3
1a00282e:	d907      	bls.n	1a002840 <__udivmoddi4+0xe8>
1a002830:	18eb      	adds	r3, r5, r3
1a002832:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002836:	d202      	bcs.n	1a00283e <__udivmoddi4+0xe6>
1a002838:	4299      	cmp	r1, r3
1a00283a:	f200 80ec 	bhi.w	1a002a16 <__udivmoddi4+0x2be>
1a00283e:	4684      	mov	ip, r0
1a002840:	1a59      	subs	r1, r3, r1
1a002842:	b2a3      	uxth	r3, r4
1a002844:	fbb1 f0fe 	udiv	r0, r1, lr
1a002848:	fb0e 1410 	mls	r4, lr, r0, r1
1a00284c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002850:	fb08 f800 	mul.w	r8, r8, r0
1a002854:	45a0      	cmp	r8, r4
1a002856:	d907      	bls.n	1a002868 <__udivmoddi4+0x110>
1a002858:	192c      	adds	r4, r5, r4
1a00285a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00285e:	d202      	bcs.n	1a002866 <__udivmoddi4+0x10e>
1a002860:	45a0      	cmp	r8, r4
1a002862:	f200 80dc 	bhi.w	1a002a1e <__udivmoddi4+0x2c6>
1a002866:	4618      	mov	r0, r3
1a002868:	eba4 0408 	sub.w	r4, r4, r8
1a00286c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002870:	e7be      	b.n	1a0027f0 <__udivmoddi4+0x98>
1a002872:	428b      	cmp	r3, r1
1a002874:	d908      	bls.n	1a002888 <__udivmoddi4+0x130>
1a002876:	2e00      	cmp	r6, #0
1a002878:	d078      	beq.n	1a00296c <__udivmoddi4+0x214>
1a00287a:	2700      	movs	r7, #0
1a00287c:	e9c6 0100 	strd	r0, r1, [r6]
1a002880:	4638      	mov	r0, r7
1a002882:	4639      	mov	r1, r7
1a002884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002888:	fab3 f783 	clz	r7, r3
1a00288c:	b97f      	cbnz	r7, 1a0028ae <__udivmoddi4+0x156>
1a00288e:	428b      	cmp	r3, r1
1a002890:	d302      	bcc.n	1a002898 <__udivmoddi4+0x140>
1a002892:	4282      	cmp	r2, r0
1a002894:	f200 80bd 	bhi.w	1a002a12 <__udivmoddi4+0x2ba>
1a002898:	1a84      	subs	r4, r0, r2
1a00289a:	eb61 0303 	sbc.w	r3, r1, r3
1a00289e:	2001      	movs	r0, #1
1a0028a0:	4698      	mov	r8, r3
1a0028a2:	2e00      	cmp	r6, #0
1a0028a4:	d0a9      	beq.n	1a0027fa <__udivmoddi4+0xa2>
1a0028a6:	e9c6 4800 	strd	r4, r8, [r6]
1a0028aa:	e7a6      	b.n	1a0027fa <__udivmoddi4+0xa2>
1a0028ac:	deff      	udf	#255	; 0xff
1a0028ae:	f1c7 0520 	rsb	r5, r7, #32
1a0028b2:	40bb      	lsls	r3, r7
1a0028b4:	fa22 fc05 	lsr.w	ip, r2, r5
1a0028b8:	ea4c 0c03 	orr.w	ip, ip, r3
1a0028bc:	fa01 f407 	lsl.w	r4, r1, r7
1a0028c0:	fa20 f805 	lsr.w	r8, r0, r5
1a0028c4:	fa21 f305 	lsr.w	r3, r1, r5
1a0028c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0028cc:	ea48 0404 	orr.w	r4, r8, r4
1a0028d0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0028d4:	0c21      	lsrs	r1, r4, #16
1a0028d6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0028da:	fa1f f88c 	uxth.w	r8, ip
1a0028de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0028e2:	fb09 fa08 	mul.w	sl, r9, r8
1a0028e6:	459a      	cmp	sl, r3
1a0028e8:	fa02 f207 	lsl.w	r2, r2, r7
1a0028ec:	fa00 f107 	lsl.w	r1, r0, r7
1a0028f0:	d90b      	bls.n	1a00290a <__udivmoddi4+0x1b2>
1a0028f2:	eb1c 0303 	adds.w	r3, ip, r3
1a0028f6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0028fa:	f080 8088 	bcs.w	1a002a0e <__udivmoddi4+0x2b6>
1a0028fe:	459a      	cmp	sl, r3
1a002900:	f240 8085 	bls.w	1a002a0e <__udivmoddi4+0x2b6>
1a002904:	f1a9 0902 	sub.w	r9, r9, #2
1a002908:	4463      	add	r3, ip
1a00290a:	eba3 030a 	sub.w	r3, r3, sl
1a00290e:	b2a4      	uxth	r4, r4
1a002910:	fbb3 f0fe 	udiv	r0, r3, lr
1a002914:	fb0e 3310 	mls	r3, lr, r0, r3
1a002918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00291c:	fb00 f808 	mul.w	r8, r0, r8
1a002920:	45a0      	cmp	r8, r4
1a002922:	d908      	bls.n	1a002936 <__udivmoddi4+0x1de>
1a002924:	eb1c 0404 	adds.w	r4, ip, r4
1a002928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00292c:	d26b      	bcs.n	1a002a06 <__udivmoddi4+0x2ae>
1a00292e:	45a0      	cmp	r8, r4
1a002930:	d969      	bls.n	1a002a06 <__udivmoddi4+0x2ae>
1a002932:	3802      	subs	r0, #2
1a002934:	4464      	add	r4, ip
1a002936:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00293a:	eba4 0408 	sub.w	r4, r4, r8
1a00293e:	fba0 8902 	umull	r8, r9, r0, r2
1a002942:	454c      	cmp	r4, r9
1a002944:	46c6      	mov	lr, r8
1a002946:	464b      	mov	r3, r9
1a002948:	d354      	bcc.n	1a0029f4 <__udivmoddi4+0x29c>
1a00294a:	d051      	beq.n	1a0029f0 <__udivmoddi4+0x298>
1a00294c:	2e00      	cmp	r6, #0
1a00294e:	d069      	beq.n	1a002a24 <__udivmoddi4+0x2cc>
1a002950:	ebb1 020e 	subs.w	r2, r1, lr
1a002954:	eb64 0403 	sbc.w	r4, r4, r3
1a002958:	fa04 f505 	lsl.w	r5, r4, r5
1a00295c:	fa22 f307 	lsr.w	r3, r2, r7
1a002960:	40fc      	lsrs	r4, r7
1a002962:	431d      	orrs	r5, r3
1a002964:	e9c6 5400 	strd	r5, r4, [r6]
1a002968:	2700      	movs	r7, #0
1a00296a:	e746      	b.n	1a0027fa <__udivmoddi4+0xa2>
1a00296c:	4637      	mov	r7, r6
1a00296e:	4630      	mov	r0, r6
1a002970:	e743      	b.n	1a0027fa <__udivmoddi4+0xa2>
1a002972:	4618      	mov	r0, r3
1a002974:	e737      	b.n	1a0027e6 <__udivmoddi4+0x8e>
1a002976:	4607      	mov	r7, r0
1a002978:	e71f      	b.n	1a0027ba <__udivmoddi4+0x62>
1a00297a:	f1c2 0320 	rsb	r3, r2, #32
1a00297e:	fa20 f703 	lsr.w	r7, r0, r3
1a002982:	4095      	lsls	r5, r2
1a002984:	fa01 f002 	lsl.w	r0, r1, r2
1a002988:	fa21 f303 	lsr.w	r3, r1, r3
1a00298c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002990:	4338      	orrs	r0, r7
1a002992:	0c01      	lsrs	r1, r0, #16
1a002994:	fbb3 f7fe 	udiv	r7, r3, lr
1a002998:	fa1f f885 	uxth.w	r8, r5
1a00299c:	fb0e 3317 	mls	r3, lr, r7, r3
1a0029a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0029a4:	fb07 f308 	mul.w	r3, r7, r8
1a0029a8:	428b      	cmp	r3, r1
1a0029aa:	fa04 f402 	lsl.w	r4, r4, r2
1a0029ae:	d907      	bls.n	1a0029c0 <__udivmoddi4+0x268>
1a0029b0:	1869      	adds	r1, r5, r1
1a0029b2:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0029b6:	d228      	bcs.n	1a002a0a <__udivmoddi4+0x2b2>
1a0029b8:	428b      	cmp	r3, r1
1a0029ba:	d926      	bls.n	1a002a0a <__udivmoddi4+0x2b2>
1a0029bc:	3f02      	subs	r7, #2
1a0029be:	4429      	add	r1, r5
1a0029c0:	1acb      	subs	r3, r1, r3
1a0029c2:	b281      	uxth	r1, r0
1a0029c4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0029c8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0029cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0029d0:	fb00 f308 	mul.w	r3, r0, r8
1a0029d4:	428b      	cmp	r3, r1
1a0029d6:	d907      	bls.n	1a0029e8 <__udivmoddi4+0x290>
1a0029d8:	1869      	adds	r1, r5, r1
1a0029da:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0029de:	d210      	bcs.n	1a002a02 <__udivmoddi4+0x2aa>
1a0029e0:	428b      	cmp	r3, r1
1a0029e2:	d90e      	bls.n	1a002a02 <__udivmoddi4+0x2aa>
1a0029e4:	3802      	subs	r0, #2
1a0029e6:	4429      	add	r1, r5
1a0029e8:	1ac9      	subs	r1, r1, r3
1a0029ea:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0029ee:	e714      	b.n	1a00281a <__udivmoddi4+0xc2>
1a0029f0:	4541      	cmp	r1, r8
1a0029f2:	d2ab      	bcs.n	1a00294c <__udivmoddi4+0x1f4>
1a0029f4:	ebb8 0e02 	subs.w	lr, r8, r2
1a0029f8:	eb69 020c 	sbc.w	r2, r9, ip
1a0029fc:	3801      	subs	r0, #1
1a0029fe:	4613      	mov	r3, r2
1a002a00:	e7a4      	b.n	1a00294c <__udivmoddi4+0x1f4>
1a002a02:	4660      	mov	r0, ip
1a002a04:	e7f0      	b.n	1a0029e8 <__udivmoddi4+0x290>
1a002a06:	4618      	mov	r0, r3
1a002a08:	e795      	b.n	1a002936 <__udivmoddi4+0x1de>
1a002a0a:	4667      	mov	r7, ip
1a002a0c:	e7d8      	b.n	1a0029c0 <__udivmoddi4+0x268>
1a002a0e:	4681      	mov	r9, r0
1a002a10:	e77b      	b.n	1a00290a <__udivmoddi4+0x1b2>
1a002a12:	4638      	mov	r0, r7
1a002a14:	e745      	b.n	1a0028a2 <__udivmoddi4+0x14a>
1a002a16:	f1ac 0c02 	sub.w	ip, ip, #2
1a002a1a:	442b      	add	r3, r5
1a002a1c:	e710      	b.n	1a002840 <__udivmoddi4+0xe8>
1a002a1e:	3802      	subs	r0, #2
1a002a20:	442c      	add	r4, r5
1a002a22:	e721      	b.n	1a002868 <__udivmoddi4+0x110>
1a002a24:	4637      	mov	r7, r6
1a002a26:	e6e8      	b.n	1a0027fa <__udivmoddi4+0xa2>

1a002a28 <__aeabi_idiv0>:
1a002a28:	4770      	bx	lr
1a002a2a:	bf00      	nop

1a002a2c <_fclose_r>:
1a002a2c:	b570      	push	{r4, r5, r6, lr}
1a002a2e:	2900      	cmp	r1, #0
1a002a30:	d04a      	beq.n	1a002ac8 <_fclose_r+0x9c>
1a002a32:	4605      	mov	r5, r0
1a002a34:	460c      	mov	r4, r1
1a002a36:	b110      	cbz	r0, 1a002a3e <_fclose_r+0x12>
1a002a38:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a002a3a:	2b00      	cmp	r3, #0
1a002a3c:	d047      	beq.n	1a002ace <_fclose_r+0xa2>
1a002a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002a44:	07d8      	lsls	r0, r3, #31
1a002a46:	d532      	bpl.n	1a002aae <_fclose_r+0x82>
1a002a48:	2a00      	cmp	r2, #0
1a002a4a:	d03d      	beq.n	1a002ac8 <_fclose_r+0x9c>
1a002a4c:	4621      	mov	r1, r4
1a002a4e:	4628      	mov	r0, r5
1a002a50:	f000 f854 	bl	1a002afc <__sflush_r>
1a002a54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002a56:	4606      	mov	r6, r0
1a002a58:	b133      	cbz	r3, 1a002a68 <_fclose_r+0x3c>
1a002a5a:	69e1      	ldr	r1, [r4, #28]
1a002a5c:	4628      	mov	r0, r5
1a002a5e:	4798      	blx	r3
1a002a60:	2800      	cmp	r0, #0
1a002a62:	bfb8      	it	lt
1a002a64:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a002a68:	89a3      	ldrh	r3, [r4, #12]
1a002a6a:	061a      	lsls	r2, r3, #24
1a002a6c:	d43c      	bmi.n	1a002ae8 <_fclose_r+0xbc>
1a002a6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002a70:	b141      	cbz	r1, 1a002a84 <_fclose_r+0x58>
1a002a72:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002a76:	4299      	cmp	r1, r3
1a002a78:	d002      	beq.n	1a002a80 <_fclose_r+0x54>
1a002a7a:	4628      	mov	r0, r5
1a002a7c:	f000 f9c6 	bl	1a002e0c <_free_r>
1a002a80:	2300      	movs	r3, #0
1a002a82:	6323      	str	r3, [r4, #48]	; 0x30
1a002a84:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002a86:	b121      	cbz	r1, 1a002a92 <_fclose_r+0x66>
1a002a88:	4628      	mov	r0, r5
1a002a8a:	f000 f9bf 	bl	1a002e0c <_free_r>
1a002a8e:	2300      	movs	r3, #0
1a002a90:	6463      	str	r3, [r4, #68]	; 0x44
1a002a92:	f000 f95f 	bl	1a002d54 <__sfp_lock_acquire>
1a002a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002a98:	2200      	movs	r2, #0
1a002a9a:	07db      	lsls	r3, r3, #31
1a002a9c:	81a2      	strh	r2, [r4, #12]
1a002a9e:	d528      	bpl.n	1a002af2 <_fclose_r+0xc6>
1a002aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002aa2:	f000 faf9 	bl	1a003098 <__retarget_lock_close_recursive>
1a002aa6:	f000 f95b 	bl	1a002d60 <__sfp_lock_release>
1a002aaa:	4630      	mov	r0, r6
1a002aac:	bd70      	pop	{r4, r5, r6, pc}
1a002aae:	0591      	lsls	r1, r2, #22
1a002ab0:	d4cc      	bmi.n	1a002a4c <_fclose_r+0x20>
1a002ab2:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002ab4:	f000 faf2 	bl	1a00309c <__retarget_lock_acquire_recursive>
1a002ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002abc:	2b00      	cmp	r3, #0
1a002abe:	d1c5      	bne.n	1a002a4c <_fclose_r+0x20>
1a002ac0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a002ac2:	f016 0601 	ands.w	r6, r6, #1
1a002ac6:	d00a      	beq.n	1a002ade <_fclose_r+0xb2>
1a002ac8:	2600      	movs	r6, #0
1a002aca:	4630      	mov	r0, r6
1a002acc:	bd70      	pop	{r4, r5, r6, pc}
1a002ace:	f000 f917 	bl	1a002d00 <__sinit>
1a002ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002ad8:	07d8      	lsls	r0, r3, #31
1a002ada:	d4b5      	bmi.n	1a002a48 <_fclose_r+0x1c>
1a002adc:	e7e7      	b.n	1a002aae <_fclose_r+0x82>
1a002ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002ae0:	f000 fade 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a002ae4:	4630      	mov	r0, r6
1a002ae6:	bd70      	pop	{r4, r5, r6, pc}
1a002ae8:	6921      	ldr	r1, [r4, #16]
1a002aea:	4628      	mov	r0, r5
1a002aec:	f000 f98e 	bl	1a002e0c <_free_r>
1a002af0:	e7bd      	b.n	1a002a6e <_fclose_r+0x42>
1a002af2:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002af4:	f000 fad4 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a002af8:	e7d2      	b.n	1a002aa0 <_fclose_r+0x74>
1a002afa:	bf00      	nop

1a002afc <__sflush_r>:
1a002afc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a002b00:	b29a      	uxth	r2, r3
1a002b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002b06:	460c      	mov	r4, r1
1a002b08:	0711      	lsls	r1, r2, #28
1a002b0a:	4680      	mov	r8, r0
1a002b0c:	d448      	bmi.n	1a002ba0 <__sflush_r+0xa4>
1a002b0e:	6862      	ldr	r2, [r4, #4]
1a002b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002b14:	2a00      	cmp	r2, #0
1a002b16:	81a3      	strh	r3, [r4, #12]
1a002b18:	dd5d      	ble.n	1a002bd6 <__sflush_r+0xda>
1a002b1a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a002b1c:	2d00      	cmp	r5, #0
1a002b1e:	d057      	beq.n	1a002bd0 <__sflush_r+0xd4>
1a002b20:	2200      	movs	r2, #0
1a002b22:	b29b      	uxth	r3, r3
1a002b24:	f8d8 6000 	ldr.w	r6, [r8]
1a002b28:	69e1      	ldr	r1, [r4, #28]
1a002b2a:	f8c8 2000 	str.w	r2, [r8]
1a002b2e:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a002b32:	d154      	bne.n	1a002bde <__sflush_r+0xe2>
1a002b34:	2301      	movs	r3, #1
1a002b36:	4640      	mov	r0, r8
1a002b38:	47a8      	blx	r5
1a002b3a:	1c43      	adds	r3, r0, #1
1a002b3c:	4602      	mov	r2, r0
1a002b3e:	d065      	beq.n	1a002c0c <__sflush_r+0x110>
1a002b40:	89a3      	ldrh	r3, [r4, #12]
1a002b42:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a002b44:	69e1      	ldr	r1, [r4, #28]
1a002b46:	075f      	lsls	r7, r3, #29
1a002b48:	d505      	bpl.n	1a002b56 <__sflush_r+0x5a>
1a002b4a:	6860      	ldr	r0, [r4, #4]
1a002b4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002b4e:	1a12      	subs	r2, r2, r0
1a002b50:	b10b      	cbz	r3, 1a002b56 <__sflush_r+0x5a>
1a002b52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002b54:	1ad2      	subs	r2, r2, r3
1a002b56:	2300      	movs	r3, #0
1a002b58:	4640      	mov	r0, r8
1a002b5a:	47a8      	blx	r5
1a002b5c:	1c45      	adds	r5, r0, #1
1a002b5e:	d148      	bne.n	1a002bf2 <__sflush_r+0xf6>
1a002b60:	f8d8 2000 	ldr.w	r2, [r8]
1a002b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002b68:	2a00      	cmp	r2, #0
1a002b6a:	d05c      	beq.n	1a002c26 <__sflush_r+0x12a>
1a002b6c:	2a1d      	cmp	r2, #29
1a002b6e:	d001      	beq.n	1a002b74 <__sflush_r+0x78>
1a002b70:	2a16      	cmp	r2, #22
1a002b72:	d164      	bne.n	1a002c3e <__sflush_r+0x142>
1a002b74:	6922      	ldr	r2, [r4, #16]
1a002b76:	2100      	movs	r1, #0
1a002b78:	e9c4 2100 	strd	r2, r1, [r4]
1a002b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002b80:	81a3      	strh	r3, [r4, #12]
1a002b82:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002b84:	f8c8 6000 	str.w	r6, [r8]
1a002b88:	b311      	cbz	r1, 1a002bd0 <__sflush_r+0xd4>
1a002b8a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002b8e:	4299      	cmp	r1, r3
1a002b90:	d002      	beq.n	1a002b98 <__sflush_r+0x9c>
1a002b92:	4640      	mov	r0, r8
1a002b94:	f000 f93a 	bl	1a002e0c <_free_r>
1a002b98:	2000      	movs	r0, #0
1a002b9a:	6320      	str	r0, [r4, #48]	; 0x30
1a002b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002ba0:	6926      	ldr	r6, [r4, #16]
1a002ba2:	b1ae      	cbz	r6, 1a002bd0 <__sflush_r+0xd4>
1a002ba4:	6825      	ldr	r5, [r4, #0]
1a002ba6:	6026      	str	r6, [r4, #0]
1a002ba8:	0791      	lsls	r1, r2, #30
1a002baa:	bf0c      	ite	eq
1a002bac:	6963      	ldreq	r3, [r4, #20]
1a002bae:	2300      	movne	r3, #0
1a002bb0:	1bad      	subs	r5, r5, r6
1a002bb2:	60a3      	str	r3, [r4, #8]
1a002bb4:	e00a      	b.n	1a002bcc <__sflush_r+0xd0>
1a002bb6:	462b      	mov	r3, r5
1a002bb8:	4632      	mov	r2, r6
1a002bba:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a002bbc:	69e1      	ldr	r1, [r4, #28]
1a002bbe:	4640      	mov	r0, r8
1a002bc0:	47b8      	blx	r7
1a002bc2:	2800      	cmp	r0, #0
1a002bc4:	eba5 0500 	sub.w	r5, r5, r0
1a002bc8:	4406      	add	r6, r0
1a002bca:	dd0a      	ble.n	1a002be2 <__sflush_r+0xe6>
1a002bcc:	2d00      	cmp	r5, #0
1a002bce:	dcf2      	bgt.n	1a002bb6 <__sflush_r+0xba>
1a002bd0:	2000      	movs	r0, #0
1a002bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002bd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a002bd8:	2a00      	cmp	r2, #0
1a002bda:	dc9e      	bgt.n	1a002b1a <__sflush_r+0x1e>
1a002bdc:	e7f8      	b.n	1a002bd0 <__sflush_r+0xd4>
1a002bde:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a002be0:	e7b1      	b.n	1a002b46 <__sflush_r+0x4a>
1a002be2:	89a3      	ldrh	r3, [r4, #12]
1a002be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002be8:	81a3      	strh	r3, [r4, #12]
1a002bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002bf6:	6922      	ldr	r2, [r4, #16]
1a002bf8:	6022      	str	r2, [r4, #0]
1a002bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002bfe:	2200      	movs	r2, #0
1a002c00:	6062      	str	r2, [r4, #4]
1a002c02:	04da      	lsls	r2, r3, #19
1a002c04:	81a3      	strh	r3, [r4, #12]
1a002c06:	d5bc      	bpl.n	1a002b82 <__sflush_r+0x86>
1a002c08:	6520      	str	r0, [r4, #80]	; 0x50
1a002c0a:	e7ba      	b.n	1a002b82 <__sflush_r+0x86>
1a002c0c:	f8d8 3000 	ldr.w	r3, [r8]
1a002c10:	2b00      	cmp	r3, #0
1a002c12:	d095      	beq.n	1a002b40 <__sflush_r+0x44>
1a002c14:	2b1d      	cmp	r3, #29
1a002c16:	d00f      	beq.n	1a002c38 <__sflush_r+0x13c>
1a002c18:	2b16      	cmp	r3, #22
1a002c1a:	d00d      	beq.n	1a002c38 <__sflush_r+0x13c>
1a002c1c:	89a3      	ldrh	r3, [r4, #12]
1a002c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002c22:	81a3      	strh	r3, [r4, #12]
1a002c24:	e7d5      	b.n	1a002bd2 <__sflush_r+0xd6>
1a002c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002c2a:	6921      	ldr	r1, [r4, #16]
1a002c2c:	81a3      	strh	r3, [r4, #12]
1a002c2e:	04db      	lsls	r3, r3, #19
1a002c30:	e9c4 1200 	strd	r1, r2, [r4]
1a002c34:	d5a5      	bpl.n	1a002b82 <__sflush_r+0x86>
1a002c36:	e7e7      	b.n	1a002c08 <__sflush_r+0x10c>
1a002c38:	f8c8 6000 	str.w	r6, [r8]
1a002c3c:	e7c8      	b.n	1a002bd0 <__sflush_r+0xd4>
1a002c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002c42:	81a3      	strh	r3, [r4, #12]
1a002c44:	e7c5      	b.n	1a002bd2 <__sflush_r+0xd6>
1a002c46:	bf00      	nop

1a002c48 <_fflush_r>:
1a002c48:	b538      	push	{r3, r4, r5, lr}
1a002c4a:	460d      	mov	r5, r1
1a002c4c:	4604      	mov	r4, r0
1a002c4e:	b108      	cbz	r0, 1a002c54 <_fflush_r+0xc>
1a002c50:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a002c52:	b1a3      	cbz	r3, 1a002c7e <_fflush_r+0x36>
1a002c54:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a002c58:	b1b8      	cbz	r0, 1a002c8a <_fflush_r+0x42>
1a002c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002c5c:	07db      	lsls	r3, r3, #31
1a002c5e:	d401      	bmi.n	1a002c64 <_fflush_r+0x1c>
1a002c60:	0581      	lsls	r1, r0, #22
1a002c62:	d515      	bpl.n	1a002c90 <_fflush_r+0x48>
1a002c64:	4620      	mov	r0, r4
1a002c66:	4629      	mov	r1, r5
1a002c68:	f7ff ff48 	bl	1a002afc <__sflush_r>
1a002c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002c6e:	07da      	lsls	r2, r3, #31
1a002c70:	4604      	mov	r4, r0
1a002c72:	d402      	bmi.n	1a002c7a <_fflush_r+0x32>
1a002c74:	89ab      	ldrh	r3, [r5, #12]
1a002c76:	059b      	lsls	r3, r3, #22
1a002c78:	d50e      	bpl.n	1a002c98 <_fflush_r+0x50>
1a002c7a:	4620      	mov	r0, r4
1a002c7c:	bd38      	pop	{r3, r4, r5, pc}
1a002c7e:	f000 f83f 	bl	1a002d00 <__sinit>
1a002c82:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a002c86:	2800      	cmp	r0, #0
1a002c88:	d1e7      	bne.n	1a002c5a <_fflush_r+0x12>
1a002c8a:	4604      	mov	r4, r0
1a002c8c:	4620      	mov	r0, r4
1a002c8e:	bd38      	pop	{r3, r4, r5, pc}
1a002c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002c92:	f000 fa03 	bl	1a00309c <__retarget_lock_acquire_recursive>
1a002c96:	e7e5      	b.n	1a002c64 <_fflush_r+0x1c>
1a002c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002c9a:	f000 fa01 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a002c9e:	4620      	mov	r0, r4
1a002ca0:	bd38      	pop	{r3, r4, r5, pc}
1a002ca2:	bf00      	nop

1a002ca4 <std>:
1a002ca4:	b510      	push	{r4, lr}
1a002ca6:	2300      	movs	r3, #0
1a002ca8:	4604      	mov	r4, r0
1a002caa:	8181      	strh	r1, [r0, #12]
1a002cac:	81c2      	strh	r2, [r0, #14]
1a002cae:	e9c0 3300 	strd	r3, r3, [r0]
1a002cb2:	6083      	str	r3, [r0, #8]
1a002cb4:	6643      	str	r3, [r0, #100]	; 0x64
1a002cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a002cba:	6183      	str	r3, [r0, #24]
1a002cbc:	4619      	mov	r1, r3
1a002cbe:	2208      	movs	r2, #8
1a002cc0:	305c      	adds	r0, #92	; 0x5c
1a002cc2:	f000 fd41 	bl	1a003748 <memset>
1a002cc6:	4807      	ldr	r0, [pc, #28]	; (1a002ce4 <std+0x40>)
1a002cc8:	4907      	ldr	r1, [pc, #28]	; (1a002ce8 <std+0x44>)
1a002cca:	4a08      	ldr	r2, [pc, #32]	; (1a002cec <std+0x48>)
1a002ccc:	4b08      	ldr	r3, [pc, #32]	; (1a002cf0 <std+0x4c>)
1a002cce:	62e3      	str	r3, [r4, #44]	; 0x2c
1a002cd0:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a002cd4:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a002cd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a002cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a002ce0:	f000 b9d8 	b.w	1a003094 <__retarget_lock_init_recursive>
1a002ce4:	1a0038d5 	.word	0x1a0038d5
1a002ce8:	1a0038f9 	.word	0x1a0038f9
1a002cec:	1a003939 	.word	0x1a003939
1a002cf0:	1a003959 	.word	0x1a003959

1a002cf4 <_cleanup_r>:
1a002cf4:	4901      	ldr	r1, [pc, #4]	; (1a002cfc <_cleanup_r+0x8>)
1a002cf6:	f000 b97f 	b.w	1a002ff8 <_fwalk_reent>
1a002cfa:	bf00      	nop
1a002cfc:	1a002a2d 	.word	0x1a002a2d

1a002d00 <__sinit>:
1a002d00:	b510      	push	{r4, lr}
1a002d02:	4604      	mov	r4, r0
1a002d04:	4811      	ldr	r0, [pc, #68]	; (1a002d4c <__sinit+0x4c>)
1a002d06:	f000 f9c9 	bl	1a00309c <__retarget_lock_acquire_recursive>
1a002d0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a002d0c:	b9c2      	cbnz	r2, 1a002d40 <__sinit+0x40>
1a002d0e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a002d12:	480f      	ldr	r0, [pc, #60]	; (1a002d50 <__sinit+0x50>)
1a002d14:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a002d18:	2103      	movs	r1, #3
1a002d1a:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a002d1e:	63e0      	str	r0, [r4, #60]	; 0x3c
1a002d20:	2104      	movs	r1, #4
1a002d22:	6860      	ldr	r0, [r4, #4]
1a002d24:	f7ff ffbe 	bl	1a002ca4 <std>
1a002d28:	2201      	movs	r2, #1
1a002d2a:	2109      	movs	r1, #9
1a002d2c:	68a0      	ldr	r0, [r4, #8]
1a002d2e:	f7ff ffb9 	bl	1a002ca4 <std>
1a002d32:	2202      	movs	r2, #2
1a002d34:	2112      	movs	r1, #18
1a002d36:	68e0      	ldr	r0, [r4, #12]
1a002d38:	f7ff ffb4 	bl	1a002ca4 <std>
1a002d3c:	2301      	movs	r3, #1
1a002d3e:	63a3      	str	r3, [r4, #56]	; 0x38
1a002d40:	4802      	ldr	r0, [pc, #8]	; (1a002d4c <__sinit+0x4c>)
1a002d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a002d46:	f000 b9ab 	b.w	1a0030a0 <__retarget_lock_release_recursive>
1a002d4a:	bf00      	nop
1a002d4c:	10000e90 	.word	0x10000e90
1a002d50:	1a002cf5 	.word	0x1a002cf5

1a002d54 <__sfp_lock_acquire>:
1a002d54:	4801      	ldr	r0, [pc, #4]	; (1a002d5c <__sfp_lock_acquire+0x8>)
1a002d56:	f000 b9a1 	b.w	1a00309c <__retarget_lock_acquire_recursive>
1a002d5a:	bf00      	nop
1a002d5c:	10000ea4 	.word	0x10000ea4

1a002d60 <__sfp_lock_release>:
1a002d60:	4801      	ldr	r0, [pc, #4]	; (1a002d68 <__sfp_lock_release+0x8>)
1a002d62:	f000 b99d 	b.w	1a0030a0 <__retarget_lock_release_recursive>
1a002d66:	bf00      	nop
1a002d68:	10000ea4 	.word	0x10000ea4

1a002d6c <_malloc_trim_r>:
1a002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002d6e:	4f24      	ldr	r7, [pc, #144]	; (1a002e00 <_malloc_trim_r+0x94>)
1a002d70:	460c      	mov	r4, r1
1a002d72:	4606      	mov	r6, r0
1a002d74:	f000 fd38 	bl	1a0037e8 <__malloc_lock>
1a002d78:	68bb      	ldr	r3, [r7, #8]
1a002d7a:	685d      	ldr	r5, [r3, #4]
1a002d7c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a002d80:	310f      	adds	r1, #15
1a002d82:	f025 0503 	bic.w	r5, r5, #3
1a002d86:	4429      	add	r1, r5
1a002d88:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a002d8c:	f021 010f 	bic.w	r1, r1, #15
1a002d90:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a002d94:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a002d98:	db07      	blt.n	1a002daa <_malloc_trim_r+0x3e>
1a002d9a:	2100      	movs	r1, #0
1a002d9c:	4630      	mov	r0, r6
1a002d9e:	f7fd fc21 	bl	1a0005e4 <_sbrk_r>
1a002da2:	68bb      	ldr	r3, [r7, #8]
1a002da4:	442b      	add	r3, r5
1a002da6:	4298      	cmp	r0, r3
1a002da8:	d004      	beq.n	1a002db4 <_malloc_trim_r+0x48>
1a002daa:	4630      	mov	r0, r6
1a002dac:	f000 fd22 	bl	1a0037f4 <__malloc_unlock>
1a002db0:	2000      	movs	r0, #0
1a002db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002db4:	4261      	negs	r1, r4
1a002db6:	4630      	mov	r0, r6
1a002db8:	f7fd fc14 	bl	1a0005e4 <_sbrk_r>
1a002dbc:	3001      	adds	r0, #1
1a002dbe:	d00d      	beq.n	1a002ddc <_malloc_trim_r+0x70>
1a002dc0:	4b10      	ldr	r3, [pc, #64]	; (1a002e04 <_malloc_trim_r+0x98>)
1a002dc2:	68ba      	ldr	r2, [r7, #8]
1a002dc4:	6819      	ldr	r1, [r3, #0]
1a002dc6:	1b2d      	subs	r5, r5, r4
1a002dc8:	f045 0501 	orr.w	r5, r5, #1
1a002dcc:	4630      	mov	r0, r6
1a002dce:	1b09      	subs	r1, r1, r4
1a002dd0:	6055      	str	r5, [r2, #4]
1a002dd2:	6019      	str	r1, [r3, #0]
1a002dd4:	f000 fd0e 	bl	1a0037f4 <__malloc_unlock>
1a002dd8:	2001      	movs	r0, #1
1a002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002ddc:	2100      	movs	r1, #0
1a002dde:	4630      	mov	r0, r6
1a002de0:	f7fd fc00 	bl	1a0005e4 <_sbrk_r>
1a002de4:	68ba      	ldr	r2, [r7, #8]
1a002de6:	1a83      	subs	r3, r0, r2
1a002de8:	2b0f      	cmp	r3, #15
1a002dea:	ddde      	ble.n	1a002daa <_malloc_trim_r+0x3e>
1a002dec:	4c06      	ldr	r4, [pc, #24]	; (1a002e08 <_malloc_trim_r+0x9c>)
1a002dee:	4905      	ldr	r1, [pc, #20]	; (1a002e04 <_malloc_trim_r+0x98>)
1a002df0:	6824      	ldr	r4, [r4, #0]
1a002df2:	f043 0301 	orr.w	r3, r3, #1
1a002df6:	1b00      	subs	r0, r0, r4
1a002df8:	6053      	str	r3, [r2, #4]
1a002dfa:	6008      	str	r0, [r1, #0]
1a002dfc:	e7d5      	b.n	1a002daa <_malloc_trim_r+0x3e>
1a002dfe:	bf00      	nop
1a002e00:	10000478 	.word	0x10000478
1a002e04:	10000a28 	.word	0x10000a28
1a002e08:	10000880 	.word	0x10000880

1a002e0c <_free_r>:
1a002e0c:	2900      	cmp	r1, #0
1a002e0e:	d05d      	beq.n	1a002ecc <_free_r+0xc0>
1a002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002e12:	460f      	mov	r7, r1
1a002e14:	4606      	mov	r6, r0
1a002e16:	f000 fce7 	bl	1a0037e8 <__malloc_lock>
1a002e1a:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a002e1e:	4c73      	ldr	r4, [pc, #460]	; (1a002fec <_free_r+0x1e0>)
1a002e20:	f02c 0301 	bic.w	r3, ip, #1
1a002e24:	f1a7 0008 	sub.w	r0, r7, #8
1a002e28:	18c2      	adds	r2, r0, r3
1a002e2a:	68a1      	ldr	r1, [r4, #8]
1a002e2c:	6855      	ldr	r5, [r2, #4]
1a002e2e:	4291      	cmp	r1, r2
1a002e30:	f025 0503 	bic.w	r5, r5, #3
1a002e34:	d07f      	beq.n	1a002f36 <_free_r+0x12a>
1a002e36:	f01c 0f01 	tst.w	ip, #1
1a002e3a:	6055      	str	r5, [r2, #4]
1a002e3c:	eb02 0105 	add.w	r1, r2, r5
1a002e40:	d133      	bne.n	1a002eaa <_free_r+0x9e>
1a002e42:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a002e46:	6849      	ldr	r1, [r1, #4]
1a002e48:	eba0 000e 	sub.w	r0, r0, lr
1a002e4c:	f104 0c08 	add.w	ip, r4, #8
1a002e50:	6887      	ldr	r7, [r0, #8]
1a002e52:	4567      	cmp	r7, ip
1a002e54:	4473      	add	r3, lr
1a002e56:	f001 0101 	and.w	r1, r1, #1
1a002e5a:	d060      	beq.n	1a002f1e <_free_r+0x112>
1a002e5c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a002e60:	f8c7 e00c 	str.w	lr, [r7, #12]
1a002e64:	f8ce 7008 	str.w	r7, [lr, #8]
1a002e68:	2900      	cmp	r1, #0
1a002e6a:	f000 8089 	beq.w	1a002f80 <_free_r+0x174>
1a002e6e:	f043 0101 	orr.w	r1, r3, #1
1a002e72:	6041      	str	r1, [r0, #4]
1a002e74:	6013      	str	r3, [r2, #0]
1a002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002e7a:	d230      	bcs.n	1a002ede <_free_r+0xd2>
1a002e7c:	08db      	lsrs	r3, r3, #3
1a002e7e:	1c59      	adds	r1, r3, #1
1a002e80:	6865      	ldr	r5, [r4, #4]
1a002e82:	109a      	asrs	r2, r3, #2
1a002e84:	2301      	movs	r3, #1
1a002e86:	4093      	lsls	r3, r2
1a002e88:	432b      	orrs	r3, r5
1a002e8a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a002e8e:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a002e92:	6063      	str	r3, [r4, #4]
1a002e94:	3a08      	subs	r2, #8
1a002e96:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a002e9a:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a002e9e:	60e8      	str	r0, [r5, #12]
1a002ea0:	4630      	mov	r0, r6
1a002ea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a002ea6:	f000 bca5 	b.w	1a0037f4 <__malloc_unlock>
1a002eaa:	6849      	ldr	r1, [r1, #4]
1a002eac:	07c9      	lsls	r1, r1, #31
1a002eae:	d40e      	bmi.n	1a002ece <_free_r+0xc2>
1a002eb0:	442b      	add	r3, r5
1a002eb2:	f104 0c08 	add.w	ip, r4, #8
1a002eb6:	6891      	ldr	r1, [r2, #8]
1a002eb8:	4561      	cmp	r1, ip
1a002eba:	f043 0501 	orr.w	r5, r3, #1
1a002ebe:	d067      	beq.n	1a002f90 <_free_r+0x184>
1a002ec0:	68d2      	ldr	r2, [r2, #12]
1a002ec2:	60ca      	str	r2, [r1, #12]
1a002ec4:	6091      	str	r1, [r2, #8]
1a002ec6:	6045      	str	r5, [r0, #4]
1a002ec8:	50c3      	str	r3, [r0, r3]
1a002eca:	e7d4      	b.n	1a002e76 <_free_r+0x6a>
1a002ecc:	4770      	bx	lr
1a002ece:	f043 0101 	orr.w	r1, r3, #1
1a002ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002ed6:	f847 1c04 	str.w	r1, [r7, #-4]
1a002eda:	6013      	str	r3, [r2, #0]
1a002edc:	d3ce      	bcc.n	1a002e7c <_free_r+0x70>
1a002ede:	0a5a      	lsrs	r2, r3, #9
1a002ee0:	2a04      	cmp	r2, #4
1a002ee2:	d842      	bhi.n	1a002f6a <_free_r+0x15e>
1a002ee4:	099a      	lsrs	r2, r3, #6
1a002ee6:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a002eea:	00ff      	lsls	r7, r7, #3
1a002eec:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a002ef0:	19e5      	adds	r5, r4, r7
1a002ef2:	59e2      	ldr	r2, [r4, r7]
1a002ef4:	3d08      	subs	r5, #8
1a002ef6:	4295      	cmp	r5, r2
1a002ef8:	d051      	beq.n	1a002f9e <_free_r+0x192>
1a002efa:	6851      	ldr	r1, [r2, #4]
1a002efc:	f021 0103 	bic.w	r1, r1, #3
1a002f00:	4299      	cmp	r1, r3
1a002f02:	d902      	bls.n	1a002f0a <_free_r+0xfe>
1a002f04:	6892      	ldr	r2, [r2, #8]
1a002f06:	4295      	cmp	r5, r2
1a002f08:	d1f7      	bne.n	1a002efa <_free_r+0xee>
1a002f0a:	68d5      	ldr	r5, [r2, #12]
1a002f0c:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a002f10:	60a8      	str	r0, [r5, #8]
1a002f12:	60d0      	str	r0, [r2, #12]
1a002f14:	4630      	mov	r0, r6
1a002f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a002f1a:	f000 bc6b 	b.w	1a0037f4 <__malloc_unlock>
1a002f1e:	2900      	cmp	r1, #0
1a002f20:	d15e      	bne.n	1a002fe0 <_free_r+0x1d4>
1a002f22:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a002f26:	442b      	add	r3, r5
1a002f28:	f043 0401 	orr.w	r4, r3, #1
1a002f2c:	60ca      	str	r2, [r1, #12]
1a002f2e:	6091      	str	r1, [r2, #8]
1a002f30:	6044      	str	r4, [r0, #4]
1a002f32:	50c3      	str	r3, [r0, r3]
1a002f34:	e7b4      	b.n	1a002ea0 <_free_r+0x94>
1a002f36:	f01c 0f01 	tst.w	ip, #1
1a002f3a:	442b      	add	r3, r5
1a002f3c:	d107      	bne.n	1a002f4e <_free_r+0x142>
1a002f3e:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a002f42:	1a80      	subs	r0, r0, r2
1a002f44:	4413      	add	r3, r2
1a002f46:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a002f4a:	60ca      	str	r2, [r1, #12]
1a002f4c:	6091      	str	r1, [r2, #8]
1a002f4e:	4a28      	ldr	r2, [pc, #160]	; (1a002ff0 <_free_r+0x1e4>)
1a002f50:	6812      	ldr	r2, [r2, #0]
1a002f52:	f043 0101 	orr.w	r1, r3, #1
1a002f56:	429a      	cmp	r2, r3
1a002f58:	6041      	str	r1, [r0, #4]
1a002f5a:	60a0      	str	r0, [r4, #8]
1a002f5c:	d8a0      	bhi.n	1a002ea0 <_free_r+0x94>
1a002f5e:	4b25      	ldr	r3, [pc, #148]	; (1a002ff4 <_free_r+0x1e8>)
1a002f60:	4630      	mov	r0, r6
1a002f62:	6819      	ldr	r1, [r3, #0]
1a002f64:	f7ff ff02 	bl	1a002d6c <_malloc_trim_r>
1a002f68:	e79a      	b.n	1a002ea0 <_free_r+0x94>
1a002f6a:	2a14      	cmp	r2, #20
1a002f6c:	d90a      	bls.n	1a002f84 <_free_r+0x178>
1a002f6e:	2a54      	cmp	r2, #84	; 0x54
1a002f70:	d81d      	bhi.n	1a002fae <_free_r+0x1a2>
1a002f72:	0b1a      	lsrs	r2, r3, #12
1a002f74:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a002f78:	00ff      	lsls	r7, r7, #3
1a002f7a:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a002f7e:	e7b7      	b.n	1a002ef0 <_free_r+0xe4>
1a002f80:	442b      	add	r3, r5
1a002f82:	e798      	b.n	1a002eb6 <_free_r+0xaa>
1a002f84:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a002f88:	00ff      	lsls	r7, r7, #3
1a002f8a:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a002f8e:	e7af      	b.n	1a002ef0 <_free_r+0xe4>
1a002f90:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a002f94:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a002f98:	6045      	str	r5, [r0, #4]
1a002f9a:	50c3      	str	r3, [r0, r3]
1a002f9c:	e780      	b.n	1a002ea0 <_free_r+0x94>
1a002f9e:	6863      	ldr	r3, [r4, #4]
1a002fa0:	1089      	asrs	r1, r1, #2
1a002fa2:	2701      	movs	r7, #1
1a002fa4:	fa07 f101 	lsl.w	r1, r7, r1
1a002fa8:	4319      	orrs	r1, r3
1a002faa:	6061      	str	r1, [r4, #4]
1a002fac:	e7ae      	b.n	1a002f0c <_free_r+0x100>
1a002fae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a002fb2:	d806      	bhi.n	1a002fc2 <_free_r+0x1b6>
1a002fb4:	0bda      	lsrs	r2, r3, #15
1a002fb6:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a002fba:	00ff      	lsls	r7, r7, #3
1a002fbc:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a002fc0:	e796      	b.n	1a002ef0 <_free_r+0xe4>
1a002fc2:	f240 5154 	movw	r1, #1364	; 0x554
1a002fc6:	428a      	cmp	r2, r1
1a002fc8:	d806      	bhi.n	1a002fd8 <_free_r+0x1cc>
1a002fca:	0c9a      	lsrs	r2, r3, #18
1a002fcc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a002fd0:	00ff      	lsls	r7, r7, #3
1a002fd2:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a002fd6:	e78b      	b.n	1a002ef0 <_free_r+0xe4>
1a002fd8:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a002fdc:	217e      	movs	r1, #126	; 0x7e
1a002fde:	e787      	b.n	1a002ef0 <_free_r+0xe4>
1a002fe0:	f043 0101 	orr.w	r1, r3, #1
1a002fe4:	6041      	str	r1, [r0, #4]
1a002fe6:	6013      	str	r3, [r2, #0]
1a002fe8:	e75a      	b.n	1a002ea0 <_free_r+0x94>
1a002fea:	bf00      	nop
1a002fec:	10000478 	.word	0x10000478
1a002ff0:	10000884 	.word	0x10000884
1a002ff4:	10000a58 	.word	0x10000a58

1a002ff8 <_fwalk_reent>:
1a002ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002ffc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a003000:	d01f      	beq.n	1a003042 <_fwalk_reent+0x4a>
1a003002:	4688      	mov	r8, r1
1a003004:	4606      	mov	r6, r0
1a003006:	f04f 0900 	mov.w	r9, #0
1a00300a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a00300e:	3d01      	subs	r5, #1
1a003010:	d411      	bmi.n	1a003036 <_fwalk_reent+0x3e>
1a003012:	89a3      	ldrh	r3, [r4, #12]
1a003014:	2b01      	cmp	r3, #1
1a003016:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a00301a:	d908      	bls.n	1a00302e <_fwalk_reent+0x36>
1a00301c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003020:	3301      	adds	r3, #1
1a003022:	4621      	mov	r1, r4
1a003024:	4630      	mov	r0, r6
1a003026:	d002      	beq.n	1a00302e <_fwalk_reent+0x36>
1a003028:	47c0      	blx	r8
1a00302a:	ea49 0900 	orr.w	r9, r9, r0
1a00302e:	1c6b      	adds	r3, r5, #1
1a003030:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a003034:	d1ed      	bne.n	1a003012 <_fwalk_reent+0x1a>
1a003036:	683f      	ldr	r7, [r7, #0]
1a003038:	2f00      	cmp	r7, #0
1a00303a:	d1e6      	bne.n	1a00300a <_fwalk_reent+0x12>
1a00303c:	4648      	mov	r0, r9
1a00303e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003042:	46b9      	mov	r9, r7
1a003044:	4648      	mov	r0, r9
1a003046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00304a:	bf00      	nop

1a00304c <__libc_init_array>:
1a00304c:	b570      	push	{r4, r5, r6, lr}
1a00304e:	4e0d      	ldr	r6, [pc, #52]	; (1a003084 <__libc_init_array+0x38>)
1a003050:	4d0d      	ldr	r5, [pc, #52]	; (1a003088 <__libc_init_array+0x3c>)
1a003052:	1b76      	subs	r6, r6, r5
1a003054:	10b6      	asrs	r6, r6, #2
1a003056:	d006      	beq.n	1a003066 <__libc_init_array+0x1a>
1a003058:	2400      	movs	r4, #0
1a00305a:	3401      	adds	r4, #1
1a00305c:	f855 3b04 	ldr.w	r3, [r5], #4
1a003060:	4798      	blx	r3
1a003062:	42a6      	cmp	r6, r4
1a003064:	d1f9      	bne.n	1a00305a <__libc_init_array+0xe>
1a003066:	4e09      	ldr	r6, [pc, #36]	; (1a00308c <__libc_init_array+0x40>)
1a003068:	4d09      	ldr	r5, [pc, #36]	; (1a003090 <__libc_init_array+0x44>)
1a00306a:	1b76      	subs	r6, r6, r5
1a00306c:	f7fd fa65 	bl	1a00053a <_init>
1a003070:	10b6      	asrs	r6, r6, #2
1a003072:	d006      	beq.n	1a003082 <__libc_init_array+0x36>
1a003074:	2400      	movs	r4, #0
1a003076:	3401      	adds	r4, #1
1a003078:	f855 3b04 	ldr.w	r3, [r5], #4
1a00307c:	4798      	blx	r3
1a00307e:	42a6      	cmp	r6, r4
1a003080:	d1f9      	bne.n	1a003076 <__libc_init_array+0x2a>
1a003082:	bd70      	pop	{r4, r5, r6, pc}
1a003084:	1a008014 	.word	0x1a008014
1a003088:	1a008014 	.word	0x1a008014
1a00308c:	1a008018 	.word	0x1a008018
1a003090:	1a008014 	.word	0x1a008014

1a003094 <__retarget_lock_init_recursive>:
1a003094:	4770      	bx	lr
1a003096:	bf00      	nop

1a003098 <__retarget_lock_close_recursive>:
1a003098:	4770      	bx	lr
1a00309a:	bf00      	nop

1a00309c <__retarget_lock_acquire_recursive>:
1a00309c:	4770      	bx	lr
1a00309e:	bf00      	nop

1a0030a0 <__retarget_lock_release_recursive>:
1a0030a0:	4770      	bx	lr
1a0030a2:	bf00      	nop

1a0030a4 <_malloc_r>:
1a0030a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0030a8:	f101 050b 	add.w	r5, r1, #11
1a0030ac:	2d16      	cmp	r5, #22
1a0030ae:	b083      	sub	sp, #12
1a0030b0:	4606      	mov	r6, r0
1a0030b2:	d823      	bhi.n	1a0030fc <_malloc_r+0x58>
1a0030b4:	2910      	cmp	r1, #16
1a0030b6:	f200 80b9 	bhi.w	1a00322c <_malloc_r+0x188>
1a0030ba:	f000 fb95 	bl	1a0037e8 <__malloc_lock>
1a0030be:	2510      	movs	r5, #16
1a0030c0:	2318      	movs	r3, #24
1a0030c2:	2002      	movs	r0, #2
1a0030c4:	4fba      	ldr	r7, [pc, #744]	; (1a0033b0 <_malloc_r+0x30c>)
1a0030c6:	443b      	add	r3, r7
1a0030c8:	f1a3 0208 	sub.w	r2, r3, #8
1a0030cc:	685c      	ldr	r4, [r3, #4]
1a0030ce:	4294      	cmp	r4, r2
1a0030d0:	f000 80b9 	beq.w	1a003246 <_malloc_r+0x1a2>
1a0030d4:	6863      	ldr	r3, [r4, #4]
1a0030d6:	f023 0303 	bic.w	r3, r3, #3
1a0030da:	4423      	add	r3, r4
1a0030dc:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a0030e0:	685a      	ldr	r2, [r3, #4]
1a0030e2:	60e9      	str	r1, [r5, #12]
1a0030e4:	f042 0201 	orr.w	r2, r2, #1
1a0030e8:	4630      	mov	r0, r6
1a0030ea:	608d      	str	r5, [r1, #8]
1a0030ec:	605a      	str	r2, [r3, #4]
1a0030ee:	f000 fb81 	bl	1a0037f4 <__malloc_unlock>
1a0030f2:	3408      	adds	r4, #8
1a0030f4:	4620      	mov	r0, r4
1a0030f6:	b003      	add	sp, #12
1a0030f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0030fc:	f035 0507 	bics.w	r5, r5, #7
1a003100:	f100 8094 	bmi.w	1a00322c <_malloc_r+0x188>
1a003104:	42a9      	cmp	r1, r5
1a003106:	f200 8091 	bhi.w	1a00322c <_malloc_r+0x188>
1a00310a:	f000 fb6d 	bl	1a0037e8 <__malloc_lock>
1a00310e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a003112:	f0c0 81a2 	bcc.w	1a00345a <_malloc_r+0x3b6>
1a003116:	0a6b      	lsrs	r3, r5, #9
1a003118:	f000 808f 	beq.w	1a00323a <_malloc_r+0x196>
1a00311c:	2b04      	cmp	r3, #4
1a00311e:	f200 8178 	bhi.w	1a003412 <_malloc_r+0x36e>
1a003122:	09ab      	lsrs	r3, r5, #6
1a003124:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a003128:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a00312c:	00c3      	lsls	r3, r0, #3
1a00312e:	4fa0      	ldr	r7, [pc, #640]	; (1a0033b0 <_malloc_r+0x30c>)
1a003130:	443b      	add	r3, r7
1a003132:	f1a3 0108 	sub.w	r1, r3, #8
1a003136:	685c      	ldr	r4, [r3, #4]
1a003138:	42a1      	cmp	r1, r4
1a00313a:	d106      	bne.n	1a00314a <_malloc_r+0xa6>
1a00313c:	e00c      	b.n	1a003158 <_malloc_r+0xb4>
1a00313e:	2a00      	cmp	r2, #0
1a003140:	f280 8127 	bge.w	1a003392 <_malloc_r+0x2ee>
1a003144:	68e4      	ldr	r4, [r4, #12]
1a003146:	42a1      	cmp	r1, r4
1a003148:	d006      	beq.n	1a003158 <_malloc_r+0xb4>
1a00314a:	6863      	ldr	r3, [r4, #4]
1a00314c:	f023 0303 	bic.w	r3, r3, #3
1a003150:	1b5a      	subs	r2, r3, r5
1a003152:	2a0f      	cmp	r2, #15
1a003154:	ddf3      	ble.n	1a00313e <_malloc_r+0x9a>
1a003156:	4660      	mov	r0, ip
1a003158:	693c      	ldr	r4, [r7, #16]
1a00315a:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a0033c4 <_malloc_r+0x320>
1a00315e:	4564      	cmp	r4, ip
1a003160:	d07c      	beq.n	1a00325c <_malloc_r+0x1b8>
1a003162:	6863      	ldr	r3, [r4, #4]
1a003164:	f023 0303 	bic.w	r3, r3, #3
1a003168:	1b5a      	subs	r2, r3, r5
1a00316a:	2a0f      	cmp	r2, #15
1a00316c:	f300 8183 	bgt.w	1a003476 <_malloc_r+0x3d2>
1a003170:	2a00      	cmp	r2, #0
1a003172:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a003176:	f280 8174 	bge.w	1a003462 <_malloc_r+0x3be>
1a00317a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00317e:	f080 8125 	bcs.w	1a0033cc <_malloc_r+0x328>
1a003182:	08db      	lsrs	r3, r3, #3
1a003184:	1c59      	adds	r1, r3, #1
1a003186:	687a      	ldr	r2, [r7, #4]
1a003188:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a00318c:	f8c4 8008 	str.w	r8, [r4, #8]
1a003190:	f04f 0e01 	mov.w	lr, #1
1a003194:	109b      	asrs	r3, r3, #2
1a003196:	fa0e f303 	lsl.w	r3, lr, r3
1a00319a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00319e:	4313      	orrs	r3, r2
1a0031a0:	f1ae 0208 	sub.w	r2, lr, #8
1a0031a4:	60e2      	str	r2, [r4, #12]
1a0031a6:	607b      	str	r3, [r7, #4]
1a0031a8:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a0031ac:	f8c8 400c 	str.w	r4, [r8, #12]
1a0031b0:	1082      	asrs	r2, r0, #2
1a0031b2:	2401      	movs	r4, #1
1a0031b4:	4094      	lsls	r4, r2
1a0031b6:	429c      	cmp	r4, r3
1a0031b8:	d856      	bhi.n	1a003268 <_malloc_r+0x1c4>
1a0031ba:	421c      	tst	r4, r3
1a0031bc:	d106      	bne.n	1a0031cc <_malloc_r+0x128>
1a0031be:	f020 0003 	bic.w	r0, r0, #3
1a0031c2:	0064      	lsls	r4, r4, #1
1a0031c4:	421c      	tst	r4, r3
1a0031c6:	f100 0004 	add.w	r0, r0, #4
1a0031ca:	d0fa      	beq.n	1a0031c2 <_malloc_r+0x11e>
1a0031cc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a0031d0:	46ce      	mov	lr, r9
1a0031d2:	4680      	mov	r8, r0
1a0031d4:	f8de 300c 	ldr.w	r3, [lr, #12]
1a0031d8:	459e      	cmp	lr, r3
1a0031da:	d107      	bne.n	1a0031ec <_malloc_r+0x148>
1a0031dc:	e125      	b.n	1a00342a <_malloc_r+0x386>
1a0031de:	2a00      	cmp	r2, #0
1a0031e0:	f280 812c 	bge.w	1a00343c <_malloc_r+0x398>
1a0031e4:	68db      	ldr	r3, [r3, #12]
1a0031e6:	459e      	cmp	lr, r3
1a0031e8:	f000 811f 	beq.w	1a00342a <_malloc_r+0x386>
1a0031ec:	6859      	ldr	r1, [r3, #4]
1a0031ee:	f021 0103 	bic.w	r1, r1, #3
1a0031f2:	1b4a      	subs	r2, r1, r5
1a0031f4:	2a0f      	cmp	r2, #15
1a0031f6:	ddf2      	ble.n	1a0031de <_malloc_r+0x13a>
1a0031f8:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0031fc:	195c      	adds	r4, r3, r5
1a0031fe:	f045 0501 	orr.w	r5, r5, #1
1a003202:	605d      	str	r5, [r3, #4]
1a003204:	f042 0501 	orr.w	r5, r2, #1
1a003208:	f8c8 e00c 	str.w	lr, [r8, #12]
1a00320c:	4630      	mov	r0, r6
1a00320e:	f8ce 8008 	str.w	r8, [lr, #8]
1a003212:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a003216:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a00321a:	6065      	str	r5, [r4, #4]
1a00321c:	505a      	str	r2, [r3, r1]
1a00321e:	9300      	str	r3, [sp, #0]
1a003220:	f000 fae8 	bl	1a0037f4 <__malloc_unlock>
1a003224:	9b00      	ldr	r3, [sp, #0]
1a003226:	f103 0408 	add.w	r4, r3, #8
1a00322a:	e002      	b.n	1a003232 <_malloc_r+0x18e>
1a00322c:	230c      	movs	r3, #12
1a00322e:	6033      	str	r3, [r6, #0]
1a003230:	2400      	movs	r4, #0
1a003232:	4620      	mov	r0, r4
1a003234:	b003      	add	sp, #12
1a003236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00323a:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00323e:	2040      	movs	r0, #64	; 0x40
1a003240:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a003244:	e773      	b.n	1a00312e <_malloc_r+0x8a>
1a003246:	68dc      	ldr	r4, [r3, #12]
1a003248:	42a3      	cmp	r3, r4
1a00324a:	bf08      	it	eq
1a00324c:	3002      	addeq	r0, #2
1a00324e:	f47f af41 	bne.w	1a0030d4 <_malloc_r+0x30>
1a003252:	693c      	ldr	r4, [r7, #16]
1a003254:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a0033c4 <_malloc_r+0x320>
1a003258:	4564      	cmp	r4, ip
1a00325a:	d182      	bne.n	1a003162 <_malloc_r+0xbe>
1a00325c:	687b      	ldr	r3, [r7, #4]
1a00325e:	1082      	asrs	r2, r0, #2
1a003260:	2401      	movs	r4, #1
1a003262:	4094      	lsls	r4, r2
1a003264:	429c      	cmp	r4, r3
1a003266:	d9a8      	bls.n	1a0031ba <_malloc_r+0x116>
1a003268:	68bc      	ldr	r4, [r7, #8]
1a00326a:	6863      	ldr	r3, [r4, #4]
1a00326c:	f023 0803 	bic.w	r8, r3, #3
1a003270:	45a8      	cmp	r8, r5
1a003272:	d303      	bcc.n	1a00327c <_malloc_r+0x1d8>
1a003274:	eba8 0305 	sub.w	r3, r8, r5
1a003278:	2b0f      	cmp	r3, #15
1a00327a:	dc7a      	bgt.n	1a003372 <_malloc_r+0x2ce>
1a00327c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a0033c8 <_malloc_r+0x324>
1a003280:	4b4c      	ldr	r3, [pc, #304]	; (1a0033b4 <_malloc_r+0x310>)
1a003282:	f8d9 2000 	ldr.w	r2, [r9]
1a003286:	681b      	ldr	r3, [r3, #0]
1a003288:	3201      	adds	r2, #1
1a00328a:	442b      	add	r3, r5
1a00328c:	eb04 0a08 	add.w	sl, r4, r8
1a003290:	f000 813c 	beq.w	1a00350c <_malloc_r+0x468>
1a003294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003298:	330f      	adds	r3, #15
1a00329a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a00329e:	f02b 0b0f 	bic.w	fp, fp, #15
1a0032a2:	4659      	mov	r1, fp
1a0032a4:	4630      	mov	r0, r6
1a0032a6:	f7fd f99d 	bl	1a0005e4 <_sbrk_r>
1a0032aa:	1c41      	adds	r1, r0, #1
1a0032ac:	4602      	mov	r2, r0
1a0032ae:	f000 80fc 	beq.w	1a0034aa <_malloc_r+0x406>
1a0032b2:	4582      	cmp	sl, r0
1a0032b4:	f200 80f7 	bhi.w	1a0034a6 <_malloc_r+0x402>
1a0032b8:	4b3f      	ldr	r3, [pc, #252]	; (1a0033b8 <_malloc_r+0x314>)
1a0032ba:	6818      	ldr	r0, [r3, #0]
1a0032bc:	4458      	add	r0, fp
1a0032be:	6018      	str	r0, [r3, #0]
1a0032c0:	4601      	mov	r1, r0
1a0032c2:	f000 8157 	beq.w	1a003574 <_malloc_r+0x4d0>
1a0032c6:	f8d9 0000 	ldr.w	r0, [r9]
1a0032ca:	9301      	str	r3, [sp, #4]
1a0032cc:	3001      	adds	r0, #1
1a0032ce:	bf1b      	ittet	ne
1a0032d0:	eba2 0a0a 	subne.w	sl, r2, sl
1a0032d4:	4451      	addne	r1, sl
1a0032d6:	f8c9 2000 	streq.w	r2, [r9]
1a0032da:	6019      	strne	r1, [r3, #0]
1a0032dc:	f012 0a07 	ands.w	sl, r2, #7
1a0032e0:	f000 8120 	beq.w	1a003524 <_malloc_r+0x480>
1a0032e4:	f1ca 0108 	rsb	r1, sl, #8
1a0032e8:	440a      	add	r2, r1
1a0032ea:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a0032ee:	4493      	add	fp, r2
1a0032f0:	3108      	adds	r1, #8
1a0032f2:	eba1 010b 	sub.w	r1, r1, fp
1a0032f6:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a0032fa:	4649      	mov	r1, r9
1a0032fc:	4630      	mov	r0, r6
1a0032fe:	9200      	str	r2, [sp, #0]
1a003300:	f7fd f970 	bl	1a0005e4 <_sbrk_r>
1a003304:	1c42      	adds	r2, r0, #1
1a003306:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00330a:	f000 8158 	beq.w	1a0035be <_malloc_r+0x51a>
1a00330e:	1a80      	subs	r0, r0, r2
1a003310:	eb00 0b09 	add.w	fp, r0, r9
1a003314:	6818      	ldr	r0, [r3, #0]
1a003316:	60ba      	str	r2, [r7, #8]
1a003318:	f04b 0101 	orr.w	r1, fp, #1
1a00331c:	4448      	add	r0, r9
1a00331e:	42bc      	cmp	r4, r7
1a003320:	6051      	str	r1, [r2, #4]
1a003322:	6018      	str	r0, [r3, #0]
1a003324:	f000 8132 	beq.w	1a00358c <_malloc_r+0x4e8>
1a003328:	f1b8 0f0f 	cmp.w	r8, #15
1a00332c:	f240 8130 	bls.w	1a003590 <_malloc_r+0x4ec>
1a003330:	6861      	ldr	r1, [r4, #4]
1a003332:	f1a8 0c0c 	sub.w	ip, r8, #12
1a003336:	f02c 0c07 	bic.w	ip, ip, #7
1a00333a:	f001 0101 	and.w	r1, r1, #1
1a00333e:	eb04 0e0c 	add.w	lr, r4, ip
1a003342:	ea41 010c 	orr.w	r1, r1, ip
1a003346:	f04f 0805 	mov.w	r8, #5
1a00334a:	f1bc 0f0f 	cmp.w	ip, #15
1a00334e:	6061      	str	r1, [r4, #4]
1a003350:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a003354:	f200 813b 	bhi.w	1a0035ce <_malloc_r+0x52a>
1a003358:	6851      	ldr	r1, [r2, #4]
1a00335a:	4614      	mov	r4, r2
1a00335c:	4b17      	ldr	r3, [pc, #92]	; (1a0033bc <_malloc_r+0x318>)
1a00335e:	681a      	ldr	r2, [r3, #0]
1a003360:	4282      	cmp	r2, r0
1a003362:	bf38      	it	cc
1a003364:	6018      	strcc	r0, [r3, #0]
1a003366:	4b16      	ldr	r3, [pc, #88]	; (1a0033c0 <_malloc_r+0x31c>)
1a003368:	681a      	ldr	r2, [r3, #0]
1a00336a:	4282      	cmp	r2, r0
1a00336c:	bf38      	it	cc
1a00336e:	6018      	strcc	r0, [r3, #0]
1a003370:	e09d      	b.n	1a0034ae <_malloc_r+0x40a>
1a003372:	1962      	adds	r2, r4, r5
1a003374:	f043 0301 	orr.w	r3, r3, #1
1a003378:	f045 0501 	orr.w	r5, r5, #1
1a00337c:	6065      	str	r5, [r4, #4]
1a00337e:	4630      	mov	r0, r6
1a003380:	60ba      	str	r2, [r7, #8]
1a003382:	6053      	str	r3, [r2, #4]
1a003384:	f000 fa36 	bl	1a0037f4 <__malloc_unlock>
1a003388:	3408      	adds	r4, #8
1a00338a:	4620      	mov	r0, r4
1a00338c:	b003      	add	sp, #12
1a00338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003392:	4423      	add	r3, r4
1a003394:	68e1      	ldr	r1, [r4, #12]
1a003396:	685a      	ldr	r2, [r3, #4]
1a003398:	68a5      	ldr	r5, [r4, #8]
1a00339a:	f042 0201 	orr.w	r2, r2, #1
1a00339e:	60e9      	str	r1, [r5, #12]
1a0033a0:	4630      	mov	r0, r6
1a0033a2:	608d      	str	r5, [r1, #8]
1a0033a4:	605a      	str	r2, [r3, #4]
1a0033a6:	f000 fa25 	bl	1a0037f4 <__malloc_unlock>
1a0033aa:	3408      	adds	r4, #8
1a0033ac:	e741      	b.n	1a003232 <_malloc_r+0x18e>
1a0033ae:	bf00      	nop
1a0033b0:	10000478 	.word	0x10000478
1a0033b4:	10000a58 	.word	0x10000a58
1a0033b8:	10000a28 	.word	0x10000a28
1a0033bc:	10000a50 	.word	0x10000a50
1a0033c0:	10000a54 	.word	0x10000a54
1a0033c4:	10000480 	.word	0x10000480
1a0033c8:	10000880 	.word	0x10000880
1a0033cc:	0a5a      	lsrs	r2, r3, #9
1a0033ce:	2a04      	cmp	r2, #4
1a0033d0:	d963      	bls.n	1a00349a <_malloc_r+0x3f6>
1a0033d2:	2a14      	cmp	r2, #20
1a0033d4:	f200 80b7 	bhi.w	1a003546 <_malloc_r+0x4a2>
1a0033d8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a0033dc:	00c9      	lsls	r1, r1, #3
1a0033de:	325b      	adds	r2, #91	; 0x5b
1a0033e0:	eb07 0e01 	add.w	lr, r7, r1
1a0033e4:	5879      	ldr	r1, [r7, r1]
1a0033e6:	f1ae 0e08 	sub.w	lr, lr, #8
1a0033ea:	458e      	cmp	lr, r1
1a0033ec:	f000 8091 	beq.w	1a003512 <_malloc_r+0x46e>
1a0033f0:	684a      	ldr	r2, [r1, #4]
1a0033f2:	f022 0203 	bic.w	r2, r2, #3
1a0033f6:	429a      	cmp	r2, r3
1a0033f8:	d902      	bls.n	1a003400 <_malloc_r+0x35c>
1a0033fa:	6889      	ldr	r1, [r1, #8]
1a0033fc:	458e      	cmp	lr, r1
1a0033fe:	d1f7      	bne.n	1a0033f0 <_malloc_r+0x34c>
1a003400:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a003404:	687b      	ldr	r3, [r7, #4]
1a003406:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a00340a:	f8ce 4008 	str.w	r4, [lr, #8]
1a00340e:	60cc      	str	r4, [r1, #12]
1a003410:	e6ce      	b.n	1a0031b0 <_malloc_r+0x10c>
1a003412:	2b14      	cmp	r3, #20
1a003414:	d959      	bls.n	1a0034ca <_malloc_r+0x426>
1a003416:	2b54      	cmp	r3, #84	; 0x54
1a003418:	f200 809d 	bhi.w	1a003556 <_malloc_r+0x4b2>
1a00341c:	0b2b      	lsrs	r3, r5, #12
1a00341e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a003422:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a003426:	00c3      	lsls	r3, r0, #3
1a003428:	e681      	b.n	1a00312e <_malloc_r+0x8a>
1a00342a:	f108 0801 	add.w	r8, r8, #1
1a00342e:	f018 0f03 	tst.w	r8, #3
1a003432:	f10e 0e08 	add.w	lr, lr, #8
1a003436:	f47f aecd 	bne.w	1a0031d4 <_malloc_r+0x130>
1a00343a:	e051      	b.n	1a0034e0 <_malloc_r+0x43c>
1a00343c:	4419      	add	r1, r3
1a00343e:	461c      	mov	r4, r3
1a003440:	684a      	ldr	r2, [r1, #4]
1a003442:	68db      	ldr	r3, [r3, #12]
1a003444:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a003448:	f042 0201 	orr.w	r2, r2, #1
1a00344c:	604a      	str	r2, [r1, #4]
1a00344e:	4630      	mov	r0, r6
1a003450:	60eb      	str	r3, [r5, #12]
1a003452:	609d      	str	r5, [r3, #8]
1a003454:	f000 f9ce 	bl	1a0037f4 <__malloc_unlock>
1a003458:	e6eb      	b.n	1a003232 <_malloc_r+0x18e>
1a00345a:	08e8      	lsrs	r0, r5, #3
1a00345c:	f105 0308 	add.w	r3, r5, #8
1a003460:	e630      	b.n	1a0030c4 <_malloc_r+0x20>
1a003462:	4423      	add	r3, r4
1a003464:	4630      	mov	r0, r6
1a003466:	685a      	ldr	r2, [r3, #4]
1a003468:	f042 0201 	orr.w	r2, r2, #1
1a00346c:	605a      	str	r2, [r3, #4]
1a00346e:	3408      	adds	r4, #8
1a003470:	f000 f9c0 	bl	1a0037f4 <__malloc_unlock>
1a003474:	e6dd      	b.n	1a003232 <_malloc_r+0x18e>
1a003476:	1961      	adds	r1, r4, r5
1a003478:	f045 0e01 	orr.w	lr, r5, #1
1a00347c:	f042 0501 	orr.w	r5, r2, #1
1a003480:	f8c4 e004 	str.w	lr, [r4, #4]
1a003484:	4630      	mov	r0, r6
1a003486:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a00348a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a00348e:	604d      	str	r5, [r1, #4]
1a003490:	50e2      	str	r2, [r4, r3]
1a003492:	f000 f9af 	bl	1a0037f4 <__malloc_unlock>
1a003496:	3408      	adds	r4, #8
1a003498:	e6cb      	b.n	1a003232 <_malloc_r+0x18e>
1a00349a:	099a      	lsrs	r2, r3, #6
1a00349c:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a0034a0:	00c9      	lsls	r1, r1, #3
1a0034a2:	3238      	adds	r2, #56	; 0x38
1a0034a4:	e79c      	b.n	1a0033e0 <_malloc_r+0x33c>
1a0034a6:	42bc      	cmp	r4, r7
1a0034a8:	d05f      	beq.n	1a00356a <_malloc_r+0x4c6>
1a0034aa:	68bc      	ldr	r4, [r7, #8]
1a0034ac:	6861      	ldr	r1, [r4, #4]
1a0034ae:	f021 0b03 	bic.w	fp, r1, #3
1a0034b2:	45ab      	cmp	fp, r5
1a0034b4:	ebab 0305 	sub.w	r3, fp, r5
1a0034b8:	d302      	bcc.n	1a0034c0 <_malloc_r+0x41c>
1a0034ba:	2b0f      	cmp	r3, #15
1a0034bc:	f73f af59 	bgt.w	1a003372 <_malloc_r+0x2ce>
1a0034c0:	4630      	mov	r0, r6
1a0034c2:	f000 f997 	bl	1a0037f4 <__malloc_unlock>
1a0034c6:	2400      	movs	r4, #0
1a0034c8:	e6b3      	b.n	1a003232 <_malloc_r+0x18e>
1a0034ca:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a0034ce:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a0034d2:	00c3      	lsls	r3, r0, #3
1a0034d4:	e62b      	b.n	1a00312e <_malloc_r+0x8a>
1a0034d6:	f859 3908 	ldr.w	r3, [r9], #-8
1a0034da:	454b      	cmp	r3, r9
1a0034dc:	f040 8096 	bne.w	1a00360c <_malloc_r+0x568>
1a0034e0:	f010 0f03 	tst.w	r0, #3
1a0034e4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0034e8:	d1f5      	bne.n	1a0034d6 <_malloc_r+0x432>
1a0034ea:	687b      	ldr	r3, [r7, #4]
1a0034ec:	ea23 0304 	bic.w	r3, r3, r4
1a0034f0:	607b      	str	r3, [r7, #4]
1a0034f2:	0064      	lsls	r4, r4, #1
1a0034f4:	429c      	cmp	r4, r3
1a0034f6:	f63f aeb7 	bhi.w	1a003268 <_malloc_r+0x1c4>
1a0034fa:	b91c      	cbnz	r4, 1a003504 <_malloc_r+0x460>
1a0034fc:	e6b4      	b.n	1a003268 <_malloc_r+0x1c4>
1a0034fe:	0064      	lsls	r4, r4, #1
1a003500:	f108 0804 	add.w	r8, r8, #4
1a003504:	421c      	tst	r4, r3
1a003506:	d0fa      	beq.n	1a0034fe <_malloc_r+0x45a>
1a003508:	4640      	mov	r0, r8
1a00350a:	e65f      	b.n	1a0031cc <_malloc_r+0x128>
1a00350c:	f103 0b10 	add.w	fp, r3, #16
1a003510:	e6c7      	b.n	1a0032a2 <_malloc_r+0x1fe>
1a003512:	687b      	ldr	r3, [r7, #4]
1a003514:	1092      	asrs	r2, r2, #2
1a003516:	f04f 0801 	mov.w	r8, #1
1a00351a:	fa08 f202 	lsl.w	r2, r8, r2
1a00351e:	4313      	orrs	r3, r2
1a003520:	607b      	str	r3, [r7, #4]
1a003522:	e770      	b.n	1a003406 <_malloc_r+0x362>
1a003524:	eb02 000b 	add.w	r0, r2, fp
1a003528:	4240      	negs	r0, r0
1a00352a:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a00352e:	4649      	mov	r1, r9
1a003530:	4630      	mov	r0, r6
1a003532:	9200      	str	r2, [sp, #0]
1a003534:	f7fd f856 	bl	1a0005e4 <_sbrk_r>
1a003538:	1c43      	adds	r3, r0, #1
1a00353a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00353e:	f47f aee6 	bne.w	1a00330e <_malloc_r+0x26a>
1a003542:	46d1      	mov	r9, sl
1a003544:	e6e6      	b.n	1a003314 <_malloc_r+0x270>
1a003546:	2a54      	cmp	r2, #84	; 0x54
1a003548:	d825      	bhi.n	1a003596 <_malloc_r+0x4f2>
1a00354a:	0b1a      	lsrs	r2, r3, #12
1a00354c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a003550:	00c9      	lsls	r1, r1, #3
1a003552:	326e      	adds	r2, #110	; 0x6e
1a003554:	e744      	b.n	1a0033e0 <_malloc_r+0x33c>
1a003556:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a00355a:	d825      	bhi.n	1a0035a8 <_malloc_r+0x504>
1a00355c:	0beb      	lsrs	r3, r5, #15
1a00355e:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a003562:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a003566:	00c3      	lsls	r3, r0, #3
1a003568:	e5e1      	b.n	1a00312e <_malloc_r+0x8a>
1a00356a:	4b29      	ldr	r3, [pc, #164]	; (1a003610 <_malloc_r+0x56c>)
1a00356c:	6819      	ldr	r1, [r3, #0]
1a00356e:	4459      	add	r1, fp
1a003570:	6019      	str	r1, [r3, #0]
1a003572:	e6a8      	b.n	1a0032c6 <_malloc_r+0x222>
1a003574:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a003578:	f1bc 0f00 	cmp.w	ip, #0
1a00357c:	f47f aea3 	bne.w	1a0032c6 <_malloc_r+0x222>
1a003580:	44c3      	add	fp, r8
1a003582:	68bc      	ldr	r4, [r7, #8]
1a003584:	f04b 0101 	orr.w	r1, fp, #1
1a003588:	6061      	str	r1, [r4, #4]
1a00358a:	e6e7      	b.n	1a00335c <_malloc_r+0x2b8>
1a00358c:	4614      	mov	r4, r2
1a00358e:	e6e5      	b.n	1a00335c <_malloc_r+0x2b8>
1a003590:	2301      	movs	r3, #1
1a003592:	6053      	str	r3, [r2, #4]
1a003594:	e794      	b.n	1a0034c0 <_malloc_r+0x41c>
1a003596:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00359a:	d823      	bhi.n	1a0035e4 <_malloc_r+0x540>
1a00359c:	0bda      	lsrs	r2, r3, #15
1a00359e:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a0035a2:	00c9      	lsls	r1, r1, #3
1a0035a4:	3277      	adds	r2, #119	; 0x77
1a0035a6:	e71b      	b.n	1a0033e0 <_malloc_r+0x33c>
1a0035a8:	f240 5254 	movw	r2, #1364	; 0x554
1a0035ac:	4293      	cmp	r3, r2
1a0035ae:	d823      	bhi.n	1a0035f8 <_malloc_r+0x554>
1a0035b0:	0cab      	lsrs	r3, r5, #18
1a0035b2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a0035b6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a0035ba:	00c3      	lsls	r3, r0, #3
1a0035bc:	e5b7      	b.n	1a00312e <_malloc_r+0x8a>
1a0035be:	f1aa 0a08 	sub.w	sl, sl, #8
1a0035c2:	44d3      	add	fp, sl
1a0035c4:	ebab 0b02 	sub.w	fp, fp, r2
1a0035c8:	f04f 0900 	mov.w	r9, #0
1a0035cc:	e6a2      	b.n	1a003314 <_malloc_r+0x270>
1a0035ce:	f104 0108 	add.w	r1, r4, #8
1a0035d2:	4630      	mov	r0, r6
1a0035d4:	9300      	str	r3, [sp, #0]
1a0035d6:	f7ff fc19 	bl	1a002e0c <_free_r>
1a0035da:	68bc      	ldr	r4, [r7, #8]
1a0035dc:	9b00      	ldr	r3, [sp, #0]
1a0035de:	6861      	ldr	r1, [r4, #4]
1a0035e0:	6818      	ldr	r0, [r3, #0]
1a0035e2:	e6bb      	b.n	1a00335c <_malloc_r+0x2b8>
1a0035e4:	f240 5154 	movw	r1, #1364	; 0x554
1a0035e8:	428a      	cmp	r2, r1
1a0035ea:	d80b      	bhi.n	1a003604 <_malloc_r+0x560>
1a0035ec:	0c9a      	lsrs	r2, r3, #18
1a0035ee:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a0035f2:	00c9      	lsls	r1, r1, #3
1a0035f4:	327c      	adds	r2, #124	; 0x7c
1a0035f6:	e6f3      	b.n	1a0033e0 <_malloc_r+0x33c>
1a0035f8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a0035fc:	207f      	movs	r0, #127	; 0x7f
1a0035fe:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a003602:	e594      	b.n	1a00312e <_malloc_r+0x8a>
1a003604:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a003608:	227e      	movs	r2, #126	; 0x7e
1a00360a:	e6e9      	b.n	1a0033e0 <_malloc_r+0x33c>
1a00360c:	687b      	ldr	r3, [r7, #4]
1a00360e:	e770      	b.n	1a0034f2 <_malloc_r+0x44e>
1a003610:	10000a28 	.word	0x10000a28

1a003614 <memcpy>:
1a003614:	4684      	mov	ip, r0
1a003616:	ea41 0300 	orr.w	r3, r1, r0
1a00361a:	f013 0303 	ands.w	r3, r3, #3
1a00361e:	d16d      	bne.n	1a0036fc <memcpy+0xe8>
1a003620:	3a40      	subs	r2, #64	; 0x40
1a003622:	d341      	bcc.n	1a0036a8 <memcpy+0x94>
1a003624:	f851 3b04 	ldr.w	r3, [r1], #4
1a003628:	f840 3b04 	str.w	r3, [r0], #4
1a00362c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003630:	f840 3b04 	str.w	r3, [r0], #4
1a003634:	f851 3b04 	ldr.w	r3, [r1], #4
1a003638:	f840 3b04 	str.w	r3, [r0], #4
1a00363c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003640:	f840 3b04 	str.w	r3, [r0], #4
1a003644:	f851 3b04 	ldr.w	r3, [r1], #4
1a003648:	f840 3b04 	str.w	r3, [r0], #4
1a00364c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003650:	f840 3b04 	str.w	r3, [r0], #4
1a003654:	f851 3b04 	ldr.w	r3, [r1], #4
1a003658:	f840 3b04 	str.w	r3, [r0], #4
1a00365c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003660:	f840 3b04 	str.w	r3, [r0], #4
1a003664:	f851 3b04 	ldr.w	r3, [r1], #4
1a003668:	f840 3b04 	str.w	r3, [r0], #4
1a00366c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003670:	f840 3b04 	str.w	r3, [r0], #4
1a003674:	f851 3b04 	ldr.w	r3, [r1], #4
1a003678:	f840 3b04 	str.w	r3, [r0], #4
1a00367c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003680:	f840 3b04 	str.w	r3, [r0], #4
1a003684:	f851 3b04 	ldr.w	r3, [r1], #4
1a003688:	f840 3b04 	str.w	r3, [r0], #4
1a00368c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003690:	f840 3b04 	str.w	r3, [r0], #4
1a003694:	f851 3b04 	ldr.w	r3, [r1], #4
1a003698:	f840 3b04 	str.w	r3, [r0], #4
1a00369c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036a0:	f840 3b04 	str.w	r3, [r0], #4
1a0036a4:	3a40      	subs	r2, #64	; 0x40
1a0036a6:	d2bd      	bcs.n	1a003624 <memcpy+0x10>
1a0036a8:	3230      	adds	r2, #48	; 0x30
1a0036aa:	d311      	bcc.n	1a0036d0 <memcpy+0xbc>
1a0036ac:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036b0:	f840 3b04 	str.w	r3, [r0], #4
1a0036b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036b8:	f840 3b04 	str.w	r3, [r0], #4
1a0036bc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036c0:	f840 3b04 	str.w	r3, [r0], #4
1a0036c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036c8:	f840 3b04 	str.w	r3, [r0], #4
1a0036cc:	3a10      	subs	r2, #16
1a0036ce:	d2ed      	bcs.n	1a0036ac <memcpy+0x98>
1a0036d0:	320c      	adds	r2, #12
1a0036d2:	d305      	bcc.n	1a0036e0 <memcpy+0xcc>
1a0036d4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036d8:	f840 3b04 	str.w	r3, [r0], #4
1a0036dc:	3a04      	subs	r2, #4
1a0036de:	d2f9      	bcs.n	1a0036d4 <memcpy+0xc0>
1a0036e0:	3204      	adds	r2, #4
1a0036e2:	d008      	beq.n	1a0036f6 <memcpy+0xe2>
1a0036e4:	07d2      	lsls	r2, r2, #31
1a0036e6:	bf1c      	itt	ne
1a0036e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0036ec:	f800 3b01 	strbne.w	r3, [r0], #1
1a0036f0:	d301      	bcc.n	1a0036f6 <memcpy+0xe2>
1a0036f2:	880b      	ldrh	r3, [r1, #0]
1a0036f4:	8003      	strh	r3, [r0, #0]
1a0036f6:	4660      	mov	r0, ip
1a0036f8:	4770      	bx	lr
1a0036fa:	bf00      	nop
1a0036fc:	2a08      	cmp	r2, #8
1a0036fe:	d313      	bcc.n	1a003728 <memcpy+0x114>
1a003700:	078b      	lsls	r3, r1, #30
1a003702:	d08d      	beq.n	1a003620 <memcpy+0xc>
1a003704:	f010 0303 	ands.w	r3, r0, #3
1a003708:	d08a      	beq.n	1a003620 <memcpy+0xc>
1a00370a:	f1c3 0304 	rsb	r3, r3, #4
1a00370e:	1ad2      	subs	r2, r2, r3
1a003710:	07db      	lsls	r3, r3, #31
1a003712:	bf1c      	itt	ne
1a003714:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003718:	f800 3b01 	strbne.w	r3, [r0], #1
1a00371c:	d380      	bcc.n	1a003620 <memcpy+0xc>
1a00371e:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003722:	f820 3b02 	strh.w	r3, [r0], #2
1a003726:	e77b      	b.n	1a003620 <memcpy+0xc>
1a003728:	3a04      	subs	r2, #4
1a00372a:	d3d9      	bcc.n	1a0036e0 <memcpy+0xcc>
1a00372c:	3a01      	subs	r2, #1
1a00372e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003732:	f800 3b01 	strb.w	r3, [r0], #1
1a003736:	d2f9      	bcs.n	1a00372c <memcpy+0x118>
1a003738:	780b      	ldrb	r3, [r1, #0]
1a00373a:	7003      	strb	r3, [r0, #0]
1a00373c:	784b      	ldrb	r3, [r1, #1]
1a00373e:	7043      	strb	r3, [r0, #1]
1a003740:	788b      	ldrb	r3, [r1, #2]
1a003742:	7083      	strb	r3, [r0, #2]
1a003744:	4660      	mov	r0, ip
1a003746:	4770      	bx	lr

1a003748 <memset>:
1a003748:	b4f0      	push	{r4, r5, r6, r7}
1a00374a:	0786      	lsls	r6, r0, #30
1a00374c:	d046      	beq.n	1a0037dc <memset+0x94>
1a00374e:	1e54      	subs	r4, r2, #1
1a003750:	2a00      	cmp	r2, #0
1a003752:	d03c      	beq.n	1a0037ce <memset+0x86>
1a003754:	b2ca      	uxtb	r2, r1
1a003756:	4603      	mov	r3, r0
1a003758:	e002      	b.n	1a003760 <memset+0x18>
1a00375a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a00375e:	d336      	bcc.n	1a0037ce <memset+0x86>
1a003760:	f803 2b01 	strb.w	r2, [r3], #1
1a003764:	079d      	lsls	r5, r3, #30
1a003766:	d1f8      	bne.n	1a00375a <memset+0x12>
1a003768:	2c03      	cmp	r4, #3
1a00376a:	d929      	bls.n	1a0037c0 <memset+0x78>
1a00376c:	b2cd      	uxtb	r5, r1
1a00376e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003772:	2c0f      	cmp	r4, #15
1a003774:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003778:	d933      	bls.n	1a0037e2 <memset+0x9a>
1a00377a:	f1a4 0610 	sub.w	r6, r4, #16
1a00377e:	0936      	lsrs	r6, r6, #4
1a003780:	f103 0720 	add.w	r7, r3, #32
1a003784:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003788:	f103 0210 	add.w	r2, r3, #16
1a00378c:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003790:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003794:	3210      	adds	r2, #16
1a003796:	42ba      	cmp	r2, r7
1a003798:	d1f8      	bne.n	1a00378c <memset+0x44>
1a00379a:	1c72      	adds	r2, r6, #1
1a00379c:	f014 0f0c 	tst.w	r4, #12
1a0037a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a0037a4:	f004 060f 	and.w	r6, r4, #15
1a0037a8:	d013      	beq.n	1a0037d2 <memset+0x8a>
1a0037aa:	1f33      	subs	r3, r6, #4
1a0037ac:	f023 0303 	bic.w	r3, r3, #3
1a0037b0:	3304      	adds	r3, #4
1a0037b2:	4413      	add	r3, r2
1a0037b4:	f842 5b04 	str.w	r5, [r2], #4
1a0037b8:	4293      	cmp	r3, r2
1a0037ba:	d1fb      	bne.n	1a0037b4 <memset+0x6c>
1a0037bc:	f006 0403 	and.w	r4, r6, #3
1a0037c0:	b12c      	cbz	r4, 1a0037ce <memset+0x86>
1a0037c2:	b2c9      	uxtb	r1, r1
1a0037c4:	441c      	add	r4, r3
1a0037c6:	f803 1b01 	strb.w	r1, [r3], #1
1a0037ca:	429c      	cmp	r4, r3
1a0037cc:	d1fb      	bne.n	1a0037c6 <memset+0x7e>
1a0037ce:	bcf0      	pop	{r4, r5, r6, r7}
1a0037d0:	4770      	bx	lr
1a0037d2:	4634      	mov	r4, r6
1a0037d4:	4613      	mov	r3, r2
1a0037d6:	2c00      	cmp	r4, #0
1a0037d8:	d1f3      	bne.n	1a0037c2 <memset+0x7a>
1a0037da:	e7f8      	b.n	1a0037ce <memset+0x86>
1a0037dc:	4614      	mov	r4, r2
1a0037de:	4603      	mov	r3, r0
1a0037e0:	e7c2      	b.n	1a003768 <memset+0x20>
1a0037e2:	461a      	mov	r2, r3
1a0037e4:	4626      	mov	r6, r4
1a0037e6:	e7e0      	b.n	1a0037aa <memset+0x62>

1a0037e8 <__malloc_lock>:
1a0037e8:	4801      	ldr	r0, [pc, #4]	; (1a0037f0 <__malloc_lock+0x8>)
1a0037ea:	f7ff bc57 	b.w	1a00309c <__retarget_lock_acquire_recursive>
1a0037ee:	bf00      	nop
1a0037f0:	10000e94 	.word	0x10000e94

1a0037f4 <__malloc_unlock>:
1a0037f4:	4801      	ldr	r0, [pc, #4]	; (1a0037fc <__malloc_unlock+0x8>)
1a0037f6:	f7ff bc53 	b.w	1a0030a0 <__retarget_lock_release_recursive>
1a0037fa:	bf00      	nop
1a0037fc:	10000e94 	.word	0x10000e94

1a003800 <printf>:
1a003800:	b40f      	push	{r0, r1, r2, r3}
1a003802:	b500      	push	{lr}
1a003804:	4907      	ldr	r1, [pc, #28]	; (1a003824 <printf+0x24>)
1a003806:	b083      	sub	sp, #12
1a003808:	ab04      	add	r3, sp, #16
1a00380a:	6808      	ldr	r0, [r1, #0]
1a00380c:	f853 2b04 	ldr.w	r2, [r3], #4
1a003810:	6881      	ldr	r1, [r0, #8]
1a003812:	9301      	str	r3, [sp, #4]
1a003814:	f000 f924 	bl	1a003a60 <_vfprintf_r>
1a003818:	b003      	add	sp, #12
1a00381a:	f85d eb04 	ldr.w	lr, [sp], #4
1a00381e:	b004      	add	sp, #16
1a003820:	4770      	bx	lr
1a003822:	bf00      	nop
1a003824:	10000048 	.word	0x10000048

1a003828 <_puts_r>:
1a003828:	b570      	push	{r4, r5, r6, lr}
1a00382a:	4605      	mov	r5, r0
1a00382c:	b088      	sub	sp, #32
1a00382e:	4608      	mov	r0, r1
1a003830:	460c      	mov	r4, r1
1a003832:	f000 f8a5 	bl	1a003980 <strlen>
1a003836:	4a22      	ldr	r2, [pc, #136]	; (1a0038c0 <_puts_r+0x98>)
1a003838:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a00383a:	9404      	str	r4, [sp, #16]
1a00383c:	2601      	movs	r6, #1
1a00383e:	1c44      	adds	r4, r0, #1
1a003840:	a904      	add	r1, sp, #16
1a003842:	9206      	str	r2, [sp, #24]
1a003844:	2202      	movs	r2, #2
1a003846:	9403      	str	r4, [sp, #12]
1a003848:	9005      	str	r0, [sp, #20]
1a00384a:	68ac      	ldr	r4, [r5, #8]
1a00384c:	9607      	str	r6, [sp, #28]
1a00384e:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a003852:	b31b      	cbz	r3, 1a00389c <_puts_r+0x74>
1a003854:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a003856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00385a:	07ce      	lsls	r6, r1, #31
1a00385c:	b29a      	uxth	r2, r3
1a00385e:	d401      	bmi.n	1a003864 <_puts_r+0x3c>
1a003860:	0590      	lsls	r0, r2, #22
1a003862:	d525      	bpl.n	1a0038b0 <_puts_r+0x88>
1a003864:	0491      	lsls	r1, r2, #18
1a003866:	d406      	bmi.n	1a003876 <_puts_r+0x4e>
1a003868:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00386a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a003872:	81a3      	strh	r3, [r4, #12]
1a003874:	6662      	str	r2, [r4, #100]	; 0x64
1a003876:	4628      	mov	r0, r5
1a003878:	aa01      	add	r2, sp, #4
1a00387a:	4621      	mov	r1, r4
1a00387c:	f002 ff02 	bl	1a006684 <__sfvwrite_r>
1a003880:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003882:	2800      	cmp	r0, #0
1a003884:	bf14      	ite	ne
1a003886:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a00388a:	250a      	moveq	r5, #10
1a00388c:	07da      	lsls	r2, r3, #31
1a00388e:	d402      	bmi.n	1a003896 <_puts_r+0x6e>
1a003890:	89a3      	ldrh	r3, [r4, #12]
1a003892:	059b      	lsls	r3, r3, #22
1a003894:	d506      	bpl.n	1a0038a4 <_puts_r+0x7c>
1a003896:	4628      	mov	r0, r5
1a003898:	b008      	add	sp, #32
1a00389a:	bd70      	pop	{r4, r5, r6, pc}
1a00389c:	4628      	mov	r0, r5
1a00389e:	f7ff fa2f 	bl	1a002d00 <__sinit>
1a0038a2:	e7d7      	b.n	1a003854 <_puts_r+0x2c>
1a0038a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0038a6:	f7ff fbfb 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a0038aa:	4628      	mov	r0, r5
1a0038ac:	b008      	add	sp, #32
1a0038ae:	bd70      	pop	{r4, r5, r6, pc}
1a0038b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0038b2:	f7ff fbf3 	bl	1a00309c <__retarget_lock_acquire_recursive>
1a0038b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0038ba:	b29a      	uxth	r2, r3
1a0038bc:	e7d2      	b.n	1a003864 <_puts_r+0x3c>
1a0038be:	bf00      	nop
1a0038c0:	1a007e8c 	.word	0x1a007e8c

1a0038c4 <puts>:
1a0038c4:	4b02      	ldr	r3, [pc, #8]	; (1a0038d0 <puts+0xc>)
1a0038c6:	4601      	mov	r1, r0
1a0038c8:	6818      	ldr	r0, [r3, #0]
1a0038ca:	f7ff bfad 	b.w	1a003828 <_puts_r>
1a0038ce:	bf00      	nop
1a0038d0:	10000048 	.word	0x10000048

1a0038d4 <__sread>:
1a0038d4:	b510      	push	{r4, lr}
1a0038d6:	460c      	mov	r4, r1
1a0038d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0038dc:	f7fc fe46 	bl	1a00056c <_read_r>
1a0038e0:	2800      	cmp	r0, #0
1a0038e2:	db03      	blt.n	1a0038ec <__sread+0x18>
1a0038e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0038e6:	4403      	add	r3, r0
1a0038e8:	6523      	str	r3, [r4, #80]	; 0x50
1a0038ea:	bd10      	pop	{r4, pc}
1a0038ec:	89a3      	ldrh	r3, [r4, #12]
1a0038ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0038f2:	81a3      	strh	r3, [r4, #12]
1a0038f4:	bd10      	pop	{r4, pc}
1a0038f6:	bf00      	nop

1a0038f8 <__swrite>:
1a0038f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0038fc:	4616      	mov	r6, r2
1a0038fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a003902:	461f      	mov	r7, r3
1a003904:	05d3      	lsls	r3, r2, #23
1a003906:	460c      	mov	r4, r1
1a003908:	4605      	mov	r5, r0
1a00390a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00390e:	d409      	bmi.n	1a003924 <__swrite+0x2c>
1a003910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a003914:	81a2      	strh	r2, [r4, #12]
1a003916:	463b      	mov	r3, r7
1a003918:	4632      	mov	r2, r6
1a00391a:	4628      	mov	r0, r5
1a00391c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003920:	f7fc be4b 	b.w	1a0005ba <_write_r>
1a003924:	2200      	movs	r2, #0
1a003926:	2302      	movs	r3, #2
1a003928:	f7fc fe1b 	bl	1a000562 <_lseek_r>
1a00392c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003934:	e7ec      	b.n	1a003910 <__swrite+0x18>
1a003936:	bf00      	nop

1a003938 <__sseek>:
1a003938:	b510      	push	{r4, lr}
1a00393a:	460c      	mov	r4, r1
1a00393c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003940:	f7fc fe0f 	bl	1a000562 <_lseek_r>
1a003944:	89a3      	ldrh	r3, [r4, #12]
1a003946:	1c42      	adds	r2, r0, #1
1a003948:	bf0e      	itee	eq
1a00394a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00394e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003952:	6520      	strne	r0, [r4, #80]	; 0x50
1a003954:	81a3      	strh	r3, [r4, #12]
1a003956:	bd10      	pop	{r4, pc}

1a003958 <__sclose>:
1a003958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00395c:	f7fc bdee 	b.w	1a00053c <_close_r>
1a003960:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a003964:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a003968:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00396c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a003970:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a003974:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a003978:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00397c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003980 <strlen>:
1a003980:	f890 f000 	pld	[r0]
1a003984:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a003988:	f020 0107 	bic.w	r1, r0, #7
1a00398c:	f06f 0c00 	mvn.w	ip, #0
1a003990:	f010 0407 	ands.w	r4, r0, #7
1a003994:	f891 f020 	pld	[r1, #32]
1a003998:	f040 8049 	bne.w	1a003a2e <strlen+0xae>
1a00399c:	f04f 0400 	mov.w	r4, #0
1a0039a0:	f06f 0007 	mvn.w	r0, #7
1a0039a4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0039a8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0039ac:	f100 0008 	add.w	r0, r0, #8
1a0039b0:	fa82 f24c 	uadd8	r2, r2, ip
1a0039b4:	faa4 f28c 	sel	r2, r4, ip
1a0039b8:	fa83 f34c 	uadd8	r3, r3, ip
1a0039bc:	faa2 f38c 	sel	r3, r2, ip
1a0039c0:	bb4b      	cbnz	r3, 1a003a16 <strlen+0x96>
1a0039c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a0039c6:	fa82 f24c 	uadd8	r2, r2, ip
1a0039ca:	f100 0008 	add.w	r0, r0, #8
1a0039ce:	faa4 f28c 	sel	r2, r4, ip
1a0039d2:	fa83 f34c 	uadd8	r3, r3, ip
1a0039d6:	faa2 f38c 	sel	r3, r2, ip
1a0039da:	b9e3      	cbnz	r3, 1a003a16 <strlen+0x96>
1a0039dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0039e0:	fa82 f24c 	uadd8	r2, r2, ip
1a0039e4:	f100 0008 	add.w	r0, r0, #8
1a0039e8:	faa4 f28c 	sel	r2, r4, ip
1a0039ec:	fa83 f34c 	uadd8	r3, r3, ip
1a0039f0:	faa2 f38c 	sel	r3, r2, ip
1a0039f4:	b97b      	cbnz	r3, 1a003a16 <strlen+0x96>
1a0039f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0039fa:	f101 0120 	add.w	r1, r1, #32
1a0039fe:	fa82 f24c 	uadd8	r2, r2, ip
1a003a02:	f100 0008 	add.w	r0, r0, #8
1a003a06:	faa4 f28c 	sel	r2, r4, ip
1a003a0a:	fa83 f34c 	uadd8	r3, r3, ip
1a003a0e:	faa2 f38c 	sel	r3, r2, ip
1a003a12:	2b00      	cmp	r3, #0
1a003a14:	d0c6      	beq.n	1a0039a4 <strlen+0x24>
1a003a16:	2a00      	cmp	r2, #0
1a003a18:	bf04      	itt	eq
1a003a1a:	3004      	addeq	r0, #4
1a003a1c:	461a      	moveq	r2, r3
1a003a1e:	ba12      	rev	r2, r2
1a003a20:	fab2 f282 	clz	r2, r2
1a003a24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a003a28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a003a2c:	4770      	bx	lr
1a003a2e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003a32:	f004 0503 	and.w	r5, r4, #3
1a003a36:	f1c4 0000 	rsb	r0, r4, #0
1a003a3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a003a3e:	f014 0f04 	tst.w	r4, #4
1a003a42:	f891 f040 	pld	[r1, #64]	; 0x40
1a003a46:	fa0c f505 	lsl.w	r5, ip, r5
1a003a4a:	ea62 0205 	orn	r2, r2, r5
1a003a4e:	bf1c      	itt	ne
1a003a50:	ea63 0305 	ornne	r3, r3, r5
1a003a54:	4662      	movne	r2, ip
1a003a56:	f04f 0400 	mov.w	r4, #0
1a003a5a:	e7a9      	b.n	1a0039b0 <strlen+0x30>
1a003a5c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003a60 <_vfprintf_r>:
1a003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003a64:	b0d5      	sub	sp, #340	; 0x154
1a003a66:	461c      	mov	r4, r3
1a003a68:	4689      	mov	r9, r1
1a003a6a:	4617      	mov	r7, r2
1a003a6c:	4605      	mov	r5, r0
1a003a6e:	9005      	str	r0, [sp, #20]
1a003a70:	f002 ff8c 	bl	1a00698c <_localeconv_r>
1a003a74:	6803      	ldr	r3, [r0, #0]
1a003a76:	9315      	str	r3, [sp, #84]	; 0x54
1a003a78:	4618      	mov	r0, r3
1a003a7a:	f7ff ff81 	bl	1a003980 <strlen>
1a003a7e:	9408      	str	r4, [sp, #32]
1a003a80:	9013      	str	r0, [sp, #76]	; 0x4c
1a003a82:	b11d      	cbz	r5, 1a003a8c <_vfprintf_r+0x2c>
1a003a84:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a003a86:	2b00      	cmp	r3, #0
1a003a88:	f000 8411 	beq.w	1a0042ae <_vfprintf_r+0x84e>
1a003a8c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003a90:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a003a94:	07cd      	lsls	r5, r1, #31
1a003a96:	b293      	uxth	r3, r2
1a003a98:	d402      	bmi.n	1a003aa0 <_vfprintf_r+0x40>
1a003a9a:	0598      	lsls	r0, r3, #22
1a003a9c:	f140 8754 	bpl.w	1a004948 <_vfprintf_r+0xee8>
1a003aa0:	0499      	lsls	r1, r3, #18
1a003aa2:	d40a      	bmi.n	1a003aba <_vfprintf_r+0x5a>
1a003aa4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003aa8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a003aac:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a003ab0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a003ab4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a003ab8:	b29b      	uxth	r3, r3
1a003aba:	071a      	lsls	r2, r3, #28
1a003abc:	f140 80bf 	bpl.w	1a003c3e <_vfprintf_r+0x1de>
1a003ac0:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a003ac4:	2a00      	cmp	r2, #0
1a003ac6:	f000 80ba 	beq.w	1a003c3e <_vfprintf_r+0x1de>
1a003aca:	f003 021a 	and.w	r2, r3, #26
1a003ace:	2a0a      	cmp	r2, #10
1a003ad0:	f000 80c3 	beq.w	1a003c5a <_vfprintf_r+0x1fa>
1a003ad4:	2300      	movs	r3, #0
1a003ad6:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a003d48 <_vfprintf_r+0x2e8>
1a003ada:	9312      	str	r3, [sp, #72]	; 0x48
1a003adc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a003ae0:	9314      	str	r3, [sp, #80]	; 0x50
1a003ae2:	9316      	str	r3, [sp, #88]	; 0x58
1a003ae4:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a003ae8:	9317      	str	r3, [sp, #92]	; 0x5c
1a003aea:	9304      	str	r3, [sp, #16]
1a003aec:	ab2b      	add	r3, sp, #172	; 0xac
1a003aee:	9328      	str	r3, [sp, #160]	; 0xa0
1a003af0:	469b      	mov	fp, r3
1a003af2:	783b      	ldrb	r3, [r7, #0]
1a003af4:	f8cd 901c 	str.w	r9, [sp, #28]
1a003af8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003afc:	2b00      	cmp	r3, #0
1a003afe:	f000 8267 	beq.w	1a003fd0 <_vfprintf_r+0x570>
1a003b02:	2b25      	cmp	r3, #37	; 0x25
1a003b04:	f001 80ab 	beq.w	1a004c5e <_vfprintf_r+0x11fe>
1a003b08:	463d      	mov	r5, r7
1a003b0a:	e003      	b.n	1a003b14 <_vfprintf_r+0xb4>
1a003b0c:	2b25      	cmp	r3, #37	; 0x25
1a003b0e:	f000 80bb 	beq.w	1a003c88 <_vfprintf_r+0x228>
1a003b12:	4625      	mov	r5, r4
1a003b14:	786b      	ldrb	r3, [r5, #1]
1a003b16:	1c6c      	adds	r4, r5, #1
1a003b18:	2b00      	cmp	r3, #0
1a003b1a:	d1f7      	bne.n	1a003b0c <_vfprintf_r+0xac>
1a003b1c:	1be6      	subs	r6, r4, r7
1a003b1e:	f000 8257 	beq.w	1a003fd0 <_vfprintf_r+0x570>
1a003b22:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a003b26:	3301      	adds	r3, #1
1a003b28:	4432      	add	r2, r6
1a003b2a:	2b07      	cmp	r3, #7
1a003b2c:	f8cb 7000 	str.w	r7, [fp]
1a003b30:	f8cb 6004 	str.w	r6, [fp, #4]
1a003b34:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a003b38:	f300 80aa 	bgt.w	1a003c90 <_vfprintf_r+0x230>
1a003b3c:	f10b 0b08 	add.w	fp, fp, #8
1a003b40:	9a04      	ldr	r2, [sp, #16]
1a003b42:	786b      	ldrb	r3, [r5, #1]
1a003b44:	4432      	add	r2, r6
1a003b46:	9204      	str	r2, [sp, #16]
1a003b48:	2b00      	cmp	r3, #0
1a003b4a:	f000 8241 	beq.w	1a003fd0 <_vfprintf_r+0x570>
1a003b4e:	2300      	movs	r3, #0
1a003b50:	f894 8001 	ldrb.w	r8, [r4, #1]
1a003b54:	9306      	str	r3, [sp, #24]
1a003b56:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003b5a:	9302      	str	r3, [sp, #8]
1a003b5c:	f104 0a01 	add.w	sl, r4, #1
1a003b60:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a003b64:	262b      	movs	r6, #43	; 0x2b
1a003b66:	2120      	movs	r1, #32
1a003b68:	f10a 0a01 	add.w	sl, sl, #1
1a003b6c:	f1a8 0320 	sub.w	r3, r8, #32
1a003b70:	2b5a      	cmp	r3, #90	; 0x5a
1a003b72:	f200 83a1 	bhi.w	1a0042b8 <_vfprintf_r+0x858>
1a003b76:	e8df f013 	tbh	[pc, r3, lsl #1]
1a003b7a:	0282      	.short	0x0282
1a003b7c:	039f039f 	.word	0x039f039f
1a003b80:	039f027b 	.word	0x039f027b
1a003b84:	039f039f 	.word	0x039f039f
1a003b88:	039f0301 	.word	0x039f0301
1a003b8c:	02f6039f 	.word	0x02f6039f
1a003b90:	039f00df 	.word	0x039f00df
1a003b94:	032b00c4 	.word	0x032b00c4
1a003b98:	0324039f 	.word	0x0324039f
1a003b9c:	00960096 	.word	0x00960096
1a003ba0:	00960096 	.word	0x00960096
1a003ba4:	00960096 	.word	0x00960096
1a003ba8:	00960096 	.word	0x00960096
1a003bac:	039f0096 	.word	0x039f0096
1a003bb0:	039f039f 	.word	0x039f039f
1a003bb4:	039f039f 	.word	0x039f039f
1a003bb8:	039f039f 	.word	0x039f039f
1a003bbc:	039f0345 	.word	0x039f0345
1a003bc0:	016201a8 	.word	0x016201a8
1a003bc4:	03450345 	.word	0x03450345
1a003bc8:	039f0345 	.word	0x039f0345
1a003bcc:	039f039f 	.word	0x039f039f
1a003bd0:	015b039f 	.word	0x015b039f
1a003bd4:	039f039f 	.word	0x039f039f
1a003bd8:	039f014e 	.word	0x039f014e
1a003bdc:	039f039f 	.word	0x039f039f
1a003be0:	039f0123 	.word	0x039f0123
1a003be4:	039f0115 	.word	0x039f0115
1a003be8:	00cb039f 	.word	0x00cb039f
1a003bec:	039f039f 	.word	0x039f039f
1a003bf0:	039f039f 	.word	0x039f039f
1a003bf4:	039f039f 	.word	0x039f039f
1a003bf8:	039f039f 	.word	0x039f039f
1a003bfc:	039f0345 	.word	0x039f0345
1a003c00:	00ef01a8 	.word	0x00ef01a8
1a003c04:	03450345 	.word	0x03450345
1a003c08:	02700345 	.word	0x02700345
1a003c0c:	005b00ef 	.word	0x005b00ef
1a003c10:	02eb039f 	.word	0x02eb039f
1a003c14:	02d1039f 	.word	0x02d1039f
1a003c18:	028c02bd 	.word	0x028c02bd
1a003c1c:	039f005b 	.word	0x039f005b
1a003c20:	005f0123 	.word	0x005f0123
1a003c24:	039f0387 	.word	0x039f0387
1a003c28:	00a5039f 	.word	0x00a5039f
1a003c2c:	005f039f 	.word	0x005f039f
1a003c30:	9b02      	ldr	r3, [sp, #8]
1a003c32:	f043 0320 	orr.w	r3, r3, #32
1a003c36:	9302      	str	r3, [sp, #8]
1a003c38:	f89a 8000 	ldrb.w	r8, [sl]
1a003c3c:	e794      	b.n	1a003b68 <_vfprintf_r+0x108>
1a003c3e:	4649      	mov	r1, r9
1a003c40:	9805      	ldr	r0, [sp, #20]
1a003c42:	f001 fcf9 	bl	1a005638 <__swsetup_r>
1a003c46:	2800      	cmp	r0, #0
1a003c48:	f041 8381 	bne.w	1a00534e <_vfprintf_r+0x18ee>
1a003c4c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003c50:	f003 021a 	and.w	r2, r3, #26
1a003c54:	2a0a      	cmp	r2, #10
1a003c56:	f47f af3d 	bne.w	1a003ad4 <_vfprintf_r+0x74>
1a003c5a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a003c5e:	2a00      	cmp	r2, #0
1a003c60:	f6ff af38 	blt.w	1a003ad4 <_vfprintf_r+0x74>
1a003c64:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a003c68:	07d6      	lsls	r6, r2, #31
1a003c6a:	d402      	bmi.n	1a003c72 <_vfprintf_r+0x212>
1a003c6c:	059d      	lsls	r5, r3, #22
1a003c6e:	f141 8190 	bpl.w	1a004f92 <_vfprintf_r+0x1532>
1a003c72:	4623      	mov	r3, r4
1a003c74:	463a      	mov	r2, r7
1a003c76:	4649      	mov	r1, r9
1a003c78:	9805      	ldr	r0, [sp, #20]
1a003c7a:	f001 fc9b 	bl	1a0055b4 <__sbprintf>
1a003c7e:	9004      	str	r0, [sp, #16]
1a003c80:	9804      	ldr	r0, [sp, #16]
1a003c82:	b055      	add	sp, #340	; 0x154
1a003c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003c88:	1be6      	subs	r6, r4, r7
1a003c8a:	f43f af60 	beq.w	1a003b4e <_vfprintf_r+0xee>
1a003c8e:	e748      	b.n	1a003b22 <_vfprintf_r+0xc2>
1a003c90:	aa28      	add	r2, sp, #160	; 0xa0
1a003c92:	9907      	ldr	r1, [sp, #28]
1a003c94:	9805      	ldr	r0, [sp, #20]
1a003c96:	f003 fd1f 	bl	1a0076d8 <__sprint_r>
1a003c9a:	2800      	cmp	r0, #0
1a003c9c:	f041 8427 	bne.w	1a0054ee <_vfprintf_r+0x1a8e>
1a003ca0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a003ca4:	e74c      	b.n	1a003b40 <_vfprintf_r+0xe0>
1a003ca6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003caa:	2200      	movs	r2, #0
1a003cac:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a003cb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a003cb4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a003cb8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003cbc:	2b09      	cmp	r3, #9
1a003cbe:	d9f5      	bls.n	1a003cac <_vfprintf_r+0x24c>
1a003cc0:	9206      	str	r2, [sp, #24]
1a003cc2:	e753      	b.n	1a003b6c <_vfprintf_r+0x10c>
1a003cc4:	4b22      	ldr	r3, [pc, #136]	; (1a003d50 <_vfprintf_r+0x2f0>)
1a003cc6:	9314      	str	r3, [sp, #80]	; 0x50
1a003cc8:	9b02      	ldr	r3, [sp, #8]
1a003cca:	069f      	lsls	r7, r3, #26
1a003ccc:	d525      	bpl.n	1a003d1a <_vfprintf_r+0x2ba>
1a003cce:	9c08      	ldr	r4, [sp, #32]
1a003cd0:	3407      	adds	r4, #7
1a003cd2:	f024 0307 	bic.w	r3, r4, #7
1a003cd6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a003cda:	9308      	str	r3, [sp, #32]
1a003cdc:	9a02      	ldr	r2, [sp, #8]
1a003cde:	07d1      	lsls	r1, r2, #31
1a003ce0:	d50a      	bpl.n	1a003cf8 <_vfprintf_r+0x298>
1a003ce2:	ea54 0305 	orrs.w	r3, r4, r5
1a003ce6:	d007      	beq.n	1a003cf8 <_vfprintf_r+0x298>
1a003ce8:	2330      	movs	r3, #48	; 0x30
1a003cea:	f042 0202 	orr.w	r2, r2, #2
1a003cee:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a003cf2:	9202      	str	r2, [sp, #8]
1a003cf4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a003cf8:	9b02      	ldr	r3, [sp, #8]
1a003cfa:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a003cfe:	2302      	movs	r3, #2
1a003d00:	e1d9      	b.n	1a0040b6 <_vfprintf_r+0x656>
1a003d02:	f89a 8000 	ldrb.w	r8, [sl]
1a003d06:	9b02      	ldr	r3, [sp, #8]
1a003d08:	f043 0304 	orr.w	r3, r3, #4
1a003d0c:	9302      	str	r3, [sp, #8]
1a003d0e:	e72b      	b.n	1a003b68 <_vfprintf_r+0x108>
1a003d10:	4b10      	ldr	r3, [pc, #64]	; (1a003d54 <_vfprintf_r+0x2f4>)
1a003d12:	9314      	str	r3, [sp, #80]	; 0x50
1a003d14:	9b02      	ldr	r3, [sp, #8]
1a003d16:	069f      	lsls	r7, r3, #26
1a003d18:	d4d9      	bmi.n	1a003cce <_vfprintf_r+0x26e>
1a003d1a:	9b08      	ldr	r3, [sp, #32]
1a003d1c:	f853 4b04 	ldr.w	r4, [r3], #4
1a003d20:	9308      	str	r3, [sp, #32]
1a003d22:	9b02      	ldr	r3, [sp, #8]
1a003d24:	06de      	lsls	r6, r3, #27
1a003d26:	f100 864f 	bmi.w	1a0049c8 <_vfprintf_r+0xf68>
1a003d2a:	9b02      	ldr	r3, [sp, #8]
1a003d2c:	065d      	lsls	r5, r3, #25
1a003d2e:	f140 8647 	bpl.w	1a0049c0 <_vfprintf_r+0xf60>
1a003d32:	b2a4      	uxth	r4, r4
1a003d34:	2500      	movs	r5, #0
1a003d36:	e7d1      	b.n	1a003cdc <_vfprintf_r+0x27c>
1a003d38:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a003d3c:	f89a 8000 	ldrb.w	r8, [sl]
1a003d40:	e712      	b.n	1a003b68 <_vfprintf_r+0x108>
1a003d42:	bf00      	nop
1a003d44:	f3af 8000 	nop.w
	...
1a003d50:	1a007eb4 	.word	0x1a007eb4
1a003d54:	1a007ea0 	.word	0x1a007ea0
1a003d58:	9e02      	ldr	r6, [sp, #8]
1a003d5a:	06b0      	lsls	r0, r6, #26
1a003d5c:	f140 870b 	bpl.w	1a004b76 <_vfprintf_r+0x1116>
1a003d60:	9c08      	ldr	r4, [sp, #32]
1a003d62:	3407      	adds	r4, #7
1a003d64:	f024 0307 	bic.w	r3, r4, #7
1a003d68:	4619      	mov	r1, r3
1a003d6a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a003d6e:	9108      	str	r1, [sp, #32]
1a003d70:	4614      	mov	r4, r2
1a003d72:	461d      	mov	r5, r3
1a003d74:	2a00      	cmp	r2, #0
1a003d76:	f173 0300 	sbcs.w	r3, r3, #0
1a003d7a:	db71      	blt.n	1a003e60 <_vfprintf_r+0x400>
1a003d7c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a003d80:	f000 82c5 	beq.w	1a00430e <_vfprintf_r+0x8ae>
1a003d84:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a003d88:	9302      	str	r3, [sp, #8]
1a003d8a:	ea54 0305 	orrs.w	r3, r4, r5
1a003d8e:	f040 82bd 	bne.w	1a00430c <_vfprintf_r+0x8ac>
1a003d92:	f1b9 0f00 	cmp.w	r9, #0
1a003d96:	f041 810e 	bne.w	1a004fb6 <_vfprintf_r+0x1556>
1a003d9a:	f04f 0900 	mov.w	r9, #0
1a003d9e:	464e      	mov	r6, r9
1a003da0:	af54      	add	r7, sp, #336	; 0x150
1a003da2:	e2bf      	b.n	1a004324 <_vfprintf_r+0x8c4>
1a003da4:	9b02      	ldr	r3, [sp, #8]
1a003da6:	069d      	lsls	r5, r3, #26
1a003da8:	f043 0610 	orr.w	r6, r3, #16
1a003dac:	f100 828f 	bmi.w	1a0042ce <_vfprintf_r+0x86e>
1a003db0:	9b08      	ldr	r3, [sp, #32]
1a003db2:	1d1a      	adds	r2, r3, #4
1a003db4:	9b08      	ldr	r3, [sp, #32]
1a003db6:	9208      	str	r2, [sp, #32]
1a003db8:	681c      	ldr	r4, [r3, #0]
1a003dba:	2500      	movs	r5, #0
1a003dbc:	2301      	movs	r3, #1
1a003dbe:	e17a      	b.n	1a0040b6 <_vfprintf_r+0x656>
1a003dc0:	9c08      	ldr	r4, [sp, #32]
1a003dc2:	f854 7b04 	ldr.w	r7, [r4], #4
1a003dc6:	2500      	movs	r5, #0
1a003dc8:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a003dcc:	2f00      	cmp	r7, #0
1a003dce:	f000 8737 	beq.w	1a004c40 <_vfprintf_r+0x11e0>
1a003dd2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a003dd6:	f000 87bc 	beq.w	1a004d52 <_vfprintf_r+0x12f2>
1a003dda:	464a      	mov	r2, r9
1a003ddc:	4629      	mov	r1, r5
1a003dde:	4638      	mov	r0, r7
1a003de0:	f002 fe56 	bl	1a006a90 <memchr>
1a003de4:	9009      	str	r0, [sp, #36]	; 0x24
1a003de6:	2800      	cmp	r0, #0
1a003de8:	f001 824a 	beq.w	1a005280 <_vfprintf_r+0x1820>
1a003dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003dee:	46a9      	mov	r9, r5
1a003df0:	1bde      	subs	r6, r3, r7
1a003df2:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a003df6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a003dfa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003dfe:	9408      	str	r4, [sp, #32]
1a003e00:	9303      	str	r3, [sp, #12]
1a003e02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a003e06:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a003e0a:	2a00      	cmp	r2, #0
1a003e0c:	d06f      	beq.n	1a003eee <_vfprintf_r+0x48e>
1a003e0e:	9b03      	ldr	r3, [sp, #12]
1a003e10:	3301      	adds	r3, #1
1a003e12:	9303      	str	r3, [sp, #12]
1a003e14:	e06b      	b.n	1a003eee <_vfprintf_r+0x48e>
1a003e16:	9b02      	ldr	r3, [sp, #8]
1a003e18:	069c      	lsls	r4, r3, #26
1a003e1a:	f043 0610 	orr.w	r6, r3, #16
1a003e1e:	f100 825f 	bmi.w	1a0042e0 <_vfprintf_r+0x880>
1a003e22:	9b08      	ldr	r3, [sp, #32]
1a003e24:	1d1a      	adds	r2, r3, #4
1a003e26:	9b08      	ldr	r3, [sp, #32]
1a003e28:	9208      	str	r2, [sp, #32]
1a003e2a:	681c      	ldr	r4, [r3, #0]
1a003e2c:	2500      	movs	r5, #0
1a003e2e:	e25e      	b.n	1a0042ee <_vfprintf_r+0x88e>
1a003e30:	9b02      	ldr	r3, [sp, #8]
1a003e32:	f89a 8000 	ldrb.w	r8, [sl]
1a003e36:	f043 0308 	orr.w	r3, r3, #8
1a003e3a:	9302      	str	r3, [sp, #8]
1a003e3c:	e694      	b.n	1a003b68 <_vfprintf_r+0x108>
1a003e3e:	9b02      	ldr	r3, [sp, #8]
1a003e40:	069c      	lsls	r4, r3, #26
1a003e42:	f043 0610 	orr.w	r6, r3, #16
1a003e46:	d48b      	bmi.n	1a003d60 <_vfprintf_r+0x300>
1a003e48:	9b08      	ldr	r3, [sp, #32]
1a003e4a:	1d1a      	adds	r2, r3, #4
1a003e4c:	9b08      	ldr	r3, [sp, #32]
1a003e4e:	9208      	str	r2, [sp, #32]
1a003e50:	681c      	ldr	r4, [r3, #0]
1a003e52:	17e5      	asrs	r5, r4, #31
1a003e54:	4622      	mov	r2, r4
1a003e56:	462b      	mov	r3, r5
1a003e58:	2a00      	cmp	r2, #0
1a003e5a:	f173 0300 	sbcs.w	r3, r3, #0
1a003e5e:	da8d      	bge.n	1a003d7c <_vfprintf_r+0x31c>
1a003e60:	4264      	negs	r4, r4
1a003e62:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a003e66:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a003e6a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a003e6e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003e72:	f04f 0301 	mov.w	r3, #1
1a003e76:	f040 8125 	bne.w	1a0040c4 <_vfprintf_r+0x664>
1a003e7a:	2b01      	cmp	r3, #1
1a003e7c:	f000 8247 	beq.w	1a00430e <_vfprintf_r+0x8ae>
1a003e80:	2b02      	cmp	r3, #2
1a003e82:	f000 8479 	beq.w	1a004778 <_vfprintf_r+0xd18>
1a003e86:	a954      	add	r1, sp, #336	; 0x150
1a003e88:	e000      	b.n	1a003e8c <_vfprintf_r+0x42c>
1a003e8a:	4639      	mov	r1, r7
1a003e8c:	08e2      	lsrs	r2, r4, #3
1a003e8e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a003e92:	08e8      	lsrs	r0, r5, #3
1a003e94:	f004 0307 	and.w	r3, r4, #7
1a003e98:	4605      	mov	r5, r0
1a003e9a:	4614      	mov	r4, r2
1a003e9c:	3330      	adds	r3, #48	; 0x30
1a003e9e:	ea54 0205 	orrs.w	r2, r4, r5
1a003ea2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a003ea6:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a003eaa:	d1ee      	bne.n	1a003e8a <_vfprintf_r+0x42a>
1a003eac:	07f2      	lsls	r2, r6, #31
1a003eae:	f140 8288 	bpl.w	1a0043c2 <_vfprintf_r+0x962>
1a003eb2:	2b30      	cmp	r3, #48	; 0x30
1a003eb4:	f000 8285 	beq.w	1a0043c2 <_vfprintf_r+0x962>
1a003eb8:	2330      	movs	r3, #48	; 0x30
1a003eba:	3902      	subs	r1, #2
1a003ebc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a003ec0:	ab54      	add	r3, sp, #336	; 0x150
1a003ec2:	9602      	str	r6, [sp, #8]
1a003ec4:	460f      	mov	r7, r1
1a003ec6:	1a5e      	subs	r6, r3, r1
1a003ec8:	e22c      	b.n	1a004324 <_vfprintf_r+0x8c4>
1a003eca:	9c08      	ldr	r4, [sp, #32]
1a003ecc:	2300      	movs	r3, #0
1a003ece:	f854 2b04 	ldr.w	r2, [r4], #4
1a003ed2:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a003ed6:	2601      	movs	r6, #1
1a003ed8:	461a      	mov	r2, r3
1a003eda:	9603      	str	r6, [sp, #12]
1a003edc:	9408      	str	r4, [sp, #32]
1a003ede:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a003ee2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003ee6:	9209      	str	r2, [sp, #36]	; 0x24
1a003ee8:	4691      	mov	r9, r2
1a003eea:	920c      	str	r2, [sp, #48]	; 0x30
1a003eec:	af3b      	add	r7, sp, #236	; 0xec
1a003eee:	9b02      	ldr	r3, [sp, #8]
1a003ef0:	f013 0302 	ands.w	r3, r3, #2
1a003ef4:	930a      	str	r3, [sp, #40]	; 0x28
1a003ef6:	d002      	beq.n	1a003efe <_vfprintf_r+0x49e>
1a003ef8:	9b03      	ldr	r3, [sp, #12]
1a003efa:	3302      	adds	r3, #2
1a003efc:	9303      	str	r3, [sp, #12]
1a003efe:	9b02      	ldr	r3, [sp, #8]
1a003f00:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a003f02:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a003f06:	930b      	str	r3, [sp, #44]	; 0x2c
1a003f08:	d104      	bne.n	1a003f14 <_vfprintf_r+0x4b4>
1a003f0a:	9b06      	ldr	r3, [sp, #24]
1a003f0c:	9903      	ldr	r1, [sp, #12]
1a003f0e:	1a5d      	subs	r5, r3, r1
1a003f10:	2d00      	cmp	r5, #0
1a003f12:	dc66      	bgt.n	1a003fe2 <_vfprintf_r+0x582>
1a003f14:	b172      	cbz	r2, 1a003f34 <_vfprintf_r+0x4d4>
1a003f16:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003f18:	3201      	adds	r2, #1
1a003f1a:	3401      	adds	r4, #1
1a003f1c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a003f20:	2101      	movs	r1, #1
1a003f22:	2a07      	cmp	r2, #7
1a003f24:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003f28:	e9cb 0100 	strd	r0, r1, [fp]
1a003f2c:	f300 83b1 	bgt.w	1a004692 <_vfprintf_r+0xc32>
1a003f30:	f10b 0b08 	add.w	fp, fp, #8
1a003f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003f36:	b16b      	cbz	r3, 1a003f54 <_vfprintf_r+0x4f4>
1a003f38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003f3a:	3301      	adds	r3, #1
1a003f3c:	3402      	adds	r4, #2
1a003f3e:	a921      	add	r1, sp, #132	; 0x84
1a003f40:	2202      	movs	r2, #2
1a003f42:	2b07      	cmp	r3, #7
1a003f44:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a003f48:	e9cb 1200 	strd	r1, r2, [fp]
1a003f4c:	f300 83ad 	bgt.w	1a0046aa <_vfprintf_r+0xc4a>
1a003f50:	f10b 0b08 	add.w	fp, fp, #8
1a003f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003f56:	2b80      	cmp	r3, #128	; 0x80
1a003f58:	f000 8295 	beq.w	1a004486 <_vfprintf_r+0xa26>
1a003f5c:	eba9 0506 	sub.w	r5, r9, r6
1a003f60:	2d00      	cmp	r5, #0
1a003f62:	f300 82d3 	bgt.w	1a00450c <_vfprintf_r+0xaac>
1a003f66:	9b02      	ldr	r3, [sp, #8]
1a003f68:	05db      	lsls	r3, r3, #23
1a003f6a:	f100 822e 	bmi.w	1a0043ca <_vfprintf_r+0x96a>
1a003f6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003f70:	f8cb 7000 	str.w	r7, [fp]
1a003f74:	3301      	adds	r3, #1
1a003f76:	4434      	add	r4, r6
1a003f78:	2b07      	cmp	r3, #7
1a003f7a:	942a      	str	r4, [sp, #168]	; 0xa8
1a003f7c:	f8cb 6004 	str.w	r6, [fp, #4]
1a003f80:	9329      	str	r3, [sp, #164]	; 0xa4
1a003f82:	f300 8325 	bgt.w	1a0045d0 <_vfprintf_r+0xb70>
1a003f86:	f10b 0b08 	add.w	fp, fp, #8
1a003f8a:	9b02      	ldr	r3, [sp, #8]
1a003f8c:	075d      	lsls	r5, r3, #29
1a003f8e:	d505      	bpl.n	1a003f9c <_vfprintf_r+0x53c>
1a003f90:	9b06      	ldr	r3, [sp, #24]
1a003f92:	9a03      	ldr	r2, [sp, #12]
1a003f94:	1a9d      	subs	r5, r3, r2
1a003f96:	2d00      	cmp	r5, #0
1a003f98:	f300 83ae 	bgt.w	1a0046f8 <_vfprintf_r+0xc98>
1a003f9c:	9b04      	ldr	r3, [sp, #16]
1a003f9e:	9a06      	ldr	r2, [sp, #24]
1a003fa0:	9903      	ldr	r1, [sp, #12]
1a003fa2:	428a      	cmp	r2, r1
1a003fa4:	bfac      	ite	ge
1a003fa6:	189b      	addge	r3, r3, r2
1a003fa8:	185b      	addlt	r3, r3, r1
1a003faa:	9304      	str	r3, [sp, #16]
1a003fac:	2c00      	cmp	r4, #0
1a003fae:	f040 82e7 	bne.w	1a004580 <_vfprintf_r+0xb20>
1a003fb2:	2300      	movs	r3, #0
1a003fb4:	9329      	str	r3, [sp, #164]	; 0xa4
1a003fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003fb8:	b11b      	cbz	r3, 1a003fc2 <_vfprintf_r+0x562>
1a003fba:	9909      	ldr	r1, [sp, #36]	; 0x24
1a003fbc:	9805      	ldr	r0, [sp, #20]
1a003fbe:	f7fe ff25 	bl	1a002e0c <_free_r>
1a003fc2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a003fc6:	4657      	mov	r7, sl
1a003fc8:	783b      	ldrb	r3, [r7, #0]
1a003fca:	2b00      	cmp	r3, #0
1a003fcc:	f47f ad99 	bne.w	1a003b02 <_vfprintf_r+0xa2>
1a003fd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a003fd2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a003fd6:	2b00      	cmp	r3, #0
1a003fd8:	f040 86f5 	bne.w	1a004dc6 <_vfprintf_r+0x1366>
1a003fdc:	2300      	movs	r3, #0
1a003fde:	9329      	str	r3, [sp, #164]	; 0xa4
1a003fe0:	e375      	b.n	1a0046ce <_vfprintf_r+0xc6e>
1a003fe2:	2d10      	cmp	r5, #16
1a003fe4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003fe6:	dd29      	ble.n	1a00403c <_vfprintf_r+0x5dc>
1a003fe8:	4659      	mov	r1, fp
1a003fea:	4620      	mov	r0, r4
1a003fec:	961e      	str	r6, [sp, #120]	; 0x78
1a003fee:	2310      	movs	r3, #16
1a003ff0:	9c05      	ldr	r4, [sp, #20]
1a003ff2:	9e07      	ldr	r6, [sp, #28]
1a003ff4:	46bb      	mov	fp, r7
1a003ff6:	e004      	b.n	1a004002 <_vfprintf_r+0x5a2>
1a003ff8:	3d10      	subs	r5, #16
1a003ffa:	2d10      	cmp	r5, #16
1a003ffc:	f101 0108 	add.w	r1, r1, #8
1a004000:	dd18      	ble.n	1a004034 <_vfprintf_r+0x5d4>
1a004002:	3201      	adds	r2, #1
1a004004:	4fbc      	ldr	r7, [pc, #752]	; (1a0042f8 <_vfprintf_r+0x898>)
1a004006:	3010      	adds	r0, #16
1a004008:	2a07      	cmp	r2, #7
1a00400a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00400e:	e9c1 7300 	strd	r7, r3, [r1]
1a004012:	ddf1      	ble.n	1a003ff8 <_vfprintf_r+0x598>
1a004014:	aa28      	add	r2, sp, #160	; 0xa0
1a004016:	4631      	mov	r1, r6
1a004018:	4620      	mov	r0, r4
1a00401a:	f003 fb5d 	bl	1a0076d8 <__sprint_r>
1a00401e:	2800      	cmp	r0, #0
1a004020:	f040 834f 	bne.w	1a0046c2 <_vfprintf_r+0xc62>
1a004024:	3d10      	subs	r5, #16
1a004026:	2d10      	cmp	r5, #16
1a004028:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00402c:	a92b      	add	r1, sp, #172	; 0xac
1a00402e:	f04f 0310 	mov.w	r3, #16
1a004032:	dce6      	bgt.n	1a004002 <_vfprintf_r+0x5a2>
1a004034:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a004036:	465f      	mov	r7, fp
1a004038:	4604      	mov	r4, r0
1a00403a:	468b      	mov	fp, r1
1a00403c:	3201      	adds	r2, #1
1a00403e:	4bae      	ldr	r3, [pc, #696]	; (1a0042f8 <_vfprintf_r+0x898>)
1a004040:	442c      	add	r4, r5
1a004042:	2a07      	cmp	r2, #7
1a004044:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004048:	e9cb 3500 	strd	r3, r5, [fp]
1a00404c:	f300 862a 	bgt.w	1a004ca4 <_vfprintf_r+0x1244>
1a004050:	f10b 0b08 	add.w	fp, fp, #8
1a004054:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004058:	e75c      	b.n	1a003f14 <_vfprintf_r+0x4b4>
1a00405a:	f89a 8000 	ldrb.w	r8, [sl]
1a00405e:	9b02      	ldr	r3, [sp, #8]
1a004060:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a004064:	f000 85e3 	beq.w	1a004c2e <_vfprintf_r+0x11ce>
1a004068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00406c:	9302      	str	r3, [sp, #8]
1a00406e:	e57b      	b.n	1a003b68 <_vfprintf_r+0x108>
1a004070:	9b02      	ldr	r3, [sp, #8]
1a004072:	f89a 8000 	ldrb.w	r8, [sl]
1a004076:	f043 0301 	orr.w	r3, r3, #1
1a00407a:	9302      	str	r3, [sp, #8]
1a00407c:	e574      	b.n	1a003b68 <_vfprintf_r+0x108>
1a00407e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a004082:	f89a 8000 	ldrb.w	r8, [sl]
1a004086:	2b00      	cmp	r3, #0
1a004088:	f47f ad6e 	bne.w	1a003b68 <_vfprintf_r+0x108>
1a00408c:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a004090:	e56a      	b.n	1a003b68 <_vfprintf_r+0x108>
1a004092:	9c08      	ldr	r4, [sp, #32]
1a004094:	f647 0230 	movw	r2, #30768	; 0x7830
1a004098:	f854 3b04 	ldr.w	r3, [r4], #4
1a00409c:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0040a0:	9a02      	ldr	r2, [sp, #8]
1a0040a2:	9408      	str	r4, [sp, #32]
1a0040a4:	461c      	mov	r4, r3
1a0040a6:	4b95      	ldr	r3, [pc, #596]	; (1a0042fc <_vfprintf_r+0x89c>)
1a0040a8:	9314      	str	r3, [sp, #80]	; 0x50
1a0040aa:	f042 0602 	orr.w	r6, r2, #2
1a0040ae:	2500      	movs	r5, #0
1a0040b0:	2302      	movs	r3, #2
1a0040b2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a0040b6:	2200      	movs	r2, #0
1a0040b8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0040bc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0040c0:	f43f aedb 	beq.w	1a003e7a <_vfprintf_r+0x41a>
1a0040c4:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a0040c8:	9202      	str	r2, [sp, #8]
1a0040ca:	ea54 0205 	orrs.w	r2, r4, r5
1a0040ce:	f040 82dd 	bne.w	1a00468c <_vfprintf_r+0xc2c>
1a0040d2:	f1b9 0f00 	cmp.w	r9, #0
1a0040d6:	f040 8348 	bne.w	1a00476a <_vfprintf_r+0xd0a>
1a0040da:	2b00      	cmp	r3, #0
1a0040dc:	f47f ae5d 	bne.w	1a003d9a <_vfprintf_r+0x33a>
1a0040e0:	f016 0601 	ands.w	r6, r6, #1
1a0040e4:	f000 846a 	beq.w	1a0049bc <_vfprintf_r+0xf5c>
1a0040e8:	2330      	movs	r3, #48	; 0x30
1a0040ea:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a0040ee:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a0040f2:	e117      	b.n	1a004324 <_vfprintf_r+0x8c4>
1a0040f4:	9e02      	ldr	r6, [sp, #8]
1a0040f6:	06b0      	lsls	r0, r6, #26
1a0040f8:	f100 80f2 	bmi.w	1a0042e0 <_vfprintf_r+0x880>
1a0040fc:	9b02      	ldr	r3, [sp, #8]
1a0040fe:	9a08      	ldr	r2, [sp, #32]
1a004100:	06d9      	lsls	r1, r3, #27
1a004102:	f852 4b04 	ldr.w	r4, [r2], #4
1a004106:	f101 8243 	bmi.w	1a005590 <_vfprintf_r+0x1b30>
1a00410a:	9e02      	ldr	r6, [sp, #8]
1a00410c:	4633      	mov	r3, r6
1a00410e:	065b      	lsls	r3, r3, #25
1a004110:	f140 8635 	bpl.w	1a004d7e <_vfprintf_r+0x131e>
1a004114:	9208      	str	r2, [sp, #32]
1a004116:	b2a4      	uxth	r4, r4
1a004118:	2500      	movs	r5, #0
1a00411a:	e0e8      	b.n	1a0042ee <_vfprintf_r+0x88e>
1a00411c:	9902      	ldr	r1, [sp, #8]
1a00411e:	9a08      	ldr	r2, [sp, #32]
1a004120:	0689      	lsls	r1, r1, #26
1a004122:	f102 0304 	add.w	r3, r2, #4
1a004126:	f100 8452 	bmi.w	1a0049ce <_vfprintf_r+0xf6e>
1a00412a:	9a02      	ldr	r2, [sp, #8]
1a00412c:	06d7      	lsls	r7, r2, #27
1a00412e:	f100 85e1 	bmi.w	1a004cf4 <_vfprintf_r+0x1294>
1a004132:	9a02      	ldr	r2, [sp, #8]
1a004134:	0656      	lsls	r6, r2, #25
1a004136:	f100 8664 	bmi.w	1a004e02 <_vfprintf_r+0x13a2>
1a00413a:	9a02      	ldr	r2, [sp, #8]
1a00413c:	0595      	lsls	r5, r2, #22
1a00413e:	f140 85d9 	bpl.w	1a004cf4 <_vfprintf_r+0x1294>
1a004142:	9a08      	ldr	r2, [sp, #32]
1a004144:	9308      	str	r3, [sp, #32]
1a004146:	6812      	ldr	r2, [r2, #0]
1a004148:	9b04      	ldr	r3, [sp, #16]
1a00414a:	7013      	strb	r3, [r2, #0]
1a00414c:	4657      	mov	r7, sl
1a00414e:	e73b      	b.n	1a003fc8 <_vfprintf_r+0x568>
1a004150:	f89a 8000 	ldrb.w	r8, [sl]
1a004154:	9b02      	ldr	r3, [sp, #8]
1a004156:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00415a:	f000 855f 	beq.w	1a004c1c <_vfprintf_r+0x11bc>
1a00415e:	f043 0310 	orr.w	r3, r3, #16
1a004162:	9302      	str	r3, [sp, #8]
1a004164:	e500      	b.n	1a003b68 <_vfprintf_r+0x108>
1a004166:	9b08      	ldr	r3, [sp, #32]
1a004168:	f89a 8000 	ldrb.w	r8, [sl]
1a00416c:	f853 2b04 	ldr.w	r2, [r3], #4
1a004170:	9206      	str	r2, [sp, #24]
1a004172:	2a00      	cmp	r2, #0
1a004174:	f2c0 8513 	blt.w	1a004b9e <_vfprintf_r+0x113e>
1a004178:	9308      	str	r3, [sp, #32]
1a00417a:	e4f5      	b.n	1a003b68 <_vfprintf_r+0x108>
1a00417c:	9d05      	ldr	r5, [sp, #20]
1a00417e:	4628      	mov	r0, r5
1a004180:	f002 fc04 	bl	1a00698c <_localeconv_r>
1a004184:	6843      	ldr	r3, [r0, #4]
1a004186:	9317      	str	r3, [sp, #92]	; 0x5c
1a004188:	4618      	mov	r0, r3
1a00418a:	f7ff fbf9 	bl	1a003980 <strlen>
1a00418e:	9019      	str	r0, [sp, #100]	; 0x64
1a004190:	4604      	mov	r4, r0
1a004192:	4628      	mov	r0, r5
1a004194:	f002 fbfa 	bl	1a00698c <_localeconv_r>
1a004198:	6883      	ldr	r3, [r0, #8]
1a00419a:	9318      	str	r3, [sp, #96]	; 0x60
1a00419c:	2120      	movs	r1, #32
1a00419e:	2c00      	cmp	r4, #0
1a0041a0:	f43f ad4a 	beq.w	1a003c38 <_vfprintf_r+0x1d8>
1a0041a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a0041a6:	f89a 8000 	ldrb.w	r8, [sl]
1a0041aa:	2b00      	cmp	r3, #0
1a0041ac:	f43f acdc 	beq.w	1a003b68 <_vfprintf_r+0x108>
1a0041b0:	781b      	ldrb	r3, [r3, #0]
1a0041b2:	2b00      	cmp	r3, #0
1a0041b4:	f43f acd8 	beq.w	1a003b68 <_vfprintf_r+0x108>
1a0041b8:	9b02      	ldr	r3, [sp, #8]
1a0041ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0041be:	9302      	str	r3, [sp, #8]
1a0041c0:	e4d2      	b.n	1a003b68 <_vfprintf_r+0x108>
1a0041c2:	9b02      	ldr	r3, [sp, #8]
1a0041c4:	f89a 8000 	ldrb.w	r8, [sl]
1a0041c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0041cc:	9302      	str	r3, [sp, #8]
1a0041ce:	e4cb      	b.n	1a003b68 <_vfprintf_r+0x108>
1a0041d0:	4652      	mov	r2, sl
1a0041d2:	f812 8b01 	ldrb.w	r8, [r2], #1
1a0041d6:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a0041da:	f001 81be 	beq.w	1a00555a <_vfprintf_r+0x1afa>
1a0041de:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0041e2:	2b09      	cmp	r3, #9
1a0041e4:	4692      	mov	sl, r2
1a0041e6:	f04f 0900 	mov.w	r9, #0
1a0041ea:	f63f acbf 	bhi.w	1a003b6c <_vfprintf_r+0x10c>
1a0041ee:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0041f2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0041f6:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0041fa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0041fe:	2b09      	cmp	r3, #9
1a004200:	d9f5      	bls.n	1a0041ee <_vfprintf_r+0x78e>
1a004202:	e4b3      	b.n	1a003b6c <_vfprintf_r+0x10c>
1a004204:	9c08      	ldr	r4, [sp, #32]
1a004206:	3407      	adds	r4, #7
1a004208:	f024 0307 	bic.w	r3, r4, #7
1a00420c:	ecb3 7b02 	vldmia	r3!, {d7}
1a004210:	ec55 4b17 	vmov	r4, r5, d7
1a004214:	9308      	str	r3, [sp, #32]
1a004216:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a00421a:	931b      	str	r3, [sp, #108]	; 0x6c
1a00421c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a004220:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004228:	4b35      	ldr	r3, [pc, #212]	; (1a004300 <_vfprintf_r+0x8a0>)
1a00422a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00422e:	f7fe fa3d 	bl	1a0026ac <__aeabi_dcmpun>
1a004232:	2800      	cmp	r0, #0
1a004234:	f040 83dc 	bne.w	1a0049f0 <_vfprintf_r+0xf90>
1a004238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00423c:	4b30      	ldr	r3, [pc, #192]	; (1a004300 <_vfprintf_r+0x8a0>)
1a00423e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004242:	f7fe fa15 	bl	1a002670 <__aeabi_dcmple>
1a004246:	2800      	cmp	r0, #0
1a004248:	f040 83d2 	bne.w	1a0049f0 <_vfprintf_r+0xf90>
1a00424c:	2200      	movs	r2, #0
1a00424e:	2300      	movs	r3, #0
1a004250:	4620      	mov	r0, r4
1a004252:	4629      	mov	r1, r5
1a004254:	f7fe fa02 	bl	1a00265c <__aeabi_dcmplt>
1a004258:	2800      	cmp	r0, #0
1a00425a:	f040 8780 	bne.w	1a00515e <_vfprintf_r+0x16fe>
1a00425e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004262:	4f28      	ldr	r7, [pc, #160]	; (1a004304 <_vfprintf_r+0x8a4>)
1a004264:	4b28      	ldr	r3, [pc, #160]	; (1a004308 <_vfprintf_r+0x8a8>)
1a004266:	9802      	ldr	r0, [sp, #8]
1a004268:	2100      	movs	r1, #0
1a00426a:	2603      	movs	r6, #3
1a00426c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a004270:	9603      	str	r6, [sp, #12]
1a004272:	9109      	str	r1, [sp, #36]	; 0x24
1a004274:	9002      	str	r0, [sp, #8]
1a004276:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a00427a:	bfc8      	it	gt
1a00427c:	461f      	movgt	r7, r3
1a00427e:	4689      	mov	r9, r1
1a004280:	910c      	str	r1, [sp, #48]	; 0x30
1a004282:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a004286:	e5c0      	b.n	1a003e0a <_vfprintf_r+0x3aa>
1a004288:	9e02      	ldr	r6, [sp, #8]
1a00428a:	06b4      	lsls	r4, r6, #26
1a00428c:	d41f      	bmi.n	1a0042ce <_vfprintf_r+0x86e>
1a00428e:	9b02      	ldr	r3, [sp, #8]
1a004290:	9a08      	ldr	r2, [sp, #32]
1a004292:	06d8      	lsls	r0, r3, #27
1a004294:	f852 4b04 	ldr.w	r4, [r2], #4
1a004298:	f101 8174 	bmi.w	1a005584 <_vfprintf_r+0x1b24>
1a00429c:	9e02      	ldr	r6, [sp, #8]
1a00429e:	0671      	lsls	r1, r6, #25
1a0042a0:	f140 8577 	bpl.w	1a004d92 <_vfprintf_r+0x1332>
1a0042a4:	9208      	str	r2, [sp, #32]
1a0042a6:	b2a4      	uxth	r4, r4
1a0042a8:	2500      	movs	r5, #0
1a0042aa:	2301      	movs	r3, #1
1a0042ac:	e703      	b.n	1a0040b6 <_vfprintf_r+0x656>
1a0042ae:	9805      	ldr	r0, [sp, #20]
1a0042b0:	f7fe fd26 	bl	1a002d00 <__sinit>
1a0042b4:	f7ff bbea 	b.w	1a003a8c <_vfprintf_r+0x2c>
1a0042b8:	f1b8 0f00 	cmp.w	r8, #0
1a0042bc:	f43f ae88 	beq.w	1a003fd0 <_vfprintf_r+0x570>
1a0042c0:	2300      	movs	r3, #0
1a0042c2:	2601      	movs	r6, #1
1a0042c4:	461a      	mov	r2, r3
1a0042c6:	9603      	str	r6, [sp, #12]
1a0042c8:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a0042cc:	e607      	b.n	1a003ede <_vfprintf_r+0x47e>
1a0042ce:	9c08      	ldr	r4, [sp, #32]
1a0042d0:	3407      	adds	r4, #7
1a0042d2:	f024 0307 	bic.w	r3, r4, #7
1a0042d6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0042da:	9308      	str	r3, [sp, #32]
1a0042dc:	2301      	movs	r3, #1
1a0042de:	e6ea      	b.n	1a0040b6 <_vfprintf_r+0x656>
1a0042e0:	9c08      	ldr	r4, [sp, #32]
1a0042e2:	3407      	adds	r4, #7
1a0042e4:	f024 0307 	bic.w	r3, r4, #7
1a0042e8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0042ec:	9308      	str	r3, [sp, #32]
1a0042ee:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a0042f2:	2300      	movs	r3, #0
1a0042f4:	e6df      	b.n	1a0040b6 <_vfprintf_r+0x656>
1a0042f6:	bf00      	nop
1a0042f8:	1a007ed4 	.word	0x1a007ed4
1a0042fc:	1a007eb4 	.word	0x1a007eb4
1a004300:	7fefffff 	.word	0x7fefffff
1a004304:	1a007e90 	.word	0x1a007e90
1a004308:	1a007e94 	.word	0x1a007e94
1a00430c:	9e02      	ldr	r6, [sp, #8]
1a00430e:	2d00      	cmp	r5, #0
1a004310:	bf08      	it	eq
1a004312:	2c0a      	cmpeq	r4, #10
1a004314:	d213      	bcs.n	1a00433e <_vfprintf_r+0x8de>
1a004316:	3430      	adds	r4, #48	; 0x30
1a004318:	9602      	str	r6, [sp, #8]
1a00431a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00431e:	2601      	movs	r6, #1
1a004320:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a004324:	2300      	movs	r3, #0
1a004326:	454e      	cmp	r6, r9
1a004328:	9309      	str	r3, [sp, #36]	; 0x24
1a00432a:	930c      	str	r3, [sp, #48]	; 0x30
1a00432c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a004330:	4633      	mov	r3, r6
1a004332:	bfb8      	it	lt
1a004334:	464b      	movlt	r3, r9
1a004336:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00433a:	9303      	str	r3, [sp, #12]
1a00433c:	e565      	b.n	1a003e0a <_vfprintf_r+0x3aa>
1a00433e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a004342:	2200      	movs	r2, #0
1a004344:	e9cd a802 	strd	sl, r8, [sp, #8]
1a004348:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00434c:	af54      	add	r7, sp, #336	; 0x150
1a00434e:	46cb      	mov	fp, r9
1a004350:	4692      	mov	sl, r2
1a004352:	46b1      	mov	r9, r6
1a004354:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004358:	461e      	mov	r6, r3
1a00435a:	e007      	b.n	1a00436c <_vfprintf_r+0x90c>
1a00435c:	f7fe f9e4 	bl	1a002728 <__aeabi_uldivmod>
1a004360:	2d00      	cmp	r5, #0
1a004362:	bf08      	it	eq
1a004364:	2c0a      	cmpeq	r4, #10
1a004366:	d320      	bcc.n	1a0043aa <_vfprintf_r+0x94a>
1a004368:	4604      	mov	r4, r0
1a00436a:	460d      	mov	r5, r1
1a00436c:	220a      	movs	r2, #10
1a00436e:	2300      	movs	r3, #0
1a004370:	4620      	mov	r0, r4
1a004372:	4629      	mov	r1, r5
1a004374:	f7fe f9d8 	bl	1a002728 <__aeabi_uldivmod>
1a004378:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a00437c:	f807 cc01 	strb.w	ip, [r7, #-1]
1a004380:	4620      	mov	r0, r4
1a004382:	4629      	mov	r1, r5
1a004384:	220a      	movs	r2, #10
1a004386:	2300      	movs	r3, #0
1a004388:	f10a 0a01 	add.w	sl, sl, #1
1a00438c:	3f01      	subs	r7, #1
1a00438e:	2e00      	cmp	r6, #0
1a004390:	d0e4      	beq.n	1a00435c <_vfprintf_r+0x8fc>
1a004392:	f898 c000 	ldrb.w	ip, [r8]
1a004396:	45e2      	cmp	sl, ip
1a004398:	d1e0      	bne.n	1a00435c <_vfprintf_r+0x8fc>
1a00439a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a00439e:	d0dd      	beq.n	1a00435c <_vfprintf_r+0x8fc>
1a0043a0:	429d      	cmp	r5, r3
1a0043a2:	bf08      	it	eq
1a0043a4:	4294      	cmpeq	r4, r2
1a0043a6:	f080 871e 	bcs.w	1a0051e6 <_vfprintf_r+0x1786>
1a0043aa:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a0043ae:	464e      	mov	r6, r9
1a0043b0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0043b4:	46d9      	mov	r9, fp
1a0043b6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0043ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a0043be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a0043c2:	9602      	str	r6, [sp, #8]
1a0043c4:	ab54      	add	r3, sp, #336	; 0x150
1a0043c6:	1bde      	subs	r6, r3, r7
1a0043c8:	e7ac      	b.n	1a004324 <_vfprintf_r+0x8c4>
1a0043ca:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a0043ce:	f340 810a 	ble.w	1a0045e6 <_vfprintf_r+0xb86>
1a0043d2:	2200      	movs	r2, #0
1a0043d4:	2300      	movs	r3, #0
1a0043d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0043da:	f7fe f935 	bl	1a002648 <__aeabi_dcmpeq>
1a0043de:	2800      	cmp	r0, #0
1a0043e0:	f000 81de 	beq.w	1a0047a0 <_vfprintf_r+0xd40>
1a0043e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0043e6:	4ac2      	ldr	r2, [pc, #776]	; (1a0046f0 <_vfprintf_r+0xc90>)
1a0043e8:	f8cb 2000 	str.w	r2, [fp]
1a0043ec:	3301      	adds	r3, #1
1a0043ee:	3401      	adds	r4, #1
1a0043f0:	2201      	movs	r2, #1
1a0043f2:	2b07      	cmp	r3, #7
1a0043f4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0043f8:	f8cb 2004 	str.w	r2, [fp, #4]
1a0043fc:	f300 8463 	bgt.w	1a004cc6 <_vfprintf_r+0x1266>
1a004400:	f10b 0b08 	add.w	fp, fp, #8
1a004404:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004406:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004408:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00440a:	4293      	cmp	r3, r2
1a00440c:	f280 82a5 	bge.w	1a00495a <_vfprintf_r+0xefa>
1a004410:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004412:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004414:	f8cb 2000 	str.w	r2, [fp]
1a004418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00441a:	f8cb 2004 	str.w	r2, [fp, #4]
1a00441e:	3301      	adds	r3, #1
1a004420:	4414      	add	r4, r2
1a004422:	2b07      	cmp	r3, #7
1a004424:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004428:	f300 83ec 	bgt.w	1a004c04 <_vfprintf_r+0x11a4>
1a00442c:	f10b 0b08 	add.w	fp, fp, #8
1a004430:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004432:	1e5d      	subs	r5, r3, #1
1a004434:	2d00      	cmp	r5, #0
1a004436:	f77f ada8 	ble.w	1a003f8a <_vfprintf_r+0x52a>
1a00443a:	2d10      	cmp	r5, #16
1a00443c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00443e:	4bad      	ldr	r3, [pc, #692]	; (1a0046f4 <_vfprintf_r+0xc94>)
1a004440:	f340 844e 	ble.w	1a004ce0 <_vfprintf_r+0x1280>
1a004444:	2610      	movs	r6, #16
1a004446:	9f05      	ldr	r7, [sp, #20]
1a004448:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00444c:	4699      	mov	r9, r3
1a00444e:	e005      	b.n	1a00445c <_vfprintf_r+0x9fc>
1a004450:	f10b 0b08 	add.w	fp, fp, #8
1a004454:	3d10      	subs	r5, #16
1a004456:	2d10      	cmp	r5, #16
1a004458:	f340 8441 	ble.w	1a004cde <_vfprintf_r+0x127e>
1a00445c:	3201      	adds	r2, #1
1a00445e:	3410      	adds	r4, #16
1a004460:	2a07      	cmp	r2, #7
1a004462:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004466:	e9cb 9600 	strd	r9, r6, [fp]
1a00446a:	ddf1      	ble.n	1a004450 <_vfprintf_r+0x9f0>
1a00446c:	aa28      	add	r2, sp, #160	; 0xa0
1a00446e:	4641      	mov	r1, r8
1a004470:	4638      	mov	r0, r7
1a004472:	f003 f931 	bl	1a0076d8 <__sprint_r>
1a004476:	2800      	cmp	r0, #0
1a004478:	f040 8423 	bne.w	1a004cc2 <_vfprintf_r+0x1262>
1a00447c:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004480:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004484:	e7e6      	b.n	1a004454 <_vfprintf_r+0x9f4>
1a004486:	9b06      	ldr	r3, [sp, #24]
1a004488:	9a03      	ldr	r2, [sp, #12]
1a00448a:	1a9d      	subs	r5, r3, r2
1a00448c:	2d00      	cmp	r5, #0
1a00448e:	f77f ad65 	ble.w	1a003f5c <_vfprintf_r+0x4fc>
1a004492:	2d10      	cmp	r5, #16
1a004494:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004496:	4b97      	ldr	r3, [pc, #604]	; (1a0046f4 <_vfprintf_r+0xc94>)
1a004498:	dd28      	ble.n	1a0044ec <_vfprintf_r+0xa8c>
1a00449a:	960a      	str	r6, [sp, #40]	; 0x28
1a00449c:	4659      	mov	r1, fp
1a00449e:	4620      	mov	r0, r4
1a0044a0:	46bb      	mov	fp, r7
1a0044a2:	9c05      	ldr	r4, [sp, #20]
1a0044a4:	9e07      	ldr	r6, [sp, #28]
1a0044a6:	461f      	mov	r7, r3
1a0044a8:	e004      	b.n	1a0044b4 <_vfprintf_r+0xa54>
1a0044aa:	3d10      	subs	r5, #16
1a0044ac:	2d10      	cmp	r5, #16
1a0044ae:	f101 0108 	add.w	r1, r1, #8
1a0044b2:	dd16      	ble.n	1a0044e2 <_vfprintf_r+0xa82>
1a0044b4:	3201      	adds	r2, #1
1a0044b6:	3010      	adds	r0, #16
1a0044b8:	2310      	movs	r3, #16
1a0044ba:	2a07      	cmp	r2, #7
1a0044bc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0044c0:	600f      	str	r7, [r1, #0]
1a0044c2:	604b      	str	r3, [r1, #4]
1a0044c4:	ddf1      	ble.n	1a0044aa <_vfprintf_r+0xa4a>
1a0044c6:	aa28      	add	r2, sp, #160	; 0xa0
1a0044c8:	4631      	mov	r1, r6
1a0044ca:	4620      	mov	r0, r4
1a0044cc:	f003 f904 	bl	1a0076d8 <__sprint_r>
1a0044d0:	2800      	cmp	r0, #0
1a0044d2:	f040 80f6 	bne.w	1a0046c2 <_vfprintf_r+0xc62>
1a0044d6:	3d10      	subs	r5, #16
1a0044d8:	2d10      	cmp	r5, #16
1a0044da:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0044de:	a92b      	add	r1, sp, #172	; 0xac
1a0044e0:	dce8      	bgt.n	1a0044b4 <_vfprintf_r+0xa54>
1a0044e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0044e4:	463b      	mov	r3, r7
1a0044e6:	4604      	mov	r4, r0
1a0044e8:	465f      	mov	r7, fp
1a0044ea:	468b      	mov	fp, r1
1a0044ec:	3201      	adds	r2, #1
1a0044ee:	442c      	add	r4, r5
1a0044f0:	2a07      	cmp	r2, #7
1a0044f2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0044f6:	e9cb 3500 	strd	r3, r5, [fp]
1a0044fa:	f300 8355 	bgt.w	1a004ba8 <_vfprintf_r+0x1148>
1a0044fe:	eba9 0506 	sub.w	r5, r9, r6
1a004502:	2d00      	cmp	r5, #0
1a004504:	f10b 0b08 	add.w	fp, fp, #8
1a004508:	f77f ad2d 	ble.w	1a003f66 <_vfprintf_r+0x506>
1a00450c:	2d10      	cmp	r5, #16
1a00450e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004510:	4b78      	ldr	r3, [pc, #480]	; (1a0046f4 <_vfprintf_r+0xc94>)
1a004512:	dd29      	ble.n	1a004568 <_vfprintf_r+0xb08>
1a004514:	960a      	str	r6, [sp, #40]	; 0x28
1a004516:	4659      	mov	r1, fp
1a004518:	4620      	mov	r0, r4
1a00451a:	46bb      	mov	fp, r7
1a00451c:	f04f 0910 	mov.w	r9, #16
1a004520:	9c05      	ldr	r4, [sp, #20]
1a004522:	9e07      	ldr	r6, [sp, #28]
1a004524:	461f      	mov	r7, r3
1a004526:	e004      	b.n	1a004532 <_vfprintf_r+0xad2>
1a004528:	3d10      	subs	r5, #16
1a00452a:	2d10      	cmp	r5, #16
1a00452c:	f101 0108 	add.w	r1, r1, #8
1a004530:	dd15      	ble.n	1a00455e <_vfprintf_r+0xafe>
1a004532:	3201      	adds	r2, #1
1a004534:	3010      	adds	r0, #16
1a004536:	2a07      	cmp	r2, #7
1a004538:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00453c:	e9c1 7900 	strd	r7, r9, [r1]
1a004540:	ddf2      	ble.n	1a004528 <_vfprintf_r+0xac8>
1a004542:	aa28      	add	r2, sp, #160	; 0xa0
1a004544:	4631      	mov	r1, r6
1a004546:	4620      	mov	r0, r4
1a004548:	f003 f8c6 	bl	1a0076d8 <__sprint_r>
1a00454c:	2800      	cmp	r0, #0
1a00454e:	f040 80b8 	bne.w	1a0046c2 <_vfprintf_r+0xc62>
1a004552:	3d10      	subs	r5, #16
1a004554:	2d10      	cmp	r5, #16
1a004556:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00455a:	a92b      	add	r1, sp, #172	; 0xac
1a00455c:	dce9      	bgt.n	1a004532 <_vfprintf_r+0xad2>
1a00455e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a004560:	463b      	mov	r3, r7
1a004562:	4604      	mov	r4, r0
1a004564:	465f      	mov	r7, fp
1a004566:	468b      	mov	fp, r1
1a004568:	3201      	adds	r2, #1
1a00456a:	442c      	add	r4, r5
1a00456c:	2a07      	cmp	r2, #7
1a00456e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004572:	e9cb 3500 	strd	r3, r5, [fp]
1a004576:	f300 81da 	bgt.w	1a00492e <_vfprintf_r+0xece>
1a00457a:	f10b 0b08 	add.w	fp, fp, #8
1a00457e:	e4f2      	b.n	1a003f66 <_vfprintf_r+0x506>
1a004580:	aa28      	add	r2, sp, #160	; 0xa0
1a004582:	9907      	ldr	r1, [sp, #28]
1a004584:	9805      	ldr	r0, [sp, #20]
1a004586:	f003 f8a7 	bl	1a0076d8 <__sprint_r>
1a00458a:	2800      	cmp	r0, #0
1a00458c:	f43f ad11 	beq.w	1a003fb2 <_vfprintf_r+0x552>
1a004590:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004594:	e096      	b.n	1a0046c4 <_vfprintf_r+0xc64>
1a004596:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004598:	9915      	ldr	r1, [sp, #84]	; 0x54
1a00459a:	f8cb 1000 	str.w	r1, [fp]
1a00459e:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0045a0:	f8cb 1004 	str.w	r1, [fp, #4]
1a0045a4:	3201      	adds	r2, #1
1a0045a6:	440c      	add	r4, r1
1a0045a8:	2a07      	cmp	r2, #7
1a0045aa:	942a      	str	r4, [sp, #168]	; 0xa8
1a0045ac:	9229      	str	r2, [sp, #164]	; 0xa4
1a0045ae:	f300 84e1 	bgt.w	1a004f74 <_vfprintf_r+0x1514>
1a0045b2:	f10b 0b08 	add.w	fp, fp, #8
1a0045b6:	2b00      	cmp	r3, #0
1a0045b8:	f2c0 86a2 	blt.w	1a005300 <_vfprintf_r+0x18a0>
1a0045bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0045be:	3201      	adds	r2, #1
1a0045c0:	441c      	add	r4, r3
1a0045c2:	2a07      	cmp	r2, #7
1a0045c4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0045c8:	e9cb 7300 	strd	r7, r3, [fp]
1a0045cc:	f77f acdb 	ble.w	1a003f86 <_vfprintf_r+0x526>
1a0045d0:	aa28      	add	r2, sp, #160	; 0xa0
1a0045d2:	9907      	ldr	r1, [sp, #28]
1a0045d4:	9805      	ldr	r0, [sp, #20]
1a0045d6:	f003 f87f 	bl	1a0076d8 <__sprint_r>
1a0045da:	2800      	cmp	r0, #0
1a0045dc:	d1d8      	bne.n	1a004590 <_vfprintf_r+0xb30>
1a0045de:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0045e0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0045e4:	e4d1      	b.n	1a003f8a <_vfprintf_r+0x52a>
1a0045e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0045e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0045ea:	2a01      	cmp	r2, #1
1a0045ec:	f104 0401 	add.w	r4, r4, #1
1a0045f0:	f103 0501 	add.w	r5, r3, #1
1a0045f4:	f10b 0608 	add.w	r6, fp, #8
1a0045f8:	f340 8158 	ble.w	1a0048ac <_vfprintf_r+0xe4c>
1a0045fc:	2301      	movs	r3, #1
1a0045fe:	2d07      	cmp	r5, #7
1a004600:	f8cb 7000 	str.w	r7, [fp]
1a004604:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004608:	f8cb 3004 	str.w	r3, [fp, #4]
1a00460c:	f300 832a 	bgt.w	1a004c64 <_vfprintf_r+0x1204>
1a004610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004612:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004614:	1c69      	adds	r1, r5, #1
1a004616:	441c      	add	r4, r3
1a004618:	2907      	cmp	r1, #7
1a00461a:	910b      	str	r1, [sp, #44]	; 0x2c
1a00461c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a004620:	e9c6 2300 	strd	r2, r3, [r6]
1a004624:	f300 832a 	bgt.w	1a004c7c <_vfprintf_r+0x121c>
1a004628:	3608      	adds	r6, #8
1a00462a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00462c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a00462e:	f102 0901 	add.w	r9, r2, #1
1a004632:	2300      	movs	r3, #0
1a004634:	2200      	movs	r2, #0
1a004636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00463a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a00463e:	f106 0b08 	add.w	fp, r6, #8
1a004642:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a004646:	f7fd ffff 	bl	1a002648 <__aeabi_dcmpeq>
1a00464a:	2800      	cmp	r0, #0
1a00464c:	f040 8141 	bne.w	1a0048d2 <_vfprintf_r+0xe72>
1a004650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004652:	f8c6 8004 	str.w	r8, [r6, #4]
1a004656:	3701      	adds	r7, #1
1a004658:	4444      	add	r4, r8
1a00465a:	2b07      	cmp	r3, #7
1a00465c:	6037      	str	r7, [r6, #0]
1a00465e:	942a      	str	r4, [sp, #168]	; 0xa8
1a004660:	9329      	str	r3, [sp, #164]	; 0xa4
1a004662:	f300 82bf 	bgt.w	1a004be4 <_vfprintf_r+0x1184>
1a004666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a004668:	f106 0310 	add.w	r3, r6, #16
1a00466c:	3202      	adds	r2, #2
1a00466e:	465e      	mov	r6, fp
1a004670:	920a      	str	r2, [sp, #40]	; 0x28
1a004672:	469b      	mov	fp, r3
1a004674:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004676:	6072      	str	r2, [r6, #4]
1a004678:	4414      	add	r4, r2
1a00467a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00467c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00467e:	ab24      	add	r3, sp, #144	; 0x90
1a004680:	2a07      	cmp	r2, #7
1a004682:	9229      	str	r2, [sp, #164]	; 0xa4
1a004684:	6033      	str	r3, [r6, #0]
1a004686:	f77f ac80 	ble.w	1a003f8a <_vfprintf_r+0x52a>
1a00468a:	e7a1      	b.n	1a0045d0 <_vfprintf_r+0xb70>
1a00468c:	9e02      	ldr	r6, [sp, #8]
1a00468e:	f7ff bbf4 	b.w	1a003e7a <_vfprintf_r+0x41a>
1a004692:	aa28      	add	r2, sp, #160	; 0xa0
1a004694:	9907      	ldr	r1, [sp, #28]
1a004696:	9805      	ldr	r0, [sp, #20]
1a004698:	f003 f81e 	bl	1a0076d8 <__sprint_r>
1a00469c:	2800      	cmp	r0, #0
1a00469e:	f47f af77 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a0046a2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0046a4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0046a8:	e444      	b.n	1a003f34 <_vfprintf_r+0x4d4>
1a0046aa:	aa28      	add	r2, sp, #160	; 0xa0
1a0046ac:	9907      	ldr	r1, [sp, #28]
1a0046ae:	9805      	ldr	r0, [sp, #20]
1a0046b0:	f003 f812 	bl	1a0076d8 <__sprint_r>
1a0046b4:	2800      	cmp	r0, #0
1a0046b6:	f47f af6b 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a0046ba:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0046bc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0046c0:	e448      	b.n	1a003f54 <_vfprintf_r+0x4f4>
1a0046c2:	46b1      	mov	r9, r6
1a0046c4:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0046c6:	b111      	cbz	r1, 1a0046ce <_vfprintf_r+0xc6e>
1a0046c8:	9805      	ldr	r0, [sp, #20]
1a0046ca:	f7fe fb9f 	bl	1a002e0c <_free_r>
1a0046ce:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a0046d2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0046d6:	07d4      	lsls	r4, r2, #31
1a0046d8:	d402      	bmi.n	1a0046e0 <_vfprintf_r+0xc80>
1a0046da:	0598      	lsls	r0, r3, #22
1a0046dc:	f140 82db 	bpl.w	1a004c96 <_vfprintf_r+0x1236>
1a0046e0:	0659      	lsls	r1, r3, #25
1a0046e2:	f100 8640 	bmi.w	1a005366 <_vfprintf_r+0x1906>
1a0046e6:	9804      	ldr	r0, [sp, #16]
1a0046e8:	b055      	add	sp, #340	; 0x154
1a0046ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0046ee:	bf00      	nop
1a0046f0:	1a007ed0 	.word	0x1a007ed0
1a0046f4:	1a007ee4 	.word	0x1a007ee4
1a0046f8:	2d10      	cmp	r5, #16
1a0046fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0046fc:	dd21      	ble.n	1a004742 <_vfprintf_r+0xce2>
1a0046fe:	2610      	movs	r6, #16
1a004700:	9f05      	ldr	r7, [sp, #20]
1a004702:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004706:	e004      	b.n	1a004712 <_vfprintf_r+0xcb2>
1a004708:	3d10      	subs	r5, #16
1a00470a:	2d10      	cmp	r5, #16
1a00470c:	f10b 0b08 	add.w	fp, fp, #8
1a004710:	dd17      	ble.n	1a004742 <_vfprintf_r+0xce2>
1a004712:	3301      	adds	r3, #1
1a004714:	4ab3      	ldr	r2, [pc, #716]	; (1a0049e4 <_vfprintf_r+0xf84>)
1a004716:	3410      	adds	r4, #16
1a004718:	2b07      	cmp	r3, #7
1a00471a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00471e:	e9cb 2600 	strd	r2, r6, [fp]
1a004722:	ddf1      	ble.n	1a004708 <_vfprintf_r+0xca8>
1a004724:	aa28      	add	r2, sp, #160	; 0xa0
1a004726:	4641      	mov	r1, r8
1a004728:	4638      	mov	r0, r7
1a00472a:	f002 ffd5 	bl	1a0076d8 <__sprint_r>
1a00472e:	2800      	cmp	r0, #0
1a004730:	f040 82c7 	bne.w	1a004cc2 <_vfprintf_r+0x1262>
1a004734:	3d10      	subs	r5, #16
1a004736:	2d10      	cmp	r5, #16
1a004738:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00473c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004740:	dce7      	bgt.n	1a004712 <_vfprintf_r+0xcb2>
1a004742:	3301      	adds	r3, #1
1a004744:	4aa7      	ldr	r2, [pc, #668]	; (1a0049e4 <_vfprintf_r+0xf84>)
1a004746:	442c      	add	r4, r5
1a004748:	2b07      	cmp	r3, #7
1a00474a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a00474e:	e9cb 2500 	strd	r2, r5, [fp]
1a004752:	f77f ac23 	ble.w	1a003f9c <_vfprintf_r+0x53c>
1a004756:	aa28      	add	r2, sp, #160	; 0xa0
1a004758:	9907      	ldr	r1, [sp, #28]
1a00475a:	9805      	ldr	r0, [sp, #20]
1a00475c:	f002 ffbc 	bl	1a0076d8 <__sprint_r>
1a004760:	2800      	cmp	r0, #0
1a004762:	f47f af15 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004766:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004768:	e418      	b.n	1a003f9c <_vfprintf_r+0x53c>
1a00476a:	2b01      	cmp	r3, #1
1a00476c:	f000 8423 	beq.w	1a004fb6 <_vfprintf_r+0x1556>
1a004770:	2b02      	cmp	r3, #2
1a004772:	9e02      	ldr	r6, [sp, #8]
1a004774:	f47f ab87 	bne.w	1a003e86 <_vfprintf_r+0x426>
1a004778:	9814      	ldr	r0, [sp, #80]	; 0x50
1a00477a:	af54      	add	r7, sp, #336	; 0x150
1a00477c:	0923      	lsrs	r3, r4, #4
1a00477e:	f004 010f 	and.w	r1, r4, #15
1a004782:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a004786:	092a      	lsrs	r2, r5, #4
1a004788:	461c      	mov	r4, r3
1a00478a:	4615      	mov	r5, r2
1a00478c:	5c43      	ldrb	r3, [r0, r1]
1a00478e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a004792:	ea54 0305 	orrs.w	r3, r4, r5
1a004796:	d1f1      	bne.n	1a00477c <_vfprintf_r+0xd1c>
1a004798:	ab54      	add	r3, sp, #336	; 0x150
1a00479a:	9602      	str	r6, [sp, #8]
1a00479c:	1bde      	subs	r6, r3, r7
1a00479e:	e5c1      	b.n	1a004324 <_vfprintf_r+0x8c4>
1a0047a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0047a2:	2b00      	cmp	r3, #0
1a0047a4:	f340 80df 	ble.w	1a004966 <_vfprintf_r+0xf06>
1a0047a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0047aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0047ac:	4293      	cmp	r3, r2
1a0047ae:	bfa8      	it	ge
1a0047b0:	4613      	movge	r3, r2
1a0047b2:	2b00      	cmp	r3, #0
1a0047b4:	461d      	mov	r5, r3
1a0047b6:	dd0d      	ble.n	1a0047d4 <_vfprintf_r+0xd74>
1a0047b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0047ba:	f8cb 7000 	str.w	r7, [fp]
1a0047be:	3301      	adds	r3, #1
1a0047c0:	442c      	add	r4, r5
1a0047c2:	2b07      	cmp	r3, #7
1a0047c4:	942a      	str	r4, [sp, #168]	; 0xa8
1a0047c6:	f8cb 5004 	str.w	r5, [fp, #4]
1a0047ca:	9329      	str	r3, [sp, #164]	; 0xa4
1a0047cc:	f300 84fe 	bgt.w	1a0051cc <_vfprintf_r+0x176c>
1a0047d0:	f10b 0b08 	add.w	fp, fp, #8
1a0047d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0047d6:	2d00      	cmp	r5, #0
1a0047d8:	bfa8      	it	ge
1a0047da:	1b5b      	subge	r3, r3, r5
1a0047dc:	2b00      	cmp	r3, #0
1a0047de:	461d      	mov	r5, r3
1a0047e0:	f300 8290 	bgt.w	1a004d04 <_vfprintf_r+0x12a4>
1a0047e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0047e6:	443b      	add	r3, r7
1a0047e8:	4699      	mov	r9, r3
1a0047ea:	9b02      	ldr	r3, [sp, #8]
1a0047ec:	0558      	lsls	r0, r3, #21
1a0047ee:	f100 8413 	bmi.w	1a005018 <_vfprintf_r+0x15b8>
1a0047f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0047f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0047f6:	4293      	cmp	r3, r2
1a0047f8:	db03      	blt.n	1a004802 <_vfprintf_r+0xda2>
1a0047fa:	9a02      	ldr	r2, [sp, #8]
1a0047fc:	07d1      	lsls	r1, r2, #31
1a0047fe:	f140 82f7 	bpl.w	1a004df0 <_vfprintf_r+0x1390>
1a004802:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004804:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004806:	f8cb 1000 	str.w	r1, [fp]
1a00480a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00480c:	f8cb 1004 	str.w	r1, [fp, #4]
1a004810:	3201      	adds	r2, #1
1a004812:	440c      	add	r4, r1
1a004814:	2a07      	cmp	r2, #7
1a004816:	942a      	str	r4, [sp, #168]	; 0xa8
1a004818:	9229      	str	r2, [sp, #164]	; 0xa4
1a00481a:	f300 8523 	bgt.w	1a005264 <_vfprintf_r+0x1804>
1a00481e:	f10b 0b08 	add.w	fp, fp, #8
1a004822:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004824:	18bd      	adds	r5, r7, r2
1a004826:	eba5 0509 	sub.w	r5, r5, r9
1a00482a:	1ad3      	subs	r3, r2, r3
1a00482c:	429d      	cmp	r5, r3
1a00482e:	bfa8      	it	ge
1a004830:	461d      	movge	r5, r3
1a004832:	2d00      	cmp	r5, #0
1a004834:	dd0d      	ble.n	1a004852 <_vfprintf_r+0xdf2>
1a004836:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004838:	f8cb 9000 	str.w	r9, [fp]
1a00483c:	3201      	adds	r2, #1
1a00483e:	442c      	add	r4, r5
1a004840:	2a07      	cmp	r2, #7
1a004842:	942a      	str	r4, [sp, #168]	; 0xa8
1a004844:	f8cb 5004 	str.w	r5, [fp, #4]
1a004848:	9229      	str	r2, [sp, #164]	; 0xa4
1a00484a:	f300 8546 	bgt.w	1a0052da <_vfprintf_r+0x187a>
1a00484e:	f10b 0b08 	add.w	fp, fp, #8
1a004852:	2d00      	cmp	r5, #0
1a004854:	bfac      	ite	ge
1a004856:	1b5d      	subge	r5, r3, r5
1a004858:	461d      	movlt	r5, r3
1a00485a:	2d00      	cmp	r5, #0
1a00485c:	f77f ab95 	ble.w	1a003f8a <_vfprintf_r+0x52a>
1a004860:	2d10      	cmp	r5, #16
1a004862:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004864:	4b60      	ldr	r3, [pc, #384]	; (1a0049e8 <_vfprintf_r+0xf88>)
1a004866:	f340 823b 	ble.w	1a004ce0 <_vfprintf_r+0x1280>
1a00486a:	2610      	movs	r6, #16
1a00486c:	9f05      	ldr	r7, [sp, #20]
1a00486e:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004872:	4699      	mov	r9, r3
1a004874:	e005      	b.n	1a004882 <_vfprintf_r+0xe22>
1a004876:	f10b 0b08 	add.w	fp, fp, #8
1a00487a:	3d10      	subs	r5, #16
1a00487c:	2d10      	cmp	r5, #16
1a00487e:	f340 822e 	ble.w	1a004cde <_vfprintf_r+0x127e>
1a004882:	3201      	adds	r2, #1
1a004884:	3410      	adds	r4, #16
1a004886:	2a07      	cmp	r2, #7
1a004888:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00488c:	e9cb 9600 	strd	r9, r6, [fp]
1a004890:	ddf1      	ble.n	1a004876 <_vfprintf_r+0xe16>
1a004892:	aa28      	add	r2, sp, #160	; 0xa0
1a004894:	4641      	mov	r1, r8
1a004896:	4638      	mov	r0, r7
1a004898:	f002 ff1e 	bl	1a0076d8 <__sprint_r>
1a00489c:	2800      	cmp	r0, #0
1a00489e:	f040 8210 	bne.w	1a004cc2 <_vfprintf_r+0x1262>
1a0048a2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0048a6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0048aa:	e7e6      	b.n	1a00487a <_vfprintf_r+0xe1a>
1a0048ac:	9a02      	ldr	r2, [sp, #8]
1a0048ae:	07d2      	lsls	r2, r2, #31
1a0048b0:	f53f aea4 	bmi.w	1a0045fc <_vfprintf_r+0xb9c>
1a0048b4:	2201      	movs	r2, #1
1a0048b6:	2d07      	cmp	r5, #7
1a0048b8:	f8cb 7000 	str.w	r7, [fp]
1a0048bc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a0048c0:	f8cb 2004 	str.w	r2, [fp, #4]
1a0048c4:	f300 818e 	bgt.w	1a004be4 <_vfprintf_r+0x1184>
1a0048c8:	3302      	adds	r3, #2
1a0048ca:	930a      	str	r3, [sp, #40]	; 0x28
1a0048cc:	f10b 0b10 	add.w	fp, fp, #16
1a0048d0:	e6d0      	b.n	1a004674 <_vfprintf_r+0xc14>
1a0048d2:	f1b8 0f00 	cmp.w	r8, #0
1a0048d6:	f77f aecd 	ble.w	1a004674 <_vfprintf_r+0xc14>
1a0048da:	f1b8 0f10 	cmp.w	r8, #16
1a0048de:	4b42      	ldr	r3, [pc, #264]	; (1a0049e8 <_vfprintf_r+0xf88>)
1a0048e0:	f340 8635 	ble.w	1a00554e <_vfprintf_r+0x1aee>
1a0048e4:	461a      	mov	r2, r3
1a0048e6:	464d      	mov	r5, r9
1a0048e8:	4623      	mov	r3, r4
1a0048ea:	2710      	movs	r7, #16
1a0048ec:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a0048f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a0048f4:	4614      	mov	r4, r2
1a0048f6:	e007      	b.n	1a004908 <_vfprintf_r+0xea8>
1a0048f8:	3608      	adds	r6, #8
1a0048fa:	f1a8 0810 	sub.w	r8, r8, #16
1a0048fe:	f1b8 0f10 	cmp.w	r8, #16
1a004902:	f340 815e 	ble.w	1a004bc2 <_vfprintf_r+0x1162>
1a004906:	3501      	adds	r5, #1
1a004908:	3310      	adds	r3, #16
1a00490a:	2d07      	cmp	r5, #7
1a00490c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a004910:	e9c6 4700 	strd	r4, r7, [r6]
1a004914:	ddf0      	ble.n	1a0048f8 <_vfprintf_r+0xe98>
1a004916:	aa28      	add	r2, sp, #160	; 0xa0
1a004918:	4659      	mov	r1, fp
1a00491a:	4648      	mov	r0, r9
1a00491c:	f002 fedc 	bl	1a0076d8 <__sprint_r>
1a004920:	2800      	cmp	r0, #0
1a004922:	f040 821d 	bne.w	1a004d60 <_vfprintf_r+0x1300>
1a004926:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a00492a:	ae2b      	add	r6, sp, #172	; 0xac
1a00492c:	e7e5      	b.n	1a0048fa <_vfprintf_r+0xe9a>
1a00492e:	aa28      	add	r2, sp, #160	; 0xa0
1a004930:	9907      	ldr	r1, [sp, #28]
1a004932:	9805      	ldr	r0, [sp, #20]
1a004934:	f002 fed0 	bl	1a0076d8 <__sprint_r>
1a004938:	2800      	cmp	r0, #0
1a00493a:	f47f ae29 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a00493e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004940:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004944:	f7ff bb0f 	b.w	1a003f66 <_vfprintf_r+0x506>
1a004948:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00494c:	f7fe fba6 	bl	1a00309c <__retarget_lock_acquire_recursive>
1a004950:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a004954:	b293      	uxth	r3, r2
1a004956:	f7ff b8a3 	b.w	1a003aa0 <_vfprintf_r+0x40>
1a00495a:	9b02      	ldr	r3, [sp, #8]
1a00495c:	07dd      	lsls	r5, r3, #31
1a00495e:	f53f ad57 	bmi.w	1a004410 <_vfprintf_r+0x9b0>
1a004962:	f7ff bb12 	b.w	1a003f8a <_vfprintf_r+0x52a>
1a004966:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004968:	4920      	ldr	r1, [pc, #128]	; (1a0049ec <_vfprintf_r+0xf8c>)
1a00496a:	f8cb 1000 	str.w	r1, [fp]
1a00496e:	3201      	adds	r2, #1
1a004970:	3401      	adds	r4, #1
1a004972:	2101      	movs	r1, #1
1a004974:	2a07      	cmp	r2, #7
1a004976:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00497a:	f8cb 1004 	str.w	r1, [fp, #4]
1a00497e:	f300 8409 	bgt.w	1a005194 <_vfprintf_r+0x1734>
1a004982:	f10b 0b08 	add.w	fp, fp, #8
1a004986:	2b00      	cmp	r3, #0
1a004988:	f47f ae05 	bne.w	1a004596 <_vfprintf_r+0xb36>
1a00498c:	9b02      	ldr	r3, [sp, #8]
1a00498e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004990:	f003 0301 	and.w	r3, r3, #1
1a004994:	4313      	orrs	r3, r2
1a004996:	f43f aaf8 	beq.w	1a003f8a <_vfprintf_r+0x52a>
1a00499a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00499c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00499e:	f8cb 3000 	str.w	r3, [fp]
1a0049a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0049a4:	f8cb 3004 	str.w	r3, [fp, #4]
1a0049a8:	3201      	adds	r2, #1
1a0049aa:	441c      	add	r4, r3
1a0049ac:	2a07      	cmp	r2, #7
1a0049ae:	942a      	str	r4, [sp, #168]	; 0xa8
1a0049b0:	9229      	str	r2, [sp, #164]	; 0xa4
1a0049b2:	f300 82df 	bgt.w	1a004f74 <_vfprintf_r+0x1514>
1a0049b6:	f10b 0b08 	add.w	fp, fp, #8
1a0049ba:	e5ff      	b.n	1a0045bc <_vfprintf_r+0xb5c>
1a0049bc:	af54      	add	r7, sp, #336	; 0x150
1a0049be:	e4b1      	b.n	1a004324 <_vfprintf_r+0x8c4>
1a0049c0:	9b02      	ldr	r3, [sp, #8]
1a0049c2:	0598      	lsls	r0, r3, #22
1a0049c4:	f100 822d 	bmi.w	1a004e22 <_vfprintf_r+0x13c2>
1a0049c8:	2500      	movs	r5, #0
1a0049ca:	f7ff b987 	b.w	1a003cdc <_vfprintf_r+0x27c>
1a0049ce:	9904      	ldr	r1, [sp, #16]
1a0049d0:	6812      	ldr	r2, [r2, #0]
1a0049d2:	9308      	str	r3, [sp, #32]
1a0049d4:	17cd      	asrs	r5, r1, #31
1a0049d6:	4608      	mov	r0, r1
1a0049d8:	4629      	mov	r1, r5
1a0049da:	e9c2 0100 	strd	r0, r1, [r2]
1a0049de:	4657      	mov	r7, sl
1a0049e0:	f7ff baf2 	b.w	1a003fc8 <_vfprintf_r+0x568>
1a0049e4:	1a007ed4 	.word	0x1a007ed4
1a0049e8:	1a007ee4 	.word	0x1a007ee4
1a0049ec:	1a007ed0 	.word	0x1a007ed0
1a0049f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0049f4:	4602      	mov	r2, r0
1a0049f6:	460b      	mov	r3, r1
1a0049f8:	f7fd fe58 	bl	1a0026ac <__aeabi_dcmpun>
1a0049fc:	2800      	cmp	r0, #0
1a0049fe:	f040 853a 	bne.w	1a005476 <_vfprintf_r+0x1a16>
1a004a02:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a004a06:	f000 84d0 	beq.w	1a0053aa <_vfprintf_r+0x194a>
1a004a0a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a004a0e:	f000 820c 	beq.w	1a004e2a <_vfprintf_r+0x13ca>
1a004a12:	f028 0320 	bic.w	r3, r8, #32
1a004a16:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004a1a:	9303      	str	r3, [sp, #12]
1a004a1c:	f000 8500 	beq.w	1a005420 <_vfprintf_r+0x19c0>
1a004a20:	2b47      	cmp	r3, #71	; 0x47
1a004a22:	d104      	bne.n	1a004a2e <_vfprintf_r+0xfce>
1a004a24:	f1b9 0f00 	cmp.w	r9, #0
1a004a28:	bf08      	it	eq
1a004a2a:	f04f 0901 	moveq.w	r9, #1
1a004a2e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a004a32:	9902      	ldr	r1, [sp, #8]
1a004a34:	2d00      	cmp	r5, #0
1a004a36:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a004a3a:	f2c0 8395 	blt.w	1a005168 <_vfprintf_r+0x1708>
1a004a3e:	2300      	movs	r3, #0
1a004a40:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a004a44:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a004a48:	931e      	str	r3, [sp, #120]	; 0x78
1a004a4a:	9202      	str	r2, [sp, #8]
1a004a4c:	9b03      	ldr	r3, [sp, #12]
1a004a4e:	2b46      	cmp	r3, #70	; 0x46
1a004a50:	f000 83df 	beq.w	1a005212 <_vfprintf_r+0x17b2>
1a004a54:	2b45      	cmp	r3, #69	; 0x45
1a004a56:	f000 84d2 	beq.w	1a0053fe <_vfprintf_r+0x199e>
1a004a5a:	aa26      	add	r2, sp, #152	; 0x98
1a004a5c:	ab23      	add	r3, sp, #140	; 0x8c
1a004a5e:	e9cd 3200 	strd	r3, r2, [sp]
1a004a62:	2102      	movs	r1, #2
1a004a64:	ab22      	add	r3, sp, #136	; 0x88
1a004a66:	464a      	mov	r2, r9
1a004a68:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004a6c:	9805      	ldr	r0, [sp, #20]
1a004a6e:	f000 fedf 	bl	1a005830 <_dtoa_r>
1a004a72:	9b03      	ldr	r3, [sp, #12]
1a004a74:	2b47      	cmp	r3, #71	; 0x47
1a004a76:	4607      	mov	r7, r0
1a004a78:	f040 858d 	bne.w	1a005596 <_vfprintf_r+0x1b36>
1a004a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004a7e:	07db      	lsls	r3, r3, #31
1a004a80:	f100 843b 	bmi.w	1a0052fa <_vfprintf_r+0x189a>
1a004a84:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a004a86:	1bf3      	subs	r3, r6, r7
1a004a88:	9312      	str	r3, [sp, #72]	; 0x48
1a004a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004a8c:	930e      	str	r3, [sp, #56]	; 0x38
1a004a8e:	9b03      	ldr	r3, [sp, #12]
1a004a90:	2b47      	cmp	r3, #71	; 0x47
1a004a92:	f000 8293 	beq.w	1a004fbc <_vfprintf_r+0x155c>
1a004a96:	9b03      	ldr	r3, [sp, #12]
1a004a98:	2b46      	cmp	r3, #70	; 0x46
1a004a9a:	f000 83fd 	beq.w	1a005298 <_vfprintf_r+0x1838>
1a004a9e:	9903      	ldr	r1, [sp, #12]
1a004aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004aa2:	2941      	cmp	r1, #65	; 0x41
1a004aa4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a004aa8:	fa5f f388 	uxtb.w	r3, r8
1a004aac:	bf03      	ittte	eq
1a004aae:	330f      	addeq	r3, #15
1a004ab0:	b2db      	uxtbeq	r3, r3
1a004ab2:	2101      	moveq	r1, #1
1a004ab4:	2100      	movne	r1, #0
1a004ab6:	2a00      	cmp	r2, #0
1a004ab8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a004abc:	bfb8      	it	lt
1a004abe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a004ac0:	9222      	str	r2, [sp, #136]	; 0x88
1a004ac2:	bfb6      	itet	lt
1a004ac4:	f1c3 0201 	rsblt	r2, r3, #1
1a004ac8:	232b      	movge	r3, #43	; 0x2b
1a004aca:	232d      	movlt	r3, #45	; 0x2d
1a004acc:	2a09      	cmp	r2, #9
1a004ace:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a004ad2:	f340 84c1 	ble.w	1a005458 <_vfprintf_r+0x19f8>
1a004ad6:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a004ada:	4620      	mov	r0, r4
1a004adc:	4dbe      	ldr	r5, [pc, #760]	; (1a004dd8 <_vfprintf_r+0x1378>)
1a004ade:	e001      	b.n	1a004ae4 <_vfprintf_r+0x1084>
1a004ae0:	4608      	mov	r0, r1
1a004ae2:	461a      	mov	r2, r3
1a004ae4:	fb85 3102 	smull	r3, r1, r5, r2
1a004ae8:	17d3      	asrs	r3, r2, #31
1a004aea:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a004aee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a004af2:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a004af6:	3130      	adds	r1, #48	; 0x30
1a004af8:	2a63      	cmp	r2, #99	; 0x63
1a004afa:	f800 1c01 	strb.w	r1, [r0, #-1]
1a004afe:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a004b02:	dced      	bgt.n	1a004ae0 <_vfprintf_r+0x1080>
1a004b04:	3330      	adds	r3, #48	; 0x30
1a004b06:	1e82      	subs	r2, r0, #2
1a004b08:	b2db      	uxtb	r3, r3
1a004b0a:	4294      	cmp	r4, r2
1a004b0c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a004b10:	f240 8544 	bls.w	1a00559c <_vfprintf_r+0x1b3c>
1a004b14:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a004b18:	e001      	b.n	1a004b1e <_vfprintf_r+0x10be>
1a004b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004b1e:	f802 3b01 	strb.w	r3, [r2], #1
1a004b22:	42a1      	cmp	r1, r4
1a004b24:	d1f9      	bne.n	1a004b1a <_vfprintf_r+0x10ba>
1a004b26:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a004b2a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a004b2e:	1a1b      	subs	r3, r3, r0
1a004b30:	4413      	add	r3, r2
1a004b32:	aa24      	add	r2, sp, #144	; 0x90
1a004b34:	1a9b      	subs	r3, r3, r2
1a004b36:	9316      	str	r3, [sp, #88]	; 0x58
1a004b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004b3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004b3c:	2b01      	cmp	r3, #1
1a004b3e:	eb03 0602 	add.w	r6, r3, r2
1a004b42:	f340 84ee 	ble.w	1a005522 <_vfprintf_r+0x1ac2>
1a004b46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004b48:	441e      	add	r6, r3
1a004b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004b4c:	2200      	movs	r2, #0
1a004b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a004b56:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a004b5a:	9302      	str	r3, [sp, #8]
1a004b5c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a004b60:	920c      	str	r2, [sp, #48]	; 0x30
1a004b62:	9303      	str	r3, [sp, #12]
1a004b64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a004b66:	2b00      	cmp	r3, #0
1a004b68:	f040 824f 	bne.w	1a00500a <_vfprintf_r+0x15aa>
1a004b6c:	4699      	mov	r9, r3
1a004b6e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004b72:	f7ff b94a 	b.w	1a003e0a <_vfprintf_r+0x3aa>
1a004b76:	9b08      	ldr	r3, [sp, #32]
1a004b78:	1d1a      	adds	r2, r3, #4
1a004b7a:	9b02      	ldr	r3, [sp, #8]
1a004b7c:	06d9      	lsls	r1, r3, #27
1a004b7e:	f100 8504 	bmi.w	1a00558a <_vfprintf_r+0x1b2a>
1a004b82:	9e02      	ldr	r6, [sp, #8]
1a004b84:	4633      	mov	r3, r6
1a004b86:	065b      	lsls	r3, r3, #25
1a004b88:	f140 80ec 	bpl.w	1a004d64 <_vfprintf_r+0x1304>
1a004b8c:	9b08      	ldr	r3, [sp, #32]
1a004b8e:	9208      	str	r2, [sp, #32]
1a004b90:	f9b3 4000 	ldrsh.w	r4, [r3]
1a004b94:	17e5      	asrs	r5, r4, #31
1a004b96:	4622      	mov	r2, r4
1a004b98:	462b      	mov	r3, r5
1a004b9a:	f7ff b8eb 	b.w	1a003d74 <_vfprintf_r+0x314>
1a004b9e:	4252      	negs	r2, r2
1a004ba0:	9206      	str	r2, [sp, #24]
1a004ba2:	9308      	str	r3, [sp, #32]
1a004ba4:	f7ff b8af 	b.w	1a003d06 <_vfprintf_r+0x2a6>
1a004ba8:	aa28      	add	r2, sp, #160	; 0xa0
1a004baa:	9907      	ldr	r1, [sp, #28]
1a004bac:	9805      	ldr	r0, [sp, #20]
1a004bae:	f002 fd93 	bl	1a0076d8 <__sprint_r>
1a004bb2:	2800      	cmp	r0, #0
1a004bb4:	f47f acec 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004bb8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004bba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004bbe:	f7ff b9cd 	b.w	1a003f5c <_vfprintf_r+0x4fc>
1a004bc2:	4622      	mov	r2, r4
1a004bc4:	461c      	mov	r4, r3
1a004bc6:	4613      	mov	r3, r2
1a004bc8:	462a      	mov	r2, r5
1a004bca:	3201      	adds	r2, #1
1a004bcc:	920a      	str	r2, [sp, #40]	; 0x28
1a004bce:	f106 0208 	add.w	r2, r6, #8
1a004bd2:	e9c6 3800 	strd	r3, r8, [r6]
1a004bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004bd8:	9329      	str	r3, [sp, #164]	; 0xa4
1a004bda:	4444      	add	r4, r8
1a004bdc:	2b07      	cmp	r3, #7
1a004bde:	942a      	str	r4, [sp, #168]	; 0xa8
1a004be0:	f340 8100 	ble.w	1a004de4 <_vfprintf_r+0x1384>
1a004be4:	aa28      	add	r2, sp, #160	; 0xa0
1a004be6:	9907      	ldr	r1, [sp, #28]
1a004be8:	9805      	ldr	r0, [sp, #20]
1a004bea:	f002 fd75 	bl	1a0076d8 <__sprint_r>
1a004bee:	2800      	cmp	r0, #0
1a004bf0:	f47f acce 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004bf4:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004bf8:	3301      	adds	r3, #1
1a004bfa:	930a      	str	r3, [sp, #40]	; 0x28
1a004bfc:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004c00:	ae2b      	add	r6, sp, #172	; 0xac
1a004c02:	e537      	b.n	1a004674 <_vfprintf_r+0xc14>
1a004c04:	aa28      	add	r2, sp, #160	; 0xa0
1a004c06:	9907      	ldr	r1, [sp, #28]
1a004c08:	9805      	ldr	r0, [sp, #20]
1a004c0a:	f002 fd65 	bl	1a0076d8 <__sprint_r>
1a004c0e:	2800      	cmp	r0, #0
1a004c10:	f47f acbe 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004c14:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004c16:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004c1a:	e409      	b.n	1a004430 <_vfprintf_r+0x9d0>
1a004c1c:	f043 0320 	orr.w	r3, r3, #32
1a004c20:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a004c24:	9302      	str	r3, [sp, #8]
1a004c26:	f10a 0a01 	add.w	sl, sl, #1
1a004c2a:	f7fe bf9d 	b.w	1a003b68 <_vfprintf_r+0x108>
1a004c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a004c32:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a004c36:	9302      	str	r3, [sp, #8]
1a004c38:	f10a 0a01 	add.w	sl, sl, #1
1a004c3c:	f7fe bf94 	b.w	1a003b68 <_vfprintf_r+0x108>
1a004c40:	464e      	mov	r6, r9
1a004c42:	2e06      	cmp	r6, #6
1a004c44:	bf28      	it	cs
1a004c46:	2606      	movcs	r6, #6
1a004c48:	46b9      	mov	r9, r7
1a004c4a:	970c      	str	r7, [sp, #48]	; 0x30
1a004c4c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a004c50:	9709      	str	r7, [sp, #36]	; 0x24
1a004c52:	463a      	mov	r2, r7
1a004c54:	9603      	str	r6, [sp, #12]
1a004c56:	9408      	str	r4, [sp, #32]
1a004c58:	4f60      	ldr	r7, [pc, #384]	; (1a004ddc <_vfprintf_r+0x137c>)
1a004c5a:	f7ff b8d6 	b.w	1a003e0a <_vfprintf_r+0x3aa>
1a004c5e:	463c      	mov	r4, r7
1a004c60:	f7fe bf75 	b.w	1a003b4e <_vfprintf_r+0xee>
1a004c64:	aa28      	add	r2, sp, #160	; 0xa0
1a004c66:	9907      	ldr	r1, [sp, #28]
1a004c68:	9805      	ldr	r0, [sp, #20]
1a004c6a:	f002 fd35 	bl	1a0076d8 <__sprint_r>
1a004c6e:	2800      	cmp	r0, #0
1a004c70:	f47f ac8e 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004c74:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a004c78:	ae2b      	add	r6, sp, #172	; 0xac
1a004c7a:	e4c9      	b.n	1a004610 <_vfprintf_r+0xbb0>
1a004c7c:	aa28      	add	r2, sp, #160	; 0xa0
1a004c7e:	9907      	ldr	r1, [sp, #28]
1a004c80:	9805      	ldr	r0, [sp, #20]
1a004c82:	f002 fd29 	bl	1a0076d8 <__sprint_r>
1a004c86:	2800      	cmp	r0, #0
1a004c88:	f47f ac82 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004c8c:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004c90:	ae2b      	add	r6, sp, #172	; 0xac
1a004c92:	930b      	str	r3, [sp, #44]	; 0x2c
1a004c94:	e4c9      	b.n	1a00462a <_vfprintf_r+0xbca>
1a004c96:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a004c9a:	f7fe fa01 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a004c9e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004ca2:	e51d      	b.n	1a0046e0 <_vfprintf_r+0xc80>
1a004ca4:	aa28      	add	r2, sp, #160	; 0xa0
1a004ca6:	9907      	ldr	r1, [sp, #28]
1a004ca8:	9805      	ldr	r0, [sp, #20]
1a004caa:	f002 fd15 	bl	1a0076d8 <__sprint_r>
1a004cae:	2800      	cmp	r0, #0
1a004cb0:	f47f ac6e 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004cb4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004cb8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004cba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004cbe:	f7ff b929 	b.w	1a003f14 <_vfprintf_r+0x4b4>
1a004cc2:	46c1      	mov	r9, r8
1a004cc4:	e4fe      	b.n	1a0046c4 <_vfprintf_r+0xc64>
1a004cc6:	aa28      	add	r2, sp, #160	; 0xa0
1a004cc8:	9907      	ldr	r1, [sp, #28]
1a004cca:	9805      	ldr	r0, [sp, #20]
1a004ccc:	f002 fd04 	bl	1a0076d8 <__sprint_r>
1a004cd0:	2800      	cmp	r0, #0
1a004cd2:	f47f ac5d 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004cd6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004cda:	f7ff bb93 	b.w	1a004404 <_vfprintf_r+0x9a4>
1a004cde:	464b      	mov	r3, r9
1a004ce0:	3201      	adds	r2, #1
1a004ce2:	442c      	add	r4, r5
1a004ce4:	2a07      	cmp	r2, #7
1a004ce6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004cea:	e9cb 3500 	strd	r3, r5, [fp]
1a004cee:	f77f a94a 	ble.w	1a003f86 <_vfprintf_r+0x526>
1a004cf2:	e46d      	b.n	1a0045d0 <_vfprintf_r+0xb70>
1a004cf4:	9a08      	ldr	r2, [sp, #32]
1a004cf6:	6812      	ldr	r2, [r2, #0]
1a004cf8:	9308      	str	r3, [sp, #32]
1a004cfa:	9b04      	ldr	r3, [sp, #16]
1a004cfc:	6013      	str	r3, [r2, #0]
1a004cfe:	4657      	mov	r7, sl
1a004d00:	f7ff b962 	b.w	1a003fc8 <_vfprintf_r+0x568>
1a004d04:	2d10      	cmp	r5, #16
1a004d06:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004d08:	4b35      	ldr	r3, [pc, #212]	; (1a004de0 <_vfprintf_r+0x1380>)
1a004d0a:	dd50      	ble.n	1a004dae <_vfprintf_r+0x134e>
1a004d0c:	4619      	mov	r1, r3
1a004d0e:	2610      	movs	r6, #16
1a004d10:	4623      	mov	r3, r4
1a004d12:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a004d16:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004d1a:	460c      	mov	r4, r1
1a004d1c:	e004      	b.n	1a004d28 <_vfprintf_r+0x12c8>
1a004d1e:	f10b 0b08 	add.w	fp, fp, #8
1a004d22:	3d10      	subs	r5, #16
1a004d24:	2d10      	cmp	r5, #16
1a004d26:	dd3f      	ble.n	1a004da8 <_vfprintf_r+0x1348>
1a004d28:	3201      	adds	r2, #1
1a004d2a:	3310      	adds	r3, #16
1a004d2c:	2a07      	cmp	r2, #7
1a004d2e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a004d32:	e9cb 4600 	strd	r4, r6, [fp]
1a004d36:	ddf2      	ble.n	1a004d1e <_vfprintf_r+0x12be>
1a004d38:	aa28      	add	r2, sp, #160	; 0xa0
1a004d3a:	4649      	mov	r1, r9
1a004d3c:	4640      	mov	r0, r8
1a004d3e:	f002 fccb 	bl	1a0076d8 <__sprint_r>
1a004d42:	2800      	cmp	r0, #0
1a004d44:	f47f acbe 	bne.w	1a0046c4 <_vfprintf_r+0xc64>
1a004d48:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a004d4c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004d50:	e7e7      	b.n	1a004d22 <_vfprintf_r+0x12c2>
1a004d52:	4638      	mov	r0, r7
1a004d54:	f7fe fe14 	bl	1a003980 <strlen>
1a004d58:	46a9      	mov	r9, r5
1a004d5a:	4606      	mov	r6, r0
1a004d5c:	f7ff b849 	b.w	1a003df2 <_vfprintf_r+0x392>
1a004d60:	46d9      	mov	r9, fp
1a004d62:	e4af      	b.n	1a0046c4 <_vfprintf_r+0xc64>
1a004d64:	9e02      	ldr	r6, [sp, #8]
1a004d66:	9b08      	ldr	r3, [sp, #32]
1a004d68:	f416 7f00 	tst.w	r6, #512	; 0x200
1a004d6c:	d051      	beq.n	1a004e12 <_vfprintf_r+0x13b2>
1a004d6e:	f993 4000 	ldrsb.w	r4, [r3]
1a004d72:	9208      	str	r2, [sp, #32]
1a004d74:	17e5      	asrs	r5, r4, #31
1a004d76:	4622      	mov	r2, r4
1a004d78:	462b      	mov	r3, r5
1a004d7a:	f7fe bffb 	b.w	1a003d74 <_vfprintf_r+0x314>
1a004d7e:	9e02      	ldr	r6, [sp, #8]
1a004d80:	05b7      	lsls	r7, r6, #22
1a004d82:	bf47      	ittee	mi
1a004d84:	9208      	strmi	r2, [sp, #32]
1a004d86:	b2e4      	uxtbmi	r4, r4
1a004d88:	9e02      	ldrpl	r6, [sp, #8]
1a004d8a:	9208      	strpl	r2, [sp, #32]
1a004d8c:	2500      	movs	r5, #0
1a004d8e:	f7ff baae 	b.w	1a0042ee <_vfprintf_r+0x88e>
1a004d92:	9e02      	ldr	r6, [sp, #8]
1a004d94:	9208      	str	r2, [sp, #32]
1a004d96:	4633      	mov	r3, r6
1a004d98:	059b      	lsls	r3, r3, #22
1a004d9a:	bf4c      	ite	mi
1a004d9c:	b2e4      	uxtbmi	r4, r4
1a004d9e:	9e02      	ldrpl	r6, [sp, #8]
1a004da0:	2500      	movs	r5, #0
1a004da2:	2301      	movs	r3, #1
1a004da4:	f7ff b987 	b.w	1a0040b6 <_vfprintf_r+0x656>
1a004da8:	4621      	mov	r1, r4
1a004daa:	461c      	mov	r4, r3
1a004dac:	460b      	mov	r3, r1
1a004dae:	3201      	adds	r2, #1
1a004db0:	442c      	add	r4, r5
1a004db2:	2a07      	cmp	r2, #7
1a004db4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004db8:	e9cb 3500 	strd	r3, r5, [fp]
1a004dbc:	f300 80ef 	bgt.w	1a004f9e <_vfprintf_r+0x153e>
1a004dc0:	f10b 0b08 	add.w	fp, fp, #8
1a004dc4:	e50e      	b.n	1a0047e4 <_vfprintf_r+0xd84>
1a004dc6:	9805      	ldr	r0, [sp, #20]
1a004dc8:	aa28      	add	r2, sp, #160	; 0xa0
1a004dca:	4649      	mov	r1, r9
1a004dcc:	f002 fc84 	bl	1a0076d8 <__sprint_r>
1a004dd0:	2800      	cmp	r0, #0
1a004dd2:	f43f a903 	beq.w	1a003fdc <_vfprintf_r+0x57c>
1a004dd6:	e47a      	b.n	1a0046ce <_vfprintf_r+0xc6e>
1a004dd8:	66666667 	.word	0x66666667
1a004ddc:	1a007ec8 	.word	0x1a007ec8
1a004de0:	1a007ee4 	.word	0x1a007ee4
1a004de4:	3301      	adds	r3, #1
1a004de6:	930a      	str	r3, [sp, #40]	; 0x28
1a004de8:	f102 0b08 	add.w	fp, r2, #8
1a004dec:	4616      	mov	r6, r2
1a004dee:	e441      	b.n	1a004674 <_vfprintf_r+0xc14>
1a004df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004df2:	18bd      	adds	r5, r7, r2
1a004df4:	eba5 0509 	sub.w	r5, r5, r9
1a004df8:	1ad3      	subs	r3, r2, r3
1a004dfa:	429d      	cmp	r5, r3
1a004dfc:	bfa8      	it	ge
1a004dfe:	461d      	movge	r5, r3
1a004e00:	e527      	b.n	1a004852 <_vfprintf_r+0xdf2>
1a004e02:	9a08      	ldr	r2, [sp, #32]
1a004e04:	9308      	str	r3, [sp, #32]
1a004e06:	6812      	ldr	r2, [r2, #0]
1a004e08:	9b04      	ldr	r3, [sp, #16]
1a004e0a:	8013      	strh	r3, [r2, #0]
1a004e0c:	4657      	mov	r7, sl
1a004e0e:	f7ff b8db 	b.w	1a003fc8 <_vfprintf_r+0x568>
1a004e12:	681c      	ldr	r4, [r3, #0]
1a004e14:	9208      	str	r2, [sp, #32]
1a004e16:	17e5      	asrs	r5, r4, #31
1a004e18:	9e02      	ldr	r6, [sp, #8]
1a004e1a:	4622      	mov	r2, r4
1a004e1c:	462b      	mov	r3, r5
1a004e1e:	f7fe bfa9 	b.w	1a003d74 <_vfprintf_r+0x314>
1a004e22:	b2e4      	uxtb	r4, r4
1a004e24:	2500      	movs	r5, #0
1a004e26:	f7fe bf59 	b.w	1a003cdc <_vfprintf_r+0x27c>
1a004e2a:	2330      	movs	r3, #48	; 0x30
1a004e2c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a004e30:	2358      	movs	r3, #88	; 0x58
1a004e32:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a004e36:	9b02      	ldr	r3, [sp, #8]
1a004e38:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a004e3c:	f043 0302 	orr.w	r3, r3, #2
1a004e40:	930a      	str	r3, [sp, #40]	; 0x28
1a004e42:	f300 82b7 	bgt.w	1a0053b4 <_vfprintf_r+0x1954>
1a004e46:	2300      	movs	r3, #0
1a004e48:	9309      	str	r3, [sp, #36]	; 0x24
1a004e4a:	af3b      	add	r7, sp, #236	; 0xec
1a004e4c:	9a02      	ldr	r2, [sp, #8]
1a004e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004e50:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a004e54:	9202      	str	r2, [sp, #8]
1a004e56:	2b00      	cmp	r3, #0
1a004e58:	f028 0220 	bic.w	r2, r8, #32
1a004e5c:	9203      	str	r2, [sp, #12]
1a004e5e:	f2c0 8188 	blt.w	1a005172 <_vfprintf_r+0x1712>
1a004e62:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a004e66:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a004e6a:	2300      	movs	r3, #0
1a004e6c:	931e      	str	r3, [sp, #120]	; 0x78
1a004e6e:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a004e72:	f000 82d9 	beq.w	1a005428 <_vfprintf_r+0x19c8>
1a004e76:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a004e7a:	f47f ade7 	bne.w	1a004a4c <_vfprintf_r+0xfec>
1a004e7e:	a822      	add	r0, sp, #136	; 0x88
1a004e80:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004e84:	f002 fb7c 	bl	1a007580 <frexp>
1a004e88:	2200      	movs	r2, #0
1a004e8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004e8e:	ec51 0b10 	vmov	r0, r1, d0
1a004e92:	f7fd f971 	bl	1a002178 <__aeabi_dmul>
1a004e96:	2200      	movs	r2, #0
1a004e98:	2300      	movs	r3, #0
1a004e9a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004e9e:	f7fd fbd3 	bl	1a002648 <__aeabi_dcmpeq>
1a004ea2:	b108      	cbz	r0, 1a004ea8 <_vfprintf_r+0x1448>
1a004ea4:	2301      	movs	r3, #1
1a004ea6:	9322      	str	r3, [sp, #136]	; 0x88
1a004ea8:	4bb6      	ldr	r3, [pc, #728]	; (1a005184 <_vfprintf_r+0x1724>)
1a004eaa:	930b      	str	r3, [sp, #44]	; 0x2c
1a004eac:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a004eb0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a004eb4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a004eb8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a004ebc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a004ec0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a004ec4:	970c      	str	r7, [sp, #48]	; 0x30
1a004ec6:	46ba      	mov	sl, r7
1a004ec8:	e003      	b.n	1a004ed2 <_vfprintf_r+0x1472>
1a004eca:	f7fd fbbd 	bl	1a002648 <__aeabi_dcmpeq>
1a004ece:	bb20      	cbnz	r0, 1a004f1a <_vfprintf_r+0x14ba>
1a004ed0:	46b2      	mov	sl, r6
1a004ed2:	2200      	movs	r2, #0
1a004ed4:	4bac      	ldr	r3, [pc, #688]	; (1a005188 <_vfprintf_r+0x1728>)
1a004ed6:	4640      	mov	r0, r8
1a004ed8:	4649      	mov	r1, r9
1a004eda:	f7fd f94d 	bl	1a002178 <__aeabi_dmul>
1a004ede:	4689      	mov	r9, r1
1a004ee0:	4680      	mov	r8, r0
1a004ee2:	f7fd fbf9 	bl	1a0026d8 <__aeabi_d2iz>
1a004ee6:	4607      	mov	r7, r0
1a004ee8:	f7fd f8dc 	bl	1a0020a4 <__aeabi_i2d>
1a004eec:	4602      	mov	r2, r0
1a004eee:	460b      	mov	r3, r1
1a004ef0:	4640      	mov	r0, r8
1a004ef2:	4649      	mov	r1, r9
1a004ef4:	f7fc ff88 	bl	1a001e08 <__aeabi_dsub>
1a004ef8:	4656      	mov	r6, sl
1a004efa:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a004efe:	f806 4b01 	strb.w	r4, [r6], #1
1a004f02:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a004f06:	462c      	mov	r4, r5
1a004f08:	4680      	mov	r8, r0
1a004f0a:	4689      	mov	r9, r1
1a004f0c:	f04f 0200 	mov.w	r2, #0
1a004f10:	f04f 0300 	mov.w	r3, #0
1a004f14:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a004f18:	d1d7      	bne.n	1a004eca <_vfprintf_r+0x146a>
1a004f1a:	4640      	mov	r0, r8
1a004f1c:	4649      	mov	r1, r9
1a004f1e:	2200      	movs	r2, #0
1a004f20:	4b9a      	ldr	r3, [pc, #616]	; (1a00518c <_vfprintf_r+0x172c>)
1a004f22:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a004f26:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a004f2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a004f2e:	463d      	mov	r5, r7
1a004f30:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a004f34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a004f36:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a004f3a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004f3e:	f7fd fbab 	bl	1a002698 <__aeabi_dcmpgt>
1a004f42:	2800      	cmp	r0, #0
1a004f44:	f040 8214 	bne.w	1a005370 <_vfprintf_r+0x1910>
1a004f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a004f4c:	2200      	movs	r2, #0
1a004f4e:	4b8f      	ldr	r3, [pc, #572]	; (1a00518c <_vfprintf_r+0x172c>)
1a004f50:	f7fd fb7a 	bl	1a002648 <__aeabi_dcmpeq>
1a004f54:	b118      	cbz	r0, 1a004f5e <_vfprintf_r+0x14fe>
1a004f56:	462b      	mov	r3, r5
1a004f58:	07db      	lsls	r3, r3, #31
1a004f5a:	f100 8209 	bmi.w	1a005370 <_vfprintf_r+0x1910>
1a004f5e:	2c00      	cmp	r4, #0
1a004f60:	f6ff ad91 	blt.w	1a004a86 <_vfprintf_r+0x1026>
1a004f64:	1c63      	adds	r3, r4, #1
1a004f66:	4433      	add	r3, r6
1a004f68:	2230      	movs	r2, #48	; 0x30
1a004f6a:	f806 2b01 	strb.w	r2, [r6], #1
1a004f6e:	429e      	cmp	r6, r3
1a004f70:	d1fb      	bne.n	1a004f6a <_vfprintf_r+0x150a>
1a004f72:	e588      	b.n	1a004a86 <_vfprintf_r+0x1026>
1a004f74:	aa28      	add	r2, sp, #160	; 0xa0
1a004f76:	9907      	ldr	r1, [sp, #28]
1a004f78:	9805      	ldr	r0, [sp, #20]
1a004f7a:	f002 fbad 	bl	1a0076d8 <__sprint_r>
1a004f7e:	2800      	cmp	r0, #0
1a004f80:	f47f ab06 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004f86:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004f8a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004f8e:	f7ff bb12 	b.w	1a0045b6 <_vfprintf_r+0xb56>
1a004f92:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a004f96:	f7fe f883 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a004f9a:	f7fe be6a 	b.w	1a003c72 <_vfprintf_r+0x212>
1a004f9e:	aa28      	add	r2, sp, #160	; 0xa0
1a004fa0:	9907      	ldr	r1, [sp, #28]
1a004fa2:	9805      	ldr	r0, [sp, #20]
1a004fa4:	f002 fb98 	bl	1a0076d8 <__sprint_r>
1a004fa8:	2800      	cmp	r0, #0
1a004faa:	f47f aaf1 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a004fae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004fb0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004fb4:	e416      	b.n	1a0047e4 <_vfprintf_r+0xd84>
1a004fb6:	9e02      	ldr	r6, [sp, #8]
1a004fb8:	f7ff b9ad 	b.w	1a004316 <_vfprintf_r+0x8b6>
1a004fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004fbe:	1cde      	adds	r6, r3, #3
1a004fc0:	db01      	blt.n	1a004fc6 <_vfprintf_r+0x1566>
1a004fc2:	4599      	cmp	r9, r3
1a004fc4:	da05      	bge.n	1a004fd2 <_vfprintf_r+0x1572>
1a004fc6:	f1a8 0802 	sub.w	r8, r8, #2
1a004fca:	f028 0320 	bic.w	r3, r8, #32
1a004fce:	9303      	str	r3, [sp, #12]
1a004fd0:	e565      	b.n	1a004a9e <_vfprintf_r+0x103e>
1a004fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004fd4:	4619      	mov	r1, r3
1a004fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004fd8:	4299      	cmp	r1, r3
1a004fda:	f300 8174 	bgt.w	1a0052c6 <_vfprintf_r+0x1866>
1a004fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004fe0:	07d4      	lsls	r4, r2, #31
1a004fe2:	f140 8254 	bpl.w	1a00548e <_vfprintf_r+0x1a2e>
1a004fe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a004fe8:	189e      	adds	r6, r3, r2
1a004fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004fec:	0558      	lsls	r0, r3, #21
1a004fee:	d503      	bpl.n	1a004ff8 <_vfprintf_r+0x1598>
1a004ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004ff2:	2b00      	cmp	r3, #0
1a004ff4:	f300 824d 	bgt.w	1a005492 <_vfprintf_r+0x1a32>
1a004ff8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a004ffc:	9303      	str	r3, [sp, #12]
1a004ffe:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005002:	2300      	movs	r3, #0
1a005004:	930c      	str	r3, [sp, #48]	; 0x30
1a005006:	930f      	str	r3, [sp, #60]	; 0x3c
1a005008:	e5ac      	b.n	1a004b64 <_vfprintf_r+0x1104>
1a00500a:	222d      	movs	r2, #45	; 0x2d
1a00500c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005010:	f04f 0900 	mov.w	r9, #0
1a005014:	f7fe befb 	b.w	1a003e0e <_vfprintf_r+0x3ae>
1a005018:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00501a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00501e:	18fb      	adds	r3, r7, r3
1a005020:	930a      	str	r3, [sp, #40]	; 0x28
1a005022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005024:	970e      	str	r7, [sp, #56]	; 0x38
1a005026:	465a      	mov	r2, fp
1a005028:	464f      	mov	r7, r9
1a00502a:	4e59      	ldr	r6, [pc, #356]	; (1a005190 <_vfprintf_r+0x1730>)
1a00502c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a005030:	f8dd a014 	ldr.w	sl, [sp, #20]
1a005034:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a005038:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a00503c:	4621      	mov	r1, r4
1a00503e:	2b00      	cmp	r3, #0
1a005040:	d032      	beq.n	1a0050a8 <_vfprintf_r+0x1648>
1a005042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005044:	2b00      	cmp	r3, #0
1a005046:	d16e      	bne.n	1a005126 <_vfprintf_r+0x16c6>
1a005048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00504a:	3b01      	subs	r3, #1
1a00504c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a005050:	930f      	str	r3, [sp, #60]	; 0x3c
1a005052:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005054:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a005056:	6010      	str	r0, [r2, #0]
1a005058:	3301      	adds	r3, #1
1a00505a:	4449      	add	r1, r9
1a00505c:	2b07      	cmp	r3, #7
1a00505e:	912a      	str	r1, [sp, #168]	; 0xa8
1a005060:	f8c2 9004 	str.w	r9, [r2, #4]
1a005064:	9329      	str	r3, [sp, #164]	; 0xa4
1a005066:	dc62      	bgt.n	1a00512e <_vfprintf_r+0x16ce>
1a005068:	3208      	adds	r2, #8
1a00506a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00506c:	f898 3000 	ldrb.w	r3, [r8]
1a005070:	1bc5      	subs	r5, r0, r7
1a005072:	429d      	cmp	r5, r3
1a005074:	bfa8      	it	ge
1a005076:	461d      	movge	r5, r3
1a005078:	2d00      	cmp	r5, #0
1a00507a:	dd0b      	ble.n	1a005094 <_vfprintf_r+0x1634>
1a00507c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00507e:	6017      	str	r7, [r2, #0]
1a005080:	3301      	adds	r3, #1
1a005082:	4429      	add	r1, r5
1a005084:	2b07      	cmp	r3, #7
1a005086:	912a      	str	r1, [sp, #168]	; 0xa8
1a005088:	6055      	str	r5, [r2, #4]
1a00508a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00508c:	dc5a      	bgt.n	1a005144 <_vfprintf_r+0x16e4>
1a00508e:	f898 3000 	ldrb.w	r3, [r8]
1a005092:	3208      	adds	r2, #8
1a005094:	2d00      	cmp	r5, #0
1a005096:	bfac      	ite	ge
1a005098:	1b5d      	subge	r5, r3, r5
1a00509a:	461d      	movlt	r5, r3
1a00509c:	2d00      	cmp	r5, #0
1a00509e:	dc15      	bgt.n	1a0050cc <_vfprintf_r+0x166c>
1a0050a0:	441f      	add	r7, r3
1a0050a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0050a4:	2b00      	cmp	r3, #0
1a0050a6:	d1cc      	bne.n	1a005042 <_vfprintf_r+0x15e2>
1a0050a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0050aa:	2b00      	cmp	r3, #0
1a0050ac:	d13b      	bne.n	1a005126 <_vfprintf_r+0x16c6>
1a0050ae:	46b9      	mov	r9, r7
1a0050b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0050b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a0050b4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a0050b8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0050bc:	18fb      	adds	r3, r7, r3
1a0050be:	4599      	cmp	r9, r3
1a0050c0:	4693      	mov	fp, r2
1a0050c2:	460c      	mov	r4, r1
1a0050c4:	bf28      	it	cs
1a0050c6:	4699      	movcs	r9, r3
1a0050c8:	f7ff bb93 	b.w	1a0047f2 <_vfprintf_r+0xd92>
1a0050cc:	2d10      	cmp	r5, #16
1a0050ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a0050d0:	dd1c      	ble.n	1a00510c <_vfprintf_r+0x16ac>
1a0050d2:	2410      	movs	r4, #16
1a0050d4:	e004      	b.n	1a0050e0 <_vfprintf_r+0x1680>
1a0050d6:	3d10      	subs	r5, #16
1a0050d8:	2d10      	cmp	r5, #16
1a0050da:	f102 0208 	add.w	r2, r2, #8
1a0050de:	dd15      	ble.n	1a00510c <_vfprintf_r+0x16ac>
1a0050e0:	3001      	adds	r0, #1
1a0050e2:	3110      	adds	r1, #16
1a0050e4:	2807      	cmp	r0, #7
1a0050e6:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0050ea:	e9c2 6400 	strd	r6, r4, [r2]
1a0050ee:	ddf2      	ble.n	1a0050d6 <_vfprintf_r+0x1676>
1a0050f0:	aa28      	add	r2, sp, #160	; 0xa0
1a0050f2:	4659      	mov	r1, fp
1a0050f4:	4650      	mov	r0, sl
1a0050f6:	f002 faef 	bl	1a0076d8 <__sprint_r>
1a0050fa:	2800      	cmp	r0, #0
1a0050fc:	f47f ae30 	bne.w	1a004d60 <_vfprintf_r+0x1300>
1a005100:	3d10      	subs	r5, #16
1a005102:	2d10      	cmp	r5, #16
1a005104:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a005108:	aa2b      	add	r2, sp, #172	; 0xac
1a00510a:	dce9      	bgt.n	1a0050e0 <_vfprintf_r+0x1680>
1a00510c:	3001      	adds	r0, #1
1a00510e:	4429      	add	r1, r5
1a005110:	2807      	cmp	r0, #7
1a005112:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a005116:	e9c2 6500 	strd	r6, r5, [r2]
1a00511a:	dc49      	bgt.n	1a0051b0 <_vfprintf_r+0x1750>
1a00511c:	f898 3000 	ldrb.w	r3, [r8]
1a005120:	3208      	adds	r2, #8
1a005122:	441f      	add	r7, r3
1a005124:	e7bd      	b.n	1a0050a2 <_vfprintf_r+0x1642>
1a005126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005128:	3b01      	subs	r3, #1
1a00512a:	930c      	str	r3, [sp, #48]	; 0x30
1a00512c:	e791      	b.n	1a005052 <_vfprintf_r+0x15f2>
1a00512e:	aa28      	add	r2, sp, #160	; 0xa0
1a005130:	4659      	mov	r1, fp
1a005132:	4650      	mov	r0, sl
1a005134:	f002 fad0 	bl	1a0076d8 <__sprint_r>
1a005138:	2800      	cmp	r0, #0
1a00513a:	f47f ae11 	bne.w	1a004d60 <_vfprintf_r+0x1300>
1a00513e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a005140:	aa2b      	add	r2, sp, #172	; 0xac
1a005142:	e792      	b.n	1a00506a <_vfprintf_r+0x160a>
1a005144:	aa28      	add	r2, sp, #160	; 0xa0
1a005146:	4659      	mov	r1, fp
1a005148:	4650      	mov	r0, sl
1a00514a:	f002 fac5 	bl	1a0076d8 <__sprint_r>
1a00514e:	2800      	cmp	r0, #0
1a005150:	f47f ae06 	bne.w	1a004d60 <_vfprintf_r+0x1300>
1a005154:	f898 3000 	ldrb.w	r3, [r8]
1a005158:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00515a:	aa2b      	add	r2, sp, #172	; 0xac
1a00515c:	e79a      	b.n	1a005094 <_vfprintf_r+0x1634>
1a00515e:	222d      	movs	r2, #45	; 0x2d
1a005160:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005164:	f7ff b87d 	b.w	1a004262 <_vfprintf_r+0x802>
1a005168:	9b02      	ldr	r3, [sp, #8]
1a00516a:	930a      	str	r3, [sp, #40]	; 0x28
1a00516c:	2300      	movs	r3, #0
1a00516e:	9309      	str	r3, [sp, #36]	; 0x24
1a005170:	9202      	str	r2, [sp, #8]
1a005172:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a005176:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a00517a:	931d      	str	r3, [sp, #116]	; 0x74
1a00517c:	232d      	movs	r3, #45	; 0x2d
1a00517e:	911c      	str	r1, [sp, #112]	; 0x70
1a005180:	931e      	str	r3, [sp, #120]	; 0x78
1a005182:	e674      	b.n	1a004e6e <_vfprintf_r+0x140e>
1a005184:	1a007ea0 	.word	0x1a007ea0
1a005188:	40300000 	.word	0x40300000
1a00518c:	3fe00000 	.word	0x3fe00000
1a005190:	1a007ee4 	.word	0x1a007ee4
1a005194:	aa28      	add	r2, sp, #160	; 0xa0
1a005196:	9907      	ldr	r1, [sp, #28]
1a005198:	9805      	ldr	r0, [sp, #20]
1a00519a:	f002 fa9d 	bl	1a0076d8 <__sprint_r>
1a00519e:	2800      	cmp	r0, #0
1a0051a0:	f47f a9f6 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a0051a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0051a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0051a8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0051ac:	f7ff bbeb 	b.w	1a004986 <_vfprintf_r+0xf26>
1a0051b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0051b2:	4659      	mov	r1, fp
1a0051b4:	4650      	mov	r0, sl
1a0051b6:	f002 fa8f 	bl	1a0076d8 <__sprint_r>
1a0051ba:	2800      	cmp	r0, #0
1a0051bc:	f47f add0 	bne.w	1a004d60 <_vfprintf_r+0x1300>
1a0051c0:	f898 3000 	ldrb.w	r3, [r8]
1a0051c4:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0051c6:	aa2b      	add	r2, sp, #172	; 0xac
1a0051c8:	441f      	add	r7, r3
1a0051ca:	e76a      	b.n	1a0050a2 <_vfprintf_r+0x1642>
1a0051cc:	aa28      	add	r2, sp, #160	; 0xa0
1a0051ce:	9907      	ldr	r1, [sp, #28]
1a0051d0:	9805      	ldr	r0, [sp, #20]
1a0051d2:	f002 fa81 	bl	1a0076d8 <__sprint_r>
1a0051d6:	2800      	cmp	r0, #0
1a0051d8:	f47f a9da 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a0051dc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0051de:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0051e2:	f7ff baf7 	b.w	1a0047d4 <_vfprintf_r+0xd74>
1a0051e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0051e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0051ea:	1aff      	subs	r7, r7, r3
1a0051ec:	461a      	mov	r2, r3
1a0051ee:	4638      	mov	r0, r7
1a0051f0:	f002 f9fc 	bl	1a0075ec <strncpy>
1a0051f4:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0051f8:	b10b      	cbz	r3, 1a0051fe <_vfprintf_r+0x179e>
1a0051fa:	f108 0801 	add.w	r8, r8, #1
1a0051fe:	220a      	movs	r2, #10
1a005200:	2300      	movs	r3, #0
1a005202:	4620      	mov	r0, r4
1a005204:	4629      	mov	r1, r5
1a005206:	f04f 0a00 	mov.w	sl, #0
1a00520a:	f7fd fa8d 	bl	1a002728 <__aeabi_uldivmod>
1a00520e:	f7ff b8ab 	b.w	1a004368 <_vfprintf_r+0x908>
1a005212:	aa26      	add	r2, sp, #152	; 0x98
1a005214:	ab23      	add	r3, sp, #140	; 0x8c
1a005216:	e9cd 3200 	strd	r3, r2, [sp]
1a00521a:	2103      	movs	r1, #3
1a00521c:	ab22      	add	r3, sp, #136	; 0x88
1a00521e:	464a      	mov	r2, r9
1a005220:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005224:	9805      	ldr	r0, [sp, #20]
1a005226:	f000 fb03 	bl	1a005830 <_dtoa_r>
1a00522a:	7803      	ldrb	r3, [r0, #0]
1a00522c:	2b30      	cmp	r3, #48	; 0x30
1a00522e:	4607      	mov	r7, r0
1a005230:	f000 8161 	beq.w	1a0054f6 <_vfprintf_r+0x1a96>
1a005234:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005236:	444b      	add	r3, r9
1a005238:	18fc      	adds	r4, r7, r3
1a00523a:	2200      	movs	r2, #0
1a00523c:	2300      	movs	r3, #0
1a00523e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a005242:	f7fd fa01 	bl	1a002648 <__aeabi_dcmpeq>
1a005246:	b108      	cbz	r0, 1a00524c <_vfprintf_r+0x17ec>
1a005248:	4626      	mov	r6, r4
1a00524a:	e41c      	b.n	1a004a86 <_vfprintf_r+0x1026>
1a00524c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00524e:	42a6      	cmp	r6, r4
1a005250:	f4bf ac19 	bcs.w	1a004a86 <_vfprintf_r+0x1026>
1a005254:	2230      	movs	r2, #48	; 0x30
1a005256:	1c73      	adds	r3, r6, #1
1a005258:	9326      	str	r3, [sp, #152]	; 0x98
1a00525a:	7032      	strb	r2, [r6, #0]
1a00525c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00525e:	42b4      	cmp	r4, r6
1a005260:	d8f9      	bhi.n	1a005256 <_vfprintf_r+0x17f6>
1a005262:	e410      	b.n	1a004a86 <_vfprintf_r+0x1026>
1a005264:	aa28      	add	r2, sp, #160	; 0xa0
1a005266:	9907      	ldr	r1, [sp, #28]
1a005268:	9805      	ldr	r0, [sp, #20]
1a00526a:	f002 fa35 	bl	1a0076d8 <__sprint_r>
1a00526e:	2800      	cmp	r0, #0
1a005270:	f47f a98e 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a005274:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005276:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005278:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00527c:	f7ff bad1 	b.w	1a004822 <_vfprintf_r+0xdc2>
1a005280:	464e      	mov	r6, r9
1a005282:	f8cd 900c 	str.w	r9, [sp, #12]
1a005286:	9408      	str	r4, [sp, #32]
1a005288:	4681      	mov	r9, r0
1a00528a:	900c      	str	r0, [sp, #48]	; 0x30
1a00528c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a005290:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a005294:	f7fe bdb9 	b.w	1a003e0a <_vfprintf_r+0x3aa>
1a005298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00529a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00529c:	f003 0301 	and.w	r3, r3, #1
1a0052a0:	2a00      	cmp	r2, #0
1a0052a2:	ea43 0309 	orr.w	r3, r3, r9
1a0052a6:	f340 8142 	ble.w	1a00552e <_vfprintf_r+0x1ace>
1a0052aa:	2b00      	cmp	r3, #0
1a0052ac:	f040 8119 	bne.w	1a0054e2 <_vfprintf_r+0x1a82>
1a0052b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0052b2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0052b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0052b8:	055a      	lsls	r2, r3, #21
1a0052ba:	f100 80ec 	bmi.w	1a005496 <_vfprintf_r+0x1a36>
1a0052be:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0052c2:	9303      	str	r3, [sp, #12]
1a0052c4:	e69d      	b.n	1a005002 <_vfprintf_r+0x15a2>
1a0052c6:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a0052ca:	189e      	adds	r6, r3, r2
1a0052cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0052ce:	2b00      	cmp	r3, #0
1a0052d0:	f340 811e 	ble.w	1a005510 <_vfprintf_r+0x1ab0>
1a0052d4:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0052d8:	e7ed      	b.n	1a0052b6 <_vfprintf_r+0x1856>
1a0052da:	aa28      	add	r2, sp, #160	; 0xa0
1a0052dc:	9907      	ldr	r1, [sp, #28]
1a0052de:	9805      	ldr	r0, [sp, #20]
1a0052e0:	f002 f9fa 	bl	1a0076d8 <__sprint_r>
1a0052e4:	2800      	cmp	r0, #0
1a0052e6:	f47f a953 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a0052ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0052ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0052ee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0052f0:	1ad3      	subs	r3, r2, r3
1a0052f2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0052f6:	f7ff baac 	b.w	1a004852 <_vfprintf_r+0xdf2>
1a0052fa:	eb07 0409 	add.w	r4, r7, r9
1a0052fe:	e79c      	b.n	1a00523a <_vfprintf_r+0x17da>
1a005300:	425d      	negs	r5, r3
1a005302:	3310      	adds	r3, #16
1a005304:	4ba7      	ldr	r3, [pc, #668]	; (1a0055a4 <_vfprintf_r+0x1b44>)
1a005306:	da63      	bge.n	1a0053d0 <_vfprintf_r+0x1970>
1a005308:	4619      	mov	r1, r3
1a00530a:	2610      	movs	r6, #16
1a00530c:	4623      	mov	r3, r4
1a00530e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005312:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005316:	460c      	mov	r4, r1
1a005318:	e004      	b.n	1a005324 <_vfprintf_r+0x18c4>
1a00531a:	f10b 0b08 	add.w	fp, fp, #8
1a00531e:	3d10      	subs	r5, #16
1a005320:	2d10      	cmp	r5, #16
1a005322:	dd52      	ble.n	1a0053ca <_vfprintf_r+0x196a>
1a005324:	3201      	adds	r2, #1
1a005326:	3310      	adds	r3, #16
1a005328:	2a07      	cmp	r2, #7
1a00532a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00532e:	e9cb 4600 	strd	r4, r6, [fp]
1a005332:	ddf2      	ble.n	1a00531a <_vfprintf_r+0x18ba>
1a005334:	aa28      	add	r2, sp, #160	; 0xa0
1a005336:	4649      	mov	r1, r9
1a005338:	4640      	mov	r0, r8
1a00533a:	f002 f9cd 	bl	1a0076d8 <__sprint_r>
1a00533e:	2800      	cmp	r0, #0
1a005340:	f47f a9c0 	bne.w	1a0046c4 <_vfprintf_r+0xc64>
1a005344:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a005348:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00534c:	e7e7      	b.n	1a00531e <_vfprintf_r+0x18be>
1a00534e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a005352:	07db      	lsls	r3, r3, #31
1a005354:	d407      	bmi.n	1a005366 <_vfprintf_r+0x1906>
1a005356:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00535a:	059f      	lsls	r7, r3, #22
1a00535c:	d403      	bmi.n	1a005366 <_vfprintf_r+0x1906>
1a00535e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a005362:	f7fd fe9d 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a005366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00536a:	9304      	str	r3, [sp, #16]
1a00536c:	f7ff b9bb 	b.w	1a0046e6 <_vfprintf_r+0xc86>
1a005370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005372:	9326      	str	r3, [sp, #152]	; 0x98
1a005374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005376:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a00537a:	7bd9      	ldrb	r1, [r3, #15]
1a00537c:	428a      	cmp	r2, r1
1a00537e:	4633      	mov	r3, r6
1a005380:	d109      	bne.n	1a005396 <_vfprintf_r+0x1936>
1a005382:	2030      	movs	r0, #48	; 0x30
1a005384:	f803 0c01 	strb.w	r0, [r3, #-1]
1a005388:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a00538a:	1e5a      	subs	r2, r3, #1
1a00538c:	9226      	str	r2, [sp, #152]	; 0x98
1a00538e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a005392:	4291      	cmp	r1, r2
1a005394:	d0f6      	beq.n	1a005384 <_vfprintf_r+0x1924>
1a005396:	2a39      	cmp	r2, #57	; 0x39
1a005398:	bf0b      	itete	eq
1a00539a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a00539c:	3201      	addne	r2, #1
1a00539e:	7a92      	ldrbeq	r2, [r2, #10]
1a0053a0:	b2d2      	uxtbne	r2, r2
1a0053a2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a0053a6:	f7ff bb6e 	b.w	1a004a86 <_vfprintf_r+0x1026>
1a0053aa:	2330      	movs	r3, #48	; 0x30
1a0053ac:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0053b0:	2378      	movs	r3, #120	; 0x78
1a0053b2:	e53e      	b.n	1a004e32 <_vfprintf_r+0x13d2>
1a0053b4:	f109 0101 	add.w	r1, r9, #1
1a0053b8:	9805      	ldr	r0, [sp, #20]
1a0053ba:	f7fd fe73 	bl	1a0030a4 <_malloc_r>
1a0053be:	4607      	mov	r7, r0
1a0053c0:	2800      	cmp	r0, #0
1a0053c2:	f000 80d5 	beq.w	1a005570 <_vfprintf_r+0x1b10>
1a0053c6:	9009      	str	r0, [sp, #36]	; 0x24
1a0053c8:	e540      	b.n	1a004e4c <_vfprintf_r+0x13ec>
1a0053ca:	4621      	mov	r1, r4
1a0053cc:	461c      	mov	r4, r3
1a0053ce:	460b      	mov	r3, r1
1a0053d0:	3201      	adds	r2, #1
1a0053d2:	442c      	add	r4, r5
1a0053d4:	2a07      	cmp	r2, #7
1a0053d6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0053da:	e9cb 3500 	strd	r3, r5, [fp]
1a0053de:	f77f aaea 	ble.w	1a0049b6 <_vfprintf_r+0xf56>
1a0053e2:	aa28      	add	r2, sp, #160	; 0xa0
1a0053e4:	9907      	ldr	r1, [sp, #28]
1a0053e6:	9805      	ldr	r0, [sp, #20]
1a0053e8:	f002 f976 	bl	1a0076d8 <__sprint_r>
1a0053ec:	2800      	cmp	r0, #0
1a0053ee:	f47f a8cf 	bne.w	1a004590 <_vfprintf_r+0xb30>
1a0053f2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0053f6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0053fa:	f7ff b8df 	b.w	1a0045bc <_vfprintf_r+0xb5c>
1a0053fe:	f109 0401 	add.w	r4, r9, #1
1a005402:	a926      	add	r1, sp, #152	; 0x98
1a005404:	ab23      	add	r3, sp, #140	; 0x8c
1a005406:	e9cd 3100 	strd	r3, r1, [sp]
1a00540a:	4622      	mov	r2, r4
1a00540c:	ab22      	add	r3, sp, #136	; 0x88
1a00540e:	2102      	movs	r1, #2
1a005410:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005414:	9805      	ldr	r0, [sp, #20]
1a005416:	f000 fa0b 	bl	1a005830 <_dtoa_r>
1a00541a:	4607      	mov	r7, r0
1a00541c:	443c      	add	r4, r7
1a00541e:	e70c      	b.n	1a00523a <_vfprintf_r+0x17da>
1a005420:	f04f 0906 	mov.w	r9, #6
1a005424:	f7ff bb03 	b.w	1a004a2e <_vfprintf_r+0xfce>
1a005428:	a822      	add	r0, sp, #136	; 0x88
1a00542a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00542e:	f002 f8a7 	bl	1a007580 <frexp>
1a005432:	2200      	movs	r2, #0
1a005434:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a005438:	ec51 0b10 	vmov	r0, r1, d0
1a00543c:	f7fc fe9c 	bl	1a002178 <__aeabi_dmul>
1a005440:	2200      	movs	r2, #0
1a005442:	2300      	movs	r3, #0
1a005444:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a005448:	f7fd f8fe 	bl	1a002648 <__aeabi_dcmpeq>
1a00544c:	b108      	cbz	r0, 1a005452 <_vfprintf_r+0x19f2>
1a00544e:	2301      	movs	r3, #1
1a005450:	9322      	str	r3, [sp, #136]	; 0x88
1a005452:	4b55      	ldr	r3, [pc, #340]	; (1a0055a8 <_vfprintf_r+0x1b48>)
1a005454:	930b      	str	r3, [sp, #44]	; 0x2c
1a005456:	e529      	b.n	1a004eac <_vfprintf_r+0x144c>
1a005458:	2900      	cmp	r1, #0
1a00545a:	d17b      	bne.n	1a005554 <_vfprintf_r+0x1af4>
1a00545c:	2330      	movs	r3, #48	; 0x30
1a00545e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a005462:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a005466:	3230      	adds	r2, #48	; 0x30
1a005468:	f803 2b01 	strb.w	r2, [r3], #1
1a00546c:	aa24      	add	r2, sp, #144	; 0x90
1a00546e:	1a9b      	subs	r3, r3, r2
1a005470:	9316      	str	r3, [sp, #88]	; 0x58
1a005472:	f7ff bb61 	b.w	1a004b38 <_vfprintf_r+0x10d8>
1a005476:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005478:	4f4c      	ldr	r7, [pc, #304]	; (1a0055ac <_vfprintf_r+0x1b4c>)
1a00547a:	2b00      	cmp	r3, #0
1a00547c:	bfb6      	itet	lt
1a00547e:	222d      	movlt	r2, #45	; 0x2d
1a005480:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a005484:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a005488:	4b49      	ldr	r3, [pc, #292]	; (1a0055b0 <_vfprintf_r+0x1b50>)
1a00548a:	f7fe beec 	b.w	1a004266 <_vfprintf_r+0x806>
1a00548e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a005490:	e5ab      	b.n	1a004fea <_vfprintf_r+0x158a>
1a005492:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005496:	9818      	ldr	r0, [sp, #96]	; 0x60
1a005498:	2200      	movs	r2, #0
1a00549a:	920c      	str	r2, [sp, #48]	; 0x30
1a00549c:	920f      	str	r2, [sp, #60]	; 0x3c
1a00549e:	7803      	ldrb	r3, [r0, #0]
1a0054a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0054a2:	2bff      	cmp	r3, #255	; 0xff
1a0054a4:	d00c      	beq.n	1a0054c0 <_vfprintf_r+0x1a60>
1a0054a6:	4293      	cmp	r3, r2
1a0054a8:	da0a      	bge.n	1a0054c0 <_vfprintf_r+0x1a60>
1a0054aa:	7841      	ldrb	r1, [r0, #1]
1a0054ac:	1ad2      	subs	r2, r2, r3
1a0054ae:	b1a1      	cbz	r1, 1a0054da <_vfprintf_r+0x1a7a>
1a0054b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0054b2:	3301      	adds	r3, #1
1a0054b4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0054b6:	460b      	mov	r3, r1
1a0054b8:	2bff      	cmp	r3, #255	; 0xff
1a0054ba:	f100 0001 	add.w	r0, r0, #1
1a0054be:	d1f2      	bne.n	1a0054a6 <_vfprintf_r+0x1a46>
1a0054c0:	920e      	str	r2, [sp, #56]	; 0x38
1a0054c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0054c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0054c6:	9018      	str	r0, [sp, #96]	; 0x60
1a0054c8:	4413      	add	r3, r2
1a0054ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a0054cc:	fb02 6603 	mla	r6, r2, r3, r6
1a0054d0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0054d4:	9303      	str	r3, [sp, #12]
1a0054d6:	f7ff bb45 	b.w	1a004b64 <_vfprintf_r+0x1104>
1a0054da:	990c      	ldr	r1, [sp, #48]	; 0x30
1a0054dc:	3101      	adds	r1, #1
1a0054de:	910c      	str	r1, [sp, #48]	; 0x30
1a0054e0:	e7df      	b.n	1a0054a2 <_vfprintf_r+0x1a42>
1a0054e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0054e4:	18d6      	adds	r6, r2, r3
1a0054e6:	444e      	add	r6, r9
1a0054e8:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0054ec:	e6e3      	b.n	1a0052b6 <_vfprintf_r+0x1856>
1a0054ee:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0054f2:	f7ff b8ec 	b.w	1a0046ce <_vfprintf_r+0xc6e>
1a0054f6:	2200      	movs	r2, #0
1a0054f8:	2300      	movs	r3, #0
1a0054fa:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a0054fe:	f7fd f8a3 	bl	1a002648 <__aeabi_dcmpeq>
1a005502:	2800      	cmp	r0, #0
1a005504:	f47f ae96 	bne.w	1a005234 <_vfprintf_r+0x17d4>
1a005508:	f1c9 0301 	rsb	r3, r9, #1
1a00550c:	9322      	str	r3, [sp, #136]	; 0x88
1a00550e:	e692      	b.n	1a005236 <_vfprintf_r+0x17d6>
1a005510:	f1c3 0301 	rsb	r3, r3, #1
1a005514:	441e      	add	r6, r3
1a005516:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00551a:	9303      	str	r3, [sp, #12]
1a00551c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005520:	e56f      	b.n	1a005002 <_vfprintf_r+0x15a2>
1a005522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005524:	07dd      	lsls	r5, r3, #31
1a005526:	f57f ab10 	bpl.w	1a004b4a <_vfprintf_r+0x10ea>
1a00552a:	f7ff bb0c 	b.w	1a004b46 <_vfprintf_r+0x10e6>
1a00552e:	b92b      	cbnz	r3, 1a00553c <_vfprintf_r+0x1adc>
1a005530:	2301      	movs	r3, #1
1a005532:	9303      	str	r3, [sp, #12]
1a005534:	461e      	mov	r6, r3
1a005536:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00553a:	e562      	b.n	1a005002 <_vfprintf_r+0x15a2>
1a00553c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00553e:	1c5e      	adds	r6, r3, #1
1a005540:	444e      	add	r6, r9
1a005542:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005546:	9303      	str	r3, [sp, #12]
1a005548:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00554c:	e559      	b.n	1a005002 <_vfprintf_r+0x15a2>
1a00554e:	465a      	mov	r2, fp
1a005550:	f7ff bb3f 	b.w	1a004bd2 <_vfprintf_r+0x1172>
1a005554:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a005558:	e785      	b.n	1a005466 <_vfprintf_r+0x1a06>
1a00555a:	9b08      	ldr	r3, [sp, #32]
1a00555c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a005560:	f853 0b04 	ldr.w	r0, [r3], #4
1a005564:	9308      	str	r3, [sp, #32]
1a005566:	4692      	mov	sl, r2
1a005568:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a00556c:	f7fe bafc 	b.w	1a003b68 <_vfprintf_r+0x108>
1a005570:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005574:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a005578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00557c:	f8a9 300c 	strh.w	r3, [r9, #12]
1a005580:	f7ff b8a5 	b.w	1a0046ce <_vfprintf_r+0xc6e>
1a005584:	461e      	mov	r6, r3
1a005586:	f7fe bc15 	b.w	1a003db4 <_vfprintf_r+0x354>
1a00558a:	461e      	mov	r6, r3
1a00558c:	f7fe bc5e 	b.w	1a003e4c <_vfprintf_r+0x3ec>
1a005590:	461e      	mov	r6, r3
1a005592:	f7fe bc48 	b.w	1a003e26 <_vfprintf_r+0x3c6>
1a005596:	464c      	mov	r4, r9
1a005598:	443c      	add	r4, r7
1a00559a:	e64e      	b.n	1a00523a <_vfprintf_r+0x17da>
1a00559c:	2302      	movs	r3, #2
1a00559e:	9316      	str	r3, [sp, #88]	; 0x58
1a0055a0:	f7ff baca 	b.w	1a004b38 <_vfprintf_r+0x10d8>
1a0055a4:	1a007ee4 	.word	0x1a007ee4
1a0055a8:	1a007eb4 	.word	0x1a007eb4
1a0055ac:	1a007e98 	.word	0x1a007e98
1a0055b0:	1a007e9c 	.word	0x1a007e9c

1a0055b4 <__sbprintf>:
1a0055b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0055b8:	460c      	mov	r4, r1
1a0055ba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a0055be:	8989      	ldrh	r1, [r1, #12]
1a0055c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0055c2:	89e5      	ldrh	r5, [r4, #14]
1a0055c4:	9619      	str	r6, [sp, #100]	; 0x64
1a0055c6:	f021 0102 	bic.w	r1, r1, #2
1a0055ca:	4606      	mov	r6, r0
1a0055cc:	69e0      	ldr	r0, [r4, #28]
1a0055ce:	f8ad 100c 	strh.w	r1, [sp, #12]
1a0055d2:	4617      	mov	r7, r2
1a0055d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a0055d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a0055da:	f8ad 500e 	strh.w	r5, [sp, #14]
1a0055de:	4698      	mov	r8, r3
1a0055e0:	ad1a      	add	r5, sp, #104	; 0x68
1a0055e2:	2300      	movs	r3, #0
1a0055e4:	9007      	str	r0, [sp, #28]
1a0055e6:	a816      	add	r0, sp, #88	; 0x58
1a0055e8:	9209      	str	r2, [sp, #36]	; 0x24
1a0055ea:	9306      	str	r3, [sp, #24]
1a0055ec:	9500      	str	r5, [sp, #0]
1a0055ee:	9504      	str	r5, [sp, #16]
1a0055f0:	9102      	str	r1, [sp, #8]
1a0055f2:	9105      	str	r1, [sp, #20]
1a0055f4:	f7fd fd4e 	bl	1a003094 <__retarget_lock_init_recursive>
1a0055f8:	4643      	mov	r3, r8
1a0055fa:	463a      	mov	r2, r7
1a0055fc:	4669      	mov	r1, sp
1a0055fe:	4630      	mov	r0, r6
1a005600:	f7fe fa2e 	bl	1a003a60 <_vfprintf_r>
1a005604:	1e05      	subs	r5, r0, #0
1a005606:	db07      	blt.n	1a005618 <__sbprintf+0x64>
1a005608:	4630      	mov	r0, r6
1a00560a:	4669      	mov	r1, sp
1a00560c:	f7fd fb1c 	bl	1a002c48 <_fflush_r>
1a005610:	2800      	cmp	r0, #0
1a005612:	bf18      	it	ne
1a005614:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a005618:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a00561c:	065b      	lsls	r3, r3, #25
1a00561e:	d503      	bpl.n	1a005628 <__sbprintf+0x74>
1a005620:	89a3      	ldrh	r3, [r4, #12]
1a005622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005626:	81a3      	strh	r3, [r4, #12]
1a005628:	9816      	ldr	r0, [sp, #88]	; 0x58
1a00562a:	f7fd fd35 	bl	1a003098 <__retarget_lock_close_recursive>
1a00562e:	4628      	mov	r0, r5
1a005630:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a005634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a005638 <__swsetup_r>:
1a005638:	b538      	push	{r3, r4, r5, lr}
1a00563a:	4b32      	ldr	r3, [pc, #200]	; (1a005704 <__swsetup_r+0xcc>)
1a00563c:	681b      	ldr	r3, [r3, #0]
1a00563e:	4605      	mov	r5, r0
1a005640:	460c      	mov	r4, r1
1a005642:	b10b      	cbz	r3, 1a005648 <__swsetup_r+0x10>
1a005644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a005646:	b312      	cbz	r2, 1a00568e <__swsetup_r+0x56>
1a005648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00564c:	b293      	uxth	r3, r2
1a00564e:	0718      	lsls	r0, r3, #28
1a005650:	d525      	bpl.n	1a00569e <__swsetup_r+0x66>
1a005652:	6920      	ldr	r0, [r4, #16]
1a005654:	2800      	cmp	r0, #0
1a005656:	d02d      	beq.n	1a0056b4 <__swsetup_r+0x7c>
1a005658:	f013 0201 	ands.w	r2, r3, #1
1a00565c:	d007      	beq.n	1a00566e <__swsetup_r+0x36>
1a00565e:	6963      	ldr	r3, [r4, #20]
1a005660:	2200      	movs	r2, #0
1a005662:	425b      	negs	r3, r3
1a005664:	61a3      	str	r3, [r4, #24]
1a005666:	60a2      	str	r2, [r4, #8]
1a005668:	b138      	cbz	r0, 1a00567a <__swsetup_r+0x42>
1a00566a:	2000      	movs	r0, #0
1a00566c:	bd38      	pop	{r3, r4, r5, pc}
1a00566e:	0799      	lsls	r1, r3, #30
1a005670:	bf58      	it	pl
1a005672:	6962      	ldrpl	r2, [r4, #20]
1a005674:	60a2      	str	r2, [r4, #8]
1a005676:	2800      	cmp	r0, #0
1a005678:	d1f7      	bne.n	1a00566a <__swsetup_r+0x32>
1a00567a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00567e:	061a      	lsls	r2, r3, #24
1a005680:	d5f4      	bpl.n	1a00566c <__swsetup_r+0x34>
1a005682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005686:	81a3      	strh	r3, [r4, #12]
1a005688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00568c:	bd38      	pop	{r3, r4, r5, pc}
1a00568e:	4618      	mov	r0, r3
1a005690:	f7fd fb36 	bl	1a002d00 <__sinit>
1a005694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005698:	b293      	uxth	r3, r2
1a00569a:	0718      	lsls	r0, r3, #28
1a00569c:	d4d9      	bmi.n	1a005652 <__swsetup_r+0x1a>
1a00569e:	06d9      	lsls	r1, r3, #27
1a0056a0:	d528      	bpl.n	1a0056f4 <__swsetup_r+0xbc>
1a0056a2:	0758      	lsls	r0, r3, #29
1a0056a4:	d412      	bmi.n	1a0056cc <__swsetup_r+0x94>
1a0056a6:	6920      	ldr	r0, [r4, #16]
1a0056a8:	f042 0308 	orr.w	r3, r2, #8
1a0056ac:	81a3      	strh	r3, [r4, #12]
1a0056ae:	b29b      	uxth	r3, r3
1a0056b0:	2800      	cmp	r0, #0
1a0056b2:	d1d1      	bne.n	1a005658 <__swsetup_r+0x20>
1a0056b4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a0056b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a0056bc:	d0cc      	beq.n	1a005658 <__swsetup_r+0x20>
1a0056be:	4628      	mov	r0, r5
1a0056c0:	4621      	mov	r1, r4
1a0056c2:	f001 f995 	bl	1a0069f0 <__smakebuf_r>
1a0056c6:	89a3      	ldrh	r3, [r4, #12]
1a0056c8:	6920      	ldr	r0, [r4, #16]
1a0056ca:	e7c5      	b.n	1a005658 <__swsetup_r+0x20>
1a0056cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a0056ce:	b151      	cbz	r1, 1a0056e6 <__swsetup_r+0xae>
1a0056d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a0056d4:	4299      	cmp	r1, r3
1a0056d6:	d004      	beq.n	1a0056e2 <__swsetup_r+0xaa>
1a0056d8:	4628      	mov	r0, r5
1a0056da:	f7fd fb97 	bl	1a002e0c <_free_r>
1a0056de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0056e2:	2300      	movs	r3, #0
1a0056e4:	6323      	str	r3, [r4, #48]	; 0x30
1a0056e6:	2300      	movs	r3, #0
1a0056e8:	6920      	ldr	r0, [r4, #16]
1a0056ea:	6063      	str	r3, [r4, #4]
1a0056ec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a0056f0:	6020      	str	r0, [r4, #0]
1a0056f2:	e7d9      	b.n	1a0056a8 <__swsetup_r+0x70>
1a0056f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a0056f8:	2309      	movs	r3, #9
1a0056fa:	602b      	str	r3, [r5, #0]
1a0056fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005700:	81a2      	strh	r2, [r4, #12]
1a005702:	bd38      	pop	{r3, r4, r5, pc}
1a005704:	10000048 	.word	0x10000048

1a005708 <quorem>:
1a005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00570c:	6903      	ldr	r3, [r0, #16]
1a00570e:	690f      	ldr	r7, [r1, #16]
1a005710:	42bb      	cmp	r3, r7
1a005712:	b083      	sub	sp, #12
1a005714:	f2c0 8086 	blt.w	1a005824 <quorem+0x11c>
1a005718:	3f01      	subs	r7, #1
1a00571a:	f101 0614 	add.w	r6, r1, #20
1a00571e:	f100 0a14 	add.w	sl, r0, #20
1a005722:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a005726:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00572a:	00bc      	lsls	r4, r7, #2
1a00572c:	3301      	adds	r3, #1
1a00572e:	9400      	str	r4, [sp, #0]
1a005730:	eb06 0904 	add.w	r9, r6, r4
1a005734:	429a      	cmp	r2, r3
1a005736:	4454      	add	r4, sl
1a005738:	fbb2 f8f3 	udiv	r8, r2, r3
1a00573c:	9401      	str	r4, [sp, #4]
1a00573e:	d33a      	bcc.n	1a0057b6 <quorem+0xae>
1a005740:	2500      	movs	r5, #0
1a005742:	462a      	mov	r2, r5
1a005744:	46b6      	mov	lr, r6
1a005746:	46d4      	mov	ip, sl
1a005748:	f85e 4b04 	ldr.w	r4, [lr], #4
1a00574c:	f8dc 3000 	ldr.w	r3, [ip]
1a005750:	fa1f fb84 	uxth.w	fp, r4
1a005754:	fb08 550b 	mla	r5, r8, fp, r5
1a005758:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a00575c:	0c24      	lsrs	r4, r4, #16
1a00575e:	fb08 b404 	mla	r4, r8, r4, fp
1a005762:	b2ad      	uxth	r5, r5
1a005764:	1b55      	subs	r5, r2, r5
1a005766:	b2a2      	uxth	r2, r4
1a005768:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a00576c:	fa15 f383 	uxtah	r3, r5, r3
1a005770:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a005774:	b29b      	uxth	r3, r3
1a005776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00577a:	45f1      	cmp	r9, lr
1a00577c:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a005780:	f84c 3b04 	str.w	r3, [ip], #4
1a005784:	ea4f 4222 	mov.w	r2, r2, asr #16
1a005788:	d2de      	bcs.n	1a005748 <quorem+0x40>
1a00578a:	9b00      	ldr	r3, [sp, #0]
1a00578c:	f85a 3003 	ldr.w	r3, [sl, r3]
1a005790:	b98b      	cbnz	r3, 1a0057b6 <quorem+0xae>
1a005792:	9a01      	ldr	r2, [sp, #4]
1a005794:	1f13      	subs	r3, r2, #4
1a005796:	459a      	cmp	sl, r3
1a005798:	d20c      	bcs.n	1a0057b4 <quorem+0xac>
1a00579a:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a00579e:	b94b      	cbnz	r3, 1a0057b4 <quorem+0xac>
1a0057a0:	f1a2 0308 	sub.w	r3, r2, #8
1a0057a4:	e002      	b.n	1a0057ac <quorem+0xa4>
1a0057a6:	681a      	ldr	r2, [r3, #0]
1a0057a8:	3b04      	subs	r3, #4
1a0057aa:	b91a      	cbnz	r2, 1a0057b4 <quorem+0xac>
1a0057ac:	459a      	cmp	sl, r3
1a0057ae:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a0057b2:	d3f8      	bcc.n	1a0057a6 <quorem+0x9e>
1a0057b4:	6107      	str	r7, [r0, #16]
1a0057b6:	4604      	mov	r4, r0
1a0057b8:	f001 fc34 	bl	1a007024 <__mcmp>
1a0057bc:	2800      	cmp	r0, #0
1a0057be:	db2d      	blt.n	1a00581c <quorem+0x114>
1a0057c0:	f108 0801 	add.w	r8, r8, #1
1a0057c4:	4650      	mov	r0, sl
1a0057c6:	2300      	movs	r3, #0
1a0057c8:	f856 1b04 	ldr.w	r1, [r6], #4
1a0057cc:	6805      	ldr	r5, [r0, #0]
1a0057ce:	b28a      	uxth	r2, r1
1a0057d0:	1a9a      	subs	r2, r3, r2
1a0057d2:	0c0b      	lsrs	r3, r1, #16
1a0057d4:	fa12 f285 	uxtah	r2, r2, r5
1a0057d8:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a0057dc:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a0057e0:	b292      	uxth	r2, r2
1a0057e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0057e6:	45b1      	cmp	r9, r6
1a0057e8:	f840 2b04 	str.w	r2, [r0], #4
1a0057ec:	ea4f 4323 	mov.w	r3, r3, asr #16
1a0057f0:	d2ea      	bcs.n	1a0057c8 <quorem+0xc0>
1a0057f2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a0057f6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a0057fa:	b97a      	cbnz	r2, 1a00581c <quorem+0x114>
1a0057fc:	1f1a      	subs	r2, r3, #4
1a0057fe:	4592      	cmp	sl, r2
1a005800:	d20b      	bcs.n	1a00581a <quorem+0x112>
1a005802:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a005806:	b942      	cbnz	r2, 1a00581a <quorem+0x112>
1a005808:	3b08      	subs	r3, #8
1a00580a:	e002      	b.n	1a005812 <quorem+0x10a>
1a00580c:	681a      	ldr	r2, [r3, #0]
1a00580e:	3b04      	subs	r3, #4
1a005810:	b91a      	cbnz	r2, 1a00581a <quorem+0x112>
1a005812:	459a      	cmp	sl, r3
1a005814:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005818:	d3f8      	bcc.n	1a00580c <quorem+0x104>
1a00581a:	6127      	str	r7, [r4, #16]
1a00581c:	4640      	mov	r0, r8
1a00581e:	b003      	add	sp, #12
1a005820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005824:	2000      	movs	r0, #0
1a005826:	b003      	add	sp, #12
1a005828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00582c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005830 <_dtoa_r>:
1a005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005834:	ec57 6b10 	vmov	r6, r7, d0
1a005838:	b097      	sub	sp, #92	; 0x5c
1a00583a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a00583c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a00583e:	9102      	str	r1, [sp, #8]
1a005840:	4682      	mov	sl, r0
1a005842:	920a      	str	r2, [sp, #40]	; 0x28
1a005844:	9307      	str	r3, [sp, #28]
1a005846:	e9cd 6700 	strd	r6, r7, [sp]
1a00584a:	b155      	cbz	r5, 1a005862 <_dtoa_r+0x32>
1a00584c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a00584e:	606a      	str	r2, [r5, #4]
1a005850:	2301      	movs	r3, #1
1a005852:	4093      	lsls	r3, r2
1a005854:	60ab      	str	r3, [r5, #8]
1a005856:	4629      	mov	r1, r5
1a005858:	f001 f9f8 	bl	1a006c4c <_Bfree>
1a00585c:	2300      	movs	r3, #0
1a00585e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a005862:	1e3e      	subs	r6, r7, #0
1a005864:	bfb4      	ite	lt
1a005866:	2301      	movlt	r3, #1
1a005868:	2300      	movge	r3, #0
1a00586a:	6023      	str	r3, [r4, #0]
1a00586c:	4b76      	ldr	r3, [pc, #472]	; (1a005a48 <_dtoa_r+0x218>)
1a00586e:	bfbc      	itt	lt
1a005870:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a005874:	9601      	strlt	r6, [sp, #4]
1a005876:	43b3      	bics	r3, r6
1a005878:	f000 80ae 	beq.w	1a0059d8 <_dtoa_r+0x1a8>
1a00587c:	ed9d 7b00 	vldr	d7, [sp]
1a005880:	2200      	movs	r2, #0
1a005882:	2300      	movs	r3, #0
1a005884:	ec51 0b17 	vmov	r0, r1, d7
1a005888:	ed8d 7b04 	vstr	d7, [sp, #16]
1a00588c:	f7fc fedc 	bl	1a002648 <__aeabi_dcmpeq>
1a005890:	4605      	mov	r5, r0
1a005892:	b178      	cbz	r0, 1a0058b4 <_dtoa_r+0x84>
1a005894:	9a07      	ldr	r2, [sp, #28]
1a005896:	2301      	movs	r3, #1
1a005898:	6013      	str	r3, [r2, #0]
1a00589a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00589c:	2b00      	cmp	r3, #0
1a00589e:	f000 8313 	beq.w	1a005ec8 <_dtoa_r+0x698>
1a0058a2:	4b6a      	ldr	r3, [pc, #424]	; (1a005a4c <_dtoa_r+0x21c>)
1a0058a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0058a6:	6013      	str	r3, [r2, #0]
1a0058a8:	3b01      	subs	r3, #1
1a0058aa:	9303      	str	r3, [sp, #12]
1a0058ac:	9803      	ldr	r0, [sp, #12]
1a0058ae:	b017      	add	sp, #92	; 0x5c
1a0058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0058b4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a0058b8:	aa14      	add	r2, sp, #80	; 0x50
1a0058ba:	a915      	add	r1, sp, #84	; 0x54
1a0058bc:	ec48 7b10 	vmov	d0, r7, r8
1a0058c0:	4650      	mov	r0, sl
1a0058c2:	f001 fc47 	bl	1a007154 <__d2b>
1a0058c6:	0d34      	lsrs	r4, r6, #20
1a0058c8:	4683      	mov	fp, r0
1a0058ca:	f040 809b 	bne.w	1a005a04 <_dtoa_r+0x1d4>
1a0058ce:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a0058d2:	442c      	add	r4, r5
1a0058d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a0058d8:	2b20      	cmp	r3, #32
1a0058da:	f340 83bb 	ble.w	1a006054 <_dtoa_r+0x824>
1a0058de:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a0058e2:	409e      	lsls	r6, r3
1a0058e4:	9b00      	ldr	r3, [sp, #0]
1a0058e6:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a0058ea:	fa23 f000 	lsr.w	r0, r3, r0
1a0058ee:	4330      	orrs	r0, r6
1a0058f0:	f7fc fbc8 	bl	1a002084 <__aeabi_ui2d>
1a0058f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a0058f8:	2101      	movs	r1, #1
1a0058fa:	4602      	mov	r2, r0
1a0058fc:	3c01      	subs	r4, #1
1a0058fe:	910e      	str	r1, [sp, #56]	; 0x38
1a005900:	4610      	mov	r0, r2
1a005902:	4619      	mov	r1, r3
1a005904:	2200      	movs	r2, #0
1a005906:	4b52      	ldr	r3, [pc, #328]	; (1a005a50 <_dtoa_r+0x220>)
1a005908:	f7fc fa7e 	bl	1a001e08 <__aeabi_dsub>
1a00590c:	a348      	add	r3, pc, #288	; (adr r3, 1a005a30 <_dtoa_r+0x200>)
1a00590e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005912:	f7fc fc31 	bl	1a002178 <__aeabi_dmul>
1a005916:	a348      	add	r3, pc, #288	; (adr r3, 1a005a38 <_dtoa_r+0x208>)
1a005918:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00591c:	f7fc fa76 	bl	1a001e0c <__adddf3>
1a005920:	4606      	mov	r6, r0
1a005922:	4620      	mov	r0, r4
1a005924:	460f      	mov	r7, r1
1a005926:	f7fc fbbd 	bl	1a0020a4 <__aeabi_i2d>
1a00592a:	a345      	add	r3, pc, #276	; (adr r3, 1a005a40 <_dtoa_r+0x210>)
1a00592c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005930:	f7fc fc22 	bl	1a002178 <__aeabi_dmul>
1a005934:	4602      	mov	r2, r0
1a005936:	460b      	mov	r3, r1
1a005938:	4630      	mov	r0, r6
1a00593a:	4639      	mov	r1, r7
1a00593c:	f7fc fa66 	bl	1a001e0c <__adddf3>
1a005940:	4606      	mov	r6, r0
1a005942:	460f      	mov	r7, r1
1a005944:	f7fc fec8 	bl	1a0026d8 <__aeabi_d2iz>
1a005948:	2200      	movs	r2, #0
1a00594a:	4681      	mov	r9, r0
1a00594c:	2300      	movs	r3, #0
1a00594e:	4630      	mov	r0, r6
1a005950:	4639      	mov	r1, r7
1a005952:	f7fc fe83 	bl	1a00265c <__aeabi_dcmplt>
1a005956:	2800      	cmp	r0, #0
1a005958:	f040 82a9 	bne.w	1a005eae <_dtoa_r+0x67e>
1a00595c:	1b2c      	subs	r4, r5, r4
1a00595e:	f1b9 0f16 	cmp.w	r9, #22
1a005962:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a005966:	f200 8296 	bhi.w	1a005e96 <_dtoa_r+0x666>
1a00596a:	4b3a      	ldr	r3, [pc, #232]	; (1a005a54 <_dtoa_r+0x224>)
1a00596c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a005970:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005978:	f7fc fe70 	bl	1a00265c <__aeabi_dcmplt>
1a00597c:	2800      	cmp	r0, #0
1a00597e:	d06f      	beq.n	1a005a60 <_dtoa_r+0x230>
1a005980:	2300      	movs	r3, #0
1a005982:	f1b8 0f00 	cmp.w	r8, #0
1a005986:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a00598a:	930d      	str	r3, [sp, #52]	; 0x34
1a00598c:	f2c0 8289 	blt.w	1a005ea2 <_dtoa_r+0x672>
1a005990:	2300      	movs	r3, #0
1a005992:	9308      	str	r3, [sp, #32]
1a005994:	f1b9 0f00 	cmp.w	r9, #0
1a005998:	da68      	bge.n	1a005a6c <_dtoa_r+0x23c>
1a00599a:	9b08      	ldr	r3, [sp, #32]
1a00599c:	f8cd 9018 	str.w	r9, [sp, #24]
1a0059a0:	eba3 0309 	sub.w	r3, r3, r9
1a0059a4:	9308      	str	r3, [sp, #32]
1a0059a6:	f1c9 0300 	rsb	r3, r9, #0
1a0059aa:	930c      	str	r3, [sp, #48]	; 0x30
1a0059ac:	9b02      	ldr	r3, [sp, #8]
1a0059ae:	2b09      	cmp	r3, #9
1a0059b0:	f04f 0900 	mov.w	r9, #0
1a0059b4:	d862      	bhi.n	1a005a7c <_dtoa_r+0x24c>
1a0059b6:	2b05      	cmp	r3, #5
1a0059b8:	f340 834a 	ble.w	1a006050 <_dtoa_r+0x820>
1a0059bc:	3b04      	subs	r3, #4
1a0059be:	9302      	str	r3, [sp, #8]
1a0059c0:	2400      	movs	r4, #0
1a0059c2:	9b02      	ldr	r3, [sp, #8]
1a0059c4:	3b02      	subs	r3, #2
1a0059c6:	2b03      	cmp	r3, #3
1a0059c8:	f200 8641 	bhi.w	1a00664e <_dtoa_r+0xe1e>
1a0059cc:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0059d0:	04630466 	.word	0x04630466
1a0059d4:	0456043b 	.word	0x0456043b
1a0059d8:	9a07      	ldr	r2, [sp, #28]
1a0059da:	f242 730f 	movw	r3, #9999	; 0x270f
1a0059de:	6013      	str	r3, [r2, #0]
1a0059e0:	9b00      	ldr	r3, [sp, #0]
1a0059e2:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a0059e6:	4333      	orrs	r3, r6
1a0059e8:	d118      	bne.n	1a005a1c <_dtoa_r+0x1ec>
1a0059ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0059ec:	2b00      	cmp	r3, #0
1a0059ee:	f000 8625 	beq.w	1a00663c <_dtoa_r+0xe0c>
1a0059f2:	4b19      	ldr	r3, [pc, #100]	; (1a005a58 <_dtoa_r+0x228>)
1a0059f4:	9303      	str	r3, [sp, #12]
1a0059f6:	3308      	adds	r3, #8
1a0059f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0059fa:	9803      	ldr	r0, [sp, #12]
1a0059fc:	6013      	str	r3, [r2, #0]
1a0059fe:	b017      	add	sp, #92	; 0x5c
1a005a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005a04:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a005a08:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a005a0c:	950e      	str	r5, [sp, #56]	; 0x38
1a005a0e:	463a      	mov	r2, r7
1a005a10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a005a14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a005a18:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a005a1a:	e771      	b.n	1a005900 <_dtoa_r+0xd0>
1a005a1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005a1e:	2b00      	cmp	r3, #0
1a005a20:	f040 8400 	bne.w	1a006224 <_dtoa_r+0x9f4>
1a005a24:	4b0d      	ldr	r3, [pc, #52]	; (1a005a5c <_dtoa_r+0x22c>)
1a005a26:	9303      	str	r3, [sp, #12]
1a005a28:	e740      	b.n	1a0058ac <_dtoa_r+0x7c>
1a005a2a:	bf00      	nop
1a005a2c:	f3af 8000 	nop.w
1a005a30:	636f4361 	.word	0x636f4361
1a005a34:	3fd287a7 	.word	0x3fd287a7
1a005a38:	8b60c8b3 	.word	0x8b60c8b3
1a005a3c:	3fc68a28 	.word	0x3fc68a28
1a005a40:	509f79fb 	.word	0x509f79fb
1a005a44:	3fd34413 	.word	0x3fd34413
1a005a48:	7ff00000 	.word	0x7ff00000
1a005a4c:	1a007ed1 	.word	0x1a007ed1
1a005a50:	3ff80000 	.word	0x3ff80000
1a005a54:	1a007f30 	.word	0x1a007f30
1a005a58:	1a007ef8 	.word	0x1a007ef8
1a005a5c:	1a007ef4 	.word	0x1a007ef4
1a005a60:	f1b8 0f00 	cmp.w	r8, #0
1a005a64:	f2c0 84b6 	blt.w	1a0063d4 <_dtoa_r+0xba4>
1a005a68:	900d      	str	r0, [sp, #52]	; 0x34
1a005a6a:	9008      	str	r0, [sp, #32]
1a005a6c:	2300      	movs	r3, #0
1a005a6e:	930c      	str	r3, [sp, #48]	; 0x30
1a005a70:	9b02      	ldr	r3, [sp, #8]
1a005a72:	f8cd 9018 	str.w	r9, [sp, #24]
1a005a76:	2b09      	cmp	r3, #9
1a005a78:	44c8      	add	r8, r9
1a005a7a:	d99c      	bls.n	1a0059b6 <_dtoa_r+0x186>
1a005a7c:	2300      	movs	r3, #0
1a005a7e:	2401      	movs	r4, #1
1a005a80:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a005a84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a005a88:	9302      	str	r3, [sp, #8]
1a005a8a:	9509      	str	r5, [sp, #36]	; 0x24
1a005a8c:	2100      	movs	r1, #0
1a005a8e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005a92:	950f      	str	r5, [sp, #60]	; 0x3c
1a005a94:	4650      	mov	r0, sl
1a005a96:	f001 f8b3 	bl	1a006c00 <_Balloc>
1a005a9a:	2d0e      	cmp	r5, #14
1a005a9c:	9003      	str	r0, [sp, #12]
1a005a9e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a005aa2:	f200 810a 	bhi.w	1a005cba <_dtoa_r+0x48a>
1a005aa6:	2c00      	cmp	r4, #0
1a005aa8:	f000 8107 	beq.w	1a005cba <_dtoa_r+0x48a>
1a005aac:	9906      	ldr	r1, [sp, #24]
1a005aae:	2900      	cmp	r1, #0
1a005ab0:	f340 8466 	ble.w	1a006380 <_dtoa_r+0xb50>
1a005ab4:	4bb1      	ldr	r3, [pc, #708]	; (1a005d7c <_dtoa_r+0x54c>)
1a005ab6:	f001 020f 	and.w	r2, r1, #15
1a005aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005abe:	ed93 7b00 	vldr	d7, [r3]
1a005ac2:	110c      	asrs	r4, r1, #4
1a005ac4:	06e3      	lsls	r3, r4, #27
1a005ac6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005aca:	f140 8406 	bpl.w	1a0062da <_dtoa_r+0xaaa>
1a005ace:	4bac      	ldr	r3, [pc, #688]	; (1a005d80 <_dtoa_r+0x550>)
1a005ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a005ad8:	f7fc fc78 	bl	1a0023cc <__aeabi_ddiv>
1a005adc:	e9cd 0100 	strd	r0, r1, [sp]
1a005ae0:	f004 040f 	and.w	r4, r4, #15
1a005ae4:	2603      	movs	r6, #3
1a005ae6:	b17c      	cbz	r4, 1a005b08 <_dtoa_r+0x2d8>
1a005ae8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005aec:	4da4      	ldr	r5, [pc, #656]	; (1a005d80 <_dtoa_r+0x550>)
1a005aee:	07e7      	lsls	r7, r4, #31
1a005af0:	d504      	bpl.n	1a005afc <_dtoa_r+0x2cc>
1a005af2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005af6:	f7fc fb3f 	bl	1a002178 <__aeabi_dmul>
1a005afa:	3601      	adds	r6, #1
1a005afc:	1064      	asrs	r4, r4, #1
1a005afe:	f105 0508 	add.w	r5, r5, #8
1a005b02:	d1f4      	bne.n	1a005aee <_dtoa_r+0x2be>
1a005b04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a005b08:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005b0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005b10:	f7fc fc5c 	bl	1a0023cc <__aeabi_ddiv>
1a005b14:	e9cd 0100 	strd	r0, r1, [sp]
1a005b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005b1a:	b153      	cbz	r3, 1a005b32 <_dtoa_r+0x302>
1a005b1c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a005b20:	2200      	movs	r2, #0
1a005b22:	4b98      	ldr	r3, [pc, #608]	; (1a005d84 <_dtoa_r+0x554>)
1a005b24:	4620      	mov	r0, r4
1a005b26:	4629      	mov	r1, r5
1a005b28:	f7fc fd98 	bl	1a00265c <__aeabi_dcmplt>
1a005b2c:	2800      	cmp	r0, #0
1a005b2e:	f040 8521 	bne.w	1a006574 <_dtoa_r+0xd44>
1a005b32:	4630      	mov	r0, r6
1a005b34:	f7fc fab6 	bl	1a0020a4 <__aeabi_i2d>
1a005b38:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005b3c:	f7fc fb1c 	bl	1a002178 <__aeabi_dmul>
1a005b40:	4b91      	ldr	r3, [pc, #580]	; (1a005d88 <_dtoa_r+0x558>)
1a005b42:	2200      	movs	r2, #0
1a005b44:	f7fc f962 	bl	1a001e0c <__adddf3>
1a005b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005b4a:	4604      	mov	r4, r0
1a005b4c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a005b50:	2b00      	cmp	r3, #0
1a005b52:	f000 83f9 	beq.w	1a006348 <_dtoa_r+0xb18>
1a005b56:	9b06      	ldr	r3, [sp, #24]
1a005b58:	9312      	str	r3, [sp, #72]	; 0x48
1a005b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005b5c:	9310      	str	r3, [sp, #64]	; 0x40
1a005b5e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005b62:	4639      	mov	r1, r7
1a005b64:	4630      	mov	r0, r6
1a005b66:	f7fc fdb7 	bl	1a0026d8 <__aeabi_d2iz>
1a005b6a:	9000      	str	r0, [sp, #0]
1a005b6c:	f7fc fa9a 	bl	1a0020a4 <__aeabi_i2d>
1a005b70:	4602      	mov	r2, r0
1a005b72:	460b      	mov	r3, r1
1a005b74:	4630      	mov	r0, r6
1a005b76:	4639      	mov	r1, r7
1a005b78:	f7fc f946 	bl	1a001e08 <__aeabi_dsub>
1a005b7c:	4b7f      	ldr	r3, [pc, #508]	; (1a005d7c <_dtoa_r+0x54c>)
1a005b7e:	9a00      	ldr	r2, [sp, #0]
1a005b80:	460f      	mov	r7, r1
1a005b82:	9910      	ldr	r1, [sp, #64]	; 0x40
1a005b84:	4606      	mov	r6, r0
1a005b86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a005b8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a005b8c:	9903      	ldr	r1, [sp, #12]
1a005b8e:	3230      	adds	r2, #48	; 0x30
1a005b90:	e9cd 4500 	strd	r4, r5, [sp]
1a005b94:	b2d5      	uxtb	r5, r2
1a005b96:	1c4c      	adds	r4, r1, #1
1a005b98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a005b9c:	2800      	cmp	r0, #0
1a005b9e:	f000 848d 	beq.w	1a0064bc <_dtoa_r+0xc8c>
1a005ba2:	2000      	movs	r0, #0
1a005ba4:	4979      	ldr	r1, [pc, #484]	; (1a005d8c <_dtoa_r+0x55c>)
1a005ba6:	f7fc fc11 	bl	1a0023cc <__aeabi_ddiv>
1a005baa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005bae:	f7fc f92b 	bl	1a001e08 <__aeabi_dsub>
1a005bb2:	9b03      	ldr	r3, [sp, #12]
1a005bb4:	4632      	mov	r2, r6
1a005bb6:	701d      	strb	r5, [r3, #0]
1a005bb8:	463b      	mov	r3, r7
1a005bba:	e9cd 0100 	strd	r0, r1, [sp]
1a005bbe:	f7fc fd6b 	bl	1a002698 <__aeabi_dcmpgt>
1a005bc2:	2800      	cmp	r0, #0
1a005bc4:	f040 84ca 	bne.w	1a00655c <_dtoa_r+0xd2c>
1a005bc8:	4632      	mov	r2, r6
1a005bca:	463b      	mov	r3, r7
1a005bcc:	2000      	movs	r0, #0
1a005bce:	496d      	ldr	r1, [pc, #436]	; (1a005d84 <_dtoa_r+0x554>)
1a005bd0:	f7fc f91a 	bl	1a001e08 <__aeabi_dsub>
1a005bd4:	4602      	mov	r2, r0
1a005bd6:	460b      	mov	r3, r1
1a005bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005bdc:	f7fc fd5c 	bl	1a002698 <__aeabi_dcmpgt>
1a005be0:	2800      	cmp	r0, #0
1a005be2:	f040 8526 	bne.w	1a006632 <_dtoa_r+0xe02>
1a005be6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005be8:	2b01      	cmp	r3, #1
1a005bea:	d062      	beq.n	1a005cb2 <_dtoa_r+0x482>
1a005bec:	9a03      	ldr	r2, [sp, #12]
1a005bee:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a005bf2:	4413      	add	r3, r2
1a005bf4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a005bf8:	e9dd 8900 	ldrd	r8, r9, [sp]
1a005bfc:	f8cd b000 	str.w	fp, [sp]
1a005c00:	46d3      	mov	fp, sl
1a005c02:	469a      	mov	sl, r3
1a005c04:	e00c      	b.n	1a005c20 <_dtoa_r+0x3f0>
1a005c06:	2000      	movs	r0, #0
1a005c08:	495e      	ldr	r1, [pc, #376]	; (1a005d84 <_dtoa_r+0x554>)
1a005c0a:	f7fc f8fd 	bl	1a001e08 <__aeabi_dsub>
1a005c0e:	4642      	mov	r2, r8
1a005c10:	464b      	mov	r3, r9
1a005c12:	f7fc fd23 	bl	1a00265c <__aeabi_dcmplt>
1a005c16:	2800      	cmp	r0, #0
1a005c18:	f040 84eb 	bne.w	1a0065f2 <_dtoa_r+0xdc2>
1a005c1c:	45a2      	cmp	sl, r4
1a005c1e:	d041      	beq.n	1a005ca4 <_dtoa_r+0x474>
1a005c20:	4640      	mov	r0, r8
1a005c22:	4649      	mov	r1, r9
1a005c24:	2200      	movs	r2, #0
1a005c26:	4b5a      	ldr	r3, [pc, #360]	; (1a005d90 <_dtoa_r+0x560>)
1a005c28:	f7fc faa6 	bl	1a002178 <__aeabi_dmul>
1a005c2c:	2200      	movs	r2, #0
1a005c2e:	4b58      	ldr	r3, [pc, #352]	; (1a005d90 <_dtoa_r+0x560>)
1a005c30:	4680      	mov	r8, r0
1a005c32:	4689      	mov	r9, r1
1a005c34:	4630      	mov	r0, r6
1a005c36:	4639      	mov	r1, r7
1a005c38:	f7fc fa9e 	bl	1a002178 <__aeabi_dmul>
1a005c3c:	460f      	mov	r7, r1
1a005c3e:	4606      	mov	r6, r0
1a005c40:	f7fc fd4a 	bl	1a0026d8 <__aeabi_d2iz>
1a005c44:	4605      	mov	r5, r0
1a005c46:	f7fc fa2d 	bl	1a0020a4 <__aeabi_i2d>
1a005c4a:	4602      	mov	r2, r0
1a005c4c:	460b      	mov	r3, r1
1a005c4e:	4630      	mov	r0, r6
1a005c50:	4639      	mov	r1, r7
1a005c52:	f7fc f8d9 	bl	1a001e08 <__aeabi_dsub>
1a005c56:	3530      	adds	r5, #48	; 0x30
1a005c58:	b2ed      	uxtb	r5, r5
1a005c5a:	4642      	mov	r2, r8
1a005c5c:	464b      	mov	r3, r9
1a005c5e:	f804 5b01 	strb.w	r5, [r4], #1
1a005c62:	4606      	mov	r6, r0
1a005c64:	460f      	mov	r7, r1
1a005c66:	f7fc fcf9 	bl	1a00265c <__aeabi_dcmplt>
1a005c6a:	4632      	mov	r2, r6
1a005c6c:	463b      	mov	r3, r7
1a005c6e:	2800      	cmp	r0, #0
1a005c70:	d0c9      	beq.n	1a005c06 <_dtoa_r+0x3d6>
1a005c72:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005c74:	46da      	mov	sl, fp
1a005c76:	3301      	adds	r3, #1
1a005c78:	f8dd b000 	ldr.w	fp, [sp]
1a005c7c:	9306      	str	r3, [sp, #24]
1a005c7e:	4659      	mov	r1, fp
1a005c80:	4650      	mov	r0, sl
1a005c82:	f000 ffe3 	bl	1a006c4c <_Bfree>
1a005c86:	2300      	movs	r3, #0
1a005c88:	7023      	strb	r3, [r4, #0]
1a005c8a:	9b07      	ldr	r3, [sp, #28]
1a005c8c:	461a      	mov	r2, r3
1a005c8e:	9b06      	ldr	r3, [sp, #24]
1a005c90:	6013      	str	r3, [r2, #0]
1a005c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005c94:	2b00      	cmp	r3, #0
1a005c96:	f43f ae09 	beq.w	1a0058ac <_dtoa_r+0x7c>
1a005c9a:	9803      	ldr	r0, [sp, #12]
1a005c9c:	601c      	str	r4, [r3, #0]
1a005c9e:	b017      	add	sp, #92	; 0x5c
1a005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005ca4:	46da      	mov	sl, fp
1a005ca6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a005caa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a005cae:	f8dd b000 	ldr.w	fp, [sp]
1a005cb2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a005cb6:	e9cd 3400 	strd	r3, r4, [sp]
1a005cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a005cbc:	2b00      	cmp	r3, #0
1a005cbe:	f2c0 80c9 	blt.w	1a005e54 <_dtoa_r+0x624>
1a005cc2:	9a06      	ldr	r2, [sp, #24]
1a005cc4:	2a0e      	cmp	r2, #14
1a005cc6:	f300 80c5 	bgt.w	1a005e54 <_dtoa_r+0x624>
1a005cca:	4b2c      	ldr	r3, [pc, #176]	; (1a005d7c <_dtoa_r+0x54c>)
1a005ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005cd0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a005cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005cd6:	2b00      	cmp	r3, #0
1a005cd8:	da17      	bge.n	1a005d0a <_dtoa_r+0x4da>
1a005cda:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a005cdc:	2f00      	cmp	r7, #0
1a005cde:	dc14      	bgt.n	1a005d0a <_dtoa_r+0x4da>
1a005ce0:	f040 834b 	bne.w	1a00637a <_dtoa_r+0xb4a>
1a005ce4:	2200      	movs	r2, #0
1a005ce6:	4b2b      	ldr	r3, [pc, #172]	; (1a005d94 <_dtoa_r+0x564>)
1a005ce8:	4640      	mov	r0, r8
1a005cea:	4649      	mov	r1, r9
1a005cec:	f7fc fa44 	bl	1a002178 <__aeabi_dmul>
1a005cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005cf4:	f7fc fcc6 	bl	1a002684 <__aeabi_dcmpge>
1a005cf8:	2800      	cmp	r0, #0
1a005cfa:	f000 83be 	beq.w	1a00647a <_dtoa_r+0xc4a>
1a005cfe:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a005d00:	463d      	mov	r5, r7
1a005d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005d04:	9c03      	ldr	r4, [sp, #12]
1a005d06:	43db      	mvns	r3, r3
1a005d08:	e260      	b.n	1a0061cc <_dtoa_r+0x99c>
1a005d0a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a005d0e:	4642      	mov	r2, r8
1a005d10:	464b      	mov	r3, r9
1a005d12:	4620      	mov	r0, r4
1a005d14:	4629      	mov	r1, r5
1a005d16:	f7fc fb59 	bl	1a0023cc <__aeabi_ddiv>
1a005d1a:	f7fc fcdd 	bl	1a0026d8 <__aeabi_d2iz>
1a005d1e:	9000      	str	r0, [sp, #0]
1a005d20:	f7fc f9c0 	bl	1a0020a4 <__aeabi_i2d>
1a005d24:	4642      	mov	r2, r8
1a005d26:	464b      	mov	r3, r9
1a005d28:	f7fc fa26 	bl	1a002178 <__aeabi_dmul>
1a005d2c:	4602      	mov	r2, r0
1a005d2e:	460b      	mov	r3, r1
1a005d30:	4620      	mov	r0, r4
1a005d32:	4629      	mov	r1, r5
1a005d34:	f7fc f868 	bl	1a001e08 <__aeabi_dsub>
1a005d38:	9b00      	ldr	r3, [sp, #0]
1a005d3a:	9c03      	ldr	r4, [sp, #12]
1a005d3c:	9a06      	ldr	r2, [sp, #24]
1a005d3e:	3330      	adds	r3, #48	; 0x30
1a005d40:	f804 3b01 	strb.w	r3, [r4], #1
1a005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005d46:	3201      	adds	r2, #1
1a005d48:	2b01      	cmp	r3, #1
1a005d4a:	4606      	mov	r6, r0
1a005d4c:	460f      	mov	r7, r1
1a005d4e:	9206      	str	r2, [sp, #24]
1a005d50:	d054      	beq.n	1a005dfc <_dtoa_r+0x5cc>
1a005d52:	2200      	movs	r2, #0
1a005d54:	4b0e      	ldr	r3, [pc, #56]	; (1a005d90 <_dtoa_r+0x560>)
1a005d56:	f7fc fa0f 	bl	1a002178 <__aeabi_dmul>
1a005d5a:	2200      	movs	r2, #0
1a005d5c:	2300      	movs	r3, #0
1a005d5e:	4606      	mov	r6, r0
1a005d60:	460f      	mov	r7, r1
1a005d62:	f7fc fc71 	bl	1a002648 <__aeabi_dcmpeq>
1a005d66:	2800      	cmp	r0, #0
1a005d68:	d189      	bne.n	1a005c7e <_dtoa_r+0x44e>
1a005d6a:	f8cd b000 	str.w	fp, [sp]
1a005d6e:	2501      	movs	r5, #1
1a005d70:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a005d74:	f8cd a008 	str.w	sl, [sp, #8]
1a005d78:	e019      	b.n	1a005dae <_dtoa_r+0x57e>
1a005d7a:	bf00      	nop
1a005d7c:	1a007f30 	.word	0x1a007f30
1a005d80:	1a007f08 	.word	0x1a007f08
1a005d84:	3ff00000 	.word	0x3ff00000
1a005d88:	401c0000 	.word	0x401c0000
1a005d8c:	3fe00000 	.word	0x3fe00000
1a005d90:	40240000 	.word	0x40240000
1a005d94:	40140000 	.word	0x40140000
1a005d98:	f7fc f9ee 	bl	1a002178 <__aeabi_dmul>
1a005d9c:	2200      	movs	r2, #0
1a005d9e:	2300      	movs	r3, #0
1a005da0:	4606      	mov	r6, r0
1a005da2:	460f      	mov	r7, r1
1a005da4:	f7fc fc50 	bl	1a002648 <__aeabi_dcmpeq>
1a005da8:	2800      	cmp	r0, #0
1a005daa:	f040 835c 	bne.w	1a006466 <_dtoa_r+0xc36>
1a005dae:	4642      	mov	r2, r8
1a005db0:	464b      	mov	r3, r9
1a005db2:	4630      	mov	r0, r6
1a005db4:	4639      	mov	r1, r7
1a005db6:	f7fc fb09 	bl	1a0023cc <__aeabi_ddiv>
1a005dba:	f7fc fc8d 	bl	1a0026d8 <__aeabi_d2iz>
1a005dbe:	4682      	mov	sl, r0
1a005dc0:	f7fc f970 	bl	1a0020a4 <__aeabi_i2d>
1a005dc4:	4642      	mov	r2, r8
1a005dc6:	464b      	mov	r3, r9
1a005dc8:	f7fc f9d6 	bl	1a002178 <__aeabi_dmul>
1a005dcc:	4602      	mov	r2, r0
1a005dce:	460b      	mov	r3, r1
1a005dd0:	4630      	mov	r0, r6
1a005dd2:	4639      	mov	r1, r7
1a005dd4:	f7fc f818 	bl	1a001e08 <__aeabi_dsub>
1a005dd8:	3501      	adds	r5, #1
1a005dda:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a005dde:	45ab      	cmp	fp, r5
1a005de0:	4606      	mov	r6, r0
1a005de2:	460f      	mov	r7, r1
1a005de4:	f04f 0200 	mov.w	r2, #0
1a005de8:	4ba7      	ldr	r3, [pc, #668]	; (1a006088 <_dtoa_r+0x858>)
1a005dea:	f804 cb01 	strb.w	ip, [r4], #1
1a005dee:	d1d3      	bne.n	1a005d98 <_dtoa_r+0x568>
1a005df0:	f8dd b000 	ldr.w	fp, [sp]
1a005df4:	f8cd a000 	str.w	sl, [sp]
1a005df8:	f8dd a008 	ldr.w	sl, [sp, #8]
1a005dfc:	4632      	mov	r2, r6
1a005dfe:	463b      	mov	r3, r7
1a005e00:	4630      	mov	r0, r6
1a005e02:	4639      	mov	r1, r7
1a005e04:	f7fc f802 	bl	1a001e0c <__adddf3>
1a005e08:	4642      	mov	r2, r8
1a005e0a:	464b      	mov	r3, r9
1a005e0c:	4606      	mov	r6, r0
1a005e0e:	460f      	mov	r7, r1
1a005e10:	f7fc fc42 	bl	1a002698 <__aeabi_dcmpgt>
1a005e14:	b960      	cbnz	r0, 1a005e30 <_dtoa_r+0x600>
1a005e16:	4642      	mov	r2, r8
1a005e18:	464b      	mov	r3, r9
1a005e1a:	4630      	mov	r0, r6
1a005e1c:	4639      	mov	r1, r7
1a005e1e:	f7fc fc13 	bl	1a002648 <__aeabi_dcmpeq>
1a005e22:	2800      	cmp	r0, #0
1a005e24:	f43f af2b 	beq.w	1a005c7e <_dtoa_r+0x44e>
1a005e28:	9b00      	ldr	r3, [sp, #0]
1a005e2a:	07db      	lsls	r3, r3, #31
1a005e2c:	f57f af27 	bpl.w	1a005c7e <_dtoa_r+0x44e>
1a005e30:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005e34:	9a03      	ldr	r2, [sp, #12]
1a005e36:	1e63      	subs	r3, r4, #1
1a005e38:	e004      	b.n	1a005e44 <_dtoa_r+0x614>
1a005e3a:	429a      	cmp	r2, r3
1a005e3c:	f000 83c0 	beq.w	1a0065c0 <_dtoa_r+0xd90>
1a005e40:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a005e44:	2d39      	cmp	r5, #57	; 0x39
1a005e46:	f103 0401 	add.w	r4, r3, #1
1a005e4a:	d0f6      	beq.n	1a005e3a <_dtoa_r+0x60a>
1a005e4c:	1c6a      	adds	r2, r5, #1
1a005e4e:	b2d2      	uxtb	r2, r2
1a005e50:	701a      	strb	r2, [r3, #0]
1a005e52:	e714      	b.n	1a005c7e <_dtoa_r+0x44e>
1a005e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a005e56:	2a00      	cmp	r2, #0
1a005e58:	d03c      	beq.n	1a005ed4 <_dtoa_r+0x6a4>
1a005e5a:	9a02      	ldr	r2, [sp, #8]
1a005e5c:	2a01      	cmp	r2, #1
1a005e5e:	f340 8258 	ble.w	1a006312 <_dtoa_r+0xae2>
1a005e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005e64:	1e5e      	subs	r6, r3, #1
1a005e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005e68:	42b3      	cmp	r3, r6
1a005e6a:	f280 8234 	bge.w	1a0062d6 <_dtoa_r+0xaa6>
1a005e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005e70:	960c      	str	r6, [sp, #48]	; 0x30
1a005e72:	1af3      	subs	r3, r6, r3
1a005e74:	4499      	add	r9, r3
1a005e76:	2600      	movs	r6, #0
1a005e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005e7a:	2b00      	cmp	r3, #0
1a005e7c:	f2c0 82f8 	blt.w	1a006470 <_dtoa_r+0xc40>
1a005e80:	9a08      	ldr	r2, [sp, #32]
1a005e82:	4614      	mov	r4, r2
1a005e84:	441a      	add	r2, r3
1a005e86:	4498      	add	r8, r3
1a005e88:	9208      	str	r2, [sp, #32]
1a005e8a:	2101      	movs	r1, #1
1a005e8c:	4650      	mov	r0, sl
1a005e8e:	f000 ff7d 	bl	1a006d8c <__i2b>
1a005e92:	4605      	mov	r5, r0
1a005e94:	e021      	b.n	1a005eda <_dtoa_r+0x6aa>
1a005e96:	2301      	movs	r3, #1
1a005e98:	f1b8 0f00 	cmp.w	r8, #0
1a005e9c:	930d      	str	r3, [sp, #52]	; 0x34
1a005e9e:	f6bf ad77 	bge.w	1a005990 <_dtoa_r+0x160>
1a005ea2:	f1c4 0301 	rsb	r3, r4, #1
1a005ea6:	9308      	str	r3, [sp, #32]
1a005ea8:	f04f 0800 	mov.w	r8, #0
1a005eac:	e572      	b.n	1a005994 <_dtoa_r+0x164>
1a005eae:	4648      	mov	r0, r9
1a005eb0:	f7fc f8f8 	bl	1a0020a4 <__aeabi_i2d>
1a005eb4:	4632      	mov	r2, r6
1a005eb6:	463b      	mov	r3, r7
1a005eb8:	f7fc fbc6 	bl	1a002648 <__aeabi_dcmpeq>
1a005ebc:	2800      	cmp	r0, #0
1a005ebe:	f47f ad4d 	bne.w	1a00595c <_dtoa_r+0x12c>
1a005ec2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a005ec6:	e549      	b.n	1a00595c <_dtoa_r+0x12c>
1a005ec8:	4b70      	ldr	r3, [pc, #448]	; (1a00608c <_dtoa_r+0x85c>)
1a005eca:	9303      	str	r3, [sp, #12]
1a005ecc:	9803      	ldr	r0, [sp, #12]
1a005ece:	b017      	add	sp, #92	; 0x5c
1a005ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005ed4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a005ed6:	9c08      	ldr	r4, [sp, #32]
1a005ed8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a005eda:	2c00      	cmp	r4, #0
1a005edc:	dd0c      	ble.n	1a005ef8 <_dtoa_r+0x6c8>
1a005ede:	f1b8 0f00 	cmp.w	r8, #0
1a005ee2:	dd09      	ble.n	1a005ef8 <_dtoa_r+0x6c8>
1a005ee4:	4544      	cmp	r4, r8
1a005ee6:	9a08      	ldr	r2, [sp, #32]
1a005ee8:	4623      	mov	r3, r4
1a005eea:	bfa8      	it	ge
1a005eec:	4643      	movge	r3, r8
1a005eee:	1ad2      	subs	r2, r2, r3
1a005ef0:	9208      	str	r2, [sp, #32]
1a005ef2:	1ae4      	subs	r4, r4, r3
1a005ef4:	eba8 0803 	sub.w	r8, r8, r3
1a005ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005efa:	b1d3      	cbz	r3, 1a005f32 <_dtoa_r+0x702>
1a005efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005efe:	2b00      	cmp	r3, #0
1a005f00:	f000 8189 	beq.w	1a006216 <_dtoa_r+0x9e6>
1a005f04:	2e00      	cmp	r6, #0
1a005f06:	dd10      	ble.n	1a005f2a <_dtoa_r+0x6fa>
1a005f08:	4629      	mov	r1, r5
1a005f0a:	4632      	mov	r2, r6
1a005f0c:	4650      	mov	r0, sl
1a005f0e:	f000 ffdf 	bl	1a006ed0 <__pow5mult>
1a005f12:	465a      	mov	r2, fp
1a005f14:	4601      	mov	r1, r0
1a005f16:	4605      	mov	r5, r0
1a005f18:	4650      	mov	r0, sl
1a005f1a:	f000 ff41 	bl	1a006da0 <__multiply>
1a005f1e:	4659      	mov	r1, fp
1a005f20:	4607      	mov	r7, r0
1a005f22:	4650      	mov	r0, sl
1a005f24:	f000 fe92 	bl	1a006c4c <_Bfree>
1a005f28:	46bb      	mov	fp, r7
1a005f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005f2c:	1b9a      	subs	r2, r3, r6
1a005f2e:	f040 8173 	bne.w	1a006218 <_dtoa_r+0x9e8>
1a005f32:	2101      	movs	r1, #1
1a005f34:	4650      	mov	r0, sl
1a005f36:	f000 ff29 	bl	1a006d8c <__i2b>
1a005f3a:	f1b9 0f00 	cmp.w	r9, #0
1a005f3e:	4607      	mov	r7, r0
1a005f40:	f300 808e 	bgt.w	1a006060 <_dtoa_r+0x830>
1a005f44:	9b02      	ldr	r3, [sp, #8]
1a005f46:	2b01      	cmp	r3, #1
1a005f48:	f340 8171 	ble.w	1a00622e <_dtoa_r+0x9fe>
1a005f4c:	2600      	movs	r6, #0
1a005f4e:	2001      	movs	r0, #1
1a005f50:	f1b9 0f00 	cmp.w	r9, #0
1a005f54:	f040 808f 	bne.w	1a006076 <_dtoa_r+0x846>
1a005f58:	4440      	add	r0, r8
1a005f5a:	f010 001f 	ands.w	r0, r0, #31
1a005f5e:	d075      	beq.n	1a00604c <_dtoa_r+0x81c>
1a005f60:	f1c0 0320 	rsb	r3, r0, #32
1a005f64:	2b04      	cmp	r3, #4
1a005f66:	f340 836d 	ble.w	1a006644 <_dtoa_r+0xe14>
1a005f6a:	f1c0 001c 	rsb	r0, r0, #28
1a005f6e:	9b08      	ldr	r3, [sp, #32]
1a005f70:	4403      	add	r3, r0
1a005f72:	9308      	str	r3, [sp, #32]
1a005f74:	4404      	add	r4, r0
1a005f76:	4480      	add	r8, r0
1a005f78:	9b08      	ldr	r3, [sp, #32]
1a005f7a:	2b00      	cmp	r3, #0
1a005f7c:	dd05      	ble.n	1a005f8a <_dtoa_r+0x75a>
1a005f7e:	4659      	mov	r1, fp
1a005f80:	461a      	mov	r2, r3
1a005f82:	4650      	mov	r0, sl
1a005f84:	f000 fff4 	bl	1a006f70 <__lshift>
1a005f88:	4683      	mov	fp, r0
1a005f8a:	f1b8 0f00 	cmp.w	r8, #0
1a005f8e:	dd05      	ble.n	1a005f9c <_dtoa_r+0x76c>
1a005f90:	4639      	mov	r1, r7
1a005f92:	4642      	mov	r2, r8
1a005f94:	4650      	mov	r0, sl
1a005f96:	f000 ffeb 	bl	1a006f70 <__lshift>
1a005f9a:	4607      	mov	r7, r0
1a005f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005f9e:	2b00      	cmp	r3, #0
1a005fa0:	f040 811e 	bne.w	1a0061e0 <_dtoa_r+0x9b0>
1a005fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005fa6:	2b00      	cmp	r3, #0
1a005fa8:	f340 80f5 	ble.w	1a006196 <_dtoa_r+0x966>
1a005fac:	9b06      	ldr	r3, [sp, #24]
1a005fae:	3301      	adds	r3, #1
1a005fb0:	9306      	str	r3, [sp, #24]
1a005fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005fb4:	2b00      	cmp	r3, #0
1a005fb6:	d177      	bne.n	1a0060a8 <_dtoa_r+0x878>
1a005fb8:	9c03      	ldr	r4, [sp, #12]
1a005fba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a005fbe:	2601      	movs	r6, #1
1a005fc0:	e003      	b.n	1a005fca <_dtoa_r+0x79a>
1a005fc2:	f000 fe4d 	bl	1a006c60 <__multadd>
1a005fc6:	3601      	adds	r6, #1
1a005fc8:	4683      	mov	fp, r0
1a005fca:	4639      	mov	r1, r7
1a005fcc:	4658      	mov	r0, fp
1a005fce:	f7ff fb9b 	bl	1a005708 <quorem>
1a005fd2:	4546      	cmp	r6, r8
1a005fd4:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a005fd8:	f804 9b01 	strb.w	r9, [r4], #1
1a005fdc:	f04f 0300 	mov.w	r3, #0
1a005fe0:	f04f 020a 	mov.w	r2, #10
1a005fe4:	4659      	mov	r1, fp
1a005fe6:	4650      	mov	r0, sl
1a005fe8:	dbeb      	blt.n	1a005fc2 <_dtoa_r+0x792>
1a005fea:	2300      	movs	r3, #0
1a005fec:	9300      	str	r3, [sp, #0]
1a005fee:	4659      	mov	r1, fp
1a005ff0:	2201      	movs	r2, #1
1a005ff2:	4650      	mov	r0, sl
1a005ff4:	f000 ffbc 	bl	1a006f70 <__lshift>
1a005ff8:	4639      	mov	r1, r7
1a005ffa:	4683      	mov	fp, r0
1a005ffc:	f001 f812 	bl	1a007024 <__mcmp>
1a006000:	2800      	cmp	r0, #0
1a006002:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a006006:	f340 816f 	ble.w	1a0062e8 <_dtoa_r+0xab8>
1a00600a:	1e63      	subs	r3, r4, #1
1a00600c:	9903      	ldr	r1, [sp, #12]
1a00600e:	e004      	b.n	1a00601a <_dtoa_r+0x7ea>
1a006010:	4299      	cmp	r1, r3
1a006012:	f000 8177 	beq.w	1a006304 <_dtoa_r+0xad4>
1a006016:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00601a:	2a39      	cmp	r2, #57	; 0x39
1a00601c:	f103 0401 	add.w	r4, r3, #1
1a006020:	d0f6      	beq.n	1a006010 <_dtoa_r+0x7e0>
1a006022:	3201      	adds	r2, #1
1a006024:	701a      	strb	r2, [r3, #0]
1a006026:	4639      	mov	r1, r7
1a006028:	4650      	mov	r0, sl
1a00602a:	f000 fe0f 	bl	1a006c4c <_Bfree>
1a00602e:	2d00      	cmp	r5, #0
1a006030:	f43f ae25 	beq.w	1a005c7e <_dtoa_r+0x44e>
1a006034:	9900      	ldr	r1, [sp, #0]
1a006036:	b121      	cbz	r1, 1a006042 <_dtoa_r+0x812>
1a006038:	42a9      	cmp	r1, r5
1a00603a:	d002      	beq.n	1a006042 <_dtoa_r+0x812>
1a00603c:	4650      	mov	r0, sl
1a00603e:	f000 fe05 	bl	1a006c4c <_Bfree>
1a006042:	4629      	mov	r1, r5
1a006044:	4650      	mov	r0, sl
1a006046:	f000 fe01 	bl	1a006c4c <_Bfree>
1a00604a:	e618      	b.n	1a005c7e <_dtoa_r+0x44e>
1a00604c:	201c      	movs	r0, #28
1a00604e:	e78e      	b.n	1a005f6e <_dtoa_r+0x73e>
1a006050:	2401      	movs	r4, #1
1a006052:	e4b6      	b.n	1a0059c2 <_dtoa_r+0x192>
1a006054:	f1c3 0620 	rsb	r6, r3, #32
1a006058:	9b00      	ldr	r3, [sp, #0]
1a00605a:	fa03 f006 	lsl.w	r0, r3, r6
1a00605e:	e447      	b.n	1a0058f0 <_dtoa_r+0xc0>
1a006060:	4601      	mov	r1, r0
1a006062:	464a      	mov	r2, r9
1a006064:	4650      	mov	r0, sl
1a006066:	f000 ff33 	bl	1a006ed0 <__pow5mult>
1a00606a:	9b02      	ldr	r3, [sp, #8]
1a00606c:	2b01      	cmp	r3, #1
1a00606e:	4607      	mov	r7, r0
1a006070:	f340 81b2 	ble.w	1a0063d8 <_dtoa_r+0xba8>
1a006074:	2600      	movs	r6, #0
1a006076:	693b      	ldr	r3, [r7, #16]
1a006078:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00607c:	6918      	ldr	r0, [r3, #16]
1a00607e:	f000 fe35 	bl	1a006cec <__hi0bits>
1a006082:	f1c0 0020 	rsb	r0, r0, #32
1a006086:	e767      	b.n	1a005f58 <_dtoa_r+0x728>
1a006088:	40240000 	.word	0x40240000
1a00608c:	1a007ed0 	.word	0x1a007ed0
1a006090:	4629      	mov	r1, r5
1a006092:	2300      	movs	r3, #0
1a006094:	220a      	movs	r2, #10
1a006096:	4650      	mov	r0, sl
1a006098:	f000 fde2 	bl	1a006c60 <__multadd>
1a00609c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00609e:	2b00      	cmp	r3, #0
1a0060a0:	4605      	mov	r5, r0
1a0060a2:	f340 82c1 	ble.w	1a006628 <_dtoa_r+0xdf8>
1a0060a6:	9309      	str	r3, [sp, #36]	; 0x24
1a0060a8:	2c00      	cmp	r4, #0
1a0060aa:	f300 810d 	bgt.w	1a0062c8 <_dtoa_r+0xa98>
1a0060ae:	2e00      	cmp	r6, #0
1a0060b0:	f040 81c5 	bne.w	1a00643e <_dtoa_r+0xc0e>
1a0060b4:	46a8      	mov	r8, r5
1a0060b6:	9b00      	ldr	r3, [sp, #0]
1a0060b8:	9902      	ldr	r1, [sp, #8]
1a0060ba:	9e03      	ldr	r6, [sp, #12]
1a0060bc:	f003 0201 	and.w	r2, r3, #1
1a0060c0:	920b      	str	r2, [sp, #44]	; 0x2c
1a0060c2:	430a      	orrs	r2, r1
1a0060c4:	920a      	str	r2, [sp, #40]	; 0x28
1a0060c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0060c8:	1e73      	subs	r3, r6, #1
1a0060ca:	441a      	add	r2, r3
1a0060cc:	9209      	str	r2, [sp, #36]	; 0x24
1a0060ce:	463c      	mov	r4, r7
1a0060d0:	4621      	mov	r1, r4
1a0060d2:	4658      	mov	r0, fp
1a0060d4:	f7ff fb18 	bl	1a005708 <quorem>
1a0060d8:	4629      	mov	r1, r5
1a0060da:	9000      	str	r0, [sp, #0]
1a0060dc:	4658      	mov	r0, fp
1a0060de:	f000 ffa1 	bl	1a007024 <__mcmp>
1a0060e2:	4642      	mov	r2, r8
1a0060e4:	4607      	mov	r7, r0
1a0060e6:	4621      	mov	r1, r4
1a0060e8:	4650      	mov	r0, sl
1a0060ea:	f000 ffb7 	bl	1a00705c <__mdiff>
1a0060ee:	9b00      	ldr	r3, [sp, #0]
1a0060f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a0060f4:	68c3      	ldr	r3, [r0, #12]
1a0060f6:	4681      	mov	r9, r0
1a0060f8:	2b00      	cmp	r3, #0
1a0060fa:	d13e      	bne.n	1a00617a <_dtoa_r+0x94a>
1a0060fc:	4601      	mov	r1, r0
1a0060fe:	4658      	mov	r0, fp
1a006100:	9208      	str	r2, [sp, #32]
1a006102:	f000 ff8f 	bl	1a007024 <__mcmp>
1a006106:	4649      	mov	r1, r9
1a006108:	9004      	str	r0, [sp, #16]
1a00610a:	4650      	mov	r0, sl
1a00610c:	f000 fd9e 	bl	1a006c4c <_Bfree>
1a006110:	9b04      	ldr	r3, [sp, #16]
1a006112:	9a08      	ldr	r2, [sp, #32]
1a006114:	b91b      	cbnz	r3, 1a00611e <_dtoa_r+0x8ee>
1a006116:	990a      	ldr	r1, [sp, #40]	; 0x28
1a006118:	2900      	cmp	r1, #0
1a00611a:	f000 8271 	beq.w	1a006600 <_dtoa_r+0xdd0>
1a00611e:	2f00      	cmp	r7, #0
1a006120:	f106 0901 	add.w	r9, r6, #1
1a006124:	f2c0 816e 	blt.w	1a006404 <_dtoa_r+0xbd4>
1a006128:	9902      	ldr	r1, [sp, #8]
1a00612a:	430f      	orrs	r7, r1
1a00612c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00612e:	4339      	orrs	r1, r7
1a006130:	f000 8168 	beq.w	1a006404 <_dtoa_r+0xbd4>
1a006134:	2b00      	cmp	r3, #0
1a006136:	f300 81a2 	bgt.w	1a00647e <_dtoa_r+0xc4e>
1a00613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00613c:	7032      	strb	r2, [r6, #0]
1a00613e:	42b3      	cmp	r3, r6
1a006140:	f000 81a9 	beq.w	1a006496 <_dtoa_r+0xc66>
1a006144:	4659      	mov	r1, fp
1a006146:	2300      	movs	r3, #0
1a006148:	220a      	movs	r2, #10
1a00614a:	4650      	mov	r0, sl
1a00614c:	f000 fd88 	bl	1a006c60 <__multadd>
1a006150:	4545      	cmp	r5, r8
1a006152:	4683      	mov	fp, r0
1a006154:	4629      	mov	r1, r5
1a006156:	f04f 0300 	mov.w	r3, #0
1a00615a:	f04f 020a 	mov.w	r2, #10
1a00615e:	4650      	mov	r0, sl
1a006160:	d013      	beq.n	1a00618a <_dtoa_r+0x95a>
1a006162:	f000 fd7d 	bl	1a006c60 <__multadd>
1a006166:	4641      	mov	r1, r8
1a006168:	4605      	mov	r5, r0
1a00616a:	2300      	movs	r3, #0
1a00616c:	220a      	movs	r2, #10
1a00616e:	4650      	mov	r0, sl
1a006170:	f000 fd76 	bl	1a006c60 <__multadd>
1a006174:	464e      	mov	r6, r9
1a006176:	4680      	mov	r8, r0
1a006178:	e7aa      	b.n	1a0060d0 <_dtoa_r+0x8a0>
1a00617a:	4601      	mov	r1, r0
1a00617c:	4650      	mov	r0, sl
1a00617e:	9204      	str	r2, [sp, #16]
1a006180:	f000 fd64 	bl	1a006c4c <_Bfree>
1a006184:	2301      	movs	r3, #1
1a006186:	9a04      	ldr	r2, [sp, #16]
1a006188:	e7c9      	b.n	1a00611e <_dtoa_r+0x8ee>
1a00618a:	f000 fd69 	bl	1a006c60 <__multadd>
1a00618e:	464e      	mov	r6, r9
1a006190:	4605      	mov	r5, r0
1a006192:	4680      	mov	r8, r0
1a006194:	e79c      	b.n	1a0060d0 <_dtoa_r+0x8a0>
1a006196:	9b02      	ldr	r3, [sp, #8]
1a006198:	2b02      	cmp	r3, #2
1a00619a:	f340 8082 	ble.w	1a0062a2 <_dtoa_r+0xa72>
1a00619e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0061a0:	2b00      	cmp	r3, #0
1a0061a2:	f47f adae 	bne.w	1a005d02 <_dtoa_r+0x4d2>
1a0061a6:	4639      	mov	r1, r7
1a0061a8:	2205      	movs	r2, #5
1a0061aa:	4650      	mov	r0, sl
1a0061ac:	f000 fd58 	bl	1a006c60 <__multadd>
1a0061b0:	4601      	mov	r1, r0
1a0061b2:	4607      	mov	r7, r0
1a0061b4:	4658      	mov	r0, fp
1a0061b6:	f000 ff35 	bl	1a007024 <__mcmp>
1a0061ba:	2800      	cmp	r0, #0
1a0061bc:	f77f ada1 	ble.w	1a005d02 <_dtoa_r+0x4d2>
1a0061c0:	9c03      	ldr	r4, [sp, #12]
1a0061c2:	9b06      	ldr	r3, [sp, #24]
1a0061c4:	2231      	movs	r2, #49	; 0x31
1a0061c6:	f804 2b01 	strb.w	r2, [r4], #1
1a0061ca:	3301      	adds	r3, #1
1a0061cc:	3301      	adds	r3, #1
1a0061ce:	4639      	mov	r1, r7
1a0061d0:	4650      	mov	r0, sl
1a0061d2:	9306      	str	r3, [sp, #24]
1a0061d4:	f000 fd3a 	bl	1a006c4c <_Bfree>
1a0061d8:	2d00      	cmp	r5, #0
1a0061da:	f47f af32 	bne.w	1a006042 <_dtoa_r+0x812>
1a0061de:	e54e      	b.n	1a005c7e <_dtoa_r+0x44e>
1a0061e0:	4639      	mov	r1, r7
1a0061e2:	4658      	mov	r0, fp
1a0061e4:	f000 ff1e 	bl	1a007024 <__mcmp>
1a0061e8:	2800      	cmp	r0, #0
1a0061ea:	f6bf aedb 	bge.w	1a005fa4 <_dtoa_r+0x774>
1a0061ee:	4659      	mov	r1, fp
1a0061f0:	2300      	movs	r3, #0
1a0061f2:	220a      	movs	r2, #10
1a0061f4:	4650      	mov	r0, sl
1a0061f6:	f000 fd33 	bl	1a006c60 <__multadd>
1a0061fa:	9b06      	ldr	r3, [sp, #24]
1a0061fc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a006200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006202:	4683      	mov	fp, r0
1a006204:	2b00      	cmp	r3, #0
1a006206:	f47f af43 	bne.w	1a006090 <_dtoa_r+0x860>
1a00620a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00620c:	2b00      	cmp	r3, #0
1a00620e:	f340 8202 	ble.w	1a006616 <_dtoa_r+0xde6>
1a006212:	9309      	str	r3, [sp, #36]	; 0x24
1a006214:	e6d0      	b.n	1a005fb8 <_dtoa_r+0x788>
1a006216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006218:	4659      	mov	r1, fp
1a00621a:	4650      	mov	r0, sl
1a00621c:	f000 fe58 	bl	1a006ed0 <__pow5mult>
1a006220:	4683      	mov	fp, r0
1a006222:	e686      	b.n	1a005f32 <_dtoa_r+0x702>
1a006224:	4b9f      	ldr	r3, [pc, #636]	; (1a0064a4 <_dtoa_r+0xc74>)
1a006226:	9303      	str	r3, [sp, #12]
1a006228:	3303      	adds	r3, #3
1a00622a:	f7ff bbe5 	b.w	1a0059f8 <_dtoa_r+0x1c8>
1a00622e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a006232:	2900      	cmp	r1, #0
1a006234:	f47f ae8a 	bne.w	1a005f4c <_dtoa_r+0x71c>
1a006238:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00623c:	2b00      	cmp	r3, #0
1a00623e:	f000 80d5 	beq.w	1a0063ec <_dtoa_r+0xbbc>
1a006242:	9e00      	ldr	r6, [sp, #0]
1a006244:	e683      	b.n	1a005f4e <_dtoa_r+0x71e>
1a006246:	2301      	movs	r3, #1
1a006248:	930b      	str	r3, [sp, #44]	; 0x2c
1a00624a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00624c:	2800      	cmp	r0, #0
1a00624e:	dd46      	ble.n	1a0062de <_dtoa_r+0xaae>
1a006250:	900f      	str	r0, [sp, #60]	; 0x3c
1a006252:	9009      	str	r0, [sp, #36]	; 0x24
1a006254:	2100      	movs	r1, #0
1a006256:	2817      	cmp	r0, #23
1a006258:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00625c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00625e:	f77f ac19 	ble.w	1a005a94 <_dtoa_r+0x264>
1a006262:	2201      	movs	r2, #1
1a006264:	2304      	movs	r3, #4
1a006266:	005b      	lsls	r3, r3, #1
1a006268:	f103 0614 	add.w	r6, r3, #20
1a00626c:	42b0      	cmp	r0, r6
1a00626e:	4611      	mov	r1, r2
1a006270:	f102 0201 	add.w	r2, r2, #1
1a006274:	d2f7      	bcs.n	1a006266 <_dtoa_r+0xa36>
1a006276:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00627a:	e40b      	b.n	1a005a94 <_dtoa_r+0x264>
1a00627c:	2301      	movs	r3, #1
1a00627e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006282:	9a06      	ldr	r2, [sp, #24]
1a006284:	4413      	add	r3, r2
1a006286:	930f      	str	r3, [sp, #60]	; 0x3c
1a006288:	3301      	adds	r3, #1
1a00628a:	2b01      	cmp	r3, #1
1a00628c:	4618      	mov	r0, r3
1a00628e:	9309      	str	r3, [sp, #36]	; 0x24
1a006290:	bfb8      	it	lt
1a006292:	2001      	movlt	r0, #1
1a006294:	e7de      	b.n	1a006254 <_dtoa_r+0xa24>
1a006296:	2300      	movs	r3, #0
1a006298:	930b      	str	r3, [sp, #44]	; 0x2c
1a00629a:	e7f1      	b.n	1a006280 <_dtoa_r+0xa50>
1a00629c:	2300      	movs	r3, #0
1a00629e:	930b      	str	r3, [sp, #44]	; 0x2c
1a0062a0:	e7d3      	b.n	1a00624a <_dtoa_r+0xa1a>
1a0062a2:	9b06      	ldr	r3, [sp, #24]
1a0062a4:	3301      	adds	r3, #1
1a0062a6:	9306      	str	r3, [sp, #24]
1a0062a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0062aa:	2b00      	cmp	r3, #0
1a0062ac:	f47f aefc 	bne.w	1a0060a8 <_dtoa_r+0x878>
1a0062b0:	4639      	mov	r1, r7
1a0062b2:	4658      	mov	r0, fp
1a0062b4:	f7ff fa28 	bl	1a005708 <quorem>
1a0062b8:	9c03      	ldr	r4, [sp, #12]
1a0062ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0062be:	2300      	movs	r3, #0
1a0062c0:	f804 9b01 	strb.w	r9, [r4], #1
1a0062c4:	9300      	str	r3, [sp, #0]
1a0062c6:	e692      	b.n	1a005fee <_dtoa_r+0x7be>
1a0062c8:	4629      	mov	r1, r5
1a0062ca:	4622      	mov	r2, r4
1a0062cc:	4650      	mov	r0, sl
1a0062ce:	f000 fe4f 	bl	1a006f70 <__lshift>
1a0062d2:	4605      	mov	r5, r0
1a0062d4:	e6eb      	b.n	1a0060ae <_dtoa_r+0x87e>
1a0062d6:	1b9e      	subs	r6, r3, r6
1a0062d8:	e5ce      	b.n	1a005e78 <_dtoa_r+0x648>
1a0062da:	2602      	movs	r6, #2
1a0062dc:	e403      	b.n	1a005ae6 <_dtoa_r+0x2b6>
1a0062de:	2501      	movs	r5, #1
1a0062e0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a0062e4:	f7ff bbd2 	b.w	1a005a8c <_dtoa_r+0x25c>
1a0062e8:	d103      	bne.n	1a0062f2 <_dtoa_r+0xac2>
1a0062ea:	f019 0f01 	tst.w	r9, #1
1a0062ee:	f47f ae8c 	bne.w	1a00600a <_dtoa_r+0x7da>
1a0062f2:	1e63      	subs	r3, r4, #1
1a0062f4:	e001      	b.n	1a0062fa <_dtoa_r+0xaca>
1a0062f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0062fa:	2a30      	cmp	r2, #48	; 0x30
1a0062fc:	f103 0401 	add.w	r4, r3, #1
1a006300:	d0f9      	beq.n	1a0062f6 <_dtoa_r+0xac6>
1a006302:	e690      	b.n	1a006026 <_dtoa_r+0x7f6>
1a006304:	9a06      	ldr	r2, [sp, #24]
1a006306:	3201      	adds	r2, #1
1a006308:	9206      	str	r2, [sp, #24]
1a00630a:	9a03      	ldr	r2, [sp, #12]
1a00630c:	2331      	movs	r3, #49	; 0x31
1a00630e:	7013      	strb	r3, [r2, #0]
1a006310:	e689      	b.n	1a006026 <_dtoa_r+0x7f6>
1a006312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a006314:	2a00      	cmp	r2, #0
1a006316:	f000 8126 	beq.w	1a006566 <_dtoa_r+0xd36>
1a00631a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00631e:	9a08      	ldr	r2, [sp, #32]
1a006320:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006322:	4614      	mov	r4, r2
1a006324:	441a      	add	r2, r3
1a006326:	4498      	add	r8, r3
1a006328:	9208      	str	r2, [sp, #32]
1a00632a:	e5ae      	b.n	1a005e8a <_dtoa_r+0x65a>
1a00632c:	4630      	mov	r0, r6
1a00632e:	f7fb feb9 	bl	1a0020a4 <__aeabi_i2d>
1a006332:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006336:	f7fb ff1f 	bl	1a002178 <__aeabi_dmul>
1a00633a:	2200      	movs	r2, #0
1a00633c:	4b5a      	ldr	r3, [pc, #360]	; (1a0064a8 <_dtoa_r+0xc78>)
1a00633e:	f7fb fd65 	bl	1a001e0c <__adddf3>
1a006342:	4604      	mov	r4, r0
1a006344:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006348:	2200      	movs	r2, #0
1a00634a:	4b58      	ldr	r3, [pc, #352]	; (1a0064ac <_dtoa_r+0xc7c>)
1a00634c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006350:	f7fb fd5a 	bl	1a001e08 <__aeabi_dsub>
1a006354:	4622      	mov	r2, r4
1a006356:	462b      	mov	r3, r5
1a006358:	4606      	mov	r6, r0
1a00635a:	460f      	mov	r7, r1
1a00635c:	f7fc f99c 	bl	1a002698 <__aeabi_dcmpgt>
1a006360:	2800      	cmp	r0, #0
1a006362:	f040 8089 	bne.w	1a006478 <_dtoa_r+0xc48>
1a006366:	4622      	mov	r2, r4
1a006368:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a00636c:	4630      	mov	r0, r6
1a00636e:	4639      	mov	r1, r7
1a006370:	f7fc f974 	bl	1a00265c <__aeabi_dcmplt>
1a006374:	2800      	cmp	r0, #0
1a006376:	f43f ac9c 	beq.w	1a005cb2 <_dtoa_r+0x482>
1a00637a:	2700      	movs	r7, #0
1a00637c:	463d      	mov	r5, r7
1a00637e:	e4c0      	b.n	1a005d02 <_dtoa_r+0x4d2>
1a006380:	f000 80f5 	beq.w	1a00656e <_dtoa_r+0xd3e>
1a006384:	9b06      	ldr	r3, [sp, #24]
1a006386:	425c      	negs	r4, r3
1a006388:	4b49      	ldr	r3, [pc, #292]	; (1a0064b0 <_dtoa_r+0xc80>)
1a00638a:	f004 020f 	and.w	r2, r4, #15
1a00638e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a006392:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00639a:	f7fb feed 	bl	1a002178 <__aeabi_dmul>
1a00639e:	1124      	asrs	r4, r4, #4
1a0063a0:	e9cd 0100 	strd	r0, r1, [sp]
1a0063a4:	f000 80e3 	beq.w	1a00656e <_dtoa_r+0xd3e>
1a0063a8:	4d42      	ldr	r5, [pc, #264]	; (1a0064b4 <_dtoa_r+0xc84>)
1a0063aa:	2300      	movs	r3, #0
1a0063ac:	2602      	movs	r6, #2
1a0063ae:	07e2      	lsls	r2, r4, #31
1a0063b0:	d505      	bpl.n	1a0063be <_dtoa_r+0xb8e>
1a0063b2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0063b6:	f7fb fedf 	bl	1a002178 <__aeabi_dmul>
1a0063ba:	3601      	adds	r6, #1
1a0063bc:	2301      	movs	r3, #1
1a0063be:	1064      	asrs	r4, r4, #1
1a0063c0:	f105 0508 	add.w	r5, r5, #8
1a0063c4:	d1f3      	bne.n	1a0063ae <_dtoa_r+0xb7e>
1a0063c6:	2b00      	cmp	r3, #0
1a0063c8:	f43f aba6 	beq.w	1a005b18 <_dtoa_r+0x2e8>
1a0063cc:	e9cd 0100 	strd	r0, r1, [sp]
1a0063d0:	f7ff bba2 	b.w	1a005b18 <_dtoa_r+0x2e8>
1a0063d4:	900d      	str	r0, [sp, #52]	; 0x34
1a0063d6:	e564      	b.n	1a005ea2 <_dtoa_r+0x672>
1a0063d8:	e9dd 1200 	ldrd	r1, r2, [sp]
1a0063dc:	2900      	cmp	r1, #0
1a0063de:	f47f ae49 	bne.w	1a006074 <_dtoa_r+0x844>
1a0063e2:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a0063e6:	2b00      	cmp	r3, #0
1a0063e8:	f47f ae44 	bne.w	1a006074 <_dtoa_r+0x844>
1a0063ec:	4e32      	ldr	r6, [pc, #200]	; (1a0064b8 <_dtoa_r+0xc88>)
1a0063ee:	4016      	ands	r6, r2
1a0063f0:	2e00      	cmp	r6, #0
1a0063f2:	f43f adac 	beq.w	1a005f4e <_dtoa_r+0x71e>
1a0063f6:	9b08      	ldr	r3, [sp, #32]
1a0063f8:	3301      	adds	r3, #1
1a0063fa:	9308      	str	r3, [sp, #32]
1a0063fc:	f108 0801 	add.w	r8, r8, #1
1a006400:	2601      	movs	r6, #1
1a006402:	e5a4      	b.n	1a005f4e <_dtoa_r+0x71e>
1a006404:	2b00      	cmp	r3, #0
1a006406:	4627      	mov	r7, r4
1a006408:	464c      	mov	r4, r9
1a00640a:	4691      	mov	r9, r2
1a00640c:	dd12      	ble.n	1a006434 <_dtoa_r+0xc04>
1a00640e:	4659      	mov	r1, fp
1a006410:	2201      	movs	r2, #1
1a006412:	4650      	mov	r0, sl
1a006414:	f000 fdac 	bl	1a006f70 <__lshift>
1a006418:	4639      	mov	r1, r7
1a00641a:	4683      	mov	fp, r0
1a00641c:	f000 fe02 	bl	1a007024 <__mcmp>
1a006420:	2800      	cmp	r0, #0
1a006422:	f340 80df 	ble.w	1a0065e4 <_dtoa_r+0xdb4>
1a006426:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00642a:	f000 80d0 	beq.w	1a0065ce <_dtoa_r+0xd9e>
1a00642e:	9b00      	ldr	r3, [sp, #0]
1a006430:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a006434:	9500      	str	r5, [sp, #0]
1a006436:	f886 9000 	strb.w	r9, [r6]
1a00643a:	4645      	mov	r5, r8
1a00643c:	e5f3      	b.n	1a006026 <_dtoa_r+0x7f6>
1a00643e:	6869      	ldr	r1, [r5, #4]
1a006440:	4650      	mov	r0, sl
1a006442:	f000 fbdd 	bl	1a006c00 <_Balloc>
1a006446:	692b      	ldr	r3, [r5, #16]
1a006448:	3302      	adds	r3, #2
1a00644a:	009a      	lsls	r2, r3, #2
1a00644c:	4604      	mov	r4, r0
1a00644e:	f105 010c 	add.w	r1, r5, #12
1a006452:	300c      	adds	r0, #12
1a006454:	f7fd f8de 	bl	1a003614 <memcpy>
1a006458:	4621      	mov	r1, r4
1a00645a:	2201      	movs	r2, #1
1a00645c:	4650      	mov	r0, sl
1a00645e:	f000 fd87 	bl	1a006f70 <__lshift>
1a006462:	4680      	mov	r8, r0
1a006464:	e627      	b.n	1a0060b6 <_dtoa_r+0x886>
1a006466:	f8dd b000 	ldr.w	fp, [sp]
1a00646a:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00646e:	e406      	b.n	1a005c7e <_dtoa_r+0x44e>
1a006470:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a006474:	1a9c      	subs	r4, r3, r2
1a006476:	e508      	b.n	1a005e8a <_dtoa_r+0x65a>
1a006478:	2700      	movs	r7, #0
1a00647a:	463d      	mov	r5, r7
1a00647c:	e6a0      	b.n	1a0061c0 <_dtoa_r+0x990>
1a00647e:	2a39      	cmp	r2, #57	; 0x39
1a006480:	4627      	mov	r7, r4
1a006482:	464c      	mov	r4, r9
1a006484:	f000 80a3 	beq.w	1a0065ce <_dtoa_r+0xd9e>
1a006488:	f102 0901 	add.w	r9, r2, #1
1a00648c:	9500      	str	r5, [sp, #0]
1a00648e:	f886 9000 	strb.w	r9, [r6]
1a006492:	4645      	mov	r5, r8
1a006494:	e5c7      	b.n	1a006026 <_dtoa_r+0x7f6>
1a006496:	4627      	mov	r7, r4
1a006498:	9500      	str	r5, [sp, #0]
1a00649a:	464c      	mov	r4, r9
1a00649c:	4645      	mov	r5, r8
1a00649e:	4691      	mov	r9, r2
1a0064a0:	e5a5      	b.n	1a005fee <_dtoa_r+0x7be>
1a0064a2:	bf00      	nop
1a0064a4:	1a007ef4 	.word	0x1a007ef4
1a0064a8:	401c0000 	.word	0x401c0000
1a0064ac:	40140000 	.word	0x40140000
1a0064b0:	1a007f30 	.word	0x1a007f30
1a0064b4:	1a007f08 	.word	0x1a007f08
1a0064b8:	7ff00000 	.word	0x7ff00000
1a0064bc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0064c0:	f7fb fe5a 	bl	1a002178 <__aeabi_dmul>
1a0064c4:	9b03      	ldr	r3, [sp, #12]
1a0064c6:	701d      	strb	r5, [r3, #0]
1a0064c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0064ca:	2b01      	cmp	r3, #1
1a0064cc:	e9cd 0100 	strd	r0, r1, [sp]
1a0064d0:	d023      	beq.n	1a00651a <_dtoa_r+0xcea>
1a0064d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0064d4:	9a03      	ldr	r2, [sp, #12]
1a0064d6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0064da:	4413      	add	r3, r2
1a0064dc:	46c1      	mov	r9, r8
1a0064de:	4698      	mov	r8, r3
1a0064e0:	2200      	movs	r2, #0
1a0064e2:	4b64      	ldr	r3, [pc, #400]	; (1a006674 <_dtoa_r+0xe44>)
1a0064e4:	4630      	mov	r0, r6
1a0064e6:	4639      	mov	r1, r7
1a0064e8:	f7fb fe46 	bl	1a002178 <__aeabi_dmul>
1a0064ec:	460f      	mov	r7, r1
1a0064ee:	4606      	mov	r6, r0
1a0064f0:	f7fc f8f2 	bl	1a0026d8 <__aeabi_d2iz>
1a0064f4:	4605      	mov	r5, r0
1a0064f6:	f7fb fdd5 	bl	1a0020a4 <__aeabi_i2d>
1a0064fa:	3530      	adds	r5, #48	; 0x30
1a0064fc:	4602      	mov	r2, r0
1a0064fe:	460b      	mov	r3, r1
1a006500:	4630      	mov	r0, r6
1a006502:	4639      	mov	r1, r7
1a006504:	f7fb fc80 	bl	1a001e08 <__aeabi_dsub>
1a006508:	f804 5b01 	strb.w	r5, [r4], #1
1a00650c:	45a0      	cmp	r8, r4
1a00650e:	4606      	mov	r6, r0
1a006510:	460f      	mov	r7, r1
1a006512:	d1e5      	bne.n	1a0064e0 <_dtoa_r+0xcb0>
1a006514:	46c8      	mov	r8, r9
1a006516:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00651a:	4b57      	ldr	r3, [pc, #348]	; (1a006678 <_dtoa_r+0xe48>)
1a00651c:	2200      	movs	r2, #0
1a00651e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006522:	f7fb fc73 	bl	1a001e0c <__adddf3>
1a006526:	4632      	mov	r2, r6
1a006528:	463b      	mov	r3, r7
1a00652a:	f7fc f897 	bl	1a00265c <__aeabi_dcmplt>
1a00652e:	2800      	cmp	r0, #0
1a006530:	d152      	bne.n	1a0065d8 <_dtoa_r+0xda8>
1a006532:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006536:	2000      	movs	r0, #0
1a006538:	494f      	ldr	r1, [pc, #316]	; (1a006678 <_dtoa_r+0xe48>)
1a00653a:	f7fb fc65 	bl	1a001e08 <__aeabi_dsub>
1a00653e:	4632      	mov	r2, r6
1a006540:	463b      	mov	r3, r7
1a006542:	f7fc f8a9 	bl	1a002698 <__aeabi_dcmpgt>
1a006546:	2800      	cmp	r0, #0
1a006548:	f43f abb3 	beq.w	1a005cb2 <_dtoa_r+0x482>
1a00654c:	e000      	b.n	1a006550 <_dtoa_r+0xd20>
1a00654e:	4614      	mov	r4, r2
1a006550:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a006554:	2b30      	cmp	r3, #48	; 0x30
1a006556:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00655a:	d0f8      	beq.n	1a00654e <_dtoa_r+0xd1e>
1a00655c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00655e:	3301      	adds	r3, #1
1a006560:	9306      	str	r3, [sp, #24]
1a006562:	f7ff bb8c 	b.w	1a005c7e <_dtoa_r+0x44e>
1a006566:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a006568:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a00656c:	e6d7      	b.n	1a00631e <_dtoa_r+0xaee>
1a00656e:	2602      	movs	r6, #2
1a006570:	f7ff bad2 	b.w	1a005b18 <_dtoa_r+0x2e8>
1a006574:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006576:	2b00      	cmp	r3, #0
1a006578:	f43f aed8 	beq.w	1a00632c <_dtoa_r+0xafc>
1a00657c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a00657e:	2f00      	cmp	r7, #0
1a006580:	f77f ab97 	ble.w	1a005cb2 <_dtoa_r+0x482>
1a006584:	2200      	movs	r2, #0
1a006586:	4b3b      	ldr	r3, [pc, #236]	; (1a006674 <_dtoa_r+0xe44>)
1a006588:	4620      	mov	r0, r4
1a00658a:	4629      	mov	r1, r5
1a00658c:	f7fb fdf4 	bl	1a002178 <__aeabi_dmul>
1a006590:	4604      	mov	r4, r0
1a006592:	460d      	mov	r5, r1
1a006594:	1c70      	adds	r0, r6, #1
1a006596:	e9cd 4500 	strd	r4, r5, [sp]
1a00659a:	f7fb fd83 	bl	1a0020a4 <__aeabi_i2d>
1a00659e:	4622      	mov	r2, r4
1a0065a0:	462b      	mov	r3, r5
1a0065a2:	f7fb fde9 	bl	1a002178 <__aeabi_dmul>
1a0065a6:	4b35      	ldr	r3, [pc, #212]	; (1a00667c <_dtoa_r+0xe4c>)
1a0065a8:	2200      	movs	r2, #0
1a0065aa:	f7fb fc2f 	bl	1a001e0c <__adddf3>
1a0065ae:	9b06      	ldr	r3, [sp, #24]
1a0065b0:	9710      	str	r7, [sp, #64]	; 0x40
1a0065b2:	3b01      	subs	r3, #1
1a0065b4:	4604      	mov	r4, r0
1a0065b6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0065ba:	9312      	str	r3, [sp, #72]	; 0x48
1a0065bc:	f7ff bacf 	b.w	1a005b5e <_dtoa_r+0x32e>
1a0065c0:	9a06      	ldr	r2, [sp, #24]
1a0065c2:	3201      	adds	r2, #1
1a0065c4:	9206      	str	r2, [sp, #24]
1a0065c6:	2231      	movs	r2, #49	; 0x31
1a0065c8:	701a      	strb	r2, [r3, #0]
1a0065ca:	f7ff bb58 	b.w	1a005c7e <_dtoa_r+0x44e>
1a0065ce:	2239      	movs	r2, #57	; 0x39
1a0065d0:	9500      	str	r5, [sp, #0]
1a0065d2:	7032      	strb	r2, [r6, #0]
1a0065d4:	4645      	mov	r5, r8
1a0065d6:	e518      	b.n	1a00600a <_dtoa_r+0x7da>
1a0065d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0065da:	3301      	adds	r3, #1
1a0065dc:	9306      	str	r3, [sp, #24]
1a0065de:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a0065e2:	e427      	b.n	1a005e34 <_dtoa_r+0x604>
1a0065e4:	f47f af26 	bne.w	1a006434 <_dtoa_r+0xc04>
1a0065e8:	f019 0f01 	tst.w	r9, #1
1a0065ec:	f47f af1b 	bne.w	1a006426 <_dtoa_r+0xbf6>
1a0065f0:	e720      	b.n	1a006434 <_dtoa_r+0xc04>
1a0065f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0065f4:	3301      	adds	r3, #1
1a0065f6:	46da      	mov	sl, fp
1a0065f8:	9306      	str	r3, [sp, #24]
1a0065fa:	f8dd b000 	ldr.w	fp, [sp]
1a0065fe:	e419      	b.n	1a005e34 <_dtoa_r+0x604>
1a006600:	2a39      	cmp	r2, #57	; 0x39
1a006602:	463b      	mov	r3, r7
1a006604:	4691      	mov	r9, r2
1a006606:	4627      	mov	r7, r4
1a006608:	f106 0401 	add.w	r4, r6, #1
1a00660c:	d0df      	beq.n	1a0065ce <_dtoa_r+0xd9e>
1a00660e:	2b00      	cmp	r3, #0
1a006610:	f73f af0d 	bgt.w	1a00642e <_dtoa_r+0xbfe>
1a006614:	e70e      	b.n	1a006434 <_dtoa_r+0xc04>
1a006616:	9b02      	ldr	r3, [sp, #8]
1a006618:	2b02      	cmp	r3, #2
1a00661a:	f77f ae49 	ble.w	1a0062b0 <_dtoa_r+0xa80>
1a00661e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006620:	9309      	str	r3, [sp, #36]	; 0x24
1a006622:	f8cd 8018 	str.w	r8, [sp, #24]
1a006626:	e5ba      	b.n	1a00619e <_dtoa_r+0x96e>
1a006628:	9b02      	ldr	r3, [sp, #8]
1a00662a:	2b02      	cmp	r3, #2
1a00662c:	dcf7      	bgt.n	1a00661e <_dtoa_r+0xdee>
1a00662e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006630:	e539      	b.n	1a0060a6 <_dtoa_r+0x876>
1a006632:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006634:	3301      	adds	r3, #1
1a006636:	9306      	str	r3, [sp, #24]
1a006638:	f7ff bbfc 	b.w	1a005e34 <_dtoa_r+0x604>
1a00663c:	4b10      	ldr	r3, [pc, #64]	; (1a006680 <_dtoa_r+0xe50>)
1a00663e:	9303      	str	r3, [sp, #12]
1a006640:	f7ff b934 	b.w	1a0058ac <_dtoa_r+0x7c>
1a006644:	f43f ac98 	beq.w	1a005f78 <_dtoa_r+0x748>
1a006648:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00664c:	e48f      	b.n	1a005f6e <_dtoa_r+0x73e>
1a00664e:	2400      	movs	r4, #0
1a006650:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a006654:	4621      	mov	r1, r4
1a006656:	4650      	mov	r0, sl
1a006658:	f000 fad2 	bl	1a006c00 <_Balloc>
1a00665c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006660:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a006664:	930f      	str	r3, [sp, #60]	; 0x3c
1a006666:	2301      	movs	r3, #1
1a006668:	9003      	str	r0, [sp, #12]
1a00666a:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a00666e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006670:	f7ff bb23 	b.w	1a005cba <_dtoa_r+0x48a>
1a006674:	40240000 	.word	0x40240000
1a006678:	3fe00000 	.word	0x3fe00000
1a00667c:	401c0000 	.word	0x401c0000
1a006680:	1a007ef8 	.word	0x1a007ef8

1a006684 <__sfvwrite_r>:
1a006684:	6893      	ldr	r3, [r2, #8]
1a006686:	2b00      	cmp	r3, #0
1a006688:	f000 8102 	beq.w	1a006890 <__sfvwrite_r+0x20c>
1a00668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006690:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a006694:	b29b      	uxth	r3, r3
1a006696:	460c      	mov	r4, r1
1a006698:	0719      	lsls	r1, r3, #28
1a00669a:	b083      	sub	sp, #12
1a00669c:	4682      	mov	sl, r0
1a00669e:	4690      	mov	r8, r2
1a0066a0:	d535      	bpl.n	1a00670e <__sfvwrite_r+0x8a>
1a0066a2:	6922      	ldr	r2, [r4, #16]
1a0066a4:	b39a      	cbz	r2, 1a00670e <__sfvwrite_r+0x8a>
1a0066a6:	f013 0202 	ands.w	r2, r3, #2
1a0066aa:	f8d8 6000 	ldr.w	r6, [r8]
1a0066ae:	d03d      	beq.n	1a00672c <__sfvwrite_r+0xa8>
1a0066b0:	2700      	movs	r7, #0
1a0066b2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a0066b6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a0066ba:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a006988 <__sfvwrite_r+0x304>
1a0066be:	463d      	mov	r5, r7
1a0066c0:	454d      	cmp	r5, r9
1a0066c2:	462b      	mov	r3, r5
1a0066c4:	463a      	mov	r2, r7
1a0066c6:	bf28      	it	cs
1a0066c8:	464b      	movcs	r3, r9
1a0066ca:	4661      	mov	r1, ip
1a0066cc:	4650      	mov	r0, sl
1a0066ce:	b1d5      	cbz	r5, 1a006706 <__sfvwrite_r+0x82>
1a0066d0:	47d8      	blx	fp
1a0066d2:	2800      	cmp	r0, #0
1a0066d4:	f340 80d2 	ble.w	1a00687c <__sfvwrite_r+0x1f8>
1a0066d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a0066dc:	1a1b      	subs	r3, r3, r0
1a0066de:	4407      	add	r7, r0
1a0066e0:	1a2d      	subs	r5, r5, r0
1a0066e2:	f8c8 3008 	str.w	r3, [r8, #8]
1a0066e6:	2b00      	cmp	r3, #0
1a0066e8:	f000 80b7 	beq.w	1a00685a <__sfvwrite_r+0x1d6>
1a0066ec:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a0066f0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a0066f4:	454d      	cmp	r5, r9
1a0066f6:	462b      	mov	r3, r5
1a0066f8:	463a      	mov	r2, r7
1a0066fa:	bf28      	it	cs
1a0066fc:	464b      	movcs	r3, r9
1a0066fe:	4661      	mov	r1, ip
1a006700:	4650      	mov	r0, sl
1a006702:	2d00      	cmp	r5, #0
1a006704:	d1e4      	bne.n	1a0066d0 <__sfvwrite_r+0x4c>
1a006706:	e9d6 7500 	ldrd	r7, r5, [r6]
1a00670a:	3608      	adds	r6, #8
1a00670c:	e7d8      	b.n	1a0066c0 <__sfvwrite_r+0x3c>
1a00670e:	4621      	mov	r1, r4
1a006710:	4650      	mov	r0, sl
1a006712:	f7fe ff91 	bl	1a005638 <__swsetup_r>
1a006716:	2800      	cmp	r0, #0
1a006718:	f040 8130 	bne.w	1a00697c <__sfvwrite_r+0x2f8>
1a00671c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006720:	f8d8 6000 	ldr.w	r6, [r8]
1a006724:	b29b      	uxth	r3, r3
1a006726:	f013 0202 	ands.w	r2, r3, #2
1a00672a:	d1c1      	bne.n	1a0066b0 <__sfvwrite_r+0x2c>
1a00672c:	f013 0901 	ands.w	r9, r3, #1
1a006730:	f040 80b0 	bne.w	1a006894 <__sfvwrite_r+0x210>
1a006734:	68a7      	ldr	r7, [r4, #8]
1a006736:	6820      	ldr	r0, [r4, #0]
1a006738:	464d      	mov	r5, r9
1a00673a:	2d00      	cmp	r5, #0
1a00673c:	d054      	beq.n	1a0067e8 <__sfvwrite_r+0x164>
1a00673e:	059a      	lsls	r2, r3, #22
1a006740:	f140 80bc 	bpl.w	1a0068bc <__sfvwrite_r+0x238>
1a006744:	42af      	cmp	r7, r5
1a006746:	46bb      	mov	fp, r7
1a006748:	f200 80e7 	bhi.w	1a00691a <__sfvwrite_r+0x296>
1a00674c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a006750:	d02f      	beq.n	1a0067b2 <__sfvwrite_r+0x12e>
1a006752:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a006756:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a00675a:	eba0 0b01 	sub.w	fp, r0, r1
1a00675e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a006762:	1c68      	adds	r0, r5, #1
1a006764:	107f      	asrs	r7, r7, #1
1a006766:	4458      	add	r0, fp
1a006768:	42b8      	cmp	r0, r7
1a00676a:	463a      	mov	r2, r7
1a00676c:	bf84      	itt	hi
1a00676e:	4607      	movhi	r7, r0
1a006770:	463a      	movhi	r2, r7
1a006772:	055b      	lsls	r3, r3, #21
1a006774:	f140 80e9 	bpl.w	1a00694a <__sfvwrite_r+0x2c6>
1a006778:	4611      	mov	r1, r2
1a00677a:	4650      	mov	r0, sl
1a00677c:	f7fc fc92 	bl	1a0030a4 <_malloc_r>
1a006780:	2800      	cmp	r0, #0
1a006782:	f000 80f5 	beq.w	1a006970 <__sfvwrite_r+0x2ec>
1a006786:	465a      	mov	r2, fp
1a006788:	6921      	ldr	r1, [r4, #16]
1a00678a:	9001      	str	r0, [sp, #4]
1a00678c:	f7fc ff42 	bl	1a003614 <memcpy>
1a006790:	89a2      	ldrh	r2, [r4, #12]
1a006792:	9b01      	ldr	r3, [sp, #4]
1a006794:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006798:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00679c:	81a2      	strh	r2, [r4, #12]
1a00679e:	eba7 020b 	sub.w	r2, r7, fp
1a0067a2:	eb03 000b 	add.w	r0, r3, fp
1a0067a6:	6167      	str	r7, [r4, #20]
1a0067a8:	6123      	str	r3, [r4, #16]
1a0067aa:	6020      	str	r0, [r4, #0]
1a0067ac:	60a2      	str	r2, [r4, #8]
1a0067ae:	462f      	mov	r7, r5
1a0067b0:	46ab      	mov	fp, r5
1a0067b2:	465a      	mov	r2, fp
1a0067b4:	4649      	mov	r1, r9
1a0067b6:	f000 f9bb 	bl	1a006b30 <memmove>
1a0067ba:	68a2      	ldr	r2, [r4, #8]
1a0067bc:	6823      	ldr	r3, [r4, #0]
1a0067be:	1bd2      	subs	r2, r2, r7
1a0067c0:	445b      	add	r3, fp
1a0067c2:	462f      	mov	r7, r5
1a0067c4:	60a2      	str	r2, [r4, #8]
1a0067c6:	6023      	str	r3, [r4, #0]
1a0067c8:	2500      	movs	r5, #0
1a0067ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a0067ce:	1bdb      	subs	r3, r3, r7
1a0067d0:	44b9      	add	r9, r7
1a0067d2:	f8c8 3008 	str.w	r3, [r8, #8]
1a0067d6:	2b00      	cmp	r3, #0
1a0067d8:	d03f      	beq.n	1a00685a <__sfvwrite_r+0x1d6>
1a0067da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0067de:	68a7      	ldr	r7, [r4, #8]
1a0067e0:	6820      	ldr	r0, [r4, #0]
1a0067e2:	b29b      	uxth	r3, r3
1a0067e4:	2d00      	cmp	r5, #0
1a0067e6:	d1aa      	bne.n	1a00673e <__sfvwrite_r+0xba>
1a0067e8:	e9d6 9500 	ldrd	r9, r5, [r6]
1a0067ec:	3608      	adds	r6, #8
1a0067ee:	e7a4      	b.n	1a00673a <__sfvwrite_r+0xb6>
1a0067f0:	f10b 0308 	add.w	r3, fp, #8
1a0067f4:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a0067f8:	469b      	mov	fp, r3
1a0067fa:	3308      	adds	r3, #8
1a0067fc:	2f00      	cmp	r7, #0
1a0067fe:	d0f9      	beq.n	1a0067f4 <__sfvwrite_r+0x170>
1a006800:	463a      	mov	r2, r7
1a006802:	210a      	movs	r1, #10
1a006804:	4630      	mov	r0, r6
1a006806:	f000 f943 	bl	1a006a90 <memchr>
1a00680a:	2800      	cmp	r0, #0
1a00680c:	d053      	beq.n	1a0068b6 <__sfvwrite_r+0x232>
1a00680e:	3001      	adds	r0, #1
1a006810:	eba0 0906 	sub.w	r9, r0, r6
1a006814:	464b      	mov	r3, r9
1a006816:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a00681a:	6820      	ldr	r0, [r4, #0]
1a00681c:	42bb      	cmp	r3, r7
1a00681e:	bf28      	it	cs
1a006820:	463b      	movcs	r3, r7
1a006822:	4288      	cmp	r0, r1
1a006824:	d903      	bls.n	1a00682e <__sfvwrite_r+0x1aa>
1a006826:	68a5      	ldr	r5, [r4, #8]
1a006828:	4415      	add	r5, r2
1a00682a:	42ab      	cmp	r3, r5
1a00682c:	dc19      	bgt.n	1a006862 <__sfvwrite_r+0x1de>
1a00682e:	429a      	cmp	r2, r3
1a006830:	dc7d      	bgt.n	1a00692e <__sfvwrite_r+0x2aa>
1a006832:	4613      	mov	r3, r2
1a006834:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a006836:	69e1      	ldr	r1, [r4, #28]
1a006838:	4632      	mov	r2, r6
1a00683a:	4650      	mov	r0, sl
1a00683c:	47a8      	blx	r5
1a00683e:	1e05      	subs	r5, r0, #0
1a006840:	dd1c      	ble.n	1a00687c <__sfvwrite_r+0x1f8>
1a006842:	ebb9 0905 	subs.w	r9, r9, r5
1a006846:	d06b      	beq.n	1a006920 <__sfvwrite_r+0x29c>
1a006848:	2001      	movs	r0, #1
1a00684a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00684e:	1b5b      	subs	r3, r3, r5
1a006850:	442e      	add	r6, r5
1a006852:	1b7f      	subs	r7, r7, r5
1a006854:	f8c8 3008 	str.w	r3, [r8, #8]
1a006858:	bb13      	cbnz	r3, 1a0068a0 <__sfvwrite_r+0x21c>
1a00685a:	2000      	movs	r0, #0
1a00685c:	b003      	add	sp, #12
1a00685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006862:	4631      	mov	r1, r6
1a006864:	462a      	mov	r2, r5
1a006866:	f000 f963 	bl	1a006b30 <memmove>
1a00686a:	6823      	ldr	r3, [r4, #0]
1a00686c:	442b      	add	r3, r5
1a00686e:	6023      	str	r3, [r4, #0]
1a006870:	4621      	mov	r1, r4
1a006872:	4650      	mov	r0, sl
1a006874:	f7fc f9e8 	bl	1a002c48 <_fflush_r>
1a006878:	2800      	cmp	r0, #0
1a00687a:	d0e2      	beq.n	1a006842 <__sfvwrite_r+0x1be>
1a00687c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006888:	81a3      	strh	r3, [r4, #12]
1a00688a:	b003      	add	sp, #12
1a00688c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006890:	2000      	movs	r0, #0
1a006892:	4770      	bx	lr
1a006894:	4633      	mov	r3, r6
1a006896:	4691      	mov	r9, r2
1a006898:	4610      	mov	r0, r2
1a00689a:	4617      	mov	r7, r2
1a00689c:	464e      	mov	r6, r9
1a00689e:	469b      	mov	fp, r3
1a0068a0:	2f00      	cmp	r7, #0
1a0068a2:	d0a5      	beq.n	1a0067f0 <__sfvwrite_r+0x16c>
1a0068a4:	2800      	cmp	r0, #0
1a0068a6:	d1b5      	bne.n	1a006814 <__sfvwrite_r+0x190>
1a0068a8:	463a      	mov	r2, r7
1a0068aa:	210a      	movs	r1, #10
1a0068ac:	4630      	mov	r0, r6
1a0068ae:	f000 f8ef 	bl	1a006a90 <memchr>
1a0068b2:	2800      	cmp	r0, #0
1a0068b4:	d1ab      	bne.n	1a00680e <__sfvwrite_r+0x18a>
1a0068b6:	1c7b      	adds	r3, r7, #1
1a0068b8:	4699      	mov	r9, r3
1a0068ba:	e7ac      	b.n	1a006816 <__sfvwrite_r+0x192>
1a0068bc:	6923      	ldr	r3, [r4, #16]
1a0068be:	4283      	cmp	r3, r0
1a0068c0:	d315      	bcc.n	1a0068ee <__sfvwrite_r+0x26a>
1a0068c2:	6961      	ldr	r1, [r4, #20]
1a0068c4:	42a9      	cmp	r1, r5
1a0068c6:	d812      	bhi.n	1a0068ee <__sfvwrite_r+0x26a>
1a0068c8:	4b2e      	ldr	r3, [pc, #184]	; (1a006984 <__sfvwrite_r+0x300>)
1a0068ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0068cc:	429d      	cmp	r5, r3
1a0068ce:	bf94      	ite	ls
1a0068d0:	462b      	movls	r3, r5
1a0068d2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a0068d6:	464a      	mov	r2, r9
1a0068d8:	fb93 f3f1 	sdiv	r3, r3, r1
1a0068dc:	4650      	mov	r0, sl
1a0068de:	fb01 f303 	mul.w	r3, r1, r3
1a0068e2:	69e1      	ldr	r1, [r4, #28]
1a0068e4:	47b8      	blx	r7
1a0068e6:	1e07      	subs	r7, r0, #0
1a0068e8:	ddc8      	ble.n	1a00687c <__sfvwrite_r+0x1f8>
1a0068ea:	1bed      	subs	r5, r5, r7
1a0068ec:	e76d      	b.n	1a0067ca <__sfvwrite_r+0x146>
1a0068ee:	42af      	cmp	r7, r5
1a0068f0:	bf28      	it	cs
1a0068f2:	462f      	movcs	r7, r5
1a0068f4:	463a      	mov	r2, r7
1a0068f6:	4649      	mov	r1, r9
1a0068f8:	f000 f91a 	bl	1a006b30 <memmove>
1a0068fc:	68a3      	ldr	r3, [r4, #8]
1a0068fe:	6822      	ldr	r2, [r4, #0]
1a006900:	1bdb      	subs	r3, r3, r7
1a006902:	443a      	add	r2, r7
1a006904:	60a3      	str	r3, [r4, #8]
1a006906:	6022      	str	r2, [r4, #0]
1a006908:	2b00      	cmp	r3, #0
1a00690a:	d1ee      	bne.n	1a0068ea <__sfvwrite_r+0x266>
1a00690c:	4621      	mov	r1, r4
1a00690e:	4650      	mov	r0, sl
1a006910:	f7fc f99a 	bl	1a002c48 <_fflush_r>
1a006914:	2800      	cmp	r0, #0
1a006916:	d0e8      	beq.n	1a0068ea <__sfvwrite_r+0x266>
1a006918:	e7b0      	b.n	1a00687c <__sfvwrite_r+0x1f8>
1a00691a:	462f      	mov	r7, r5
1a00691c:	46ab      	mov	fp, r5
1a00691e:	e748      	b.n	1a0067b2 <__sfvwrite_r+0x12e>
1a006920:	4621      	mov	r1, r4
1a006922:	4650      	mov	r0, sl
1a006924:	f7fc f990 	bl	1a002c48 <_fflush_r>
1a006928:	2800      	cmp	r0, #0
1a00692a:	d08e      	beq.n	1a00684a <__sfvwrite_r+0x1c6>
1a00692c:	e7a6      	b.n	1a00687c <__sfvwrite_r+0x1f8>
1a00692e:	461a      	mov	r2, r3
1a006930:	4631      	mov	r1, r6
1a006932:	9301      	str	r3, [sp, #4]
1a006934:	f000 f8fc 	bl	1a006b30 <memmove>
1a006938:	9b01      	ldr	r3, [sp, #4]
1a00693a:	68a1      	ldr	r1, [r4, #8]
1a00693c:	6822      	ldr	r2, [r4, #0]
1a00693e:	1ac9      	subs	r1, r1, r3
1a006940:	441a      	add	r2, r3
1a006942:	60a1      	str	r1, [r4, #8]
1a006944:	6022      	str	r2, [r4, #0]
1a006946:	461d      	mov	r5, r3
1a006948:	e77b      	b.n	1a006842 <__sfvwrite_r+0x1be>
1a00694a:	4650      	mov	r0, sl
1a00694c:	f000 fc62 	bl	1a007214 <_realloc_r>
1a006950:	4603      	mov	r3, r0
1a006952:	2800      	cmp	r0, #0
1a006954:	f47f af23 	bne.w	1a00679e <__sfvwrite_r+0x11a>
1a006958:	6921      	ldr	r1, [r4, #16]
1a00695a:	4650      	mov	r0, sl
1a00695c:	f7fc fa56 	bl	1a002e0c <_free_r>
1a006960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006964:	220c      	movs	r2, #12
1a006966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00696a:	f8ca 2000 	str.w	r2, [sl]
1a00696e:	e787      	b.n	1a006880 <__sfvwrite_r+0x1fc>
1a006970:	230c      	movs	r3, #12
1a006972:	f8ca 3000 	str.w	r3, [sl]
1a006976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00697a:	e781      	b.n	1a006880 <__sfvwrite_r+0x1fc>
1a00697c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006980:	e76c      	b.n	1a00685c <__sfvwrite_r+0x1d8>
1a006982:	bf00      	nop
1a006984:	7ffffffe 	.word	0x7ffffffe
1a006988:	7ffffc00 	.word	0x7ffffc00

1a00698c <_localeconv_r>:
1a00698c:	4800      	ldr	r0, [pc, #0]	; (1a006990 <_localeconv_r+0x4>)
1a00698e:	4770      	bx	lr
1a006990:	10000978 	.word	0x10000978

1a006994 <__swhatbuf_r>:
1a006994:	b570      	push	{r4, r5, r6, lr}
1a006996:	460c      	mov	r4, r1
1a006998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00699c:	2900      	cmp	r1, #0
1a00699e:	b096      	sub	sp, #88	; 0x58
1a0069a0:	4615      	mov	r5, r2
1a0069a2:	461e      	mov	r6, r3
1a0069a4:	db14      	blt.n	1a0069d0 <__swhatbuf_r+0x3c>
1a0069a6:	466a      	mov	r2, sp
1a0069a8:	f7f9 fdcd 	bl	1a000546 <_fstat_r>
1a0069ac:	2800      	cmp	r0, #0
1a0069ae:	db0f      	blt.n	1a0069d0 <__swhatbuf_r+0x3c>
1a0069b0:	9a01      	ldr	r2, [sp, #4]
1a0069b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0069b6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a0069ba:	fab2 f282 	clz	r2, r2
1a0069be:	0952      	lsrs	r2, r2, #5
1a0069c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0069c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0069c8:	6032      	str	r2, [r6, #0]
1a0069ca:	602b      	str	r3, [r5, #0]
1a0069cc:	b016      	add	sp, #88	; 0x58
1a0069ce:	bd70      	pop	{r4, r5, r6, pc}
1a0069d0:	89a2      	ldrh	r2, [r4, #12]
1a0069d2:	2300      	movs	r3, #0
1a0069d4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a0069d8:	6033      	str	r3, [r6, #0]
1a0069da:	d004      	beq.n	1a0069e6 <__swhatbuf_r+0x52>
1a0069dc:	2240      	movs	r2, #64	; 0x40
1a0069de:	4618      	mov	r0, r3
1a0069e0:	602a      	str	r2, [r5, #0]
1a0069e2:	b016      	add	sp, #88	; 0x58
1a0069e4:	bd70      	pop	{r4, r5, r6, pc}
1a0069e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0069ea:	602b      	str	r3, [r5, #0]
1a0069ec:	b016      	add	sp, #88	; 0x58
1a0069ee:	bd70      	pop	{r4, r5, r6, pc}

1a0069f0 <__smakebuf_r>:
1a0069f0:	898a      	ldrh	r2, [r1, #12]
1a0069f2:	0792      	lsls	r2, r2, #30
1a0069f4:	460b      	mov	r3, r1
1a0069f6:	d506      	bpl.n	1a006a06 <__smakebuf_r+0x16>
1a0069f8:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a0069fc:	2101      	movs	r1, #1
1a0069fe:	601a      	str	r2, [r3, #0]
1a006a00:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a006a04:	4770      	bx	lr
1a006a06:	b570      	push	{r4, r5, r6, lr}
1a006a08:	b082      	sub	sp, #8
1a006a0a:	ab01      	add	r3, sp, #4
1a006a0c:	466a      	mov	r2, sp
1a006a0e:	460c      	mov	r4, r1
1a006a10:	4606      	mov	r6, r0
1a006a12:	f7ff ffbf 	bl	1a006994 <__swhatbuf_r>
1a006a16:	9900      	ldr	r1, [sp, #0]
1a006a18:	4605      	mov	r5, r0
1a006a1a:	4630      	mov	r0, r6
1a006a1c:	f7fc fb42 	bl	1a0030a4 <_malloc_r>
1a006a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006a24:	b170      	cbz	r0, 1a006a44 <__smakebuf_r+0x54>
1a006a26:	4916      	ldr	r1, [pc, #88]	; (1a006a80 <__smakebuf_r+0x90>)
1a006a28:	63f1      	str	r1, [r6, #60]	; 0x3c
1a006a2a:	9a01      	ldr	r2, [sp, #4]
1a006a2c:	9900      	ldr	r1, [sp, #0]
1a006a2e:	6020      	str	r0, [r4, #0]
1a006a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006a34:	81a3      	strh	r3, [r4, #12]
1a006a36:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a006a3a:	b98a      	cbnz	r2, 1a006a60 <__smakebuf_r+0x70>
1a006a3c:	432b      	orrs	r3, r5
1a006a3e:	81a3      	strh	r3, [r4, #12]
1a006a40:	b002      	add	sp, #8
1a006a42:	bd70      	pop	{r4, r5, r6, pc}
1a006a44:	059a      	lsls	r2, r3, #22
1a006a46:	d4fb      	bmi.n	1a006a40 <__smakebuf_r+0x50>
1a006a48:	f023 0303 	bic.w	r3, r3, #3
1a006a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a006a50:	f043 0302 	orr.w	r3, r3, #2
1a006a54:	2101      	movs	r1, #1
1a006a56:	81a3      	strh	r3, [r4, #12]
1a006a58:	6022      	str	r2, [r4, #0]
1a006a5a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a006a5e:	e7ef      	b.n	1a006a40 <__smakebuf_r+0x50>
1a006a60:	4630      	mov	r0, r6
1a006a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006a66:	f7f9 fd73 	bl	1a000550 <_isatty_r>
1a006a6a:	b910      	cbnz	r0, 1a006a72 <__smakebuf_r+0x82>
1a006a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006a70:	e7e4      	b.n	1a006a3c <__smakebuf_r+0x4c>
1a006a72:	89a3      	ldrh	r3, [r4, #12]
1a006a74:	f023 0303 	bic.w	r3, r3, #3
1a006a78:	f043 0301 	orr.w	r3, r3, #1
1a006a7c:	b21b      	sxth	r3, r3
1a006a7e:	e7dd      	b.n	1a006a3c <__smakebuf_r+0x4c>
1a006a80:	1a002cf5 	.word	0x1a002cf5
1a006a84:	ffffffff 	.word	0xffffffff
1a006a88:	ffffffff 	.word	0xffffffff
1a006a8c:	ffffffff 	.word	0xffffffff

1a006a90 <memchr>:
1a006a90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006a94:	2a10      	cmp	r2, #16
1a006a96:	db2b      	blt.n	1a006af0 <memchr+0x60>
1a006a98:	f010 0f07 	tst.w	r0, #7
1a006a9c:	d008      	beq.n	1a006ab0 <memchr+0x20>
1a006a9e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006aa2:	3a01      	subs	r2, #1
1a006aa4:	428b      	cmp	r3, r1
1a006aa6:	d02d      	beq.n	1a006b04 <memchr+0x74>
1a006aa8:	f010 0f07 	tst.w	r0, #7
1a006aac:	b342      	cbz	r2, 1a006b00 <memchr+0x70>
1a006aae:	d1f6      	bne.n	1a006a9e <memchr+0xe>
1a006ab0:	b4f0      	push	{r4, r5, r6, r7}
1a006ab2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a006ab6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a006aba:	f022 0407 	bic.w	r4, r2, #7
1a006abe:	f07f 0700 	mvns.w	r7, #0
1a006ac2:	2300      	movs	r3, #0
1a006ac4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a006ac8:	3c08      	subs	r4, #8
1a006aca:	ea85 0501 	eor.w	r5, r5, r1
1a006ace:	ea86 0601 	eor.w	r6, r6, r1
1a006ad2:	fa85 f547 	uadd8	r5, r5, r7
1a006ad6:	faa3 f587 	sel	r5, r3, r7
1a006ada:	fa86 f647 	uadd8	r6, r6, r7
1a006ade:	faa5 f687 	sel	r6, r5, r7
1a006ae2:	b98e      	cbnz	r6, 1a006b08 <memchr+0x78>
1a006ae4:	d1ee      	bne.n	1a006ac4 <memchr+0x34>
1a006ae6:	bcf0      	pop	{r4, r5, r6, r7}
1a006ae8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006aec:	f002 0207 	and.w	r2, r2, #7
1a006af0:	b132      	cbz	r2, 1a006b00 <memchr+0x70>
1a006af2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006af6:	3a01      	subs	r2, #1
1a006af8:	ea83 0301 	eor.w	r3, r3, r1
1a006afc:	b113      	cbz	r3, 1a006b04 <memchr+0x74>
1a006afe:	d1f8      	bne.n	1a006af2 <memchr+0x62>
1a006b00:	2000      	movs	r0, #0
1a006b02:	4770      	bx	lr
1a006b04:	3801      	subs	r0, #1
1a006b06:	4770      	bx	lr
1a006b08:	2d00      	cmp	r5, #0
1a006b0a:	bf06      	itte	eq
1a006b0c:	4635      	moveq	r5, r6
1a006b0e:	3803      	subeq	r0, #3
1a006b10:	3807      	subne	r0, #7
1a006b12:	f015 0f01 	tst.w	r5, #1
1a006b16:	d107      	bne.n	1a006b28 <memchr+0x98>
1a006b18:	3001      	adds	r0, #1
1a006b1a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a006b1e:	bf02      	ittt	eq
1a006b20:	3001      	addeq	r0, #1
1a006b22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a006b26:	3001      	addeq	r0, #1
1a006b28:	bcf0      	pop	{r4, r5, r6, r7}
1a006b2a:	3801      	subs	r0, #1
1a006b2c:	4770      	bx	lr
1a006b2e:	bf00      	nop

1a006b30 <memmove>:
1a006b30:	4288      	cmp	r0, r1
1a006b32:	b4f0      	push	{r4, r5, r6, r7}
1a006b34:	d90d      	bls.n	1a006b52 <memmove+0x22>
1a006b36:	188b      	adds	r3, r1, r2
1a006b38:	4283      	cmp	r3, r0
1a006b3a:	d90a      	bls.n	1a006b52 <memmove+0x22>
1a006b3c:	1884      	adds	r4, r0, r2
1a006b3e:	b132      	cbz	r2, 1a006b4e <memmove+0x1e>
1a006b40:	4622      	mov	r2, r4
1a006b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a006b4a:	4299      	cmp	r1, r3
1a006b4c:	d1f9      	bne.n	1a006b42 <memmove+0x12>
1a006b4e:	bcf0      	pop	{r4, r5, r6, r7}
1a006b50:	4770      	bx	lr
1a006b52:	2a0f      	cmp	r2, #15
1a006b54:	d80e      	bhi.n	1a006b74 <memmove+0x44>
1a006b56:	4603      	mov	r3, r0
1a006b58:	1e54      	subs	r4, r2, #1
1a006b5a:	2a00      	cmp	r2, #0
1a006b5c:	d0f7      	beq.n	1a006b4e <memmove+0x1e>
1a006b5e:	3401      	adds	r4, #1
1a006b60:	440c      	add	r4, r1
1a006b62:	3b01      	subs	r3, #1
1a006b64:	f811 2b01 	ldrb.w	r2, [r1], #1
1a006b68:	f803 2f01 	strb.w	r2, [r3, #1]!
1a006b6c:	42a1      	cmp	r1, r4
1a006b6e:	d1f9      	bne.n	1a006b64 <memmove+0x34>
1a006b70:	bcf0      	pop	{r4, r5, r6, r7}
1a006b72:	4770      	bx	lr
1a006b74:	ea40 0301 	orr.w	r3, r0, r1
1a006b78:	079b      	lsls	r3, r3, #30
1a006b7a:	d13b      	bne.n	1a006bf4 <memmove+0xc4>
1a006b7c:	f1a2 0710 	sub.w	r7, r2, #16
1a006b80:	093f      	lsrs	r7, r7, #4
1a006b82:	f101 0620 	add.w	r6, r1, #32
1a006b86:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a006b8a:	f101 0310 	add.w	r3, r1, #16
1a006b8e:	f100 0410 	add.w	r4, r0, #16
1a006b92:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a006b96:	f844 5c10 	str.w	r5, [r4, #-16]
1a006b9a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a006b9e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a006ba2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a006ba6:	f844 5c08 	str.w	r5, [r4, #-8]
1a006baa:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a006bae:	f844 5c04 	str.w	r5, [r4, #-4]
1a006bb2:	3310      	adds	r3, #16
1a006bb4:	42b3      	cmp	r3, r6
1a006bb6:	f104 0410 	add.w	r4, r4, #16
1a006bba:	d1ea      	bne.n	1a006b92 <memmove+0x62>
1a006bbc:	1c7b      	adds	r3, r7, #1
1a006bbe:	011b      	lsls	r3, r3, #4
1a006bc0:	f012 0f0c 	tst.w	r2, #12
1a006bc4:	4419      	add	r1, r3
1a006bc6:	f002 050f 	and.w	r5, r2, #15
1a006bca:	4403      	add	r3, r0
1a006bcc:	d015      	beq.n	1a006bfa <memmove+0xca>
1a006bce:	3d04      	subs	r5, #4
1a006bd0:	08ad      	lsrs	r5, r5, #2
1a006bd2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a006bd6:	1f1c      	subs	r4, r3, #4
1a006bd8:	460e      	mov	r6, r1
1a006bda:	f856 7b04 	ldr.w	r7, [r6], #4
1a006bde:	f844 7f04 	str.w	r7, [r4, #4]!
1a006be2:	4564      	cmp	r4, ip
1a006be4:	d1f9      	bne.n	1a006bda <memmove+0xaa>
1a006be6:	3501      	adds	r5, #1
1a006be8:	00ad      	lsls	r5, r5, #2
1a006bea:	442b      	add	r3, r5
1a006bec:	4429      	add	r1, r5
1a006bee:	f002 0203 	and.w	r2, r2, #3
1a006bf2:	e7b1      	b.n	1a006b58 <memmove+0x28>
1a006bf4:	1e54      	subs	r4, r2, #1
1a006bf6:	4603      	mov	r3, r0
1a006bf8:	e7b1      	b.n	1a006b5e <memmove+0x2e>
1a006bfa:	462a      	mov	r2, r5
1a006bfc:	e7ac      	b.n	1a006b58 <memmove+0x28>
1a006bfe:	bf00      	nop

1a006c00 <_Balloc>:
1a006c00:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006c02:	b570      	push	{r4, r5, r6, lr}
1a006c04:	4605      	mov	r5, r0
1a006c06:	460c      	mov	r4, r1
1a006c08:	b14b      	cbz	r3, 1a006c1e <_Balloc+0x1e>
1a006c0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a006c0e:	b180      	cbz	r0, 1a006c32 <_Balloc+0x32>
1a006c10:	6802      	ldr	r2, [r0, #0]
1a006c12:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006c16:	2300      	movs	r3, #0
1a006c18:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a006c1c:	bd70      	pop	{r4, r5, r6, pc}
1a006c1e:	2221      	movs	r2, #33	; 0x21
1a006c20:	2104      	movs	r1, #4
1a006c22:	f000 fd63 	bl	1a0076ec <_calloc_r>
1a006c26:	4603      	mov	r3, r0
1a006c28:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006c2a:	2800      	cmp	r0, #0
1a006c2c:	d1ed      	bne.n	1a006c0a <_Balloc+0xa>
1a006c2e:	2000      	movs	r0, #0
1a006c30:	bd70      	pop	{r4, r5, r6, pc}
1a006c32:	2101      	movs	r1, #1
1a006c34:	fa01 f604 	lsl.w	r6, r1, r4
1a006c38:	1d72      	adds	r2, r6, #5
1a006c3a:	4628      	mov	r0, r5
1a006c3c:	0092      	lsls	r2, r2, #2
1a006c3e:	f000 fd55 	bl	1a0076ec <_calloc_r>
1a006c42:	2800      	cmp	r0, #0
1a006c44:	d0f3      	beq.n	1a006c2e <_Balloc+0x2e>
1a006c46:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a006c4a:	e7e4      	b.n	1a006c16 <_Balloc+0x16>

1a006c4c <_Bfree>:
1a006c4c:	b131      	cbz	r1, 1a006c5c <_Bfree+0x10>
1a006c4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006c50:	684a      	ldr	r2, [r1, #4]
1a006c52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006c56:	6008      	str	r0, [r1, #0]
1a006c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a006c5c:	4770      	bx	lr
1a006c5e:	bf00      	nop

1a006c60 <__multadd>:
1a006c60:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006c62:	690c      	ldr	r4, [r1, #16]
1a006c64:	b083      	sub	sp, #12
1a006c66:	460d      	mov	r5, r1
1a006c68:	4606      	mov	r6, r0
1a006c6a:	f101 0c14 	add.w	ip, r1, #20
1a006c6e:	2700      	movs	r7, #0
1a006c70:	f8dc 0000 	ldr.w	r0, [ip]
1a006c74:	b281      	uxth	r1, r0
1a006c76:	fb02 3301 	mla	r3, r2, r1, r3
1a006c7a:	0c19      	lsrs	r1, r3, #16
1a006c7c:	0c00      	lsrs	r0, r0, #16
1a006c7e:	fb02 1000 	mla	r0, r2, r0, r1
1a006c82:	b29b      	uxth	r3, r3
1a006c84:	3701      	adds	r7, #1
1a006c86:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a006c8a:	42bc      	cmp	r4, r7
1a006c8c:	f84c 3b04 	str.w	r3, [ip], #4
1a006c90:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a006c94:	dcec      	bgt.n	1a006c70 <__multadd+0x10>
1a006c96:	b13b      	cbz	r3, 1a006ca8 <__multadd+0x48>
1a006c98:	68aa      	ldr	r2, [r5, #8]
1a006c9a:	42a2      	cmp	r2, r4
1a006c9c:	dd07      	ble.n	1a006cae <__multadd+0x4e>
1a006c9e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006ca2:	3401      	adds	r4, #1
1a006ca4:	6153      	str	r3, [r2, #20]
1a006ca6:	612c      	str	r4, [r5, #16]
1a006ca8:	4628      	mov	r0, r5
1a006caa:	b003      	add	sp, #12
1a006cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006cae:	6869      	ldr	r1, [r5, #4]
1a006cb0:	9301      	str	r3, [sp, #4]
1a006cb2:	3101      	adds	r1, #1
1a006cb4:	4630      	mov	r0, r6
1a006cb6:	f7ff ffa3 	bl	1a006c00 <_Balloc>
1a006cba:	692a      	ldr	r2, [r5, #16]
1a006cbc:	3202      	adds	r2, #2
1a006cbe:	f105 010c 	add.w	r1, r5, #12
1a006cc2:	4607      	mov	r7, r0
1a006cc4:	0092      	lsls	r2, r2, #2
1a006cc6:	300c      	adds	r0, #12
1a006cc8:	f7fc fca4 	bl	1a003614 <memcpy>
1a006ccc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a006cce:	6869      	ldr	r1, [r5, #4]
1a006cd0:	9b01      	ldr	r3, [sp, #4]
1a006cd2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006cd6:	6028      	str	r0, [r5, #0]
1a006cd8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a006cdc:	463d      	mov	r5, r7
1a006cde:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006ce2:	3401      	adds	r4, #1
1a006ce4:	6153      	str	r3, [r2, #20]
1a006ce6:	612c      	str	r4, [r5, #16]
1a006ce8:	e7de      	b.n	1a006ca8 <__multadd+0x48>
1a006cea:	bf00      	nop

1a006cec <__hi0bits>:
1a006cec:	0c02      	lsrs	r2, r0, #16
1a006cee:	0412      	lsls	r2, r2, #16
1a006cf0:	4603      	mov	r3, r0
1a006cf2:	b9ca      	cbnz	r2, 1a006d28 <__hi0bits+0x3c>
1a006cf4:	0403      	lsls	r3, r0, #16
1a006cf6:	2010      	movs	r0, #16
1a006cf8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a006cfc:	bf04      	itt	eq
1a006cfe:	021b      	lsleq	r3, r3, #8
1a006d00:	3008      	addeq	r0, #8
1a006d02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a006d06:	bf04      	itt	eq
1a006d08:	011b      	lsleq	r3, r3, #4
1a006d0a:	3004      	addeq	r0, #4
1a006d0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a006d10:	bf04      	itt	eq
1a006d12:	009b      	lsleq	r3, r3, #2
1a006d14:	3002      	addeq	r0, #2
1a006d16:	2b00      	cmp	r3, #0
1a006d18:	db05      	blt.n	1a006d26 <__hi0bits+0x3a>
1a006d1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a006d1e:	f100 0001 	add.w	r0, r0, #1
1a006d22:	bf08      	it	eq
1a006d24:	2020      	moveq	r0, #32
1a006d26:	4770      	bx	lr
1a006d28:	2000      	movs	r0, #0
1a006d2a:	e7e5      	b.n	1a006cf8 <__hi0bits+0xc>

1a006d2c <__lo0bits>:
1a006d2c:	6803      	ldr	r3, [r0, #0]
1a006d2e:	f013 0207 	ands.w	r2, r3, #7
1a006d32:	4601      	mov	r1, r0
1a006d34:	d007      	beq.n	1a006d46 <__lo0bits+0x1a>
1a006d36:	07da      	lsls	r2, r3, #31
1a006d38:	d420      	bmi.n	1a006d7c <__lo0bits+0x50>
1a006d3a:	0798      	lsls	r0, r3, #30
1a006d3c:	d522      	bpl.n	1a006d84 <__lo0bits+0x58>
1a006d3e:	085b      	lsrs	r3, r3, #1
1a006d40:	600b      	str	r3, [r1, #0]
1a006d42:	2001      	movs	r0, #1
1a006d44:	4770      	bx	lr
1a006d46:	b298      	uxth	r0, r3
1a006d48:	b9b0      	cbnz	r0, 1a006d78 <__lo0bits+0x4c>
1a006d4a:	0c1b      	lsrs	r3, r3, #16
1a006d4c:	2010      	movs	r0, #16
1a006d4e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a006d52:	bf04      	itt	eq
1a006d54:	0a1b      	lsreq	r3, r3, #8
1a006d56:	3008      	addeq	r0, #8
1a006d58:	071a      	lsls	r2, r3, #28
1a006d5a:	bf04      	itt	eq
1a006d5c:	091b      	lsreq	r3, r3, #4
1a006d5e:	3004      	addeq	r0, #4
1a006d60:	079a      	lsls	r2, r3, #30
1a006d62:	bf04      	itt	eq
1a006d64:	089b      	lsreq	r3, r3, #2
1a006d66:	3002      	addeq	r0, #2
1a006d68:	07da      	lsls	r2, r3, #31
1a006d6a:	d403      	bmi.n	1a006d74 <__lo0bits+0x48>
1a006d6c:	085b      	lsrs	r3, r3, #1
1a006d6e:	f100 0001 	add.w	r0, r0, #1
1a006d72:	d005      	beq.n	1a006d80 <__lo0bits+0x54>
1a006d74:	600b      	str	r3, [r1, #0]
1a006d76:	4770      	bx	lr
1a006d78:	4610      	mov	r0, r2
1a006d7a:	e7e8      	b.n	1a006d4e <__lo0bits+0x22>
1a006d7c:	2000      	movs	r0, #0
1a006d7e:	4770      	bx	lr
1a006d80:	2020      	movs	r0, #32
1a006d82:	4770      	bx	lr
1a006d84:	089b      	lsrs	r3, r3, #2
1a006d86:	600b      	str	r3, [r1, #0]
1a006d88:	2002      	movs	r0, #2
1a006d8a:	4770      	bx	lr

1a006d8c <__i2b>:
1a006d8c:	b510      	push	{r4, lr}
1a006d8e:	460c      	mov	r4, r1
1a006d90:	2101      	movs	r1, #1
1a006d92:	f7ff ff35 	bl	1a006c00 <_Balloc>
1a006d96:	2201      	movs	r2, #1
1a006d98:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a006d9c:	bd10      	pop	{r4, pc}
1a006d9e:	bf00      	nop

1a006da0 <__multiply>:
1a006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006da4:	690e      	ldr	r6, [r1, #16]
1a006da6:	6917      	ldr	r7, [r2, #16]
1a006da8:	42be      	cmp	r6, r7
1a006daa:	b083      	sub	sp, #12
1a006dac:	460c      	mov	r4, r1
1a006dae:	4615      	mov	r5, r2
1a006db0:	db05      	blt.n	1a006dbe <__multiply+0x1e>
1a006db2:	463a      	mov	r2, r7
1a006db4:	462b      	mov	r3, r5
1a006db6:	4637      	mov	r7, r6
1a006db8:	460d      	mov	r5, r1
1a006dba:	4616      	mov	r6, r2
1a006dbc:	461c      	mov	r4, r3
1a006dbe:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a006dc2:	eb07 0806 	add.w	r8, r7, r6
1a006dc6:	4543      	cmp	r3, r8
1a006dc8:	bfb8      	it	lt
1a006dca:	3101      	addlt	r1, #1
1a006dcc:	f7ff ff18 	bl	1a006c00 <_Balloc>
1a006dd0:	f100 0a14 	add.w	sl, r0, #20
1a006dd4:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a006dd8:	45ca      	cmp	sl, r9
1a006dda:	9000      	str	r0, [sp, #0]
1a006ddc:	d205      	bcs.n	1a006dea <__multiply+0x4a>
1a006dde:	4653      	mov	r3, sl
1a006de0:	2100      	movs	r1, #0
1a006de2:	f843 1b04 	str.w	r1, [r3], #4
1a006de6:	4599      	cmp	r9, r3
1a006de8:	d8fb      	bhi.n	1a006de2 <__multiply+0x42>
1a006dea:	f104 0e14 	add.w	lr, r4, #20
1a006dee:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a006df2:	f105 0314 	add.w	r3, r5, #20
1a006df6:	45de      	cmp	lr, fp
1a006df8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a006dfc:	d253      	bcs.n	1a006ea6 <__multiply+0x106>
1a006dfe:	f8cd 8004 	str.w	r8, [sp, #4]
1a006e02:	4698      	mov	r8, r3
1a006e04:	e005      	b.n	1a006e12 <__multiply+0x72>
1a006e06:	0c09      	lsrs	r1, r1, #16
1a006e08:	d128      	bne.n	1a006e5c <__multiply+0xbc>
1a006e0a:	45f3      	cmp	fp, lr
1a006e0c:	f10a 0a04 	add.w	sl, sl, #4
1a006e10:	d947      	bls.n	1a006ea2 <__multiply+0x102>
1a006e12:	f85e 1b04 	ldr.w	r1, [lr], #4
1a006e16:	b28e      	uxth	r6, r1
1a006e18:	2e00      	cmp	r6, #0
1a006e1a:	d0f4      	beq.n	1a006e06 <__multiply+0x66>
1a006e1c:	4645      	mov	r5, r8
1a006e1e:	4654      	mov	r4, sl
1a006e20:	2300      	movs	r3, #0
1a006e22:	f855 1b04 	ldr.w	r1, [r5], #4
1a006e26:	6820      	ldr	r0, [r4, #0]
1a006e28:	b28a      	uxth	r2, r1
1a006e2a:	fa1f fc80 	uxth.w	ip, r0
1a006e2e:	fb06 c202 	mla	r2, r6, r2, ip
1a006e32:	0c09      	lsrs	r1, r1, #16
1a006e34:	0c00      	lsrs	r0, r0, #16
1a006e36:	4413      	add	r3, r2
1a006e38:	fb06 0201 	mla	r2, r6, r1, r0
1a006e3c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a006e40:	b29b      	uxth	r3, r3
1a006e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006e46:	42af      	cmp	r7, r5
1a006e48:	f844 3b04 	str.w	r3, [r4], #4
1a006e4c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a006e50:	d8e7      	bhi.n	1a006e22 <__multiply+0x82>
1a006e52:	6023      	str	r3, [r4, #0]
1a006e54:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a006e58:	0c09      	lsrs	r1, r1, #16
1a006e5a:	d0d6      	beq.n	1a006e0a <__multiply+0x6a>
1a006e5c:	f8da 3000 	ldr.w	r3, [sl]
1a006e60:	4640      	mov	r0, r8
1a006e62:	461a      	mov	r2, r3
1a006e64:	4654      	mov	r4, sl
1a006e66:	f04f 0c00 	mov.w	ip, #0
1a006e6a:	8805      	ldrh	r5, [r0, #0]
1a006e6c:	0c12      	lsrs	r2, r2, #16
1a006e6e:	fb01 2205 	mla	r2, r1, r5, r2
1a006e72:	4494      	add	ip, r2
1a006e74:	b29b      	uxth	r3, r3
1a006e76:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a006e7a:	f844 3b04 	str.w	r3, [r4], #4
1a006e7e:	f850 3b04 	ldr.w	r3, [r0], #4
1a006e82:	6822      	ldr	r2, [r4, #0]
1a006e84:	0c1b      	lsrs	r3, r3, #16
1a006e86:	b295      	uxth	r5, r2
1a006e88:	fb01 5303 	mla	r3, r1, r3, r5
1a006e8c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a006e90:	4287      	cmp	r7, r0
1a006e92:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a006e96:	d8e8      	bhi.n	1a006e6a <__multiply+0xca>
1a006e98:	45f3      	cmp	fp, lr
1a006e9a:	6023      	str	r3, [r4, #0]
1a006e9c:	f10a 0a04 	add.w	sl, sl, #4
1a006ea0:	d8b7      	bhi.n	1a006e12 <__multiply+0x72>
1a006ea2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a006ea6:	f1b8 0f00 	cmp.w	r8, #0
1a006eaa:	dd0b      	ble.n	1a006ec4 <__multiply+0x124>
1a006eac:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a006eb0:	f1a9 0904 	sub.w	r9, r9, #4
1a006eb4:	b11b      	cbz	r3, 1a006ebe <__multiply+0x11e>
1a006eb6:	e005      	b.n	1a006ec4 <__multiply+0x124>
1a006eb8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a006ebc:	b913      	cbnz	r3, 1a006ec4 <__multiply+0x124>
1a006ebe:	f1b8 0801 	subs.w	r8, r8, #1
1a006ec2:	d1f9      	bne.n	1a006eb8 <__multiply+0x118>
1a006ec4:	9800      	ldr	r0, [sp, #0]
1a006ec6:	f8c0 8010 	str.w	r8, [r0, #16]
1a006eca:	b003      	add	sp, #12
1a006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a006ed0 <__pow5mult>:
1a006ed0:	f012 0303 	ands.w	r3, r2, #3
1a006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006ed8:	4614      	mov	r4, r2
1a006eda:	4607      	mov	r7, r0
1a006edc:	d12e      	bne.n	1a006f3c <__pow5mult+0x6c>
1a006ede:	460d      	mov	r5, r1
1a006ee0:	10a4      	asrs	r4, r4, #2
1a006ee2:	d01c      	beq.n	1a006f1e <__pow5mult+0x4e>
1a006ee4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a006ee6:	b396      	cbz	r6, 1a006f4e <__pow5mult+0x7e>
1a006ee8:	07e3      	lsls	r3, r4, #31
1a006eea:	f04f 0800 	mov.w	r8, #0
1a006eee:	d406      	bmi.n	1a006efe <__pow5mult+0x2e>
1a006ef0:	1064      	asrs	r4, r4, #1
1a006ef2:	d014      	beq.n	1a006f1e <__pow5mult+0x4e>
1a006ef4:	6830      	ldr	r0, [r6, #0]
1a006ef6:	b1a8      	cbz	r0, 1a006f24 <__pow5mult+0x54>
1a006ef8:	4606      	mov	r6, r0
1a006efa:	07e3      	lsls	r3, r4, #31
1a006efc:	d5f8      	bpl.n	1a006ef0 <__pow5mult+0x20>
1a006efe:	4632      	mov	r2, r6
1a006f00:	4629      	mov	r1, r5
1a006f02:	4638      	mov	r0, r7
1a006f04:	f7ff ff4c 	bl	1a006da0 <__multiply>
1a006f08:	b1b5      	cbz	r5, 1a006f38 <__pow5mult+0x68>
1a006f0a:	686a      	ldr	r2, [r5, #4]
1a006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006f0e:	1064      	asrs	r4, r4, #1
1a006f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006f14:	6029      	str	r1, [r5, #0]
1a006f16:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a006f1a:	4605      	mov	r5, r0
1a006f1c:	d1ea      	bne.n	1a006ef4 <__pow5mult+0x24>
1a006f1e:	4628      	mov	r0, r5
1a006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006f24:	4632      	mov	r2, r6
1a006f26:	4631      	mov	r1, r6
1a006f28:	4638      	mov	r0, r7
1a006f2a:	f7ff ff39 	bl	1a006da0 <__multiply>
1a006f2e:	6030      	str	r0, [r6, #0]
1a006f30:	f8c0 8000 	str.w	r8, [r0]
1a006f34:	4606      	mov	r6, r0
1a006f36:	e7e0      	b.n	1a006efa <__pow5mult+0x2a>
1a006f38:	4605      	mov	r5, r0
1a006f3a:	e7d9      	b.n	1a006ef0 <__pow5mult+0x20>
1a006f3c:	3b01      	subs	r3, #1
1a006f3e:	4a0b      	ldr	r2, [pc, #44]	; (1a006f6c <__pow5mult+0x9c>)
1a006f40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a006f44:	2300      	movs	r3, #0
1a006f46:	f7ff fe8b 	bl	1a006c60 <__multadd>
1a006f4a:	4605      	mov	r5, r0
1a006f4c:	e7c8      	b.n	1a006ee0 <__pow5mult+0x10>
1a006f4e:	2101      	movs	r1, #1
1a006f50:	4638      	mov	r0, r7
1a006f52:	f7ff fe55 	bl	1a006c00 <_Balloc>
1a006f56:	f240 2371 	movw	r3, #625	; 0x271
1a006f5a:	6143      	str	r3, [r0, #20]
1a006f5c:	2201      	movs	r2, #1
1a006f5e:	2300      	movs	r3, #0
1a006f60:	6102      	str	r2, [r0, #16]
1a006f62:	4606      	mov	r6, r0
1a006f64:	64b8      	str	r0, [r7, #72]	; 0x48
1a006f66:	6003      	str	r3, [r0, #0]
1a006f68:	e7be      	b.n	1a006ee8 <__pow5mult+0x18>
1a006f6a:	bf00      	nop
1a006f6c:	1a007ff8 	.word	0x1a007ff8

1a006f70 <__lshift>:
1a006f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006f74:	690e      	ldr	r6, [r1, #16]
1a006f76:	460d      	mov	r5, r1
1a006f78:	ea4f 1962 	mov.w	r9, r2, asr #5
1a006f7c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a006f80:	444e      	add	r6, r9
1a006f82:	1c74      	adds	r4, r6, #1
1a006f84:	429c      	cmp	r4, r3
1a006f86:	4690      	mov	r8, r2
1a006f88:	4607      	mov	r7, r0
1a006f8a:	dd04      	ble.n	1a006f96 <__lshift+0x26>
1a006f8c:	005b      	lsls	r3, r3, #1
1a006f8e:	429c      	cmp	r4, r3
1a006f90:	f101 0101 	add.w	r1, r1, #1
1a006f94:	dcfa      	bgt.n	1a006f8c <__lshift+0x1c>
1a006f96:	4638      	mov	r0, r7
1a006f98:	f7ff fe32 	bl	1a006c00 <_Balloc>
1a006f9c:	f1b9 0f00 	cmp.w	r9, #0
1a006fa0:	f100 0c14 	add.w	ip, r0, #20
1a006fa4:	dd0e      	ble.n	1a006fc4 <__lshift+0x54>
1a006fa6:	f109 0905 	add.w	r9, r9, #5
1a006faa:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a006fae:	eb00 0109 	add.w	r1, r0, r9
1a006fb2:	4663      	mov	r3, ip
1a006fb4:	2200      	movs	r2, #0
1a006fb6:	f843 2b04 	str.w	r2, [r3], #4
1a006fba:	428b      	cmp	r3, r1
1a006fbc:	d1fb      	bne.n	1a006fb6 <__lshift+0x46>
1a006fbe:	f1a9 0914 	sub.w	r9, r9, #20
1a006fc2:	44cc      	add	ip, r9
1a006fc4:	6929      	ldr	r1, [r5, #16]
1a006fc6:	f105 0314 	add.w	r3, r5, #20
1a006fca:	f018 081f 	ands.w	r8, r8, #31
1a006fce:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a006fd2:	d01d      	beq.n	1a007010 <__lshift+0xa0>
1a006fd4:	f1c8 0920 	rsb	r9, r8, #32
1a006fd8:	2200      	movs	r2, #0
1a006fda:	6819      	ldr	r1, [r3, #0]
1a006fdc:	fa01 f108 	lsl.w	r1, r1, r8
1a006fe0:	4311      	orrs	r1, r2
1a006fe2:	f84c 1b04 	str.w	r1, [ip], #4
1a006fe6:	f853 2b04 	ldr.w	r2, [r3], #4
1a006fea:	4573      	cmp	r3, lr
1a006fec:	fa22 f209 	lsr.w	r2, r2, r9
1a006ff0:	d3f3      	bcc.n	1a006fda <__lshift+0x6a>
1a006ff2:	f8cc 2000 	str.w	r2, [ip]
1a006ff6:	2a00      	cmp	r2, #0
1a006ff8:	bf18      	it	ne
1a006ffa:	4626      	movne	r6, r4
1a006ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006ffe:	686a      	ldr	r2, [r5, #4]
1a007000:	6106      	str	r6, [r0, #16]
1a007002:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007006:	6029      	str	r1, [r5, #0]
1a007008:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00700c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007010:	f1ac 0c04 	sub.w	ip, ip, #4
1a007014:	f853 2b04 	ldr.w	r2, [r3], #4
1a007018:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00701c:	459e      	cmp	lr, r3
1a00701e:	d8f9      	bhi.n	1a007014 <__lshift+0xa4>
1a007020:	e7ec      	b.n	1a006ffc <__lshift+0x8c>
1a007022:	bf00      	nop

1a007024 <__mcmp>:
1a007024:	b430      	push	{r4, r5}
1a007026:	690b      	ldr	r3, [r1, #16]
1a007028:	4605      	mov	r5, r0
1a00702a:	6900      	ldr	r0, [r0, #16]
1a00702c:	1ac0      	subs	r0, r0, r3
1a00702e:	d110      	bne.n	1a007052 <__mcmp+0x2e>
1a007030:	009b      	lsls	r3, r3, #2
1a007032:	3514      	adds	r5, #20
1a007034:	3114      	adds	r1, #20
1a007036:	4419      	add	r1, r3
1a007038:	442b      	add	r3, r5
1a00703a:	e001      	b.n	1a007040 <__mcmp+0x1c>
1a00703c:	429d      	cmp	r5, r3
1a00703e:	d208      	bcs.n	1a007052 <__mcmp+0x2e>
1a007040:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a007044:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007048:	4294      	cmp	r4, r2
1a00704a:	d0f7      	beq.n	1a00703c <__mcmp+0x18>
1a00704c:	d203      	bcs.n	1a007056 <__mcmp+0x32>
1a00704e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007052:	bc30      	pop	{r4, r5}
1a007054:	4770      	bx	lr
1a007056:	2001      	movs	r0, #1
1a007058:	bc30      	pop	{r4, r5}
1a00705a:	4770      	bx	lr

1a00705c <__mdiff>:
1a00705c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007060:	460f      	mov	r7, r1
1a007062:	690d      	ldr	r5, [r1, #16]
1a007064:	6911      	ldr	r1, [r2, #16]
1a007066:	1a6d      	subs	r5, r5, r1
1a007068:	2d00      	cmp	r5, #0
1a00706a:	4690      	mov	r8, r2
1a00706c:	4684      	mov	ip, r0
1a00706e:	f107 0414 	add.w	r4, r7, #20
1a007072:	f102 0614 	add.w	r6, r2, #20
1a007076:	d114      	bne.n	1a0070a2 <__mdiff+0x46>
1a007078:	0089      	lsls	r1, r1, #2
1a00707a:	1863      	adds	r3, r4, r1
1a00707c:	4431      	add	r1, r6
1a00707e:	e001      	b.n	1a007084 <__mdiff+0x28>
1a007080:	42a3      	cmp	r3, r4
1a007082:	d95d      	bls.n	1a007140 <__mdiff+0xe4>
1a007084:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a007088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00708c:	4290      	cmp	r0, r2
1a00708e:	d0f7      	beq.n	1a007080 <__mdiff+0x24>
1a007090:	d209      	bcs.n	1a0070a6 <__mdiff+0x4a>
1a007092:	4622      	mov	r2, r4
1a007094:	463b      	mov	r3, r7
1a007096:	4634      	mov	r4, r6
1a007098:	4647      	mov	r7, r8
1a00709a:	4616      	mov	r6, r2
1a00709c:	4698      	mov	r8, r3
1a00709e:	2501      	movs	r5, #1
1a0070a0:	e001      	b.n	1a0070a6 <__mdiff+0x4a>
1a0070a2:	dbf6      	blt.n	1a007092 <__mdiff+0x36>
1a0070a4:	2500      	movs	r5, #0
1a0070a6:	4660      	mov	r0, ip
1a0070a8:	6879      	ldr	r1, [r7, #4]
1a0070aa:	f7ff fda9 	bl	1a006c00 <_Balloc>
1a0070ae:	693f      	ldr	r7, [r7, #16]
1a0070b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0070b4:	60c5      	str	r5, [r0, #12]
1a0070b6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a0070ba:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a0070be:	f100 0514 	add.w	r5, r0, #20
1a0070c2:	2200      	movs	r2, #0
1a0070c4:	e000      	b.n	1a0070c8 <__mdiff+0x6c>
1a0070c6:	460d      	mov	r5, r1
1a0070c8:	f856 1b04 	ldr.w	r1, [r6], #4
1a0070cc:	f854 8b04 	ldr.w	r8, [r4], #4
1a0070d0:	fa1f f981 	uxth.w	r9, r1
1a0070d4:	fa12 f388 	uxtah	r3, r2, r8
1a0070d8:	0c0a      	lsrs	r2, r1, #16
1a0070da:	eba3 0309 	sub.w	r3, r3, r9
1a0070de:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a0070e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a0070e6:	4629      	mov	r1, r5
1a0070e8:	b29b      	uxth	r3, r3
1a0070ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0070ee:	45b6      	cmp	lr, r6
1a0070f0:	ea4f 4222 	mov.w	r2, r2, asr #16
1a0070f4:	f841 3b04 	str.w	r3, [r1], #4
1a0070f8:	46a0      	mov	r8, r4
1a0070fa:	d8e4      	bhi.n	1a0070c6 <__mdiff+0x6a>
1a0070fc:	45a4      	cmp	ip, r4
1a0070fe:	d916      	bls.n	1a00712e <__mdiff+0xd2>
1a007100:	460e      	mov	r6, r1
1a007102:	f858 5b04 	ldr.w	r5, [r8], #4
1a007106:	fa12 f385 	uxtah	r3, r2, r5
1a00710a:	141a      	asrs	r2, r3, #16
1a00710c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a007110:	b29b      	uxth	r3, r3
1a007112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007116:	45c4      	cmp	ip, r8
1a007118:	f846 3b04 	str.w	r3, [r6], #4
1a00711c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a007120:	d8ef      	bhi.n	1a007102 <__mdiff+0xa6>
1a007122:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a007126:	1b2d      	subs	r5, r5, r4
1a007128:	f025 0503 	bic.w	r5, r5, #3
1a00712c:	440d      	add	r5, r1
1a00712e:	b923      	cbnz	r3, 1a00713a <__mdiff+0xde>
1a007130:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a007134:	3f01      	subs	r7, #1
1a007136:	2b00      	cmp	r3, #0
1a007138:	d0fa      	beq.n	1a007130 <__mdiff+0xd4>
1a00713a:	6107      	str	r7, [r0, #16]
1a00713c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007140:	4660      	mov	r0, ip
1a007142:	2100      	movs	r1, #0
1a007144:	f7ff fd5c 	bl	1a006c00 <_Balloc>
1a007148:	2201      	movs	r2, #1
1a00714a:	2300      	movs	r3, #0
1a00714c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a007150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a007154 <__d2b>:
1a007154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007158:	460f      	mov	r7, r1
1a00715a:	b083      	sub	sp, #12
1a00715c:	2101      	movs	r1, #1
1a00715e:	ec55 4b10 	vmov	r4, r5, d0
1a007162:	4616      	mov	r6, r2
1a007164:	f7ff fd4c 	bl	1a006c00 <_Balloc>
1a007168:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00716c:	4681      	mov	r9, r0
1a00716e:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a007172:	f1b8 0f00 	cmp.w	r8, #0
1a007176:	d001      	beq.n	1a00717c <__d2b+0x28>
1a007178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00717c:	2c00      	cmp	r4, #0
1a00717e:	9301      	str	r3, [sp, #4]
1a007180:	d02b      	beq.n	1a0071da <__d2b+0x86>
1a007182:	4668      	mov	r0, sp
1a007184:	9400      	str	r4, [sp, #0]
1a007186:	f7ff fdd1 	bl	1a006d2c <__lo0bits>
1a00718a:	b9d0      	cbnz	r0, 1a0071c2 <__d2b+0x6e>
1a00718c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a007190:	f8c9 2014 	str.w	r2, [r9, #20]
1a007194:	2b00      	cmp	r3, #0
1a007196:	bf14      	ite	ne
1a007198:	2102      	movne	r1, #2
1a00719a:	2101      	moveq	r1, #1
1a00719c:	f8c9 3018 	str.w	r3, [r9, #24]
1a0071a0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0071a4:	f1b8 0f00 	cmp.w	r8, #0
1a0071a8:	d024      	beq.n	1a0071f4 <__d2b+0xa0>
1a0071aa:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a0071ae:	eb08 0300 	add.w	r3, r8, r0
1a0071b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a0071b6:	603b      	str	r3, [r7, #0]
1a0071b8:	6030      	str	r0, [r6, #0]
1a0071ba:	4648      	mov	r0, r9
1a0071bc:	b003      	add	sp, #12
1a0071be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0071c2:	e9dd 1300 	ldrd	r1, r3, [sp]
1a0071c6:	f1c0 0220 	rsb	r2, r0, #32
1a0071ca:	fa03 f202 	lsl.w	r2, r3, r2
1a0071ce:	430a      	orrs	r2, r1
1a0071d0:	40c3      	lsrs	r3, r0
1a0071d2:	9301      	str	r3, [sp, #4]
1a0071d4:	f8c9 2014 	str.w	r2, [r9, #20]
1a0071d8:	e7dc      	b.n	1a007194 <__d2b+0x40>
1a0071da:	a801      	add	r0, sp, #4
1a0071dc:	f7ff fda6 	bl	1a006d2c <__lo0bits>
1a0071e0:	9b01      	ldr	r3, [sp, #4]
1a0071e2:	f8c9 3014 	str.w	r3, [r9, #20]
1a0071e6:	2101      	movs	r1, #1
1a0071e8:	3020      	adds	r0, #32
1a0071ea:	f8c9 1010 	str.w	r1, [r9, #16]
1a0071ee:	f1b8 0f00 	cmp.w	r8, #0
1a0071f2:	d1da      	bne.n	1a0071aa <__d2b+0x56>
1a0071f4:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a0071f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0071fc:	6038      	str	r0, [r7, #0]
1a0071fe:	6918      	ldr	r0, [r3, #16]
1a007200:	f7ff fd74 	bl	1a006cec <__hi0bits>
1a007204:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a007208:	6030      	str	r0, [r6, #0]
1a00720a:	4648      	mov	r0, r9
1a00720c:	b003      	add	sp, #12
1a00720e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a007212:	bf00      	nop

1a007214 <_realloc_r>:
1a007214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007218:	4617      	mov	r7, r2
1a00721a:	2900      	cmp	r1, #0
1a00721c:	f000 80bb 	beq.w	1a007396 <_realloc_r+0x182>
1a007220:	f107 040b 	add.w	r4, r7, #11
1a007224:	4681      	mov	r9, r0
1a007226:	460d      	mov	r5, r1
1a007228:	f7fc fade 	bl	1a0037e8 <__malloc_lock>
1a00722c:	2c16      	cmp	r4, #22
1a00722e:	d85e      	bhi.n	1a0072ee <_realloc_r+0xda>
1a007230:	2410      	movs	r4, #16
1a007232:	4622      	mov	r2, r4
1a007234:	42a7      	cmp	r7, r4
1a007236:	d85f      	bhi.n	1a0072f8 <_realloc_r+0xe4>
1a007238:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00723c:	f02e 0603 	bic.w	r6, lr, #3
1a007240:	f1a5 0808 	sub.w	r8, r5, #8
1a007244:	4296      	cmp	r6, r2
1a007246:	eb08 0a06 	add.w	sl, r8, r6
1a00724a:	f280 8081 	bge.w	1a007350 <_realloc_r+0x13c>
1a00724e:	4bcb      	ldr	r3, [pc, #812]	; (1a00757c <_realloc_r+0x368>)
1a007250:	f8da 0004 	ldr.w	r0, [sl, #4]
1a007254:	6899      	ldr	r1, [r3, #8]
1a007256:	4551      	cmp	r1, sl
1a007258:	f000 80b5 	beq.w	1a0073c6 <_realloc_r+0x1b2>
1a00725c:	f020 0301 	bic.w	r3, r0, #1
1a007260:	4453      	add	r3, sl
1a007262:	685b      	ldr	r3, [r3, #4]
1a007264:	07db      	lsls	r3, r3, #31
1a007266:	f100 808a 	bmi.w	1a00737e <_realloc_r+0x16a>
1a00726a:	f020 0003 	bic.w	r0, r0, #3
1a00726e:	1833      	adds	r3, r6, r0
1a007270:	4293      	cmp	r3, r2
1a007272:	f280 8112 	bge.w	1a00749a <_realloc_r+0x286>
1a007276:	f01e 0f01 	tst.w	lr, #1
1a00727a:	d10f      	bne.n	1a00729c <_realloc_r+0x88>
1a00727c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007280:	eba8 0b03 	sub.w	fp, r8, r3
1a007284:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007288:	f021 0103 	bic.w	r1, r1, #3
1a00728c:	4408      	add	r0, r1
1a00728e:	1983      	adds	r3, r0, r6
1a007290:	4293      	cmp	r3, r2
1a007292:	f280 8116 	bge.w	1a0074c2 <_realloc_r+0x2ae>
1a007296:	1873      	adds	r3, r6, r1
1a007298:	4293      	cmp	r3, r2
1a00729a:	da34      	bge.n	1a007306 <_realloc_r+0xf2>
1a00729c:	4639      	mov	r1, r7
1a00729e:	4648      	mov	r0, r9
1a0072a0:	f7fb ff00 	bl	1a0030a4 <_malloc_r>
1a0072a4:	4607      	mov	r7, r0
1a0072a6:	b1e0      	cbz	r0, 1a0072e2 <_realloc_r+0xce>
1a0072a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0072ac:	f023 0301 	bic.w	r3, r3, #1
1a0072b0:	4443      	add	r3, r8
1a0072b2:	f1a0 0208 	sub.w	r2, r0, #8
1a0072b6:	4293      	cmp	r3, r2
1a0072b8:	f000 80f7 	beq.w	1a0074aa <_realloc_r+0x296>
1a0072bc:	1f32      	subs	r2, r6, #4
1a0072be:	2a24      	cmp	r2, #36	; 0x24
1a0072c0:	f200 80fb 	bhi.w	1a0074ba <_realloc_r+0x2a6>
1a0072c4:	2a13      	cmp	r2, #19
1a0072c6:	6829      	ldr	r1, [r5, #0]
1a0072c8:	f200 80c9 	bhi.w	1a00745e <_realloc_r+0x24a>
1a0072cc:	4603      	mov	r3, r0
1a0072ce:	462a      	mov	r2, r5
1a0072d0:	6019      	str	r1, [r3, #0]
1a0072d2:	6851      	ldr	r1, [r2, #4]
1a0072d4:	6059      	str	r1, [r3, #4]
1a0072d6:	6892      	ldr	r2, [r2, #8]
1a0072d8:	609a      	str	r2, [r3, #8]
1a0072da:	4629      	mov	r1, r5
1a0072dc:	4648      	mov	r0, r9
1a0072de:	f7fb fd95 	bl	1a002e0c <_free_r>
1a0072e2:	4648      	mov	r0, r9
1a0072e4:	f7fc fa86 	bl	1a0037f4 <__malloc_unlock>
1a0072e8:	4638      	mov	r0, r7
1a0072ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0072ee:	f024 0407 	bic.w	r4, r4, #7
1a0072f2:	2c00      	cmp	r4, #0
1a0072f4:	4622      	mov	r2, r4
1a0072f6:	da9d      	bge.n	1a007234 <_realloc_r+0x20>
1a0072f8:	230c      	movs	r3, #12
1a0072fa:	f8c9 3000 	str.w	r3, [r9]
1a0072fe:	2700      	movs	r7, #0
1a007300:	4638      	mov	r0, r7
1a007302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007306:	465f      	mov	r7, fp
1a007308:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00730c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007310:	1f32      	subs	r2, r6, #4
1a007312:	2a24      	cmp	r2, #36	; 0x24
1a007314:	60c1      	str	r1, [r0, #12]
1a007316:	eb0b 0a03 	add.w	sl, fp, r3
1a00731a:	6088      	str	r0, [r1, #8]
1a00731c:	f200 80d9 	bhi.w	1a0074d2 <_realloc_r+0x2be>
1a007320:	2a13      	cmp	r2, #19
1a007322:	6829      	ldr	r1, [r5, #0]
1a007324:	f240 80d3 	bls.w	1a0074ce <_realloc_r+0x2ba>
1a007328:	f8cb 1008 	str.w	r1, [fp, #8]
1a00732c:	6869      	ldr	r1, [r5, #4]
1a00732e:	f8cb 100c 	str.w	r1, [fp, #12]
1a007332:	2a1b      	cmp	r2, #27
1a007334:	68a9      	ldr	r1, [r5, #8]
1a007336:	f200 80e0 	bhi.w	1a0074fa <_realloc_r+0x2e6>
1a00733a:	f10b 0210 	add.w	r2, fp, #16
1a00733e:	3508      	adds	r5, #8
1a007340:	6011      	str	r1, [r2, #0]
1a007342:	6869      	ldr	r1, [r5, #4]
1a007344:	6051      	str	r1, [r2, #4]
1a007346:	68a9      	ldr	r1, [r5, #8]
1a007348:	6091      	str	r1, [r2, #8]
1a00734a:	461e      	mov	r6, r3
1a00734c:	46d8      	mov	r8, fp
1a00734e:	463d      	mov	r5, r7
1a007350:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a007354:	1b32      	subs	r2, r6, r4
1a007356:	2a0f      	cmp	r2, #15
1a007358:	f003 0301 	and.w	r3, r3, #1
1a00735c:	d820      	bhi.n	1a0073a0 <_realloc_r+0x18c>
1a00735e:	4333      	orrs	r3, r6
1a007360:	f8c8 3004 	str.w	r3, [r8, #4]
1a007364:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007368:	f043 0301 	orr.w	r3, r3, #1
1a00736c:	f8ca 3004 	str.w	r3, [sl, #4]
1a007370:	4648      	mov	r0, r9
1a007372:	462f      	mov	r7, r5
1a007374:	f7fc fa3e 	bl	1a0037f4 <__malloc_unlock>
1a007378:	4638      	mov	r0, r7
1a00737a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00737e:	f01e 0f01 	tst.w	lr, #1
1a007382:	d18b      	bne.n	1a00729c <_realloc_r+0x88>
1a007384:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007388:	eba8 0b03 	sub.w	fp, r8, r3
1a00738c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007390:	f021 0103 	bic.w	r1, r1, #3
1a007394:	e77f      	b.n	1a007296 <_realloc_r+0x82>
1a007396:	4611      	mov	r1, r2
1a007398:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00739c:	f7fb be82 	b.w	1a0030a4 <_malloc_r>
1a0073a0:	eb08 0104 	add.w	r1, r8, r4
1a0073a4:	4323      	orrs	r3, r4
1a0073a6:	f042 0201 	orr.w	r2, r2, #1
1a0073aa:	f8c8 3004 	str.w	r3, [r8, #4]
1a0073ae:	604a      	str	r2, [r1, #4]
1a0073b0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0073b4:	f043 0301 	orr.w	r3, r3, #1
1a0073b8:	3108      	adds	r1, #8
1a0073ba:	f8ca 3004 	str.w	r3, [sl, #4]
1a0073be:	4648      	mov	r0, r9
1a0073c0:	f7fb fd24 	bl	1a002e0c <_free_r>
1a0073c4:	e7d4      	b.n	1a007370 <_realloc_r+0x15c>
1a0073c6:	f020 0003 	bic.w	r0, r0, #3
1a0073ca:	1831      	adds	r1, r6, r0
1a0073cc:	f104 0c10 	add.w	ip, r4, #16
1a0073d0:	4561      	cmp	r1, ip
1a0073d2:	da4f      	bge.n	1a007474 <_realloc_r+0x260>
1a0073d4:	f01e 0f01 	tst.w	lr, #1
1a0073d8:	f47f af60 	bne.w	1a00729c <_realloc_r+0x88>
1a0073dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a0073e0:	eba8 0b01 	sub.w	fp, r8, r1
1a0073e4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0073e8:	f021 0103 	bic.w	r1, r1, #3
1a0073ec:	4408      	add	r0, r1
1a0073ee:	eb00 0a06 	add.w	sl, r0, r6
1a0073f2:	45d4      	cmp	ip, sl
1a0073f4:	f73f af4f 	bgt.w	1a007296 <_realloc_r+0x82>
1a0073f8:	465f      	mov	r7, fp
1a0073fa:	f8db 100c 	ldr.w	r1, [fp, #12]
1a0073fe:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007402:	1f32      	subs	r2, r6, #4
1a007404:	2a24      	cmp	r2, #36	; 0x24
1a007406:	60c1      	str	r1, [r0, #12]
1a007408:	6088      	str	r0, [r1, #8]
1a00740a:	f200 8099 	bhi.w	1a007540 <_realloc_r+0x32c>
1a00740e:	2a13      	cmp	r2, #19
1a007410:	6829      	ldr	r1, [r5, #0]
1a007412:	f240 8093 	bls.w	1a00753c <_realloc_r+0x328>
1a007416:	f8cb 1008 	str.w	r1, [fp, #8]
1a00741a:	6869      	ldr	r1, [r5, #4]
1a00741c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007420:	2a1b      	cmp	r2, #27
1a007422:	68a9      	ldr	r1, [r5, #8]
1a007424:	f200 8092 	bhi.w	1a00754c <_realloc_r+0x338>
1a007428:	f10b 0210 	add.w	r2, fp, #16
1a00742c:	3508      	adds	r5, #8
1a00742e:	6011      	str	r1, [r2, #0]
1a007430:	6869      	ldr	r1, [r5, #4]
1a007432:	6051      	str	r1, [r2, #4]
1a007434:	68a9      	ldr	r1, [r5, #8]
1a007436:	6091      	str	r1, [r2, #8]
1a007438:	eb0b 0104 	add.w	r1, fp, r4
1a00743c:	ebaa 0204 	sub.w	r2, sl, r4
1a007440:	f042 0201 	orr.w	r2, r2, #1
1a007444:	6099      	str	r1, [r3, #8]
1a007446:	604a      	str	r2, [r1, #4]
1a007448:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00744c:	f003 0301 	and.w	r3, r3, #1
1a007450:	431c      	orrs	r4, r3
1a007452:	4648      	mov	r0, r9
1a007454:	f8cb 4004 	str.w	r4, [fp, #4]
1a007458:	f7fc f9cc 	bl	1a0037f4 <__malloc_unlock>
1a00745c:	e750      	b.n	1a007300 <_realloc_r+0xec>
1a00745e:	6001      	str	r1, [r0, #0]
1a007460:	686b      	ldr	r3, [r5, #4]
1a007462:	6043      	str	r3, [r0, #4]
1a007464:	2a1b      	cmp	r2, #27
1a007466:	d83c      	bhi.n	1a0074e2 <_realloc_r+0x2ce>
1a007468:	f105 0208 	add.w	r2, r5, #8
1a00746c:	f100 0308 	add.w	r3, r0, #8
1a007470:	68a9      	ldr	r1, [r5, #8]
1a007472:	e72d      	b.n	1a0072d0 <_realloc_r+0xbc>
1a007474:	eb08 0004 	add.w	r0, r8, r4
1a007478:	1b0a      	subs	r2, r1, r4
1a00747a:	f042 0201 	orr.w	r2, r2, #1
1a00747e:	6098      	str	r0, [r3, #8]
1a007480:	6042      	str	r2, [r0, #4]
1a007482:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a007486:	f003 0301 	and.w	r3, r3, #1
1a00748a:	431c      	orrs	r4, r3
1a00748c:	4648      	mov	r0, r9
1a00748e:	f845 4c04 	str.w	r4, [r5, #-4]
1a007492:	f7fc f9af 	bl	1a0037f4 <__malloc_unlock>
1a007496:	462f      	mov	r7, r5
1a007498:	e732      	b.n	1a007300 <_realloc_r+0xec>
1a00749a:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00749e:	461e      	mov	r6, r3
1a0074a0:	60ca      	str	r2, [r1, #12]
1a0074a2:	eb08 0a03 	add.w	sl, r8, r3
1a0074a6:	6091      	str	r1, [r2, #8]
1a0074a8:	e752      	b.n	1a007350 <_realloc_r+0x13c>
1a0074aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0074ae:	f023 0303 	bic.w	r3, r3, #3
1a0074b2:	441e      	add	r6, r3
1a0074b4:	eb08 0a06 	add.w	sl, r8, r6
1a0074b8:	e74a      	b.n	1a007350 <_realloc_r+0x13c>
1a0074ba:	4629      	mov	r1, r5
1a0074bc:	f7ff fb38 	bl	1a006b30 <memmove>
1a0074c0:	e70b      	b.n	1a0072da <_realloc_r+0xc6>
1a0074c2:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a0074c6:	465f      	mov	r7, fp
1a0074c8:	60ca      	str	r2, [r1, #12]
1a0074ca:	6091      	str	r1, [r2, #8]
1a0074cc:	e71c      	b.n	1a007308 <_realloc_r+0xf4>
1a0074ce:	463a      	mov	r2, r7
1a0074d0:	e736      	b.n	1a007340 <_realloc_r+0x12c>
1a0074d2:	4629      	mov	r1, r5
1a0074d4:	4638      	mov	r0, r7
1a0074d6:	461e      	mov	r6, r3
1a0074d8:	46d8      	mov	r8, fp
1a0074da:	f7ff fb29 	bl	1a006b30 <memmove>
1a0074de:	463d      	mov	r5, r7
1a0074e0:	e736      	b.n	1a007350 <_realloc_r+0x13c>
1a0074e2:	68ab      	ldr	r3, [r5, #8]
1a0074e4:	6083      	str	r3, [r0, #8]
1a0074e6:	68eb      	ldr	r3, [r5, #12]
1a0074e8:	60c3      	str	r3, [r0, #12]
1a0074ea:	2a24      	cmp	r2, #36	; 0x24
1a0074ec:	d011      	beq.n	1a007512 <_realloc_r+0x2fe>
1a0074ee:	f105 0210 	add.w	r2, r5, #16
1a0074f2:	f100 0310 	add.w	r3, r0, #16
1a0074f6:	6929      	ldr	r1, [r5, #16]
1a0074f8:	e6ea      	b.n	1a0072d0 <_realloc_r+0xbc>
1a0074fa:	f8cb 1010 	str.w	r1, [fp, #16]
1a0074fe:	68e9      	ldr	r1, [r5, #12]
1a007500:	f8cb 1014 	str.w	r1, [fp, #20]
1a007504:	2a24      	cmp	r2, #36	; 0x24
1a007506:	d00e      	beq.n	1a007526 <_realloc_r+0x312>
1a007508:	6929      	ldr	r1, [r5, #16]
1a00750a:	f10b 0218 	add.w	r2, fp, #24
1a00750e:	3510      	adds	r5, #16
1a007510:	e716      	b.n	1a007340 <_realloc_r+0x12c>
1a007512:	692b      	ldr	r3, [r5, #16]
1a007514:	6103      	str	r3, [r0, #16]
1a007516:	696b      	ldr	r3, [r5, #20]
1a007518:	6143      	str	r3, [r0, #20]
1a00751a:	69a9      	ldr	r1, [r5, #24]
1a00751c:	f105 0218 	add.w	r2, r5, #24
1a007520:	f100 0318 	add.w	r3, r0, #24
1a007524:	e6d4      	b.n	1a0072d0 <_realloc_r+0xbc>
1a007526:	692a      	ldr	r2, [r5, #16]
1a007528:	f8cb 2018 	str.w	r2, [fp, #24]
1a00752c:	696a      	ldr	r2, [r5, #20]
1a00752e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007532:	69a9      	ldr	r1, [r5, #24]
1a007534:	f10b 0220 	add.w	r2, fp, #32
1a007538:	3518      	adds	r5, #24
1a00753a:	e701      	b.n	1a007340 <_realloc_r+0x12c>
1a00753c:	463a      	mov	r2, r7
1a00753e:	e776      	b.n	1a00742e <_realloc_r+0x21a>
1a007540:	4629      	mov	r1, r5
1a007542:	4638      	mov	r0, r7
1a007544:	f7ff faf4 	bl	1a006b30 <memmove>
1a007548:	4b0c      	ldr	r3, [pc, #48]	; (1a00757c <_realloc_r+0x368>)
1a00754a:	e775      	b.n	1a007438 <_realloc_r+0x224>
1a00754c:	f8cb 1010 	str.w	r1, [fp, #16]
1a007550:	68e9      	ldr	r1, [r5, #12]
1a007552:	f8cb 1014 	str.w	r1, [fp, #20]
1a007556:	2a24      	cmp	r2, #36	; 0x24
1a007558:	d004      	beq.n	1a007564 <_realloc_r+0x350>
1a00755a:	6929      	ldr	r1, [r5, #16]
1a00755c:	f10b 0218 	add.w	r2, fp, #24
1a007560:	3510      	adds	r5, #16
1a007562:	e764      	b.n	1a00742e <_realloc_r+0x21a>
1a007564:	692a      	ldr	r2, [r5, #16]
1a007566:	f8cb 2018 	str.w	r2, [fp, #24]
1a00756a:	696a      	ldr	r2, [r5, #20]
1a00756c:	f8cb 201c 	str.w	r2, [fp, #28]
1a007570:	69a9      	ldr	r1, [r5, #24]
1a007572:	f10b 0220 	add.w	r2, fp, #32
1a007576:	3518      	adds	r5, #24
1a007578:	e759      	b.n	1a00742e <_realloc_r+0x21a>
1a00757a:	bf00      	nop
1a00757c:	10000478 	.word	0x10000478

1a007580 <frexp>:
1a007580:	ec53 2b10 	vmov	r2, r3, d0
1a007584:	b570      	push	{r4, r5, r6, lr}
1a007586:	4e16      	ldr	r6, [pc, #88]	; (1a0075e0 <frexp+0x60>)
1a007588:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00758c:	2500      	movs	r5, #0
1a00758e:	42b1      	cmp	r1, r6
1a007590:	4604      	mov	r4, r0
1a007592:	6005      	str	r5, [r0, #0]
1a007594:	dc21      	bgt.n	1a0075da <frexp+0x5a>
1a007596:	ee10 6a10 	vmov	r6, s0
1a00759a:	430e      	orrs	r6, r1
1a00759c:	d01d      	beq.n	1a0075da <frexp+0x5a>
1a00759e:	4e11      	ldr	r6, [pc, #68]	; (1a0075e4 <frexp+0x64>)
1a0075a0:	401e      	ands	r6, r3
1a0075a2:	4618      	mov	r0, r3
1a0075a4:	b966      	cbnz	r6, 1a0075c0 <frexp+0x40>
1a0075a6:	4619      	mov	r1, r3
1a0075a8:	2200      	movs	r2, #0
1a0075aa:	ee10 0a10 	vmov	r0, s0
1a0075ae:	4b0e      	ldr	r3, [pc, #56]	; (1a0075e8 <frexp+0x68>)
1a0075b0:	f7fa fde2 	bl	1a002178 <__aeabi_dmul>
1a0075b4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a0075b8:	4602      	mov	r2, r0
1a0075ba:	4608      	mov	r0, r1
1a0075bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0075c0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a0075c4:	1509      	asrs	r1, r1, #20
1a0075c6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a0075ca:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a0075ce:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a0075d2:	4429      	add	r1, r5
1a0075d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a0075d8:	6021      	str	r1, [r4, #0]
1a0075da:	ec43 2b10 	vmov	d0, r2, r3
1a0075de:	bd70      	pop	{r4, r5, r6, pc}
1a0075e0:	7fefffff 	.word	0x7fefffff
1a0075e4:	7ff00000 	.word	0x7ff00000
1a0075e8:	43500000 	.word	0x43500000

1a0075ec <strncpy>:
1a0075ec:	b470      	push	{r4, r5, r6}
1a0075ee:	ea40 0401 	orr.w	r4, r0, r1
1a0075f2:	07a3      	lsls	r3, r4, #30
1a0075f4:	d127      	bne.n	1a007646 <strncpy+0x5a>
1a0075f6:	2a03      	cmp	r2, #3
1a0075f8:	d925      	bls.n	1a007646 <strncpy+0x5a>
1a0075fa:	460b      	mov	r3, r1
1a0075fc:	4606      	mov	r6, r0
1a0075fe:	4619      	mov	r1, r3
1a007600:	f853 5b04 	ldr.w	r5, [r3], #4
1a007604:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a007608:	ea24 0405 	bic.w	r4, r4, r5
1a00760c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a007610:	d106      	bne.n	1a007620 <strncpy+0x34>
1a007612:	3a04      	subs	r2, #4
1a007614:	2a03      	cmp	r2, #3
1a007616:	f846 5b04 	str.w	r5, [r6], #4
1a00761a:	4619      	mov	r1, r3
1a00761c:	d8ef      	bhi.n	1a0075fe <strncpy+0x12>
1a00761e:	b182      	cbz	r2, 1a007642 <strncpy+0x56>
1a007620:	4633      	mov	r3, r6
1a007622:	780c      	ldrb	r4, [r1, #0]
1a007624:	f803 4b01 	strb.w	r4, [r3], #1
1a007628:	1e55      	subs	r5, r2, #1
1a00762a:	b174      	cbz	r4, 1a00764a <strncpy+0x5e>
1a00762c:	4432      	add	r2, r6
1a00762e:	442e      	add	r6, r5
1a007630:	e005      	b.n	1a00763e <strncpy+0x52>
1a007632:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a007636:	1af5      	subs	r5, r6, r3
1a007638:	f803 4b01 	strb.w	r4, [r3], #1
1a00763c:	b12c      	cbz	r4, 1a00764a <strncpy+0x5e>
1a00763e:	429a      	cmp	r2, r3
1a007640:	d1f7      	bne.n	1a007632 <strncpy+0x46>
1a007642:	bc70      	pop	{r4, r5, r6}
1a007644:	4770      	bx	lr
1a007646:	4606      	mov	r6, r0
1a007648:	e7e9      	b.n	1a00761e <strncpy+0x32>
1a00764a:	2d00      	cmp	r5, #0
1a00764c:	d0f9      	beq.n	1a007642 <strncpy+0x56>
1a00764e:	441d      	add	r5, r3
1a007650:	2200      	movs	r2, #0
1a007652:	f803 2b01 	strb.w	r2, [r3], #1
1a007656:	42ab      	cmp	r3, r5
1a007658:	d1fb      	bne.n	1a007652 <strncpy+0x66>
1a00765a:	bc70      	pop	{r4, r5, r6}
1a00765c:	4770      	bx	lr
1a00765e:	bf00      	nop

1a007660 <__sprint_r.part.0>:
1a007660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007664:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a007666:	049c      	lsls	r4, r3, #18
1a007668:	4693      	mov	fp, r2
1a00766a:	d52d      	bpl.n	1a0076c8 <__sprint_r.part.0+0x68>
1a00766c:	6893      	ldr	r3, [r2, #8]
1a00766e:	6812      	ldr	r2, [r2, #0]
1a007670:	b343      	cbz	r3, 1a0076c4 <__sprint_r.part.0+0x64>
1a007672:	460e      	mov	r6, r1
1a007674:	4607      	mov	r7, r0
1a007676:	f102 0908 	add.w	r9, r2, #8
1a00767a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a00767e:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a007682:	d015      	beq.n	1a0076b0 <__sprint_r.part.0+0x50>
1a007684:	3d04      	subs	r5, #4
1a007686:	2400      	movs	r4, #0
1a007688:	e001      	b.n	1a00768e <__sprint_r.part.0+0x2e>
1a00768a:	45a0      	cmp	r8, r4
1a00768c:	d00e      	beq.n	1a0076ac <__sprint_r.part.0+0x4c>
1a00768e:	4632      	mov	r2, r6
1a007690:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a007694:	4638      	mov	r0, r7
1a007696:	f000 f8a9 	bl	1a0077ec <_fputwc_r>
1a00769a:	1c43      	adds	r3, r0, #1
1a00769c:	f104 0401 	add.w	r4, r4, #1
1a0076a0:	d1f3      	bne.n	1a00768a <__sprint_r.part.0+0x2a>
1a0076a2:	2300      	movs	r3, #0
1a0076a4:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a0076a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0076ac:	f8db 3008 	ldr.w	r3, [fp, #8]
1a0076b0:	f02a 0a03 	bic.w	sl, sl, #3
1a0076b4:	eba3 030a 	sub.w	r3, r3, sl
1a0076b8:	f8cb 3008 	str.w	r3, [fp, #8]
1a0076bc:	f109 0908 	add.w	r9, r9, #8
1a0076c0:	2b00      	cmp	r3, #0
1a0076c2:	d1da      	bne.n	1a00767a <__sprint_r.part.0+0x1a>
1a0076c4:	2000      	movs	r0, #0
1a0076c6:	e7ec      	b.n	1a0076a2 <__sprint_r.part.0+0x42>
1a0076c8:	f7fe ffdc 	bl	1a006684 <__sfvwrite_r>
1a0076cc:	2300      	movs	r3, #0
1a0076ce:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a0076d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0076d6:	bf00      	nop

1a0076d8 <__sprint_r>:
1a0076d8:	6893      	ldr	r3, [r2, #8]
1a0076da:	b10b      	cbz	r3, 1a0076e0 <__sprint_r+0x8>
1a0076dc:	f7ff bfc0 	b.w	1a007660 <__sprint_r.part.0>
1a0076e0:	b410      	push	{r4}
1a0076e2:	4618      	mov	r0, r3
1a0076e4:	6053      	str	r3, [r2, #4]
1a0076e6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0076ea:	4770      	bx	lr

1a0076ec <_calloc_r>:
1a0076ec:	b510      	push	{r4, lr}
1a0076ee:	fb02 f101 	mul.w	r1, r2, r1
1a0076f2:	f7fb fcd7 	bl	1a0030a4 <_malloc_r>
1a0076f6:	4604      	mov	r4, r0
1a0076f8:	b168      	cbz	r0, 1a007716 <_calloc_r+0x2a>
1a0076fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0076fe:	f022 0203 	bic.w	r2, r2, #3
1a007702:	3a04      	subs	r2, #4
1a007704:	2a24      	cmp	r2, #36	; 0x24
1a007706:	d818      	bhi.n	1a00773a <_calloc_r+0x4e>
1a007708:	2a13      	cmp	r2, #19
1a00770a:	d806      	bhi.n	1a00771a <_calloc_r+0x2e>
1a00770c:	4602      	mov	r2, r0
1a00770e:	2300      	movs	r3, #0
1a007710:	e9c2 3300 	strd	r3, r3, [r2]
1a007714:	6093      	str	r3, [r2, #8]
1a007716:	4620      	mov	r0, r4
1a007718:	bd10      	pop	{r4, pc}
1a00771a:	2300      	movs	r3, #0
1a00771c:	2a1b      	cmp	r2, #27
1a00771e:	e9c0 3300 	strd	r3, r3, [r0]
1a007722:	d90f      	bls.n	1a007744 <_calloc_r+0x58>
1a007724:	2a24      	cmp	r2, #36	; 0x24
1a007726:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00772a:	bf12      	itee	ne
1a00772c:	f100 0210 	addne.w	r2, r0, #16
1a007730:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a007734:	f100 0218 	addeq.w	r2, r0, #24
1a007738:	e7e9      	b.n	1a00770e <_calloc_r+0x22>
1a00773a:	2100      	movs	r1, #0
1a00773c:	f7fc f804 	bl	1a003748 <memset>
1a007740:	4620      	mov	r0, r4
1a007742:	bd10      	pop	{r4, pc}
1a007744:	f100 0208 	add.w	r2, r0, #8
1a007748:	e7e1      	b.n	1a00770e <_calloc_r+0x22>
1a00774a:	bf00      	nop

1a00774c <__fputwc>:
1a00774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007750:	b082      	sub	sp, #8
1a007752:	4680      	mov	r8, r0
1a007754:	4689      	mov	r9, r1
1a007756:	4614      	mov	r4, r2
1a007758:	f000 f87a 	bl	1a007850 <__locale_mb_cur_max>
1a00775c:	2801      	cmp	r0, #1
1a00775e:	d103      	bne.n	1a007768 <__fputwc+0x1c>
1a007760:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a007764:	2bfe      	cmp	r3, #254	; 0xfe
1a007766:	d933      	bls.n	1a0077d0 <__fputwc+0x84>
1a007768:	464a      	mov	r2, r9
1a00776a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00776e:	a901      	add	r1, sp, #4
1a007770:	4640      	mov	r0, r8
1a007772:	f000 f8e1 	bl	1a007938 <_wcrtomb_r>
1a007776:	1c42      	adds	r2, r0, #1
1a007778:	4606      	mov	r6, r0
1a00777a:	d02f      	beq.n	1a0077dc <__fputwc+0x90>
1a00777c:	b320      	cbz	r0, 1a0077c8 <__fputwc+0x7c>
1a00777e:	f89d c004 	ldrb.w	ip, [sp, #4]
1a007782:	2500      	movs	r5, #0
1a007784:	f10d 0a04 	add.w	sl, sp, #4
1a007788:	e009      	b.n	1a00779e <__fputwc+0x52>
1a00778a:	6823      	ldr	r3, [r4, #0]
1a00778c:	1c5a      	adds	r2, r3, #1
1a00778e:	6022      	str	r2, [r4, #0]
1a007790:	f883 c000 	strb.w	ip, [r3]
1a007794:	3501      	adds	r5, #1
1a007796:	42b5      	cmp	r5, r6
1a007798:	d216      	bcs.n	1a0077c8 <__fputwc+0x7c>
1a00779a:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00779e:	68a3      	ldr	r3, [r4, #8]
1a0077a0:	3b01      	subs	r3, #1
1a0077a2:	2b00      	cmp	r3, #0
1a0077a4:	60a3      	str	r3, [r4, #8]
1a0077a6:	daf0      	bge.n	1a00778a <__fputwc+0x3e>
1a0077a8:	69a7      	ldr	r7, [r4, #24]
1a0077aa:	42bb      	cmp	r3, r7
1a0077ac:	4661      	mov	r1, ip
1a0077ae:	4622      	mov	r2, r4
1a0077b0:	4640      	mov	r0, r8
1a0077b2:	db02      	blt.n	1a0077ba <__fputwc+0x6e>
1a0077b4:	f1bc 0f0a 	cmp.w	ip, #10
1a0077b8:	d1e7      	bne.n	1a00778a <__fputwc+0x3e>
1a0077ba:	f000 f865 	bl	1a007888 <__swbuf_r>
1a0077be:	1c43      	adds	r3, r0, #1
1a0077c0:	d1e8      	bne.n	1a007794 <__fputwc+0x48>
1a0077c2:	b002      	add	sp, #8
1a0077c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0077c8:	4648      	mov	r0, r9
1a0077ca:	b002      	add	sp, #8
1a0077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0077d0:	fa5f fc89 	uxtb.w	ip, r9
1a0077d4:	4606      	mov	r6, r0
1a0077d6:	f88d c004 	strb.w	ip, [sp, #4]
1a0077da:	e7d2      	b.n	1a007782 <__fputwc+0x36>
1a0077dc:	89a3      	ldrh	r3, [r4, #12]
1a0077de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0077e2:	81a3      	strh	r3, [r4, #12]
1a0077e4:	b002      	add	sp, #8
1a0077e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0077ea:	bf00      	nop

1a0077ec <_fputwc_r>:
1a0077ec:	b530      	push	{r4, r5, lr}
1a0077ee:	4605      	mov	r5, r0
1a0077f0:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a0077f2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a0077f6:	07c0      	lsls	r0, r0, #31
1a0077f8:	4614      	mov	r4, r2
1a0077fa:	b083      	sub	sp, #12
1a0077fc:	b29a      	uxth	r2, r3
1a0077fe:	d401      	bmi.n	1a007804 <_fputwc_r+0x18>
1a007800:	0590      	lsls	r0, r2, #22
1a007802:	d51c      	bpl.n	1a00783e <_fputwc_r+0x52>
1a007804:	0490      	lsls	r0, r2, #18
1a007806:	d406      	bmi.n	1a007816 <_fputwc_r+0x2a>
1a007808:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00780a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00780e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a007812:	81a3      	strh	r3, [r4, #12]
1a007814:	6662      	str	r2, [r4, #100]	; 0x64
1a007816:	4628      	mov	r0, r5
1a007818:	4622      	mov	r2, r4
1a00781a:	f7ff ff97 	bl	1a00774c <__fputwc>
1a00781e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007820:	07da      	lsls	r2, r3, #31
1a007822:	4605      	mov	r5, r0
1a007824:	d402      	bmi.n	1a00782c <_fputwc_r+0x40>
1a007826:	89a3      	ldrh	r3, [r4, #12]
1a007828:	059b      	lsls	r3, r3, #22
1a00782a:	d502      	bpl.n	1a007832 <_fputwc_r+0x46>
1a00782c:	4628      	mov	r0, r5
1a00782e:	b003      	add	sp, #12
1a007830:	bd30      	pop	{r4, r5, pc}
1a007832:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007834:	f7fb fc34 	bl	1a0030a0 <__retarget_lock_release_recursive>
1a007838:	4628      	mov	r0, r5
1a00783a:	b003      	add	sp, #12
1a00783c:	bd30      	pop	{r4, r5, pc}
1a00783e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007840:	9101      	str	r1, [sp, #4]
1a007842:	f7fb fc2b 	bl	1a00309c <__retarget_lock_acquire_recursive>
1a007846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00784a:	9901      	ldr	r1, [sp, #4]
1a00784c:	b29a      	uxth	r2, r3
1a00784e:	e7d9      	b.n	1a007804 <_fputwc_r+0x18>

1a007850 <__locale_mb_cur_max>:
1a007850:	4b01      	ldr	r3, [pc, #4]	; (1a007858 <__locale_mb_cur_max+0x8>)
1a007852:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a007856:	4770      	bx	lr
1a007858:	10000888 	.word	0x10000888

1a00785c <__ascii_mbtowc>:
1a00785c:	b082      	sub	sp, #8
1a00785e:	b149      	cbz	r1, 1a007874 <__ascii_mbtowc+0x18>
1a007860:	b15a      	cbz	r2, 1a00787a <__ascii_mbtowc+0x1e>
1a007862:	b16b      	cbz	r3, 1a007880 <__ascii_mbtowc+0x24>
1a007864:	7813      	ldrb	r3, [r2, #0]
1a007866:	600b      	str	r3, [r1, #0]
1a007868:	7812      	ldrb	r2, [r2, #0]
1a00786a:	1c10      	adds	r0, r2, #0
1a00786c:	bf18      	it	ne
1a00786e:	2001      	movne	r0, #1
1a007870:	b002      	add	sp, #8
1a007872:	4770      	bx	lr
1a007874:	a901      	add	r1, sp, #4
1a007876:	2a00      	cmp	r2, #0
1a007878:	d1f3      	bne.n	1a007862 <__ascii_mbtowc+0x6>
1a00787a:	4610      	mov	r0, r2
1a00787c:	b002      	add	sp, #8
1a00787e:	4770      	bx	lr
1a007880:	f06f 0001 	mvn.w	r0, #1
1a007884:	e7f4      	b.n	1a007870 <__ascii_mbtowc+0x14>
1a007886:	bf00      	nop

1a007888 <__swbuf_r>:
1a007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00788a:	460d      	mov	r5, r1
1a00788c:	4614      	mov	r4, r2
1a00788e:	4606      	mov	r6, r0
1a007890:	b110      	cbz	r0, 1a007898 <__swbuf_r+0x10>
1a007892:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007894:	2b00      	cmp	r3, #0
1a007896:	d043      	beq.n	1a007920 <__swbuf_r+0x98>
1a007898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00789c:	69a3      	ldr	r3, [r4, #24]
1a00789e:	60a3      	str	r3, [r4, #8]
1a0078a0:	b291      	uxth	r1, r2
1a0078a2:	0708      	lsls	r0, r1, #28
1a0078a4:	d51b      	bpl.n	1a0078de <__swbuf_r+0x56>
1a0078a6:	6923      	ldr	r3, [r4, #16]
1a0078a8:	b1cb      	cbz	r3, 1a0078de <__swbuf_r+0x56>
1a0078aa:	b2ed      	uxtb	r5, r5
1a0078ac:	0489      	lsls	r1, r1, #18
1a0078ae:	462f      	mov	r7, r5
1a0078b0:	d522      	bpl.n	1a0078f8 <__swbuf_r+0x70>
1a0078b2:	6822      	ldr	r2, [r4, #0]
1a0078b4:	6961      	ldr	r1, [r4, #20]
1a0078b6:	1ad3      	subs	r3, r2, r3
1a0078b8:	4299      	cmp	r1, r3
1a0078ba:	dd29      	ble.n	1a007910 <__swbuf_r+0x88>
1a0078bc:	3301      	adds	r3, #1
1a0078be:	68a1      	ldr	r1, [r4, #8]
1a0078c0:	1c50      	adds	r0, r2, #1
1a0078c2:	3901      	subs	r1, #1
1a0078c4:	60a1      	str	r1, [r4, #8]
1a0078c6:	6020      	str	r0, [r4, #0]
1a0078c8:	7015      	strb	r5, [r2, #0]
1a0078ca:	6962      	ldr	r2, [r4, #20]
1a0078cc:	429a      	cmp	r2, r3
1a0078ce:	d02a      	beq.n	1a007926 <__swbuf_r+0x9e>
1a0078d0:	89a3      	ldrh	r3, [r4, #12]
1a0078d2:	07db      	lsls	r3, r3, #31
1a0078d4:	d501      	bpl.n	1a0078da <__swbuf_r+0x52>
1a0078d6:	2d0a      	cmp	r5, #10
1a0078d8:	d025      	beq.n	1a007926 <__swbuf_r+0x9e>
1a0078da:	4638      	mov	r0, r7
1a0078dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0078de:	4621      	mov	r1, r4
1a0078e0:	4630      	mov	r0, r6
1a0078e2:	f7fd fea9 	bl	1a005638 <__swsetup_r>
1a0078e6:	bb20      	cbnz	r0, 1a007932 <__swbuf_r+0xaa>
1a0078e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0078ec:	6923      	ldr	r3, [r4, #16]
1a0078ee:	b291      	uxth	r1, r2
1a0078f0:	b2ed      	uxtb	r5, r5
1a0078f2:	0489      	lsls	r1, r1, #18
1a0078f4:	462f      	mov	r7, r5
1a0078f6:	d4dc      	bmi.n	1a0078b2 <__swbuf_r+0x2a>
1a0078f8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a0078fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a0078fe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a007902:	81a2      	strh	r2, [r4, #12]
1a007904:	6822      	ldr	r2, [r4, #0]
1a007906:	6661      	str	r1, [r4, #100]	; 0x64
1a007908:	6961      	ldr	r1, [r4, #20]
1a00790a:	1ad3      	subs	r3, r2, r3
1a00790c:	4299      	cmp	r1, r3
1a00790e:	dcd5      	bgt.n	1a0078bc <__swbuf_r+0x34>
1a007910:	4621      	mov	r1, r4
1a007912:	4630      	mov	r0, r6
1a007914:	f7fb f998 	bl	1a002c48 <_fflush_r>
1a007918:	b958      	cbnz	r0, 1a007932 <__swbuf_r+0xaa>
1a00791a:	6822      	ldr	r2, [r4, #0]
1a00791c:	2301      	movs	r3, #1
1a00791e:	e7ce      	b.n	1a0078be <__swbuf_r+0x36>
1a007920:	f7fb f9ee 	bl	1a002d00 <__sinit>
1a007924:	e7b8      	b.n	1a007898 <__swbuf_r+0x10>
1a007926:	4621      	mov	r1, r4
1a007928:	4630      	mov	r0, r6
1a00792a:	f7fb f98d 	bl	1a002c48 <_fflush_r>
1a00792e:	2800      	cmp	r0, #0
1a007930:	d0d3      	beq.n	1a0078da <__swbuf_r+0x52>
1a007932:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007936:	e7d0      	b.n	1a0078da <__swbuf_r+0x52>

1a007938 <_wcrtomb_r>:
1a007938:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00793a:	4c0b      	ldr	r4, [pc, #44]	; (1a007968 <_wcrtomb_r+0x30>)
1a00793c:	b085      	sub	sp, #20
1a00793e:	4606      	mov	r6, r0
1a007940:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a007944:	461f      	mov	r7, r3
1a007946:	b121      	cbz	r1, 1a007952 <_wcrtomb_r+0x1a>
1a007948:	47a0      	blx	r4
1a00794a:	1c43      	adds	r3, r0, #1
1a00794c:	d006      	beq.n	1a00795c <_wcrtomb_r+0x24>
1a00794e:	b005      	add	sp, #20
1a007950:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007952:	460a      	mov	r2, r1
1a007954:	a901      	add	r1, sp, #4
1a007956:	47a0      	blx	r4
1a007958:	1c43      	adds	r3, r0, #1
1a00795a:	d1f8      	bne.n	1a00794e <_wcrtomb_r+0x16>
1a00795c:	2200      	movs	r2, #0
1a00795e:	238a      	movs	r3, #138	; 0x8a
1a007960:	603a      	str	r2, [r7, #0]
1a007962:	6033      	str	r3, [r6, #0]
1a007964:	b005      	add	sp, #20
1a007966:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007968:	10000888 	.word	0x10000888

1a00796c <__ascii_wctomb>:
1a00796c:	b149      	cbz	r1, 1a007982 <__ascii_wctomb+0x16>
1a00796e:	2aff      	cmp	r2, #255	; 0xff
1a007970:	d802      	bhi.n	1a007978 <__ascii_wctomb+0xc>
1a007972:	700a      	strb	r2, [r1, #0]
1a007974:	2001      	movs	r0, #1
1a007976:	4770      	bx	lr
1a007978:	238a      	movs	r3, #138	; 0x8a
1a00797a:	6003      	str	r3, [r0, #0]
1a00797c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007980:	4770      	bx	lr
1a007982:	4608      	mov	r0, r1
1a007984:	4770      	bx	lr
1a007986:	bf00      	nop
1a007988:	5f707041 	.word	0x5f707041
1a00798c:	5f414d44 	.word	0x5f414d44
1a007990:	74736554 	.word	0x74736554
1a007994:	61747320 	.word	0x61747320
1a007998:	3a737574 	.word	0x3a737574
1a00799c:	0a642520 	.word	0x0a642520
1a0079a0:	ffffff00 	.word	0xffffff00
1a0079a4:	72746e65 	.word	0x72746e65
1a0079a8:	2061206f 	.word	0x2061206f
1a0079ac:	5f414d44 	.word	0x5f414d44
1a0079b0:	48515249 	.word	0x48515249
1a0079b4:	6c646e61 	.word	0x6c646e61
1a0079b8:	00007265 	.word	0x00007265
1a0079bc:	5f414d44 	.word	0x5f414d44
1a0079c0:	48515249 	.word	0x48515249
1a0079c4:	6c646e61 	.word	0x6c646e61
1a0079c8:	53207265 	.word	0x53207265
1a0079cc:	65636375 	.word	0x65636375
1a0079d0:	00207373 	.word	0x00207373
1a0079d4:	5f414d44 	.word	0x5f414d44
1a0079d8:	48515249 	.word	0x48515249
1a0079dc:	6c646e61 	.word	0x6c646e61
1a0079e0:	45207265 	.word	0x45207265
1a0079e4:	726f7272 	.word	0x726f7272
1a0079e8:	ffffff00 	.word	0xffffff00
1a0079ec:	74696e49 	.word	0x74696e49
1a0079f0:	53324920 	.word	0x53324920
1a0079f4:	0000000d 	.word	0x0000000d
1a0079f8:	6f727245 	.word	0x6f727245
1a0079fc:	6e692072 	.word	0x6e692072
1a007a00:	695f7469 	.word	0x695f7469
1a007a04:	203a7332 	.word	0x203a7332
1a007a08:	70696843 	.word	0x70696843
1a007a0c:	5332495f 	.word	0x5332495f
1a007a10:	4378545f 	.word	0x4378545f
1a007a14:	69666e6f 	.word	0x69666e6f
1a007a18:	74732067 	.word	0x74732067
1a007a1c:	73757461 	.word	0x73757461
1a007a20:	0a642520 	.word	0x0a642520
1a007a24:	ffffff00 	.word	0xffffff00

1a007a28 <ExtRateIn>:
1a007a28:	00000000                                ....

1a007a2c <GpioButtons>:
1a007a2c:	08000400 09010900                       ........

1a007a34 <GpioLeds>:
1a007a34:	01050005 0e000205 0c010b01              ............

1a007a40 <GpioPorts>:
1a007a40:	03030003 0f050403 05031005 07030603     ................
1a007a50:	ffff0802                                ....

1a007a54 <OscRateIn>:
1a007a54:	00b71b00                                ....

1a007a58 <InitClkStates>:
1a007a58:	01010f01                                ....

1a007a5c <pinmuxing>:
1a007a5c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a007a6c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a007a7c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a007a8c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a007a9c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a007aac:	00d50301 00d50401 00160107 00560207     ..............V.
1a007abc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a007acc:	00570206                                ..W.

1a007ad0 <UART_BClock>:
1a007ad0:	01a201c2 01620182                       ......b.

1a007ad8 <UART_PClock>:
1a007ad8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a007ae8:	ffff00ff                                ....

1a007aec <periph_to_base>:
1a007aec:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a007afc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a007b0c:	000100e0 01000100 01200003 00060120     .......... . ...
1a007b1c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007b2c:	01820013 00120182 01a201a2 01c20011     ................
1a007b3c:	001001c2 01e201e2 0202000f 000e0202     ................
1a007b4c:	02220222 0223000d 001c0223              "."...#.#...

1a007b58 <InitClkStates>:
1a007b58:	00010100 00010909 0001090a 01010701     ................
1a007b68:	00010902 00010906 0101090c 0001090d     ................
1a007b78:	0001090e 0001090f 00010910 00010911     ................
1a007b88:	00010912 00010913 00011114 00011119     ................
1a007b98:	0001111a 0001111b                       ........

1a007ba0 <GPDMA_LUTPerAddr>:
1a007ba0:	00000000 40084018 40081000 4008401c     .....@.@...@.@.@
1a007bb0:	40081000 40085018 40082000 4008501c     ...@.P.@. .@.P.@
1a007bc0:	40082000 400c3018 400c1000 400c301c     . .@.0.@...@.0.@
1a007bd0:	400c1000 400c4018 400c2000 00000000     ...@.@.@. .@....
1a007be0:	400c401c 400c2000 00000000 40083008     .@.@. .@.....0.@
1a007bf0:	400a2008 40083008 400a200c 400c5008     . .@.0.@. .@.P.@
1a007c00:	400c5008 400e3004 400e4004 400e1000     .P.@.0.@.@.@...@
1a007c10:	400a3008 400a300c                       .0.@.0.@

1a007c18 <GPDMA_LUTPerBurst>:
1a007c18:	00000001 00000000 00000000 00000000     ................
1a007c28:	01000000 01040104 00010101 ffff0404     ................

1a007c38 <GPDMA_LUTPerWid>:
1a007c38:	02000202 02000200 02000200 00000200     ................
1a007c48:	00000002 00020002 02020200 ffff0202     ................

1a007c58 <lpcUarts>:
1a007c58:	40081000 06020406 00180205 40081000     ...@...........@
1a007c68:	09070509 00180706 40082000 00000000     ......... .@....
1a007c78:	00190000 400c1000 07060107 001a0602     .......@........
1a007c88:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a007c98:	02020302 001b0204                       ........

1a007ca0 <gpioPinsInit>:
1a007ca0:	02000104 00050701 05010d03 04080100     ................
1a007cb0:	02020002 02000304 00000403 04070002     ................
1a007cc0:	030c0300 09050402 05040103 04030208     ................
1a007cd0:	04020305 06040504 0802000c 03000b06     ................
1a007ce0:	00090607 07060503 060f0504 03030004     ................
1a007cf0:	02000404 00050404 06040502 04060200     ................
1a007d00:	0c050408 05040a04 0003010e 14010a00     ................
1a007d10:	010f0000 0d000012 00001101 0010010c     ................
1a007d20:	07070300 000f0300 01000001 00000000     ................
1a007d30:	000a0600 08060603 06100504 04030005     ................
1a007d40:	03000106 04090400 04010d05 010b0000     ................
1a007d50:	0200000f 00000001 00010104 02010800     ................
1a007d60:	01090000 09010006 05040002 04010200     ................
1a007d70:	02020105 02020504 0e00000a 01000b02     ................
1a007d80:	000c020b ffff0c01                       ........

1a007d88 <_ctype_>:
1a007d88:	20202000 20202020 28282020 20282828     .         ((((( 
1a007d98:	20202020 20202020 20202020 20202020                     
1a007da8:	10108820 10101010 10101010 10101010      ...............
1a007db8:	04040410 04040404 10040404 10101010     ................
1a007dc8:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a007dd8:	01010101 01010101 01010101 10101010     ................
1a007de8:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a007df8:	02020202 02020202 02020202 10101010     ................
1a007e08:	00000020 00000000 00000000 00000000      ...............
	...
1a007e88:	ffffff00 ffff000a 00464e49 00666e69     ........INF.inf.
1a007e98:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
1a007ea8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
1a007eb8:	37363534 62613938 66656463 00000000     456789abcdef....
1a007ec8:	6c756e28 0000296c ffff0030              (null)..0...

1a007ed4 <blanks.8693>:
1a007ed4:	20202020 20202020 20202020 20202020                     

1a007ee4 <zeroes.8694>:
1a007ee4:	30303030 30303030 30303030 30303030     0000000000000000
1a007ef4:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....
1a007f04:	ffffffff                                ....

1a007f08 <__mprec_bigtens>:
1a007f08:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a007f18:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a007f28:	7f73bf3c 75154fdd                       <.s..O.u

1a007f30 <__mprec_tens>:
1a007f30:	00000000 3ff00000 00000000 40240000     .......?......$@
1a007f40:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a007f50:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a007f60:	00000000 412e8480 00000000 416312d0     .......A......cA
1a007f70:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a007f80:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a007f90:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a007fa0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a007fb0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a007fc0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a007fd0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a007fe0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a007ff0:	79d99db4 44ea7843                       ...yCx.D

1a007ff8 <p05.7442>:
1a007ff8:	00000005 00000019 0000007d 00000043     ........}...C...
1a008008:	49534f50 ffff0058 0000002e              POSIX.......
